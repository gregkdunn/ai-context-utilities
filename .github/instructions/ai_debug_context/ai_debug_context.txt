=================================================================
🤖 AI DEBUG CONTEXT - OPTIMIZED FOR ANALYSIS
=================================================================

PROJECT: Angular NX Monorepo
TARGET: ai_debug_context
STATUS: ❌ TESTS FAILING
FOCUS: General debugging
TIMESTAMP: 7/26/2025, 12:00:00 PM

=================================================================
🎯 ANALYSIS REQUEST
=================================================================

Please analyze this context and provide:

1. 🔍 ROOT CAUSE ANALYSIS
   • What specific changes are breaking the tests?
   • Are there type mismatches or interface changes?
   • Did method signatures change?

2. 🛠️ CONCRETE FIXES (PRIORITY 1)
   • Exact code changes needed to fix failing tests
   • Updated test expectations if business logic changed
   • Type definitions or interface updates required

3. 🧪 EXISTING TEST FIXES (PRIORITY 1)
   • Fix existing failing tests first
   • Update test assertions to match new behavior
   • Fix test setup or mocking issues

4. 🚀 IMPLEMENTATION GUIDANCE (PRIORITY 1)
   • Order of fixes (dependencies first)
   • Potential side effects to watch for
   • Getting tests green is the immediate priority

5. ✨ NEW TEST SUGGESTIONS (PRIORITY 2 - AFTER FIXES)
   • Missing test coverage for new functionality
   • Edge cases that should be tested
   • Additional test scenarios to prevent regressions
   • Test improvements for better maintainability
   • File-specific coverage analysis (diff coverage vs total coverage)
   • Specify files and line numbers where new tests should be added.

NOTE: Focus on items 1-4 first to get tests passing, then implement item 5


==================================================================
🧪 TEST RESULTS ANALYSIS
==================================================================

=================================================================
🤖 TEST ANALYSIS REPORT
=================================================================

COMMAND: yarn nx test settings-voice-assist-feature
EXIT CODE: 1
STATUS: ❌ FAILED

=================================================================
📊 EXECUTIVE SUMMARY
=================================================================
Test Suites: 2 failed, 4 passed, 6 total
Tests: 3 failed, 141 passed, 144 total
Time: 45.234s
Test Suites: 4 passed, 2 failed

==================================================================
💥 FAILURE ANALYSIS
==================================================================

🔥 COMPILATION/RUNTIME ERRORS:
--------------------------------
  • Property 'mockFunction' does not exist on type 'Service'
  • Cannot find name 'undefinedVariable'

🧪 TEST FAILURES:
-----------------
  • Component › should initialize properly
    Expected true but received false

==================================================================
🧪 TEST RESULTS SUMMARY
==================================================================

✅ src/app/services/test.spec.ts
❌ src/app/components/voice.spec.ts

==================================================================
⚡ PERFORMANCE INSIGHTS
==================================================================
Time: 45.234s


==================================================================
🔧 CODE QUALITY RESULTS
==================================================================

📋 LINTING RESULTS:
⚠️  Status: NEEDS REVIEW
• Review linting after test fixes

✨ FORMATTING RESULTS:
⚠️  Status: PENDING
• Formatting will run after tests pass

🚀 PUSH READINESS:
⚠️  NOT READY - Issues need resolution:
• Tests: Failing ❌
• Lint: Pending ⚠️
• Format: Pending ⚠️


==================================================================
📋 CODE CHANGES ANALYSIS
==================================================================

=================================================================
🔍 AI-OPTIMIZED GIT DIFF ANALYSIS
=================================================================

COMMAND: git diff (smart detection)
TIMESTAMP: 7/26/2025, 12:00:00 PM
BRANCH: main

==================================================================
📊 CHANGE SUMMARY
==================================================================
Total files changed: 3

🆕 NEW FILES (1):
  • src/app/services/new-service.ts

📝 MODIFIED FILES (2):
  • src/app/components/voice.component.ts
  • src/app/services/existing.service.ts

==================================================================
🏷️ FILE TYPE ANALYSIS
==================================================================
TypeScript: 3 files

==================================================================
📋 DETAILED CHANGES
==================================================================

📁 FILE: src/app/services/new-service.ts
─────────────────────────────────────────
diff --git a/src/app/services/new-service.ts b/src/app/services/new-service.ts
new file mode 100644
index 0000000..abc123
--- /dev/null
+++ b/src/app/services/new-service.ts
@@ -0,0 +1,10 @@
+export class NewService {
+  constructor() {}
+}

📁 FILE: src/app/components/voice.component.ts
─────────────────────────────────────────
diff --git a/src/app/components/voice.component.ts b/src/app/components/voice.component.ts
index def456..ghi789 100644
--- a/src/app/components/voice.component.ts
+++ b/src/app/components/voice.component.ts
@@ -10,7 +10,7 @@
-  private oldMethod() {
+  private newMethod() {

==================================================================
🤖 AI ANALYSIS CONTEXT
==================================================================
Key areas for analysis:
• Focus on test-related files (.spec.ts, .test.ts)
• Look for type/interface changes that might break tests
• Check for new functionality that needs test coverage
• Identify breaking changes in method signatures
• Review dependency changes and imports

Change impact areas:
• New files may need comprehensive test coverage
• Modified files may have broken existing tests


==================================================================
🚀 AI ASSISTANT GUIDANCE
==================================================================
This context file is optimized for AI analysis with:
• Structured failure information for easy parsing
• Code changes correlated with test failures
• Clear focus areas for targeted analysis
• Actionable fix categories for systematic resolution

Context file size: 105 lines (optimized for AI processing)