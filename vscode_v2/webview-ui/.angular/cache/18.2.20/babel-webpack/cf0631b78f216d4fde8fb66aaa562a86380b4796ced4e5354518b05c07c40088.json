{"ast":null,"code":"import { signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/vscode.service\";\nconst _forTrack0 = ($index, $item) => $item.name;\nfunction CopilotDiagnosticsComponent_Conditional_8_For_37_Conditional_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"p\", 33)(2, \"strong\");\n    i0.ɵɵtext(3, \"Solution:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const check_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", check_r2.solution, \" \");\n  }\n}\nfunction CopilotDiagnosticsComponent_Conditional_8_For_37_Conditional_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function CopilotDiagnosticsComponent_Conditional_8_For_37_Conditional_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const check_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.executeAction(check_r2.action));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const check_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.getActionLabel(check_r2.action), \" \");\n  }\n}\nfunction CopilotDiagnosticsComponent_Conditional_8_For_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"div\", 25)(2, \"span\", 26);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 27)(5, \"div\", 28)(6, \"h5\", 10);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"span\", 29);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"p\", 30);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, CopilotDiagnosticsComponent_Conditional_8_For_37_Conditional_12_Template, 5, 1, \"div\", 31)(13, CopilotDiagnosticsComponent_Conditional_8_For_37_Conditional_13_Template, 2, 1, \"button\", 32);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const check_r2 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r3.getCheckStatusClass(check_r2.status));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r3.getCheckIcon(check_r2.status));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(check_r2.name);\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r3.getCheckBadgeClass(check_r2.status));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", check_r2.status.toUpperCase(), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(check_r2.message);\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(check_r2.solution ? 12 : -1);\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(check_r2.action ? 13 : -1);\n  }\n}\nfunction CopilotDiagnosticsComponent_Conditional_8_Conditional_50_Conditional_9_For_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 40);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const command_r5 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(command_r5);\n  }\n}\nfunction CopilotDiagnosticsComponent_Conditional_8_Conditional_50_Conditional_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵrepeaterCreate(0, CopilotDiagnosticsComponent_Conditional_8_Conditional_50_Conditional_9_For_1_Template, 2, 1, \"div\", 40, i0.ɵɵrepeaterTrackByIdentity);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(3);\n    i0.ɵɵrepeater(ctx_r3.availableCommands());\n  }\n}\nfunction CopilotDiagnosticsComponent_Conditional_8_Conditional_50_Conditional_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38);\n    i0.ɵɵtext(1, \"No Copilot commands found\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CopilotDiagnosticsComponent_Conditional_8_Conditional_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"h4\", 13);\n    i0.ɵɵtext(2, \"Debug Information\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 35)(4, \"div\")(5, \"strong\");\n    i0.ɵɵtext(6, \"Available Copilot Commands:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 36)(8, \"div\", 37);\n    i0.ɵɵtemplate(9, CopilotDiagnosticsComponent_Conditional_8_Conditional_50_Conditional_9_Template, 2, 0)(10, CopilotDiagnosticsComponent_Conditional_8_Conditional_50_Conditional_10_Template, 2, 0, \"div\", 38);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"div\")(12, \"strong\");\n    i0.ɵɵtext(13, \"Troubleshooting Tips:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"ul\", 39)(15, \"li\");\n    i0.ɵɵtext(16, \"\\u2022 If no commands are shown, the Copilot extension may not be installed\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"li\");\n    i0.ɵɵtext(18, \"\\u2022 Try restarting VSCode after installing Copilot\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"li\");\n    i0.ɵɵtext(20, \"\\u2022 Check if you have an active GitHub Copilot subscription\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"li\");\n    i0.ɵɵtext(22, \"\\u2022 Make sure you're signed in to GitHub in VSCode\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(9);\n    i0.ɵɵconditional(ctx_r3.availableCommands().length > 0 ? 9 : 10);\n  }\n}\nfunction CopilotDiagnosticsComponent_Conditional_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 7)(2, \"div\", 8)(3, \"span\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 10);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"p\", 11);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"div\", 12)(10, \"h4\", 13);\n    i0.ɵɵtext(11, \"System Information\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 14)(13, \"div\")(14, \"span\", 15);\n    i0.ɵɵtext(15, \"VSCode Version:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"span\", 16);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"div\")(19, \"span\", 15);\n    i0.ɵɵtext(20, \"Language Model API:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"span\", 17);\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"div\")(24, \"span\", 15);\n    i0.ɵɵtext(25, \"Copilot Extension:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"span\", 17);\n    i0.ɵɵtext(27);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(28, \"div\")(29, \"span\", 15);\n    i0.ɵɵtext(30, \"Available Models:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"span\", 16);\n    i0.ɵɵtext(32);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(33, \"div\", 18)(34, \"h4\", 19);\n    i0.ɵɵtext(35, \"Diagnostic Checks\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵrepeaterCreate(36, CopilotDiagnosticsComponent_Conditional_8_For_37_Template, 14, 10, \"div\", 20, _forTrack0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(38, \"div\", 12)(39, \"h4\", 13);\n    i0.ɵɵtext(40, \"Quick Actions\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(41, \"div\", 21)(42, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function CopilotDiagnosticsComponent_Conditional_8_Template_button_click_42_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.executeAction(\"check-copilot-status\"));\n    });\n    i0.ɵɵtext(43, \" Check Copilot Status \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(44, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function CopilotDiagnosticsComponent_Conditional_8_Template_button_click_44_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.executeAction(\"sign-in-copilot\"));\n    });\n    i0.ɵɵtext(45, \" Sign In to Copilot \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(46, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function CopilotDiagnosticsComponent_Conditional_8_Template_button_click_46_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.executeAction(\"install-copilot\"));\n    });\n    i0.ɵɵtext(47, \" Install Copilot Extension \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(48, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function CopilotDiagnosticsComponent_Conditional_8_Template_button_click_48_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.executeAction(\"test-copilot\"));\n    });\n    i0.ɵɵtext(49, \" Test Copilot Integration \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(50, CopilotDiagnosticsComponent_Conditional_8_Conditional_50_Template, 23, 1, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r3.getOverallStatusClass());\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r3.getOverallStatusIcon());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.getOverallStatusMessage());\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.getOverallDescription());\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(ctx_r3.diagnostics().vscodeVersion);\n    i0.ɵɵadvance(4);\n    i0.ɵɵclassMap(ctx_r3.diagnostics().languageModelApi ? \"text-green-500\" : \"text-red-500\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.diagnostics().languageModelApi ? \"Available\" : \"Not Available\", \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵclassMap(ctx_r3.diagnostics().copilotExtension ? \"text-green-500\" : \"text-red-500\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.diagnostics().copilotExtension ? \"Installed\" : \"Not Installed\", \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r3.diagnostics().modelsAvailable);\n    i0.ɵɵadvance(4);\n    i0.ɵɵrepeater(ctx_r3.diagnostics().checks);\n    i0.ɵɵadvance(14);\n    i0.ɵɵconditional(ctx_r3.diagnostics().lastError || ctx_r3.diagnostics().modelsAvailable === 0 ? 50 : -1);\n  }\n}\nfunction CopilotDiagnosticsComponent_Conditional_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 41);\n    i0.ɵɵtext(2, \"\\uD83D\\uDD0D\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 15);\n    i0.ɵɵtext(4, \"Click \\\"Run Diagnostics\\\" to check Copilot integration\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport let CopilotDiagnosticsComponent = /*#__PURE__*/(() => {\n  class CopilotDiagnosticsComponent {\n    constructor(vscode) {\n      this.vscode = vscode;\n      this.diagnostics = signal(null);\n      this.isRunning = signal(false);\n      this.availableCommands = signal([]);\n    }\n    ngOnInit() {\n      this.setupMessageHandlers();\n      // Run diagnostics automatically on component load\n      this.runDiagnostics();\n    }\n    setupMessageHandlers() {\n      this.vscode.onMessage().subscribe(message => {\n        if (!message) return;\n        switch (message.command) {\n          case 'copilotDiagnosticsComplete':\n            this.diagnostics.set(message.data);\n            this.isRunning.set(false);\n            break;\n          case 'copilotCommandsAvailable':\n            this.availableCommands.set(message.data.commands || []);\n            break;\n          case 'copilotActionComplete':\n            this.handleActionComplete(message.data);\n            break;\n          case 'workflowError':\n            this.isRunning.set(false);\n            console.error('Diagnostics error:', message.data?.error);\n            break;\n        }\n      });\n    }\n    runDiagnostics() {\n      this.isRunning.set(true);\n      this.vscode.postMessage('runCopilotDiagnostics');\n      // Also request available commands for debugging\n      this.vscode.postMessage('getCopilotCommands');\n    }\n    executeAction(action) {\n      this.vscode.postMessage('executeCopilotAction', {\n        action\n      });\n    }\n    handleActionComplete(data) {\n      // Refresh diagnostics after action\n      setTimeout(() => this.runDiagnostics(), 1000);\n    }\n    getOverallStatusClass() {\n      const diag = this.diagnostics();\n      if (!diag) return '';\n      if (diag.modelsAvailable > 0) {\n        return 'bg-green-50 border-green-200 text-green-800';\n      } else if (diag.copilotExtension && diag.languageModelApi) {\n        return 'bg-yellow-50 border-yellow-200 text-yellow-800';\n      } else {\n        return 'bg-red-50 border-red-200 text-red-800';\n      }\n    }\n    getOverallStatusIcon() {\n      const diag = this.diagnostics();\n      if (!diag) return '🔍';\n      if (diag.modelsAvailable > 0) return '✅';\n      if (diag.copilotExtension && diag.languageModelApi) return '⚠️';\n      return '❌';\n    }\n    getOverallStatusMessage() {\n      const diag = this.diagnostics();\n      if (!diag) return 'Checking...';\n      if (diag.modelsAvailable > 0) {\n        return `Copilot Ready (${diag.modelsAvailable} models available)`;\n      } else if (diag.copilotExtension && diag.languageModelApi) {\n        return 'Copilot Installed but Not Available';\n      } else {\n        return 'Copilot Not Available';\n      }\n    }\n    getOverallDescription() {\n      const diag = this.diagnostics();\n      if (!diag) return '';\n      if (diag.modelsAvailable > 0) {\n        return 'GitHub Copilot is properly configured and ready for AI-powered analysis.';\n      } else if (diag.copilotExtension && diag.languageModelApi) {\n        return 'Copilot extension is installed but authentication or subscription may be needed.';\n      } else {\n        return 'GitHub Copilot integration requires installation and configuration.';\n      }\n    }\n    getCheckStatusClass(status) {\n      switch (status) {\n        case 'passed':\n          return 'border-green-200 bg-green-50';\n        case 'failed':\n          return 'border-red-200 bg-red-50';\n        case 'warning':\n          return 'border-yellow-200 bg-yellow-50';\n        case 'checking':\n          return 'border-blue-200 bg-blue-50';\n        default:\n          return 'border-vscode-panel-border bg-vscode-textBlockQuote-background';\n      }\n    }\n    getCheckIcon(status) {\n      switch (status) {\n        case 'passed':\n          return '✅';\n        case 'failed':\n          return '❌';\n        case 'warning':\n          return '⚠️';\n        case 'checking':\n          return '⏳';\n        default:\n          return '🔍';\n      }\n    }\n    getCheckBadgeClass(status) {\n      switch (status) {\n        case 'passed':\n          return 'bg-green-100 text-green-800';\n        case 'failed':\n          return 'bg-red-100 text-red-800';\n        case 'warning':\n          return 'bg-yellow-100 text-yellow-800';\n        case 'checking':\n          return 'bg-blue-100 text-blue-800';\n        default:\n          return 'bg-gray-100 text-gray-800';\n      }\n    }\n    getActionLabel(action) {\n      switch (action) {\n        case 'check-copilot-status':\n          return 'Check Status';\n        case 'sign-in-copilot':\n          return 'Sign In';\n        case 'install-copilot':\n          return 'Install Extension';\n        case 'test-copilot':\n          return 'Test Integration';\n        case 'update-vscode':\n          return 'Update VSCode';\n        default:\n          return 'Execute';\n      }\n    }\n    static {\n      this.ɵfac = function CopilotDiagnosticsComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || CopilotDiagnosticsComponent)(i0.ɵɵdirectiveInject(i1.VscodeService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CopilotDiagnosticsComponent,\n        selectors: [[\"app-copilot-diagnostics\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 10,\n        vars: 3,\n        consts: [[1, \"bg-vscode-editor-background\", \"p-4\", \"rounded-lg\", \"border\", \"border-vscode-panel-border\"], [1, \"flex\", \"items-center\", \"justify-between\", \"mb-6\"], [1, \"text-vscode-foreground\", \"text-lg\", \"font-semibold\", \"flex\", \"items-center\", \"gap-2\"], [1, \"text-2xl\"], [1, \"px-4\", \"py-2\", \"bg-vscode-button-background\", \"text-vscode-button-foreground\", \"rounded\", \"hover:bg-vscode-button-hoverBackground\", \"disabled:opacity-50\", 3, \"click\", \"disabled\"], [1, \"space-y-4\"], [1, \"text-center\", \"py-8\"], [1, \"p-4\", \"rounded\", \"border\"], [1, \"flex\", \"items-center\", \"gap-2\", \"mb-2\"], [1, \"text-xl\"], [1, \"font-medium\"], [1, \"text-sm\", \"opacity-75\"], [1, \"bg-vscode-textBlockQuote-background\", \"border\", \"border-vscode-panel-border\", \"rounded\", \"p-4\"], [1, \"text-vscode-foreground\", \"font-medium\", \"mb-3\"], [1, \"grid\", \"grid-cols-1\", \"md:grid-cols-2\", \"gap-3\", \"text-sm\"], [1, \"text-vscode-descriptionForeground\"], [1, \"text-vscode-foreground\", \"ml-2\", \"font-mono\"], [1, \"ml-2\"], [1, \"space-y-3\"], [1, \"text-vscode-foreground\", \"font-medium\"], [1, \"border\", \"rounded\", \"p-3\", 3, \"class\"], [1, \"grid\", \"grid-cols-1\", \"sm:grid-cols-2\", \"gap-2\"], [1, \"px-3\", \"py-2\", \"text-sm\", \"bg-vscode-button-secondaryBackground\", \"text-vscode-button-secondaryForeground\", \"rounded\", \"hover:bg-vscode-button-secondaryHoverBackground\", 3, \"click\"], [1, \"px-3\", \"py-2\", \"text-sm\", \"bg-vscode-button-background\", \"text-vscode-button-foreground\", \"rounded\", \"hover:bg-vscode-button-hoverBackground\", 3, \"click\"], [1, \"border\", \"rounded\", \"p-3\"], [1, \"flex\", \"items-start\", \"gap-3\"], [1, \"text-lg\", \"mt-1\"], [1, \"flex-1\"], [1, \"flex\", \"items-center\", \"justify-between\"], [1, \"text-xs\", \"px-2\", \"py-1\", \"rounded\"], [1, \"text-sm\", \"mt-1\", \"opacity-75\"], [1, \"mt-2\", \"p-2\", \"bg-vscode-textCodeBlock-background\", \"rounded\"], [1, \"mt-2\", \"px-3\", \"py-1\", \"text-xs\", \"bg-vscode-button-secondaryBackground\", \"text-vscode-button-secondaryForeground\", \"rounded\", \"hover:bg-vscode-button-secondaryHoverBackground\"], [1, \"text-xs\", \"text-vscode-textPreformat-foreground\"], [1, \"mt-2\", \"px-3\", \"py-1\", \"text-xs\", \"bg-vscode-button-secondaryBackground\", \"text-vscode-button-secondaryForeground\", \"rounded\", \"hover:bg-vscode-button-secondaryHoverBackground\", 3, \"click\"], [1, \"text-xs\", \"text-vscode-descriptionForeground\", \"space-y-2\"], [1, \"mt-1\", \"max-h-32\", \"overflow-y-auto\", \"bg-vscode-textCodeBlock-background\", \"p-2\", \"rounded\"], [1, \"text-vscode-textPreformat-foreground\", \"font-mono\"], [1, \"text-yellow-500\"], [1, \"mt-1\", \"space-y-1\", \"text-xs\"], [1, \"py-1\"], [1, \"text-4xl\", \"mb-2\"]],\n        template: function CopilotDiagnosticsComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2)(3, \"span\", 3);\n            i0.ɵɵtext(4, \"\\uD83D\\uDD0D\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(5, \" Copilot Diagnostics \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"button\", 4);\n            i0.ɵɵlistener(\"click\", function CopilotDiagnosticsComponent_Template_button_click_6_listener() {\n              return ctx.runDiagnostics();\n            });\n            i0.ɵɵtext(7);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(8, CopilotDiagnosticsComponent_Conditional_8_Template, 51, 14, \"div\", 5)(9, CopilotDiagnosticsComponent_Conditional_9_Template, 5, 0, \"div\", 6);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"disabled\", ctx.isRunning());\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.isRunning() ? \"Running...\" : \"Run Diagnostics\", \" \");\n            i0.ɵɵadvance();\n            i0.ɵɵconditional(ctx.diagnostics() ? 8 : 9);\n          }\n        },\n        dependencies: [CommonModule],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return CopilotDiagnosticsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}