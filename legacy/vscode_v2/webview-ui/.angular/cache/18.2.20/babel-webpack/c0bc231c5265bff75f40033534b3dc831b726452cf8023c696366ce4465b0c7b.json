{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter, signal, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet TestSelectorComponent = class TestSelectorComponent {\n  constructor() {\n    this.configurationChanged = new EventEmitter();\n    this.testMode = signal('affected');\n    this.projects = signal([]);\n    this.selectedProject = '';\n    this.projectTestFiles = signal([]);\n    this.affectedProjects = signal([]);\n    this.baseBranch = 'main';\n    this.includeDependencies = false;\n  }\n  ngOnInit() {\n    this.loadProjects();\n    this.updateAffectedProjects();\n  }\n  selectTestMode(mode) {\n    this.testMode.set(mode);\n    this.emitConfiguration();\n  }\n  getModeButtonClass(mode) {\n    const baseClass = 'text-left transition-all duration-200';\n    if (this.testMode() === mode) {\n      return `${baseClass} bg-vscode-button-background text-vscode-button-foreground border-vscode-button-background`;\n    }\n    return `${baseClass} bg-vscode-button-secondaryBackground text-vscode-button-secondaryForeground border-vscode-panel-border hover:bg-vscode-list-hoverBackground`;\n  }\n  onProjectChange() {\n    this.loadProjectTestFiles();\n    this.emitConfiguration();\n  }\n  getSelectedProjectDetails() {\n    return this.projects().find(p => p.name === this.selectedProject) || null;\n  }\n  toggleTestFile(file) {\n    const files = this.projectTestFiles();\n    const index = files.findIndex(f => f.path === file.path);\n    if (index !== -1) {\n      files[index].selected = !files[index].selected;\n      this.projectTestFiles.set([...files]);\n      this.emitConfiguration();\n    }\n  }\n  toggleSelectAllTestFiles() {\n    const files = this.projectTestFiles();\n    const allSelected = this.areAllTestFilesSelected();\n    files.forEach(f => f.selected = !allSelected);\n    this.projectTestFiles.set([...files]);\n    this.emitConfiguration();\n  }\n  areAllTestFilesSelected() {\n    const files = this.projectTestFiles();\n    return files.length > 0 && files.every(f => f.selected);\n  }\n  updateAffectedProjects() {\n    // Mock data - will be replaced with actual NX integration\n    setTimeout(() => {\n      this.affectedProjects.set(['user-app', 'auth-lib', 'shared-utils']);\n      this.emitConfiguration();\n    }, 1000);\n  }\n  getTestCommand() {\n    if (this.testMode() === 'affected') {\n      let command = `npx nx affected --target=test --base=${this.baseBranch}`;\n      if (this.includeDependencies) {\n        command += ' --with-deps';\n      }\n      return command;\n    } else if (this.selectedProject) {\n      const selectedFiles = this.projectTestFiles().filter(f => f.selected);\n      if (selectedFiles.length === 0) {\n        return `npx nx test ${this.selectedProject}`;\n      } else {\n        return `npx nx test ${this.selectedProject} --testPathPattern=\"${selectedFiles.map(f => f.path).join('|')}\"`;\n      }\n    }\n    return '-- No test configuration selected --';\n  }\n  getEstimatedDuration() {\n    if (this.testMode() === 'affected') {\n      const projectCount = this.affectedProjects().length;\n      if (projectCount === 0) return null;\n      const minutes = Math.max(1, projectCount * 2);\n      return `${minutes}min`;\n    } else if (this.selectedProject) {\n      const selectedFiles = this.projectTestFiles().filter(f => f.selected);\n      const testCount = selectedFiles.reduce((sum, f) => sum + (f.testCount || 0), 0);\n      if (testCount === 0) return null;\n      const seconds = Math.max(30, testCount * 5);\n      return seconds > 60 ? `${Math.ceil(seconds / 60)}min` : `${seconds}s`;\n    }\n    return null;\n  }\n  hasValidConfiguration() {\n    if (this.testMode() === 'affected') {\n      return this.affectedProjects().length > 0;\n    } else {\n      return !!this.selectedProject;\n    }\n  }\n  getConfigurationSummary() {\n    if (this.testMode() === 'affected') {\n      const count = this.affectedProjects().length;\n      return count > 0 ? `${count} affected project(s)` : 'Scanning...';\n    } else {\n      if (!this.selectedProject) return 'No project selected';\n      const selectedFiles = this.projectTestFiles().filter(f => f.selected).length;\n      const totalFiles = this.projectTestFiles().length;\n      return `${selectedFiles}/${totalFiles} test files`;\n    }\n  }\n  refreshProjects() {\n    this.loadProjects();\n    this.updateAffectedProjects();\n  }\n  applyConfiguration() {\n    this.emitConfiguration();\n  }\n  loadProjects() {\n    // Mock data - will be replaced with actual NX integration\n    this.projects.set([{\n      name: 'user-app',\n      type: 'application',\n      root: 'apps/user-app',\n      sourceRoot: 'apps/user-app/src'\n    }, {\n      name: 'admin-app',\n      type: 'application',\n      root: 'apps/admin-app',\n      sourceRoot: 'apps/admin-app/src'\n    }, {\n      name: 'auth-lib',\n      type: 'library',\n      root: 'libs/auth',\n      sourceRoot: 'libs/auth/src'\n    }, {\n      name: 'shared-utils',\n      type: 'library',\n      root: 'libs/shared/utils',\n      sourceRoot: 'libs/shared/utils/src'\n    }, {\n      name: 'ui-components',\n      type: 'library',\n      root: 'libs/ui-components',\n      sourceRoot: 'libs/ui-components/src'\n    }]);\n  }\n  loadProjectTestFiles() {\n    if (!this.selectedProject) {\n      this.projectTestFiles.set([]);\n      return;\n    }\n    // Mock data - will be replaced with actual file system integration\n    const mockFiles = [{\n      path: `${this.selectedProject}/src/app/app.component.spec.ts`,\n      selected: false,\n      testCount: 5\n    }, {\n      path: `${this.selectedProject}/src/app/services/data.service.spec.ts`,\n      selected: false,\n      testCount: 12\n    }, {\n      path: `${this.selectedProject}/src/app/components/user.component.spec.ts`,\n      selected: false,\n      testCount: 8\n    }, {\n      path: `${this.selectedProject}/src/app/utils/helpers.spec.ts`,\n      selected: false,\n      testCount: 15\n    }];\n    this.projectTestFiles.set(mockFiles);\n  }\n  emitConfiguration() {\n    const config = {\n      mode: this.testMode(),\n      project: this.selectedProject || undefined,\n      testFiles: this.projectTestFiles().filter(f => f.selected),\n      command: this.getTestCommand(),\n      estimatedDuration: this.getEstimatedDuration() ? parseInt(this.getEstimatedDuration().replace(/\\D/g, '')) : undefined\n    };\n    this.configurationChanged.emit(config);\n  }\n};\n__decorate([Output()], TestSelectorComponent.prototype, \"configurationChanged\", void 0);\nTestSelectorComponent = __decorate([Component({\n  selector: 'app-test-selector',\n  imports: [CommonModule, FormsModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"bg-vscode-editor-background p-4 rounded-lg border border-vscode-panel-border\">\n      <div class=\"flex items-center justify-between mb-6\">\n        <h3 class=\"text-vscode-foreground text-lg font-semibold\">Test Configuration</h3>\n        <div class=\"text-vscode-descriptionForeground text-sm\">\n          {{ getConfigurationSummary() }}\n        </div>\n      </div>\n\n      <!-- Test Mode Selection -->\n      <div class=\"mb-6\">\n        <label class=\"text-vscode-foreground text-sm font-medium mb-3 block\">\n          Test Execution Mode:\n        </label>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <button\n            (click)=\"selectTestMode('affected')\"\n            [class]=\"getModeButtonClass('affected')\"\n            class=\"p-4 rounded border transition-all duration-200 text-left\">\n            <div class=\"flex items-center gap-3 mb-2\">\n              <span class=\"text-2xl\">üéØ</span>\n              <span class=\"font-medium\">Affected Tests</span>\n            </div>\n            <p class=\"text-xs opacity-75\">\n              Run tests for projects affected by your changes\n            </p>\n            <div class=\"text-xs mt-2 opacity-60\">\n              Recommended ‚Ä¢ Faster execution\n            </div>\n          </button>\n          \n          <button\n            (click)=\"selectTestMode('project')\"\n            [class]=\"getModeButtonClass('project')\"\n            class=\"p-4 rounded border transition-all duration-200 text-left\">\n            <div class=\"flex items-center gap-3 mb-2\">\n              <span class=\"text-2xl\">üìÅ</span>\n              <span class=\"font-medium\">Specific Project</span>\n            </div>\n            <p class=\"text-xs opacity-75\">\n              Run tests for a specific project\n            </p>\n            <div class=\"text-xs mt-2 opacity-60\">\n              Full control ‚Ä¢ Longer execution\n            </div>\n          </button>\n        </div>\n      </div>\n\n      <!-- Affected Tests Configuration -->\n      @if (testMode() === 'affected') {\n        <div class=\"space-y-4\">\n          <div class=\"bg-vscode-textBlockQuote-background border border-vscode-panel-border rounded p-4\">\n            <div class=\"flex items-center gap-2 mb-3\">\n              <span class=\"text-xl\">‚ö°</span>\n              <h4 class=\"text-vscode-textBlockQuote-foreground font-medium\">Affected Projects Detection</h4>\n            </div>\n            <p class=\"text-vscode-textBlockQuote-foreground text-sm mb-3\">\n              NX will automatically detect and run tests for projects affected by your changes.\n            </p>\n            \n            @if (affectedProjects().length > 0) {\n              <div>\n                <p class=\"text-vscode-foreground text-sm font-medium mb-2\">\n                  Affected Projects ({{ affectedProjects().length }}):\n                </p>\n                <div class=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                  @for (project of affectedProjects(); track project) {\n                    <div class=\"flex items-center gap-2 p-2 bg-vscode-list-hoverBackground rounded\">\n                      <span class=\"w-2 h-2 bg-vscode-gitDecoration-modifiedResourceForeground rounded-full\"></span>\n                      <span class=\"text-vscode-foreground text-sm font-mono\">{{ project }}</span>\n                    </div>\n                  }\n                </div>\n              </div>\n            } @else {\n              <div class=\"text-vscode-descriptionForeground text-center py-4\">\n                <div class=\"text-2xl mb-2\">üîç</div>\n                <p class=\"text-sm\">Scanning for affected projects...</p>\n              </div>\n            }\n          </div>\n\n          <!-- Base Branch Configuration -->\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label class=\"text-vscode-foreground text-sm font-medium mb-2 block\">\n                Base Branch:\n              </label>\n              <select\n                [(ngModel)]=\"baseBranch\"\n                (change)=\"updateAffectedProjects()\"\n                class=\"w-full px-3 py-2 bg-vscode-dropdown-background text-vscode-dropdown-foreground border border-vscode-dropdown-border rounded focus:border-vscode-inputOption-activeBorder\">\n                <option value=\"main\">main</option>\n                <option value=\"master\">master</option>\n                <option value=\"develop\">develop</option>\n                <option value=\"HEAD~1\">Previous commit</option>\n              </select>\n            </div>\n            \n            <div>\n              <label class=\"text-vscode-foreground text-sm font-medium mb-2 block\">\n                Include Dependencies:\n              </label>\n              <label class=\"flex items-center gap-2 cursor-pointer\">\n                <input \n                  type=\"checkbox\"\n                  [(ngModel)]=\"includeDependencies\"\n                  class=\"w-4 h-4 rounded border-vscode-checkbox-border bg-vscode-checkbox-background\">\n                <span class=\"text-vscode-foreground text-sm\">Test dependent projects</span>\n              </label>\n            </div>\n          </div>\n        </div>\n      }\n\n      <!-- Project-Specific Configuration -->\n      @if (testMode() === 'project') {\n        <div class=\"space-y-4\">\n          <!-- Project Selection -->\n          <div>\n            <label class=\"text-vscode-foreground text-sm font-medium mb-2 block\">\n              Select Project:\n            </label>\n            <select\n              [(ngModel)]=\"selectedProject\"\n              (change)=\"onProjectChange()\"\n              class=\"w-full px-3 py-2 bg-vscode-dropdown-background text-vscode-dropdown-foreground border border-vscode-dropdown-border rounded focus:border-vscode-inputOption-activeBorder\">\n              <option value=\"\">-- Select a project --</option>\n              @for (project of projects(); track project.name) {\n                <option [value]=\"project.name\">\n                  {{ project.name }} ({{ project.type }})\n                </option>\n              }\n            </select>\n          </div>\n\n          <!-- Project Details -->\n          @if (selectedProject) {\n            <div class=\"bg-vscode-textBlockQuote-background border border-vscode-panel-border rounded p-4\">\n              @if (getSelectedProjectDetails()) {\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <span class=\"text-vscode-descriptionForeground\">Type:</span>\n                    <span class=\"text-vscode-foreground ml-2 capitalize\">{{ getSelectedProjectDetails()!.type }}</span>\n                  </div>\n                  <div>\n                    <span class=\"text-vscode-descriptionForeground\">Root:</span>\n                    <span class=\"text-vscode-foreground ml-2 font-mono\">{{ getSelectedProjectDetails()!.root }}</span>\n                  </div>\n                  <div>\n                    <span class=\"text-vscode-descriptionForeground\">Test Files:</span>\n                    <span class=\"text-vscode-foreground ml-2\">{{ projectTestFiles().length }}</span>\n                  </div>\n                </div>\n              }\n            </div>\n\n            <!-- Test Files Selection -->\n            <div>\n              <div class=\"flex items-center justify-between mb-3\">\n                <label class=\"text-vscode-foreground text-sm font-medium\">\n                  Test Files:\n                </label>\n                <button \n                  (click)=\"toggleSelectAllTestFiles()\"\n                  class=\"text-vscode-button-background hover:text-vscode-button-hoverBackground text-sm\">\n                  {{ areAllTestFilesSelected() ? 'Unselect All' : 'Select All' }}\n                </button>\n              </div>\n              \n              @if (projectTestFiles().length === 0) {\n                <div class=\"text-vscode-descriptionForeground text-center py-8 border border-vscode-panel-border rounded\">\n                  <div class=\"text-4xl mb-2\">üß™</div>\n                  <p>No test files found</p>\n                  <p class=\"text-xs\">Select a project to see available test files</p>\n                </div>\n              } @else {\n                <div class=\"max-h-64 overflow-y-auto border border-vscode-panel-border rounded p-2 space-y-1\">\n                  @for (file of projectTestFiles(); track file.path) {\n                    <div class=\"flex items-center gap-3 p-2 hover:bg-vscode-list-hoverBackground rounded\">\n                      <input \n                        type=\"checkbox\"\n                        [checked]=\"file.selected\"\n                        (change)=\"toggleTestFile(file)\"\n                        class=\"w-4 h-4 rounded border-vscode-checkbox-border bg-vscode-checkbox-background\">\n                      <span class=\"flex-1 text-vscode-foreground text-sm font-mono truncate\">\n                        {{ file.path }}\n                      </span>\n                      @if (file.testCount) {\n                        <span class=\"text-vscode-descriptionForeground text-xs bg-vscode-badge-background px-2 py-1 rounded\">\n                          {{ file.testCount }} tests\n                        </span>\n                      }\n                    </div>\n                  }\n                </div>\n              }\n            </div>\n          }\n        </div>\n      }\n\n      <!-- Command Preview -->\n      <div class=\"mt-6 p-4 bg-vscode-textCodeBlock-background border border-vscode-panel-border rounded\">\n        <div class=\"flex items-center justify-between mb-2\">\n          <label class=\"text-vscode-descriptionForeground text-xs font-medium\">\n            Command Preview:\n          </label>\n          @if (getEstimatedDuration()) {\n            <span class=\"text-vscode-descriptionForeground text-xs\">\n              Est. {{ getEstimatedDuration() }}\n            </span>\n          }\n        </div>\n        <code class=\"text-vscode-textPreformat-foreground text-sm font-mono block break-all\">\n          {{ getTestCommand() }}\n        </code>\n      </div>\n\n      <!-- Action Buttons -->\n      <div class=\"mt-6 flex gap-3 justify-end\">\n        <button \n          (click)=\"refreshProjects()\"\n          class=\"px-4 py-2 text-sm bg-vscode-button-secondaryBackground text-vscode-button-secondaryForeground rounded hover:bg-vscode-button-secondaryHoverBackground\">\n          üîÑ Refresh\n        </button>\n        <button \n          (click)=\"applyConfiguration()\"\n          [disabled]=\"!hasValidConfiguration()\"\n          class=\"px-4 py-2 text-sm bg-vscode-button-background text-vscode-button-foreground rounded hover:bg-vscode-button-hoverBackground disabled:opacity-50 disabled:cursor-not-allowed\">\n          Apply Configuration\n        </button>\n      </div>\n    </div>\n  `,\n  styles: []\n})], TestSelectorComponent);\nexport { TestSelectorComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}