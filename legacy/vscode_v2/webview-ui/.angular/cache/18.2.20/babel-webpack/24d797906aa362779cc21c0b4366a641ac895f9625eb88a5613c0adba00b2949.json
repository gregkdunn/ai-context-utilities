{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let VscodeService = /*#__PURE__*/(() => {\n  class VscodeService {\n    constructor() {\n      this.messageSubject = new BehaviorSubject(null);\n      try {\n        this.vscode = window.acquireVsCodeApi();\n        this.setupMessageListener();\n      } catch (error) {\n        console.warn('VSCode API not available (likely in development mode)');\n        // Mock VSCode API for development\n        this.vscode = {\n          postMessage: message => console.log('Mock VSCode message:', message),\n          getState: () => ({}),\n          setState: state => console.log('Mock VSCode state:', state)\n        };\n      }\n    }\n    setupMessageListener() {\n      window.addEventListener('message', event => {\n        const message = event.data;\n        if (message.command) {\n          this.messageSubject.next(message);\n        }\n      });\n    }\n    postMessage(command, data) {\n      this.vscode.postMessage({\n        command,\n        data\n      });\n    }\n    onMessage() {\n      return this.messageSubject.asObservable();\n    }\n    getState() {\n      return this.vscode.getState() || {};\n    }\n    setState(state) {\n      this.vscode.setState(state);\n    }\n    static {\n      this.ɵfac = function VscodeService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || VscodeService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: VscodeService,\n        factory: VscodeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return VscodeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}