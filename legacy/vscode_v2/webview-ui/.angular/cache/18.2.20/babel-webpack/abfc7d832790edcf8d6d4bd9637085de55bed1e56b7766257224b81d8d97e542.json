{"ast":null,"code":"import _asyncToGenerator from \"/Users/gregdunn/src/test/ai_debug_context/vscode_2/webview-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let VscodeService = /*#__PURE__*/(() => {\n  class VscodeService {\n    constructor() {\n      this.messageSubject = new BehaviorSubject(null);\n      try {\n        this.vscode = window.acquireVsCodeApi();\n        this.setupMessageListener();\n      } catch (error) {\n        console.warn('VSCode API not available (likely in development mode)');\n        // Mock VSCode API for development\n        this.vscode = {\n          postMessage: message => console.log('Mock VSCode message:', message),\n          getState: () => ({}),\n          setState: state => console.log('Mock VSCode state:', state)\n        };\n      }\n    }\n    setupMessageListener() {\n      window.addEventListener('message', event => {\n        const message = event.data;\n        if (message.command) {\n          this.messageSubject.next(message);\n        }\n      });\n    }\n    postMessage(command, data) {\n      this.vscode.postMessage({\n        command,\n        data\n      });\n    }\n    onMessage() {\n      return this.messageSubject.asObservable();\n    }\n    getState() {\n      return this.vscode.getState() || {};\n    }\n    setState(state) {\n      this.vscode.setState(state);\n    }\n    // Diagnostic Methods\n    /**\n     * Check GitHub Copilot availability\n     */\n    checkCopilotAvailability() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Copilot availability check timeout'));\n          }, 10000);\n          const subscription = _this.onMessage().subscribe(message => {\n            if (message?.command === 'copilotAvailabilityResponse') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              resolve(message.data);\n            }\n          });\n          _this.postMessage('checkCopilotAvailability');\n        });\n      })();\n    }\n    /**\n     * Check if AI context file exists\n     */\n    checkContextFileExists() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Context file check timeout'));\n          }, 5000);\n          const subscription = _this2.onMessage().subscribe(message => {\n            if (message?.command === 'contextFileCheckResponse') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              resolve(message.data);\n            }\n          });\n          _this2.postMessage('checkContextFile');\n        });\n      })();\n    }\n    /**\n     * Run comprehensive system diagnostics\n     */\n    runSystemDiagnostics() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('System diagnostics timeout'));\n          }, 15000);\n          const subscription = _this3.onMessage().subscribe(message => {\n            if (message?.command === 'systemDiagnosticsResponse') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              resolve(message.data);\n            }\n          });\n          _this3.postMessage('runSystemDiagnostics');\n        });\n      })();\n    }\n    // Analysis Dashboard Methods\n    /**\n     * Submit AI context for comprehensive analysis\n     */\n    submitContextForAnalysis(options) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Analysis submission timeout'));\n          }, options?.timeout || 120000);\n          // Listen for response\n          const subscription = _this4.onMessage().subscribe(message => {\n            if (message?.command === 'analysisComplete') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              resolve({\n                analysis: message.data\n              });\n            } else if (message?.command === 'analysisError') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              reject(new Error(message.data?.error || 'Analysis failed'));\n            }\n          });\n          // Send the request\n          _this4.postMessage('submitContextForAnalysis', options);\n        });\n      })();\n    }\n    /**\n     * Get analysis history\n     */\n    getAnalysisHistory() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Request timeout'));\n          }, 10000);\n          const subscription = _this5.onMessage().subscribe(message => {\n            if (message?.command === 'analysisHistoryResponse') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              resolve(message.data || []);\n            }\n          });\n          _this5.postMessage('getAnalysisHistory');\n        });\n      })();\n    }\n    /**\n     * Load a specific analysis by ID\n     */\n    loadAnalysis(analysisId) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Request timeout'));\n          }, 10000);\n          const subscription = _this6.onMessage().subscribe(message => {\n            if (message?.command === 'loadAnalysisResponse') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              resolve(message.data);\n            }\n          });\n          _this6.postMessage('loadAnalysis', {\n            analysisId\n          });\n        });\n      })();\n    }\n    /**\n     * Export analysis in specified format\n     */\n    exportAnalysis(format) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        _this7.postMessage('exportAnalysis', {\n          format\n        });\n      })();\n    }\n    /**\n     * Export analysis history\n     */\n    exportAnalysisHistory(format) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        _this8.postMessage('exportAnalysisHistory', {\n          format\n        });\n      })();\n    }\n    /**\n     * Save PR template\n     */\n    savePRTemplate() {\n      this.postMessage('savePRTemplate');\n    }\n    /**\n     * Mark recommendations as implemented\n     */\n    markRecommendationsImplemented(analysisId, implementedCount) {\n      this.postMessage('markRecommendationsImplemented', {\n        analysisId,\n        implementedCount\n      });\n    }\n    /**\n     * Compare two analyses\n     */\n    compareAnalyses(analysisId1, analysisId2) {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Request timeout'));\n          }, 15000);\n          const subscription = _this9.onMessage().subscribe(message => {\n            if (message?.command === 'compareAnalysesResponse') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              resolve(message.data);\n            }\n          });\n          _this9.postMessage('compareAnalyses', {\n            analysisId1,\n            analysisId2\n          });\n        });\n      })();\n    }\n    /**\n     * Get analysis insights and trends\n     */\n    getAnalysisInsights() {\n      var _this0 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Request timeout'));\n          }, 10000);\n          const subscription = _this0.onMessage().subscribe(message => {\n            if (message?.command === 'analysisInsightsResponse') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              resolve(message.data);\n            }\n          });\n          _this0.postMessage('getAnalysisInsights');\n        });\n      })();\n    }\n    /**\n     * Delete an analysis\n     */\n    deleteAnalysis(analysisId) {\n      var _this1 = this;\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error('Request timeout'));\n          }, 10000);\n          const subscription = _this1.onMessage().subscribe(message => {\n            if (message?.command === 'deleteAnalysisResponse') {\n              clearTimeout(timeoutId);\n              subscription.unsubscribe();\n              if (message.data?.success) {\n                resolve();\n              } else {\n                reject(new Error(message.data?.error || 'Delete failed'));\n              }\n            }\n          });\n          _this1.postMessage('deleteAnalysis', {\n            analysisId\n          });\n        });\n      })();\n    }\n    static {\n      this.ɵfac = function VscodeService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || VscodeService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: VscodeService,\n        factory: VscodeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return VscodeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}