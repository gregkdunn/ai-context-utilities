{"ast":null,"code":"import _asyncToGenerator from \"/Users/gregdunn/src/test/ai_debug_context/vscode_2/webview-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, signal, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CopilotDiagnosticsComponent } from '../../components/copilot-diagnostics/copilot-diagnostics.component';\nlet AIDebugComponent = class AIDebugComponent {\n  constructor(vscode) {\n    this.vscode = vscode;\n    this.fileSelection = null;\n    this.testConfiguration = null;\n    this.workflowComplete = new EventEmitter();\n    this.workflowState = signal({\n      phase: 'idle',\n      progress: 0,\n      message: 'Ready to start AI debug workflow'\n    });\n    this.copilotAvailable = signal(false);\n    this.showDiagnostics = false;\n    this.workflowPhases = [{\n      key: 'collecting-context',\n      label: 'Context',\n      icon: '📁'\n    }, {\n      key: 'running-tests',\n      label: 'Tests',\n      icon: '🧪'\n    }, {\n      key: 'analyzing-results',\n      label: 'Analysis',\n      icon: '🤖'\n    }, {\n      key: 'generating-report',\n      label: 'Report',\n      icon: '📄'\n    }];\n  }\n  ngOnInit() {\n    this.checkCopilotAvailability();\n    this.setupMessageHandlers();\n  }\n  setupMessageHandlers() {\n    // Listen for messages from the backend\n    this.vscode.onMessage().subscribe(message => {\n      if (!message) return;\n      switch (message.command) {\n        case 'copilotAvailability':\n          console.log('Received Copilot availability:', message.data);\n          this.copilotAvailable.set(message.data?.available || false);\n          break;\n        case 'copilotDiagnosticsComplete':\n          console.log('Received Copilot diagnostics:', message.data);\n          // Update availability based on diagnostic results - use same logic as CopilotDiagnosticsComponent\n          if (message.data?.modelsAvailable > 0) {\n            this.copilotAvailable.set(true);\n            console.log('Copilot is available: models found =', message.data.modelsAvailable);\n          } else {\n            this.copilotAvailable.set(false);\n            console.log('Copilot not available: models found =', message.data?.modelsAvailable || 0);\n          }\n          break;\n        case 'workflowStateUpdate':\n          // Handle workflow state updates from backend\n          this.handleWorkflowStateUpdate(message.data);\n          break;\n        case 'aiAnalysisComplete':\n          // Handled in performAIAnalysis method\n          break;\n        case 'testResults':\n          // Handled in runTests method\n          break;\n        case 'workflowError':\n          // Handle errors\n          console.error('Workflow error:', message.data?.error);\n          this.updateWorkflowState({\n            phase: 'error',\n            progress: 0,\n            message: 'Error occurred during workflow',\n            error: message.data?.error || 'Unknown error'\n          });\n          break;\n        case 'workflowComplete':\n          // Handle completion of AI debug workflow\n          this.handleAIDebugComplete(message.data);\n          break;\n        case 'aiAnalysisComplete':\n          // Handle Copilot analysis results\n          this.handleCopilotAnalysisComplete(message.data);\n          break;\n        case 'gitDiffComplete':\n          // Handle git diff completion\n          this.handleGitDiffComplete(message.data);\n          break;\n        case 'testResultsComplete':\n          // Handle test results completion\n          this.handleTestResultsComplete(message.data);\n          break;\n      }\n    });\n  }\n  handleWorkflowStateUpdate(data) {\n    // Update local workflow state based on backend updates\n    if (data.step && data.progress !== undefined) {\n      this.updateWorkflowState({\n        phase: this.mapBackendStepToPhase(data.step),\n        progress: data.progress,\n        message: data.message\n      });\n    }\n  }\n  handleAIDebugComplete(data) {\n    // Update workflow state to complete\n    this.updateWorkflowState({\n      phase: 'complete',\n      progress: 100,\n      message: 'AI debug workflow completed successfully'\n    });\n    // If we have analysis results, emit workflow complete event\n    if (data?.analysis) {\n      const aiAnalysis = {\n        type: data.analysis.type || 'failure-analysis',\n        rootCause: data.analysis.rootCause,\n        suggestedFixes: data.analysis.suggestedFixes,\n        newTestSuggestions: data.analysis.newTestSuggestions,\n        falsePositiveWarnings: data.analysis.falsePositiveWarnings,\n        codeImprovements: data.analysis.codeImprovements\n      };\n      this.workflowComplete.emit({\n        testResults: data.testResults || [],\n        aiAnalysis\n      });\n    }\n  }\n  handleCopilotAnalysisComplete(data) {\n    // Extract Copilot analysis from the data\n    const copilotAnalysis = {\n      type: data.type,\n      analysisFilePath: data.analysisFilePath,\n      rootCause: data.analysis?.rootCause,\n      specificFixes: data.analysis?.specificFixes,\n      preventionStrategies: data.analysis?.preventionStrategies,\n      suspiciousTests: data.falsePositives?.suspiciousTests,\n      recommendations: data.falsePositives?.recommendations || data.analysis?.preventionStrategies\n    };\n    // Update workflow state with Copilot analysis\n    this.updateWorkflowState({\n      copilotAnalysis\n    });\n  }\n  mapBackendStepToPhase(step) {\n    switch (step) {\n      case 'collecting-context':\n      case 'generating-context':\n        return 'collecting-context';\n      case 'running-tests':\n        return 'running-tests';\n      case 'analyzing-with-ai':\n        return 'analyzing-results';\n      case 'generating-pr':\n      case 'saving-context':\n        return 'generating-report';\n      case 'complete':\n        return 'complete';\n      case 'error':\n        return 'error';\n      default:\n        return 'idle';\n    }\n  }\n  canStartWorkflow() {\n    return !!(this.fileSelection && this.testConfiguration);\n  }\n  getStatusSummary() {\n    const state = this.workflowState();\n    switch (state.phase) {\n      case 'idle':\n        return 'Ready to start';\n      case 'complete':\n        return 'Analysis complete';\n      case 'error':\n        return 'Error occurred';\n      default:\n        return `${state.progress}% complete`;\n    }\n  }\n  getFileSelectionSummary() {\n    if (!this.fileSelection) return '';\n    switch (this.fileSelection.mode) {\n      case 'uncommitted':\n        return `${this.fileSelection.files.length} files`;\n      case 'commit':\n        const selectedCommits = this.fileSelection.commits;\n        if (selectedCommits && selectedCommits.length > 0) {\n          if (selectedCommits.length === 1) {\n            return selectedCommits[0].hash.substring(0, 7);\n          } else {\n            return `${selectedCommits.length} commits`;\n          }\n        }\n        return 'No commits';\n      case 'branch-diff':\n        return 'Branch to main';\n      default:\n        return '';\n    }\n  }\n  getTestConfigSummary() {\n    if (!this.testConfiguration) return '';\n    if (this.testConfiguration.mode === 'affected') {\n      return 'Affected tests';\n    } else {\n      return this.testConfiguration.project || 'No project';\n    }\n  }\n  getPhaseDisplayName() {\n    const state = this.workflowState();\n    switch (state.phase) {\n      case 'collecting-context':\n        return 'Collecting Context';\n      case 'running-tests':\n        return 'Running Tests';\n      case 'analyzing-results':\n        return 'Analyzing with AI';\n      case 'generating-report':\n        return 'Generating Report';\n      default:\n        return 'Processing';\n    }\n  }\n  getPhaseIndicatorClass(phaseKey) {\n    const currentPhase = this.workflowState().phase;\n    const phases = ['collecting-context', 'running-tests', 'analyzing-results', 'generating-report'];\n    const currentIndex = phases.indexOf(currentPhase);\n    const phaseIndex = phases.indexOf(phaseKey);\n    if (phaseIndex < currentIndex) {\n      return 'bg-green-100 text-green-800 border border-green-200';\n    } else if (phaseIndex === currentIndex) {\n      return 'bg-blue-100 text-blue-800 border border-blue-200';\n    } else {\n      return 'bg-gray-100 text-gray-600 border border-gray-200';\n    }\n  }\n  getTerminalPhaseStatus(phaseKey) {\n    const currentPhase = this.workflowState().phase;\n    const phases = ['collecting-context', 'running-tests', 'analyzing-results', 'generating-report'];\n    const currentIndex = phases.indexOf(currentPhase);\n    const phaseIndex = phases.indexOf(phaseKey);\n    if (phaseIndex < currentIndex) {\n      return '[✓]';\n    } else if (phaseIndex === currentIndex) {\n      return '[▶]';\n    } else {\n      return '[·]';\n    }\n  }\n  getTerminalPhaseStyle(phaseKey) {\n    const currentPhase = this.workflowState().phase;\n    const phases = ['collecting-context', 'running-tests', 'analyzing-results', 'generating-report'];\n    const currentIndex = phases.indexOf(currentPhase);\n    const phaseIndex = phases.indexOf(phaseKey);\n    if (phaseIndex < currentIndex) {\n      return {\n        color: '#6BCF7F'\n      }; // Green for completed\n    } else if (phaseIndex === currentIndex) {\n      return {\n        color: '#FFD93D'\n      }; // Yellow for current\n    } else {\n      return {\n        color: '#666'\n      }; // Gray for pending\n    }\n  }\n  getTerminalPhaseLabel(phaseKey) {\n    const currentPhase = this.workflowState().phase;\n    const phases = ['collecting-context', 'running-tests', 'analyzing-results', 'generating-report'];\n    const currentIndex = phases.indexOf(currentPhase);\n    const phaseIndex = phases.indexOf(phaseKey);\n    if (phaseIndex < currentIndex) {\n      return 'COMPLETE';\n    } else if (phaseIndex === currentIndex) {\n      return 'ACTIVE';\n    } else {\n      return 'PENDING';\n    }\n  }\n  getPassedTestsCount() {\n    return this.workflowState().testResults?.filter(t => t.status === 'passed').length || 0;\n  }\n  getFailedTestsCount() {\n    return this.workflowState().testResults?.filter(t => t.status === 'failed').length || 0;\n  }\n  getSkippedTestsCount() {\n    return this.workflowState().testResults?.filter(t => t.status === 'skipped').length || 0;\n  }\n  getFailedTests() {\n    return this.workflowState().testResults?.filter(t => t.status === 'failed') || [];\n  }\n  startAIDebugWorkflow() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.canStartWorkflow()) return;\n      try {\n        // Initialize workflow state\n        _this.updateWorkflowState({\n          phase: 'collecting-context',\n          progress: 10,\n          message: 'Starting AI Test Debug workflow...'\n        });\n        // Send request to backend to run the real AI Test Debug workflow\n        _this.vscode.postMessage('runFullWorkflow', {\n          fileSelection: _this.fileSelection,\n          testConfiguration: _this.testConfiguration\n        });\n      } catch (error) {\n        _this.updateWorkflowState({\n          phase: 'error',\n          progress: 0,\n          message: 'Error occurred during workflow',\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n    })();\n  }\n  resetWorkflow() {\n    this.workflowState.set({\n      phase: 'idle',\n      progress: 0,\n      message: 'Ready to start AI debug workflow'\n    });\n  }\n  openContextFile() {\n    // Send message to backend to open the context file in VSCode editor\n    this.vscode.postMessage('openContextFile', {});\n  }\n  openCopilotAnalysisFile() {\n    // Send message to backend to open the Copilot analysis file in VSCode editor\n    this.vscode.postMessage('openCopilotAnalysisFile', {});\n  }\n  openGitDiffFile() {\n    // Send message to backend to open the git diff file in VSCode editor\n    this.vscode.postMessage('openGitDiffFile', {});\n  }\n  openTestResultsFile() {\n    // Send message to backend to open the test results file in VSCode editor\n    this.vscode.postMessage('openTestResultsFile', {});\n  }\n  copyContextFilePath() {\n    // Send message to backend to copy the context file path to clipboard\n    this.vscode.postMessage('copyContextFilePath', {});\n  }\n  copyGitDiffFilePath() {\n    // Send message to backend to copy the git diff file path to clipboard\n    this.vscode.postMessage('copyGitDiffFilePath', {});\n  }\n  copyTestResultsFilePath() {\n    // Send message to backend to copy the test results file path to clipboard\n    this.vscode.postMessage('copyTestResultsFilePath', {});\n  }\n  copyCopilotAnalysisFilePath() {\n    // Send message to backend to copy the Copilot analysis file path to clipboard\n    this.vscode.postMessage('copyCopilotAnalysisFilePath', {});\n  }\n  handleGitDiffComplete(data) {\n    // Update workflow state with git diff file path\n    this.updateWorkflowState({\n      gitDiffFilePath: data.filePath\n    });\n  }\n  handleTestResultsComplete(data) {\n    // Update workflow state with test results file path\n    this.updateWorkflowState({\n      testResultsFilePath: data.filePath\n    });\n  }\n  updateWorkflowState(updates) {\n    this.workflowState.update(current => ({\n      ...current,\n      ...updates\n    }));\n  }\n  checkCopilotAvailability() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Request real Copilot availability check from backend\n        _this2.vscode.postMessage('checkCopilotAvailability', {});\n        // Also get diagnostic information for better troubleshooting\n        _this2.vscode.postMessage('runCopilotDiagnostics', {});\n        // Add a small delay then request diagnostics again to ensure we get the latest status\n        setTimeout(() => {\n          _this2.vscode.postMessage('runCopilotDiagnostics', {});\n        }, 1000);\n      } catch (error) {\n        console.error('Failed to check Copilot availability:', error);\n        _this2.copilotAvailable.set(false);\n      }\n    })();\n  }\n};\n__decorate([Input()], AIDebugComponent.prototype, \"fileSelection\", void 0);\n__decorate([Input()], AIDebugComponent.prototype, \"testConfiguration\", void 0);\n__decorate([Output()], AIDebugComponent.prototype, \"workflowComplete\", void 0);\nAIDebugComponent = __decorate([Component({\n  selector: 'app-ai-debug',\n  standalone: true,\n  imports: [CommonModule, FormsModule, CopilotDiagnosticsComponent],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"bg-gray-900 p-6 rounded-lg border border-gray-700 font-mono text-sm\" style=\"background: #1a1a1a; border-color: #333;\">\n      <!-- Terminal Header -->\n      <div class=\"border-b border-gray-700 pb-4 mb-6\">\n        <div class=\"flex items-center gap-2 mb-2\">\n          <span style=\"color: #A8A8FF;\">$</span>\n          <span style=\"color: #4ECDC4;\" class=\"font-bold\">ai-debug</span>\n          <span style=\"color: #FFD93D;\">--mode</span>\n          <span style=\"color: #6BCF7F;\">interactive</span>\n          <span style=\"color: #FF8C42;\">{{ getStatusSummary() }}</span>\n        </div>\n        <div style=\"color: #666;\" class=\"text-xs\">\n          GitHub Copilot AI Test Debug Session | Status: {{ workflowState().phase }}\n        </div>\n      </div>\n\n      <!-- Terminal Prerequisites Check -->\n      <div class=\"mb-6\">\n        <div class=\"mb-3 flex items-center gap-2\">\n          <span style=\"color: #A8A8FF;\">></span>\n          <span style=\"color: #4ECDC4;\">Checking prerequisites...</span>\n        </div>\n        <div class=\"space-y-2 pl-4\">\n          <div class=\"flex items-center gap-3\">\n            <span [ngStyle]=\"{'color': fileSelection ? '#6BCF7F' : '#FF4B6D'}\">\n              {{ fileSelection ? '[✓]' : '[✗]' }}\n            </span>\n            <span style=\"color: #fff;\">file_selection</span>\n            @if (fileSelection) {\n              <span style=\"color: #666;\">→</span>\n              <span style=\"color: #FFD93D;\">{{ fileSelection.mode }}</span>\n              <span style=\"color: #4ECDC4;\">{{ getFileSelectionSummary() }}</span>\n            } @else {\n              <span style=\"color: #FF8C42;\">REQUIRED</span>\n            }\n          </div>\n          \n          <div class=\"flex items-center gap-3\">\n            <span [ngStyle]=\"{'color': testConfiguration ? '#6BCF7F' : '#FF4B6D'}\">\n              {{ testConfiguration ? '[✓]' : '[✗]' }}\n            </span>\n            <span style=\"color: #fff;\">test_config</span>\n            @if (testConfiguration) {\n              <span style=\"color: #666;\">→</span>\n              <span style=\"color: #FFD93D;\">{{ testConfiguration.mode }}</span>\n              <span style=\"color: #4ECDC4;\">{{ getTestConfigSummary() }}</span>\n            } @else {\n              <span style=\"color: #FF8C42;\">REQUIRED</span>\n            }\n          </div>\n          \n          <div class=\"flex items-center gap-3\">\n            <span [ngStyle]=\"{'color': copilotAvailable() ? '#6BCF7F' : '#FFD93D'}\">\n              {{ copilotAvailable() ? '[✓]' : '[!]' }}\n            </span>\n            <span style=\"color: #fff;\">github_copilot</span>\n            <span style=\"color: #666;\">→</span>\n            <span [ngStyle]=\"{'color': copilotAvailable() ? '#6BCF7F' : '#FF8C42'}\">\n              {{ copilotAvailable() ? 'AVAILABLE' : 'FALLBACK_MODE' }}\n            </span>\n            @if (!copilotAvailable()) {\n              <button \n                (click)=\"showDiagnostics = !showDiagnostics\"\n                class=\"ml-2 px-2 py-1 text-xs rounded hover:opacity-80\"\n                style=\"background: #333; color: #FFD93D; border: 1px solid #666;\">\n                {{ showDiagnostics ? 'hide' : 'diagnose' }}\n              </button>\n            }\n          </div>\n        </div>\n      </div>\n\n      <!-- Copilot Diagnostics Section -->\n      @if (showDiagnostics && !copilotAvailable()) {\n        <div class=\"mb-6\">\n          <app-copilot-diagnostics></app-copilot-diagnostics>\n        </div>\n      }\n\n      <!-- Terminal Execute Command -->\n      @if (workflowState().phase === 'idle') {\n        <div class=\"mb-6\">\n          <div class=\"mb-3 flex items-center gap-2\">\n            <span style=\"color: #A8A8FF;\">></span>\n            <span style=\"color: #4ECDC4;\">Ready to execute workflow</span>\n          </div>\n          <div class=\"pl-4\">\n            <button \n              (click)=\"startAIDebugWorkflow()\"\n              [disabled]=\"!canStartWorkflow()\"\n              class=\"px-6 py-3 rounded font-mono font-bold hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200\"\n              [ngStyle]=\"canStartWorkflow() ? \n                {'background': '#6BCF7F', 'color': '#000', 'border': '2px solid #6BCF7F'} : \n                {'background': '#333', 'color': '#666', 'border': '2px solid #555'}\">\n              <span class=\"flex items-center gap-3\">\n                <span style=\"color: inherit;\">▶</span>\n                <span>EXECUTE ai-debug --full-workflow</span>\n              </span>\n            </button>\n            \n            @if (!canStartWorkflow()) {\n              <div class=\"mt-3 pl-6\" style=\"color: #FF8C42;\">\n                <span>ERROR: Missing required parameters</span>\n                <div style=\"color: #666;\" class=\"text-xs mt-1\">\n                  Configure file selection and test settings above\n                </div>\n              </div>\n            }\n          </div>\n        </div>\n      }\n\n      <!-- Terminal Workflow Output -->\n      @if (workflowState().phase !== 'idle') {\n        <div class=\"mb-6\">\n          <!-- Terminal Progress Header -->\n          <div class=\"mb-4 flex items-center gap-2\">\n            <span style=\"color: #A8A8FF;\">></span>\n            <span style=\"color: #4ECDC4;\">{{ getPhaseDisplayName() }}</span>\n            <span style=\"color: #666;\">|</span>\n            <span style=\"color: #FFD93D;\">{{ workflowState().progress }}%</span>\n            @if (workflowState().phase === 'complete') {\n              <span style=\"color: #6BCF7F;\">DONE</span>\n            } @else if (workflowState().phase === 'error') {\n              <span style=\"color: #FF4B6D;\">ERROR</span>\n            } @else {\n              <span style=\"color: #FF8C42;\">RUNNING</span>\n            }\n          </div>\n\n          <!-- Terminal Progress Bar -->\n          <div class=\"mb-4 pl-4\">\n            <div class=\"flex items-center gap-2 mb-2\">\n              <span style=\"color: #666;\">[</span>\n              @for (i of [].constructor(Math.floor(workflowState().progress / 5)); track $index) {\n                <span style=\"color: #6BCF7F;\">█</span>\n              }\n              @for (i of [].constructor(20 - Math.floor(workflowState().progress / 5)); track $index) {\n                <span style=\"color: #333;\">█</span>\n              }\n              <span style=\"color: #666;\">]</span>\n              <span style=\"color: #4ECDC4;\" class=\"text-xs ml-2\">{{ workflowState().message }}</span>\n            </div>\n          </div>\n\n          <!-- Terminal Pipeline Status -->\n          <div class=\"pl-4 space-y-1\">\n            @for (phase of workflowPhases; track phase.key) {\n              <div class=\"flex items-center gap-3\" [ngStyle]=\"getTerminalPhaseStyle(phase.key)\">\n                <span>{{ getTerminalPhaseStatus(phase.key) }}</span>\n                <span>{{ phase.label }}_pipeline</span>\n                <span style=\"color: #666;\">→</span>\n                <span>{{ getTerminalPhaseLabel(phase.key) }}</span>\n              </div>\n            }\n          </div>\n\n          <!-- Terminal File Access -->\n          @if (workflowState().gitDiffFilePath || workflowState().testResultsFilePath) {\n            <div class=\"mt-6 border-t border-gray-700 pt-4\">\n              <div class=\"mb-3 flex items-center gap-2\">\n                <span style=\"color: #A8A8FF;\">></span>\n                <span style=\"color: #4ECDC4;\">Generated artifacts available</span>\n              </div>\n              <div class=\"pl-4 space-y-2\">\n                @if (workflowState().gitDiffFilePath) {\n                  <div class=\"flex items-center gap-3\">\n                    <span style=\"color: #6BCF7F;\">[FILE]</span>\n                    <button \n                      (click)=\"openGitDiffFile()\"\n                      class=\"font-mono hover:opacity-80\"\n                      style=\"color: #FFD93D; text-decoration: underline;\">\n                      git_diff.txt\n                    </button>\n                    <button \n                      (click)=\"copyGitDiffFilePath()\"\n                      class=\"px-2 py-1 rounded text-xs hover:opacity-80\"\n                      style=\"background: #333; color: #4ECDC4; border: 1px solid #666;\"\n                      title=\"Copy file path\">\n                      copy_path\n                    </button>\n                  </div>\n                }\n                @if (workflowState().testResultsFilePath) {\n                  <div class=\"flex items-center gap-3\">\n                    <span style=\"color: #6BCF7F;\">[FILE]</span>\n                    <button \n                      (click)=\"openTestResultsFile()\"\n                      class=\"font-mono hover:opacity-80\"\n                      style=\"color: #FFD93D; text-decoration: underline;\">\n                      test_results.txt\n                    </button>\n                    <button \n                      (click)=\"copyTestResultsFilePath()\"\n                      class=\"px-2 py-1 rounded text-xs hover:opacity-80\"\n                      style=\"background: #333; color: #4ECDC4; border: 1px solid #666;\"\n                      title=\"Copy file path\">\n                      copy_path\n                    </button>\n                  </div>\n                }\n              </div>\n            </div>\n          }\n        </div>\n      }\n\n      <!-- Test Results -->\n      @if (workflowState().testResults && workflowState().testResults!.length > 0) {\n        <div class=\"mb-6\">\n          <h4 class=\"text-vscode-foreground font-medium mb-3\">Test Results</h4>\n          \n          <!-- Test Summary -->\n          <div class=\"grid grid-cols-3 gap-4 mb-4\">\n            <div class=\"bg-green-50 border border-green-200 rounded p-3 text-center\">\n              <div class=\"text-green-600 text-xl font-bold\">{{ getPassedTestsCount() }}</div>\n              <div class=\"text-green-700 text-sm\">Passed</div>\n            </div>\n            <div class=\"bg-red-50 border border-red-200 rounded p-3 text-center\">\n              <div class=\"text-red-600 text-xl font-bold\">{{ getFailedTestsCount() }}</div>\n              <div class=\"text-red-700 text-sm\">Failed</div>\n            </div>\n            <div class=\"bg-yellow-50 border border-yellow-200 rounded p-3 text-center\">\n              <div class=\"text-yellow-600 text-xl font-bold\">{{ getSkippedTestsCount() }}</div>\n              <div class=\"text-yellow-700 text-sm\">Skipped</div>\n            </div>\n          </div>\n\n          <!-- Failed Tests Details -->\n          @if (getFailedTests().length > 0) {\n            <div class=\"space-y-2 max-h-64 overflow-y-auto border border-vscode-panel-border rounded p-2\">\n              @for (test of getFailedTests(); track test.name) {\n                <div class=\"bg-red-50 border border-red-200 rounded p-3\">\n                  <div class=\"flex items-start justify-between\">\n                    <div class=\"flex-1\">\n                      <div class=\"font-medium text-red-800\">{{ test.name }}</div>\n                      <div class=\"text-red-600 text-sm font-mono\">{{ test.file }}</div>\n                      @if (test.error) {\n                        <div class=\"text-red-700 text-sm mt-2\">{{ test.error }}</div>\n                      }\n                    </div>\n                    <div class=\"text-red-500 text-xs\">{{ test.duration }}ms</div>\n                  </div>\n                </div>\n              }\n            </div>\n          }\n        </div>\n      }\n\n      <!-- AI Analysis Results -->\n      @if (workflowState().aiAnalysis) {\n        <div class=\"mb-6\">\n          <h4 class=\"text-vscode-foreground font-medium mb-3\">AI Analysis</h4>\n          \n          @if (workflowState().aiAnalysis!.type === 'failure-analysis') {\n            <!-- Failure Analysis -->\n            <div class=\"space-y-4\">\n              @if (workflowState().aiAnalysis!.rootCause) {\n                <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-red-400 p-4 rounded\">\n                  <h5 class=\"text-vscode-foreground font-medium mb-2\">🔍 Root Cause Analysis</h5>\n                  <p class=\"text-vscode-textBlockQuote-foreground text-sm\">\n                    {{ workflowState().aiAnalysis!.rootCause }}\n                  </p>\n                </div>\n              }\n\n              @if (workflowState().aiAnalysis!.suggestedFixes && workflowState().aiAnalysis!.suggestedFixes!.length > 0) {\n                <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-blue-400 p-4 rounded\">\n                  <h5 class=\"text-vscode-foreground font-medium mb-2\">🔧 Suggested Fixes</h5>\n                  <ul class=\"space-y-2\">\n                    @for (fix of workflowState().aiAnalysis!.suggestedFixes!; track fix) {\n                      <li class=\"text-vscode-textBlockQuote-foreground text-sm flex items-start gap-2\">\n                        <span class=\"text-blue-500 mt-1\">•</span>\n                        <span>{{ fix }}</span>\n                      </li>\n                    }\n                  </ul>\n                </div>\n              }\n            </div>\n          } @else {\n            <!-- Success Analysis -->\n            <div class=\"space-y-4\">\n              @if (workflowState().aiAnalysis!.falsePositiveWarnings && workflowState().aiAnalysis!.falsePositiveWarnings!.length > 0) {\n                <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-yellow-400 p-4 rounded\">\n                  <h5 class=\"text-vscode-foreground font-medium mb-2\">⚠️ Potential False Positives</h5>\n                  <ul class=\"space-y-2\">\n                    @for (warning of workflowState().aiAnalysis!.falsePositiveWarnings!; track warning) {\n                      <li class=\"text-vscode-textBlockQuote-foreground text-sm flex items-start gap-2\">\n                        <span class=\"text-yellow-500 mt-1\">•</span>\n                        <span>{{ warning }}</span>\n                      </li>\n                    }\n                  </ul>\n                </div>\n              }\n\n              @if (workflowState().aiAnalysis!.codeImprovements && workflowState().aiAnalysis!.codeImprovements!.length > 0) {\n                <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-green-400 p-4 rounded\">\n                  <h5 class=\"text-vscode-foreground font-medium mb-2\">💡 Code Improvements</h5>\n                  <ul class=\"space-y-2\">\n                    @for (improvement of workflowState().aiAnalysis!.codeImprovements!; track improvement) {\n                      <li class=\"text-vscode-textBlockQuote-foreground text-sm flex items-start gap-2\">\n                        <span class=\"text-green-500 mt-1\">•</span>\n                        <span>{{ improvement }}</span>\n                      </li>\n                    }\n                  </ul>\n                </div>\n              }\n            </div>\n          }\n\n          <!-- Test Suggestions (always shown) -->\n          @if (workflowState().aiAnalysis!.newTestSuggestions && workflowState().aiAnalysis!.newTestSuggestions!.length > 0) {\n            <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-purple-400 p-4 rounded\">\n              <h5 class=\"text-vscode-foreground font-medium mb-2\">🧪 New Test Suggestions</h5>\n              <ul class=\"space-y-2\">\n                @for (suggestion of workflowState().aiAnalysis!.newTestSuggestions!; track suggestion) {\n                  <li class=\"text-vscode-textBlockQuote-foreground text-sm flex items-start gap-2\">\n                    <span class=\"text-purple-500 mt-1\">•</span>\n                    <span>{{ suggestion }}</span>\n                  </li>\n                }\n              </ul>\n            </div>\n          }\n        </div>\n      }\n\n      <!-- Copilot Analysis Results -->\n      @if (workflowState().copilotAnalysis) {\n        <div class=\"mb-6\">\n          <h4 class=\"text-vscode-foreground font-medium mb-3\">🤖 GitHub Copilot Analysis</h4>\n          \n          @if (workflowState().copilotAnalysis!.type === 'failure-analysis') {\n            <!-- Test Failure Analysis -->\n            <div class=\"space-y-4\">\n              @if (workflowState().copilotAnalysis!.rootCause) {\n                <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-red-400 p-4 rounded\">\n                  <h5 class=\"text-vscode-foreground font-medium mb-2\">🔍 Root Cause</h5>\n                  <p class=\"text-vscode-textBlockQuote-foreground text-sm\">\n                    {{ workflowState().copilotAnalysis!.rootCause }}\n                  </p>\n                </div>\n              }\n\n              @if (workflowState().copilotAnalysis!.specificFixes && workflowState().copilotAnalysis!.specificFixes!.length > 0) {\n                <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-blue-400 p-4 rounded\">\n                  <h5 class=\"text-vscode-foreground font-medium mb-2\">🛠️ Specific Fixes</h5>\n                  <div class=\"space-y-3\">\n                    @for (fix of workflowState().copilotAnalysis!.specificFixes!; track fix.file + fix.lineNumber) {\n                      <div class=\"border-l-2 border-blue-300 pl-3\">\n                        <div class=\"text-vscode-foreground text-sm font-medium\">{{ fix.file }}:{{ fix.lineNumber }}</div>\n                        <div class=\"text-vscode-textBlockQuote-foreground text-xs mt-1\">{{ fix.explanation }}</div>\n                      </div>\n                    }\n                  </div>\n                </div>\n              }\n\n              @if (workflowState().copilotAnalysis!.preventionStrategies && workflowState().copilotAnalysis!.preventionStrategies!.length > 0) {\n                <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-yellow-400 p-4 rounded\">\n                  <h5 class=\"text-vscode-foreground font-medium mb-2\">🚀 Prevention Strategies</h5>\n                  <ul class=\"space-y-1\">\n                    @for (strategy of workflowState().copilotAnalysis!.preventionStrategies!; track strategy) {\n                      <li class=\"text-vscode-textBlockQuote-foreground text-sm flex items-start gap-2\">\n                        <span class=\"text-yellow-500 mt-1\">•</span>\n                        <span>{{ strategy }}</span>\n                      </li>\n                    }\n                  </ul>\n                </div>\n              }\n            </div>\n          } @else {\n            <!-- Success Analysis -->\n            <div class=\"space-y-4\">\n              @if (workflowState().copilotAnalysis!.suspiciousTests && workflowState().copilotAnalysis!.suspiciousTests!.length > 0) {\n                <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-yellow-400 p-4 rounded\">\n                  <h5 class=\"text-vscode-foreground font-medium mb-2\">⚠️ Suspicious Tests</h5>\n                  <div class=\"space-y-3\">\n                    @for (test of workflowState().copilotAnalysis!.suspiciousTests!; track test.file + test.testName) {\n                      <div class=\"border-l-2 border-yellow-300 pl-3\">\n                        <div class=\"text-vscode-foreground text-sm font-medium\">{{ test.file }}</div>\n                        <div class=\"text-vscode-textBlockQuote-foreground text-xs\">{{ test.testName }}</div>\n                        <div class=\"text-vscode-textBlockQuote-foreground text-xs mt-1\">\n                          <span class=\"font-medium\">Issue:</span> {{ test.issue }}\n                        </div>\n                        <div class=\"text-vscode-textBlockQuote-foreground text-xs\">\n                          <span class=\"font-medium\">Suggestion:</span> {{ test.suggestion }}\n                        </div>\n                      </div>\n                    }\n                  </div>\n                </div>\n              }\n            </div>\n          }\n\n          @if (workflowState().copilotAnalysis!.recommendations && workflowState().copilotAnalysis!.recommendations!.length > 0) {\n            <div class=\"bg-vscode-textBlockQuote-background border-l-4 border-purple-400 p-4 rounded mt-4\">\n              <h5 class=\"text-vscode-foreground font-medium mb-2\">📋 Recommendations</h5>\n              <ul class=\"space-y-1\">\n                @for (rec of workflowState().copilotAnalysis!.recommendations!; track rec) {\n                  <li class=\"text-vscode-textBlockQuote-foreground text-sm flex items-start gap-2\">\n                    <span class=\"text-purple-500 mt-1\">•</span>\n                    <span>{{ rec }}</span>\n                  </li>\n                }\n              </ul>\n            </div>\n          }\n\n          @if (workflowState().copilotAnalysis!.analysisFilePath) {\n            <div class=\"mt-4 text-center\">\n              <button \n                (click)=\"openCopilotAnalysisFile()\"\n                class=\"px-4 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700\">\n                📄 View Full Analysis Report\n              </button>\n            </div>\n          }\n        </div>\n      }\n\n      <!-- Error State -->\n      @if (workflowState().phase === 'error') {\n        <div class=\"mb-6\">\n          <div class=\"bg-red-50 border border-red-200 rounded p-4\">\n            <h4 class=\"text-red-800 font-medium mb-2\">❌ Error Occurred</h4>\n            <p class=\"text-red-700 text-sm\">\n              {{ workflowState().error || 'An unexpected error occurred during the AI debug workflow.' }}\n            </p>\n            <button \n              (click)=\"resetWorkflow()\"\n              class=\"mt-3 px-4 py-2 bg-red-600 text-white rounded text-sm hover:bg-red-700\">\n              Try Again\n            </button>\n          </div>\n        </div>\n      }\n\n      <!-- Terminal Success State -->\n      @if (workflowState().phase === 'complete') {\n        <div class=\"mb-6 border-t border-gray-700 pt-6\">\n          <div class=\"mb-4 flex items-center gap-2\">\n            <span style=\"color: #A8A8FF;\">></span>\n            <span style=\"color: #6BCF7F;\">Workflow completed successfully</span>\n            <span style=\"color: #666;\">|</span>\n            <span style=\"color: #FFD93D;\">exit_code=0</span>\n          </div>\n          <div class=\"pl-4 mb-6\">\n            <div style=\"color: #4ECDC4;\" class=\"mb-2\">Generated outputs ready for analysis:</div>\n            <div class=\"space-y-3\">\n              <!-- Terminal File Listing -->\n              <div class=\"space-y-2\">\n                <div class=\"flex items-center gap-3\">\n                  <span style=\"color: #6BCF7F;\">[MAIN]</span>\n                  <button \n                    (click)=\"openContextFile()\"\n                    class=\"font-mono hover:opacity-80\"\n                    style=\"color: #FFD93D; text-decoration: underline;\">\n                    ai_debug_context.txt\n                  </button>\n                  <button \n                    (click)=\"copyContextFilePath()\"\n                    class=\"px-2 py-1 rounded text-xs hover:opacity-80\"\n                    style=\"background: #333; color: #4ECDC4; border: 1px solid #666;\"\n                    title=\"Copy path\">\n                    cp\n                  </button>\n                </div>\n                \n                @if (workflowState().copilotAnalysis) {\n                  <div class=\"flex items-center gap-3\">\n                    <span style=\"color: #A8A8FF;\">[AI]</span>\n                    <button \n                      (click)=\"openCopilotAnalysisFile()\"\n                      class=\"font-mono hover:opacity-80\"\n                      style=\"color: #FFD93D; text-decoration: underline;\">\n                      copilot_analysis.md\n                    </button>\n                    <button \n                      (click)=\"copyCopilotAnalysisFilePath()\"\n                      class=\"px-2 py-1 rounded text-xs hover:opacity-80\"\n                      style=\"background: #333; color: #4ECDC4; border: 1px solid #666;\"\n                      title=\"Copy path\">\n                      cp\n                    </button>\n                  </div>\n                }\n              </div>\n              \n              <!-- Terminal Restart Command -->\n              <div class=\"pt-4 border-t\" style=\"border-color: #333;\">\n                <button \n                  (click)=\"resetWorkflow()\"\n                  class=\"px-4 py-2 font-mono font-bold rounded hover:opacity-90\"\n                  style=\"background: #333; color: #FF8C42; border: 2px solid #666;\">\n                  <span>⟲ RESTART --new-session</span>\n                </button>\n              </div>\n            </div>\n              \n              <!-- Terminal Component Files -->\n              @if (workflowState().gitDiffFilePath || workflowState().testResultsFilePath) {\n                <div class=\"border-t pt-3\" style=\"border-color: #333;\">\n                  <div style=\"color: #666;\" class=\"text-xs mb-3\">Component artifacts:</div>\n                  <div class=\"space-y-2\">\n                    @if (workflowState().gitDiffFilePath) {\n                      <div class=\"flex items-center gap-3\">\n                        <span style=\"color: #4ECDC4;\">[DIFF]</span>\n                        <button \n                          (click)=\"openGitDiffFile()\"\n                          class=\"font-mono hover:opacity-80 text-xs\"\n                          style=\"color: #FFD93D; text-decoration: underline;\">\n                          git_diff.txt\n                        </button>\n                        <button \n                          (click)=\"copyGitDiffFilePath()\"\n                          class=\"px-2 py-1 rounded text-xs hover:opacity-80\"\n                          style=\"background: #333; color: #4ECDC4; border: 1px solid #666;\"\n                          title=\"Copy path\">\n                          cp\n                        </button>\n                      </div>\n                    }\n                    @if (workflowState().testResultsFilePath) {\n                      <div class=\"flex items-center gap-3\">\n                        <span style=\"color: #FF8C42;\">[TEST]</span>\n                        <button \n                          (click)=\"openTestResultsFile()\"\n                          class=\"font-mono hover:opacity-80 text-xs\"\n                          style=\"color: #FFD93D; text-decoration: underline;\">\n                          test_results.txt\n                        </button>\n                        <button \n                          (click)=\"copyTestResultsFilePath()\"\n                          class=\"px-2 py-1 rounded text-xs hover:opacity-80\"\n                          style=\"background: #333; color: #4ECDC4; border: 1px solid #666;\"\n                          title=\"Copy path\">\n                          cp\n                        </button>\n                      </div>\n                    }\n                  </div>\n                </div>\n              }\n            </div>\n          </div>\n        </div>\n      }\n    </div>\n  `,\n  styles: []\n})], AIDebugComponent);\nexport { AIDebugComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}