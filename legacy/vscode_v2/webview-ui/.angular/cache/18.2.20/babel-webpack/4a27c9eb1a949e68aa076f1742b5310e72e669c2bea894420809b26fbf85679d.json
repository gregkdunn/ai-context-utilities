{"ast":null,"code":"import _asyncToGenerator from \"/Users/gregdunn/src/test/ai_debug_context/vscode_2/webview-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, signal, ChangeDetectionStrategy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nlet PRGeneratorComponent = class PRGeneratorComponent {\n  constructor() {\n    this.fileSelection = null;\n    this.testResults = null;\n    this.aiAnalysis = null;\n    this.descriptionGenerated = new EventEmitter();\n    this.selectedTemplate = signal('standard');\n    this.jiraTickets = signal([]);\n    this.detectedFeatureFlags = signal([]);\n    this.isGenerating = signal(false);\n    this.generatedDescription = signal('');\n    this.jiraTicketInput = '';\n    this.availableTemplates = [{\n      name: 'standard',\n      displayName: 'Standard PR',\n      description: 'General purpose template',\n      template: 'Standard PR template'\n    }, {\n      name: 'feature',\n      displayName: 'Feature PR',\n      description: 'For new features',\n      template: 'Feature PR template'\n    }, {\n      name: 'bugfix',\n      displayName: 'Bug Fix PR',\n      description: 'For bug fixes',\n      template: 'Bug fix PR template'\n    }, {\n      name: 'hotfix',\n      displayName: 'Hotfix PR',\n      description: 'For urgent fixes',\n      template: 'Hotfix PR template'\n    }];\n  }\n  ngOnInit() {\n    this.detectFeatureFlags();\n  }\n  canGenerate() {\n    return !!this.fileSelection;\n  }\n  getGenerationStatus() {\n    if (this.isGenerating()) return 'Generating...';\n    if (this.generatedDescription()) return 'Generated';\n    return 'Ready to generate';\n  }\n  selectTemplate(templateName) {\n    this.selectedTemplate.set(templateName);\n  }\n  getTemplateButtonClass(templateName) {\n    const baseClass = 'transition-all duration-200';\n    if (this.selectedTemplate() === templateName) {\n      return `${baseClass} bg-vscode-button-background text-vscode-button-foreground border-vscode-button-background`;\n    }\n    return `${baseClass} bg-vscode-button-secondaryBackground text-vscode-button-secondaryForeground border-vscode-panel-border hover:bg-vscode-list-hoverBackground`;\n  }\n  addJiraTicket() {\n    const input = this.jiraTicketInput.trim();\n    if (!input) return;\n    const tickets = input.split(',').map(t => t.trim().toUpperCase()).filter(t => t);\n    const validTickets = tickets.filter(t => /^[A-Z]+-\\d+$/.test(t));\n    if (validTickets.length > 0) {\n      const currentTickets = this.jiraTickets();\n      const newTickets = validTickets.filter(t => !currentTickets.includes(t));\n      this.jiraTickets.set([...currentTickets, ...newTickets]);\n    }\n    this.jiraTicketInput = '';\n  }\n  removeJiraTicket(ticket) {\n    this.jiraTickets.update(tickets => tickets.filter(t => t !== ticket));\n  }\n  generatePRDescription() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.canGenerate() || _this.isGenerating()) return;\n      _this.isGenerating.set(true);\n      try {\n        // Mock generation - would use Copilot API\n        yield _this.simulateDelay(2000);\n        const description = _this.buildMockDescription();\n        _this.generatedDescription.set(description);\n        _this.descriptionGenerated.emit(description);\n      } catch (error) {\n        console.error('Failed to generate description:', error);\n      } finally {\n        _this.isGenerating.set(false);\n      }\n    })();\n  }\n  copyToClipboard() {\n    const description = this.generatedDescription();\n    if (description) {\n      navigator.clipboard.writeText(description);\n    }\n  }\n  detectFeatureFlags() {\n    if (!this.fileSelection?.diff) {\n      this.detectedFeatureFlags.set([]);\n      return;\n    }\n    // Mock feature flag detection\n    this.detectedFeatureFlags.set(['USER_DASHBOARD_V2', 'ENHANCED_AUTH']);\n  }\n  buildMockDescription() {\n    const template = this.selectedTemplate();\n    const jiraSection = this.jiraTickets().length > 0 ? `\\n\\n## Related Issues\\n${this.jiraTickets().map(t => `- ${t}`).join('\\n')}` : '';\n    const flagSection = this.detectedFeatureFlags().length > 0 ? `\\n\\n## Feature Flags\\n${this.detectedFeatureFlags().map(f => `- \\`${f}\\``).join('\\n')}` : '';\n    return `## Summary\nThis PR implements ${template} changes based on the selected file modifications.\n\n## Changes Made\n- Updated components and services\n- Enhanced test coverage\n- Improved error handling\n\n## Testing\n- All automated tests passing\n- Manual testing completed${jiraSection}${flagSection}\n\n## Deployment Notes\nStandard deployment process applies.`;\n  }\n  simulateDelay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n};\n__decorate([Input()], PRGeneratorComponent.prototype, \"fileSelection\", void 0);\n__decorate([Input()], PRGeneratorComponent.prototype, \"testResults\", void 0);\n__decorate([Input()], PRGeneratorComponent.prototype, \"aiAnalysis\", void 0);\n__decorate([Output()], PRGeneratorComponent.prototype, \"descriptionGenerated\", void 0);\nPRGeneratorComponent = __decorate([Component({\n  selector: 'app-pr-generator',\n  imports: [CommonModule, FormsModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"bg-vscode-editor-background p-4 rounded-lg border border-vscode-panel-border\">\n      <div class=\"flex items-center justify-between mb-6\">\n        <h3 class=\"text-vscode-foreground text-lg font-semibold flex items-center gap-2\">\n          <span class=\"text-2xl\">üìã</span>\n          PR Description Generator\n        </h3>\n        <div class=\"text-vscode-descriptionForeground text-sm\">\n          {{ getGenerationStatus() }}\n        </div>\n      </div>\n\n      <!-- Template Selection -->\n      <div class=\"mb-6\">\n        <label class=\"text-vscode-foreground text-sm font-medium mb-3 block\">\n          PR Template:\n        </label>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          @for (template of availableTemplates; track template.name) {\n            <button\n              (click)=\"selectTemplate(template.name)\"\n              [class]=\"getTemplateButtonClass(template.name)\"\n              class=\"p-3 rounded border transition-all duration-200 text-left\">\n              <div class=\"font-medium mb-1\">{{ template.displayName }}</div>\n              <div class=\"text-xs opacity-75\">{{ template.description }}</div>\n            </button>\n          }\n        </div>\n      </div>\n\n      <!-- Jira Integration -->\n      <div class=\"mb-6\">\n        <label class=\"text-vscode-foreground text-sm font-medium mb-3 block\">\n          Jira Tickets:\n        </label>\n        <div class=\"flex gap-2 mb-3\">\n          <input\n            [(ngModel)]=\"jiraTicketInput\"\n            (keyup.enter)=\"addJiraTicket()\"\n            placeholder=\"PROJ-123, FEATURE-456\"\n            class=\"flex-1 px-3 py-2 bg-vscode-input-background text-vscode-input-foreground border border-vscode-input-border rounded focus:border-vscode-inputOption-activeBorder\">\n          <button\n            (click)=\"addJiraTicket()\"\n            [disabled]=\"!jiraTicketInput.trim()\"\n            class=\"px-4 py-2 bg-vscode-button-background text-vscode-button-foreground rounded hover:bg-vscode-button-hoverBackground disabled:opacity-50\">\n            Add\n          </button>\n        </div>\n        \n        @if (jiraTickets().length > 0) {\n          <div class=\"flex flex-wrap gap-2\">\n            @for (ticket of jiraTickets(); track ticket) {\n              <div class=\"inline-flex items-center gap-2 px-3 py-1 bg-vscode-badge-background text-vscode-badge-foreground text-sm rounded border\">\n                <span>{{ ticket }}</span>\n                <button \n                  (click)=\"removeJiraTicket(ticket)\"\n                  class=\"text-vscode-badge-foreground hover:text-red-500 text-xs\">\n                  ‚úï\n                </button>\n              </div>\n            }\n          </div>\n        }\n      </div>\n\n      <!-- Feature Flags Detection -->\n      @if (detectedFeatureFlags().length > 0) {\n        <div class=\"mb-6\">\n          <label class=\"text-vscode-foreground text-sm font-medium mb-3 block\">\n            Detected Feature Flags:\n          </label>\n          <div class=\"bg-vscode-textBlockQuote-background border border-vscode-panel-border rounded p-3\">\n            <div class=\"flex flex-wrap gap-2\">\n              @for (flag of detectedFeatureFlags(); track flag) {\n                <span class=\"px-2 py-1 bg-vscode-textPreformat-background text-vscode-textPreformat-foreground text-xs font-mono rounded border\">\n                  {{ flag }}\n                </span>\n              }\n            </div>\n          </div>\n        </div>\n      }\n\n      <!-- Generation Controls -->\n      <div class=\"mb-6 flex gap-3\">\n        <button\n          (click)=\"generatePRDescription()\"\n          [disabled]=\"isGenerating() || !canGenerate()\"\n          class=\"flex-1 px-4 py-3 bg-vscode-button-background text-vscode-button-foreground rounded font-medium hover:bg-vscode-button-hoverBackground disabled:opacity-50 disabled:cursor-not-allowed\">\n          @if (isGenerating()) {\n            <span class=\"flex items-center justify-center gap-2\">\n              <span class=\"animate-spin\">‚è≥</span>\n              Generating...\n            </span>\n          } @else {\n            <span class=\"flex items-center justify-center gap-2\">\n              <span>ü§ñ</span>\n              Generate PR Description\n            </span>\n          }\n        </button>\n      </div>\n\n      <!-- Generated Description -->\n      @if (generatedDescription()) {\n        <div class=\"mb-6\">\n          <div class=\"flex items-center justify-between mb-3\">\n            <label class=\"text-vscode-foreground text-sm font-medium\">Generated PR Description:</label>\n            <button\n              (click)=\"copyToClipboard()\"\n              class=\"px-3 py-1 text-xs bg-vscode-button-secondaryBackground text-vscode-button-secondaryForeground rounded hover:bg-vscode-button-secondaryHoverBackground\">\n              üìã Copy\n            </button>\n          </div>\n          \n          <div class=\"bg-vscode-editor-background border border-vscode-panel-border rounded p-4\">\n            <pre class=\"text-vscode-editor-foreground text-sm whitespace-pre-wrap font-sans leading-relaxed\">{{ generatedDescription() }}</pre>\n          </div>\n        </div>\n      }\n    </div>\n  `,\n  styles: []\n})], PRGeneratorComponent);\nexport { PRGeneratorComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}