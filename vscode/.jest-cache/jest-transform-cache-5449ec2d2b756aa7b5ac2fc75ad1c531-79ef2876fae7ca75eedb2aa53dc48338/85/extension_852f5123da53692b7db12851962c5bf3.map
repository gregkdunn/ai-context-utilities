{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/extension.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { WebviewProvider } from './webview/provider';\nimport { ProjectDetector } from './utils/projectDetector';\nimport { CommandRunner } from './utils/shellRunner';\nimport { FileManager } from './utils/fileManager';\nimport { StatusTracker } from './utils/statusTracker';\nimport { CommandCoordinator } from './utils/commandCoordinator';\nimport { PluginManager } from './services/plugins/pluginManager';\nimport { PluginMarketplaceService } from './services/plugins/pluginMarketplace';\nimport { PluginDiscoveryService } from './services/plugins/pluginDiscovery';\n\n// Phase 5 Features\nimport { NxAffectedManager } from './services/nx/NxAffectedManager';\nimport { NxCommandProvider } from './services/nx/NxCommandProvider';\nimport { NxStatusBar } from './services/nx/NxStatusBar';\nimport { GitDiffManager } from './services/git/GitDiffManager';\nimport { GitCommandProvider } from './services/git/GitCommandProvider';\nimport { FlipperDetectionManager } from './services/flipper/FlipperDetectionManager';\n\nlet webviewProvider: WebviewProvider;\nlet statusTracker: StatusTracker;\nlet commandCoordinator: CommandCoordinator;\nlet pluginManager: PluginManager;\nlet pluginMarketplace: PluginMarketplaceService;\nlet pluginDiscovery: PluginDiscoveryService;\n\n// Phase 5 Features\nlet nxAffectedManager: NxAffectedManager;\nlet nxCommandProvider: NxCommandProvider;\nlet nxStatusBar: NxStatusBar;\nlet gitDiffManager: GitDiffManager;\nlet gitCommandProvider: GitCommandProvider;\nlet flipperDetectionManager: FlipperDetectionManager;\n\nexport async function activate(context: vscode.ExtensionContext) {\n    console.log('AI Debug Utilities extension is now active');\n\n    try {\n        // Get workspace path\n        const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\n        \n        // Create output channel\n        const outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');\n        \n        // Initialize core utilities with required parameters\n        const projectDetector = new ProjectDetector(workspaceRoot);\n        const commandRunner = new CommandRunner(outputChannel);\n        const fileManager = new FileManager(outputChannel);\n        \n        // Initialize status tracking and coordination\n        statusTracker = new StatusTracker();\n        commandCoordinator = new CommandCoordinator(statusTracker, context);\n\n        // Initialize plugin system\n        pluginManager = new PluginManager(context, workspaceRoot);\n        pluginMarketplace = new PluginMarketplaceService(context);\n        pluginDiscovery = new PluginDiscoveryService(context);\n\n        // Initialize Phase 5 Features\n        nxAffectedManager = new NxAffectedManager(context);\n        nxCommandProvider = new NxCommandProvider(nxAffectedManager);\n        nxStatusBar = new NxStatusBar(context, nxAffectedManager);\n        gitDiffManager = new GitDiffManager(context);\n        gitCommandProvider = new GitCommandProvider(gitDiffManager);\n        flipperDetectionManager = new FlipperDetectionManager(context);\n\n        // Check if this is an NX workspace\n        const isNxWorkspace = await projectDetector.findNxWorkspace();\n        \n        if (isNxWorkspace) {\n            // Set context for when clauses\n            vscode.commands.executeCommand('setContext', 'workspaceHasNxProject', true);\n            \n            // Initialize webview provider\n            webviewProvider = new WebviewProvider(\n                context.extensionUri, \n                projectDetector, \n                commandRunner, \n                fileManager,\n                statusTracker\n            );\n            \n            // Register webview provider\n            context.subscriptions.push(\n                vscode.window.registerWebviewViewProvider('aiDebugUtilities', webviewProvider)\n            );\n\n            // Register commands\n            registerCommands(context, webviewProvider, projectDetector, commandRunner, fileManager, statusTracker, commandCoordinator, pluginManager, pluginMarketplace);\n            \n            // Register Phase 5 commands\n            const nxCommands = nxCommandProvider.register();\n            const gitCommands = gitCommandProvider.register();\n            context.subscriptions.push(...nxCommands, ...gitCommands);\n            \n            console.log('AI Debug Utilities: NX workspace detected, extension fully activated');\n            \n            // Show welcome notification\n            const config = vscode.workspace.getConfiguration('aiDebugUtilities');\n            if (config.get('showNotifications')) {\n                vscode.window.showInformationMessage(\n                    'AI Debug Utilities activated! Open the panel to get started.',\n                    'Open Panel'\n                ).then(selection => {\n                    if (selection === 'Open Panel') {\n                        vscode.commands.executeCommand('aiDebugUtilities.openPanel');\n                    }\n                });\n            }\n        } else {\n            vscode.commands.executeCommand('setContext', 'workspaceHasNxProject', false);\n            console.log('AI Debug Utilities: No NX workspace detected, extension remains dormant');\n        }\n    } catch (error) {\n        console.error('Error activating AI Debug Utilities:', error);\n        vscode.commands.executeCommand('setContext', 'workspaceHasNxProject', false);\n    }\n}\n\nfunction registerCommands(\n    context: vscode.ExtensionContext,\n    webviewProvider: WebviewProvider,\n    projectDetector: ProjectDetector,\n    commandRunner: CommandRunner,\n    fileManager: FileManager,\n    statusTracker: StatusTracker,\n    commandCoordinator: CommandCoordinator,\n    pluginManager: PluginManager,\n    pluginMarketplace: PluginMarketplaceService\n) {\n    // Open panel command\n    const openPanelCommand = vscode.commands.registerCommand('aiDebugUtilities.openPanel', () => {\n        webviewProvider.show();\n    });\n\n    // Run AI Debug command\n    const runAiDebugCommand = vscode.commands.registerCommand('aiDebugUtilities.runAiDebug', async () => {\n        const project = await projectDetector.getCurrentProject();\n        if (project) {\n            await webviewProvider.runCommand('aiDebug', { project: project.name });\n        } else {\n            vscode.window.showWarningMessage('No NX project detected. Please select a project first.');\n        }\n    });\n\n    // Run NX Test command\n    const runNxTestCommand = vscode.commands.registerCommand('aiDebugUtilities.runNxTest', async () => {\n        const project = await projectDetector.getCurrentProject();\n        if (project) {\n            await webviewProvider.runCommand('nxTest', { project: project.name });\n        } else {\n            vscode.window.showWarningMessage('No NX project detected. Please select a project first.');\n        }\n    });\n\n    // Run Git Diff command\n    const runGitDiffCommand = vscode.commands.registerCommand('aiDebugUtilities.runGitDiff', async () => {\n        await webviewProvider.runCommand('gitDiff', {});\n    });\n\n    // Run Prepare to Push command\n    const runPrepareToPushCommand = vscode.commands.registerCommand('aiDebugUtilities.runPrepareToPush', async () => {\n        const project = await projectDetector.getCurrentProject();\n        if (project) {\n            await webviewProvider.runCommand('prepareToPush', { project: project.name });\n        } else {\n            vscode.window.showWarningMessage('No NX project detected. Please select a project first.');\n        }\n    });\n\n    // Status tracking commands\n    const showStatusCommand = vscode.commands.registerCommand('aiDebugUtilities.showStatus', () => {\n        const report = statusTracker.generateStatusReport();\n        const panel = vscode.window.createWebviewPanel(\n            'aiDebugStatus',\n            'AI Debug Status Report',\n            vscode.ViewColumn.One,\n            {}\n        );\n        panel.webview.html = `\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>Status Report</title>\n                <style>\n                    body { font-family: monospace; white-space: pre-wrap; padding: 20px; }\n                    .report { background: #1e1e1e; color: #d4d4d4; padding: 20px; border-radius: 5px; }\n                </style>\n            </head>\n            <body>\n                <div class=\"report\">${report.replace(/\\n/g, '<br>')}</div>\n            </body>\n            </html>\n        `;  \n        });\n\n    // Plugin management commands\n    const pluginManagerCommand = vscode.commands.registerCommand('aiDebugUtilities.pluginManager', async () => {\n        const plugins = pluginManager.getAll();\n        const items = plugins.map(plugin => ({\n            label: plugin.metadata.name,\n            description: plugin.metadata.description,\n            detail: `v${plugin.metadata.version} - ${plugin.metadata.author}`,\n            plugin\n        }));\n        \n        const selected = await vscode.window.showQuickPick(items, {\n            placeHolder: 'Select a plugin to manage',\n            canPickMany: false\n        });\n        \n        if (selected) {\n            const actions = [\n                { label: 'Enable/Disable', action: 'toggle' },\n                { label: 'View Details', action: 'details' },\n                { label: 'Uninstall', action: 'uninstall' }\n            ];\n            \n            const action = await vscode.window.showQuickPick(actions, {\n                placeHolder: `What would you like to do with ${selected.plugin.metadata.name}?`\n            });\n            \n            if (action) {\n                switch (action.action) {\n                    case 'toggle':\n                        if (pluginManager.isEnabled(selected.plugin.metadata.id)) {\n                            await pluginManager.disable(selected.plugin.metadata.id);\n                            vscode.window.showInformationMessage(`${selected.plugin.metadata.name} disabled`);\n                        } else {\n                            await pluginManager.enable(selected.plugin.metadata.id);\n                            vscode.window.showInformationMessage(`${selected.plugin.metadata.name} enabled`);\n                        }\n                        break;\n                    case 'details':\n                        const details = `# ${selected.plugin.metadata.name}\\n\\n` +\n                            `**Version:** ${selected.plugin.metadata.version}\\n` +\n                            `**Author:** ${selected.plugin.metadata.author}\\n` +\n                            `**Description:** ${selected.plugin.metadata.description}\\n\\n` +\n                            `**Capabilities:**\\n` +\n                            selected.plugin.metadata.capabilities.map(cap => `- ${cap.name}: ${cap.description}`).join('\\n');\n                        \n                        const doc = await vscode.workspace.openTextDocument({\n                            content: details,\n                            language: 'markdown'\n                        });\n                        await vscode.window.showTextDocument(doc);\n                        break;\n                    case 'uninstall':\n                        const confirm = await vscode.window.showWarningMessage(\n                            `Are you sure you want to uninstall ${selected.plugin.metadata.name}?`,\n                            { modal: true },\n                            'Yes', 'No'\n                        );\n                        if (confirm === 'Yes') {\n                            await pluginManager.unregister(selected.plugin.metadata.id);\n                            vscode.window.showInformationMessage(`${selected.plugin.metadata.name} uninstalled`);\n                        }\n                        break;\n                }\n            }\n        }\n    });\n\n    const pluginMarketplaceCommand = vscode.commands.registerCommand('aiDebugUtilities.pluginMarketplace', async () => {\n        const query = await vscode.window.showInputBox({\n            prompt: 'Search for plugins',\n            placeHolder: 'Enter search terms (e.g., \"git\", \"test\", \"ai\")',\n            value: ''\n        });\n        \n        if (query !== undefined) {\n            const plugins = await pluginMarketplace.searchPlugins(query || '');\n            const items = plugins.map(plugin => ({\n                label: plugin.name,\n                description: plugin.description,\n                detail: `v${plugin.version} - ${plugin.author} (${plugin.downloads} downloads, ${plugin.rating}/5 stars)`,\n                plugin\n            }));\n            \n            const selected = await vscode.window.showQuickPick(items, {\n                placeHolder: 'Select a plugin to install',\n                canPickMany: false\n            });\n            \n            if (selected) {\n                const actions = [\n                    { label: 'Install', action: 'install' },\n                    { label: 'View Details', action: 'details' }\n                ];\n                \n                const action = await vscode.window.showQuickPick(actions, {\n                    placeHolder: `What would you like to do with ${selected.plugin.name}?`\n                });\n                \n                if (action) {\n                    switch (action.action) {\n                        case 'install':\n                            try {\n                                await pluginMarketplace.installPlugin(selected.plugin.id);\n                                vscode.window.showInformationMessage(`${selected.plugin.name} installed successfully!`);\n                            } catch (error) {\n                                vscode.window.showErrorMessage(`Failed to install ${selected.plugin.name}: ${(error as Error).message}`);\n                            }\n                            break;\n                        case 'details':\n                            const details = `# ${selected.plugin.name}\\n\\n` +\n                                `**Version:** ${selected.plugin.version}\\n` +\n                                `**Author:** ${selected.plugin.author}\\n` +\n                                `**Description:** ${selected.plugin.description}\\n` +\n                                `**Downloads:** ${selected.plugin.downloads}\\n` +\n                                `**Rating:** ${selected.plugin.rating}/5\\n\\n` +\n                                `**Tags:** ${selected.plugin.tags.join(', ')}\\n\\n` +\n                                `**README:**\\n${selected.plugin.readme}`;\n                            \n                            const doc = await vscode.workspace.openTextDocument({\n                                content: details,\n                                language: 'markdown'\n                            });\n                            await vscode.window.showTextDocument(doc);\n                            break;\n                    }\n                }\n            }\n        }\n    });\n\n    const runPluginCommand = vscode.commands.registerCommand('aiDebugUtilities.runPluginCommand', async () => {\n        const plugins = pluginManager.getAll().filter(p => pluginManager.isEnabled(p.metadata.id));\n        const commands = plugins.flatMap(plugin => \n            (plugin.commands || []).map(cmd => ({\n                label: cmd.title,\n                description: cmd.description,\n                detail: `Plugin: ${plugin.metadata.name}`,\n                pluginId: plugin.metadata.id,\n                commandId: cmd.id\n            }))\n        );\n        \n        const selected = await vscode.window.showQuickPick(commands, {\n            placeHolder: 'Select a plugin command to run',\n            canPickMany: false\n        });\n        \n        if (selected) {\n            try {\n                const result = await pluginManager.executePluginCommand(selected.pluginId, selected.commandId);\n                vscode.window.showInformationMessage(`Command executed successfully: ${selected.label}`);\n            } catch (error) {\n                vscode.window.showErrorMessage(`Failed to execute command: ${(error as Error).message}`);\n            }\n        }\n    });\n\n    const clearHistoryCommand = vscode.commands.registerCommand('aiDebugUtilities.clearHistory', async () => {\n        const result = await vscode.window.showWarningMessage(\n            'Are you sure you want to clear the command history?',\n            { modal: true },\n            'Yes', 'No'\n        );\n        \n        if (result === 'Yes') {\n            statusTracker.clearHistory();\n            vscode.window.showInformationMessage('Command history cleared.');\n        }\n    });\n\n    const cancelAllCommand = vscode.commands.registerCommand('aiDebugUtilities.cancelAll', () => {\n        commandCoordinator.cancelAllCommands();\n        vscode.window.showInformationMessage('All running commands cancelled.');\n    });\n\n    const healthReportCommand = vscode.commands.registerCommand('aiDebugUtilities.healthReport', () => {\n        const report = commandCoordinator.createHealthReport();\n        const panel = vscode.window.createWebviewPanel(\n            'aiDebugHealth',\n            'Command Execution Health Report',\n            vscode.ViewColumn.One,\n            {}\n        );\n        panel.webview.html = `\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>Health Report</title>\n                <style>\n                    body { font-family: monospace; white-space: pre-wrap; padding: 20px; }\n                    .report { background: #1e1e1e; color: #d4d4d4; padding: 20px; border-radius: 5px; }\n                </style>\n            </head>\n            <body>\n                <div class=\"report\">${report.replace(/\\n/g, '<br>')}</div>\n            </body>\n            </html>\n        `;\n    });\n\n    // Add all commands to subscriptions\n    context.subscriptions.push(\n        openPanelCommand,\n        runAiDebugCommand,\n        runNxTestCommand,\n        runGitDiffCommand,\n        runPrepareToPushCommand,\n        showStatusCommand,\n        clearHistoryCommand,\n        cancelAllCommand,\n        healthReportCommand,\n        pluginManagerCommand,\n        pluginMarketplaceCommand,\n        runPluginCommand\n    );\n}\n\nexport function deactivate() {\n    console.log('AI Debug Utilities extension is now deactivated');\n    \n    // Clean up resources\n    if (statusTracker) {\n        statusTracker.dispose();\n    }\n    \n    if (commandCoordinator) {\n        commandCoordinator.dispose();\n    }\n    \n    // Clean up plugin system\n    if (pluginManager) {\n        try {\n            const allPlugins = pluginManager.getAll();\n            if (allPlugins && Array.isArray(allPlugins)) {\n                for (const plugin of allPlugins) {\n                    if (pluginManager.isEnabled(plugin.metadata.id)) {\n                        pluginManager.disable(plugin.metadata.id).catch(error => {\n                            console.error(`Failed to disable plugin ${plugin.metadata.id}:`, error);\n                        });\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('Error during plugin cleanup:', error);\n        }\n    }\n    \n    // Clean up Phase 5 Features\n    if (nxAffectedManager) {\n        nxAffectedManager.dispose();\n    }\n    if (nxStatusBar) {\n        nxStatusBar.dispose();\n    }\n    if (gitDiffManager) {\n        gitDiffManager.dispose();\n    }\n    if (flipperDetectionManager) {\n        flipperDetectionManager.dispose();\n    }\n}"],"version":3}