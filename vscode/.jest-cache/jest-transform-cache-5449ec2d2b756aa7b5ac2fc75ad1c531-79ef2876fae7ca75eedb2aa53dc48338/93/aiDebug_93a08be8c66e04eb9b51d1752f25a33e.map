{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/aiDebug.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/aiDebug.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { spawn } from 'child_process';\nimport { CommandOptions, CommandResult } from '../types';\nimport { FileManager } from '../utils/fileManager';\nimport { CommandRunner } from '../utils/shellRunner';\n\nexport class AiDebugCommand {\n    private fileManager: FileManager;\n    private commandRunner: CommandRunner;\n    private outputChannel: vscode.OutputChannel;\n\n    constructor() {\n        this.outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');\n        this.fileManager = new FileManager(this.outputChannel);\n        this.commandRunner = new CommandRunner(this.outputChannel);\n    }\n\n    /**\n     * Run AI Debug command with integrated quality checks\n     */\n    async run(project: string, options: CommandOptions = {}): Promise<CommandResult> {\n        const startTime = Date.now();\n        \n        try {\n            // Prepare output files\n            const outputFiles = await this.fileManager.initializeOutputFiles(['ai-debug-context', 'pr-description-prompt', 'diff', 'jest-output']);\n            \n            this.showProgress(\"AI Debug Assistant: Optimized Context Generation\", {\n                target: project,\n                mode: options.quick ? \"Quick\" : \"Full\",\n                context: options.fullContext ? \"Verbose\" : \"AI-Optimized\",\n                focus: options.focus || \"General\"\n            });\n\n            // Step 1: Capture git changes (unless skipped)\n            if (!options.noDiff) {\n                await this.showStep(\"Analyzing git changes...\");\n                const gitDiffResult = await this.commandRunner.runGitDiff({ aiContext: true, smartDiff: true });\n                \n                if (gitDiffResult.success && gitDiffResult.output) {\n                    const changesCount = this.countChangedFiles(gitDiffResult.output);\n                    this.showSuccess(`Captured changes for ${changesCount} files`);\n                } else {\n                    this.showWarning(\"No git changes detected - focusing on existing code analysis\");\n                }\n            } else {\n                this.showInfo(\"Skipping git diff capture (--no-diff specified)\");\n            }\n\n            // Step 2: Run tests and capture results\n            await this.showStep(\"Running tests and generating analysis...\");\n            const testResult = await this.commandRunner.runNxTest(project, {\n                fullOutput: options.fullContext,\n                useExpected: options.useExpected\n            });\n\n            if (!testResult.success) {\n                this.showError(\"Test execution failed\");\n            }\n\n            // Step 3: Run prepareToPush if tests are passing\n            let lintExitCode = 0;\n            let prettierExitCode = 0;\n            \n            if (testResult.success) {\n                await this.showStep(\"Tests passing! Running prepareToPush (lint + format)...\");\n                \n                // Run linting\n                await this.showStep(\"Running linter...\");\n                const lintResult = await this.executeLint(project);\n                lintExitCode = lintResult.exitCode;\n                \n                if (lintResult.success) {\n                    this.showSuccess(\"Linting passed!\");\n                    \n                    // Run prettier\n                    await this.showStep(\"Running code formatter...\");\n                    const prettierResult = await this.executePrettier(project);\n                    prettierExitCode = prettierResult.exitCode;\n                    \n                    if (prettierResult.success) {\n                        this.showSuccess(\"Code formatting completed!\");\n                    } else {\n                        this.showError(`Prettier failed with exit code: ${prettierExitCode}`);\n                    }\n                } else {\n                    this.showError(`Linting failed with exit code: ${lintExitCode}`);\n                    this.showInfo(\"Skipping prettier due to lint failures\");\n                }\n            }\n\n            // Step 4: Generate intelligent AI context\n            await this.showStep(\"Generating AI-optimized context file...\");\n            await this.createAiDebugContext(\n                outputFiles['ai-debug-context'],\n                outputFiles['diff'],\n                outputFiles['jest-output'],\n                project,\n                testResult.exitCode,\n                options.focus || \"\",\n                options.quick || false,\n                lintExitCode,\n                prettierExitCode\n            );\n\n            // Step 5: Generate PR description prompts if tests are passing\n            if (testResult.success) {\n                await this.showStep(\"Auto-generating PR description prompts...\");\n                await this.createPrDescriptionPrompts(\n                    outputFiles['pr-description-prompt'],\n                    outputFiles['diff'],\n                    outputFiles['jest-output'],\n                    project,\n                    testResult.exitCode,\n                    lintExitCode,\n                    prettierExitCode\n                );\n            }\n\n            // Step 6: Display summary\n            await this.displayAiDebugSummary(\n                outputFiles['ai-debug-context'],\n                testResult.exitCode,\n                options.focus || \"\",\n                testResult.success,\n                outputFiles['pr-description-prompt'],\n                lintExitCode,\n                prettierExitCode,\n                project\n            );\n\n            const duration = Date.now() - startTime;\n            return {\n                success: testResult.success,\n                exitCode: testResult.exitCode,\n                output: `AI Debug completed in ${duration}ms`,\n                outputFiles: Object.values(outputFiles),\n                duration\n            };\n\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            return {\n                success: false,\n                exitCode: 1,\n                output: \"\",\n                error: error instanceof Error ? error.message : 'Unknown error',\n                duration\n            };\n        }\n    }\n\n    private async executeLint(project: string): Promise<CommandResult> {\n        return new Promise((resolve) => {\n            const process = spawn('yarn', ['nx', 'lint', project], {\n                cwd: this.getWorkspaceRoot(),\n                shell: true\n            });\n\n            let output = '';\n            let error = '';\n\n            process.stdout?.on('data', (data) => {\n                output += data.toString();\n            });\n\n            process.stderr?.on('data', (data) => {\n                error += data.toString();\n            });\n\n            process.on('close', (code) => {\n                resolve({\n                    success: code === 0,\n                    exitCode: code || 0,\n                    output,\n                    error: error || undefined,\n                    duration: 0\n                });\n            });\n        });\n    }\n\n    private async executePrettier(project: string): Promise<CommandResult> {\n        return new Promise((resolve) => {\n            const process = spawn('yarn', ['nx', 'prettier', project, '--write'], {\n                cwd: this.getWorkspaceRoot(),\n                shell: true\n            });\n\n            let output = '';\n            let error = '';\n\n            process.stdout?.on('data', (data) => {\n                output += data.toString();\n            });\n\n            process.stderr?.on('data', (data) => {\n                error += data.toString();\n            });\n\n            process.on('close', (code) => {\n                resolve({\n                    success: code === 0,\n                    exitCode: code || 0,\n                    output,\n                    error: error || undefined,\n                    duration: 0\n                });\n            });\n        });\n    }\n\n    private async createAiDebugContext(\n        contextFile: string,\n        diffFile: string,\n        testFile: string,\n        project: string,\n        exitCode: number,\n        focusArea: string,\n        quickMode: boolean,\n        lintExitCode: number,\n        prettierExitCode: number\n    ): Promise<void> {\n        const timestamp = new Date().toISOString();\n        const status = exitCode === 0 ? \"✅ TESTS PASSING\" : \"❌ TESTS FAILING\";\n        \n        let contextContent = `=================================================================\n🤖 AI DEBUG CONTEXT - OPTIMIZED FOR ANALYSIS\n=================================================================\n\nPROJECT: Angular NX Monorepo\nTARGET: ${project}\nSTATUS: ${status}\nFOCUS: ${focusArea || \"General debugging\"}\nTIMESTAMP: ${timestamp}\n\n=================================================================\n🎯 ANALYSIS REQUEST\n=================================================================\n\nPlease analyze this context and provide:\n\n`;\n\n        // Add conditional analysis requests based on test status\n        if (exitCode === 0) {\n            contextContent += `1. 🔍 CODE QUALITY ANALYSIS\n   • Review code changes for potential improvements\n   • Identify any code smells or anti-patterns\n   • Check for performance optimization opportunities\n\n2. 🎭 MOCK DATA VALIDATION (CRITICAL)\n   • Review all mock data to ensure it matches real-world data structures\n   • Verify mock objects have correct property names and types\n   • Check that mock data represents realistic scenarios (not just minimal passing data)\n   • Ensure mocked API responses match actual API contract\n   • Validate that test data covers edge cases and realistic variations\n   • Identify mock data that might be giving false positives\n\n3. 🧪 TEST COVERAGE ANALYSIS\n   • Missing test coverage for new functionality\n   • Edge cases that should be tested\n   • Additional test scenarios to prevent regressions\n   • Test improvements for better maintainability\n   • File-specific coverage analysis (diff coverage vs total coverage)\n\n4. 🚀 ENHANCEMENT RECOMMENDATIONS\n   • Code quality improvements\n   • Better error handling or validation\n   • Documentation or typing improvements\n   • Performance optimizations\n\n5. 🛡️ ROBUSTNESS IMPROVEMENTS\n   • Potential edge cases to handle\n   • Error scenarios to test\n   • Input validation opportunities\n   • Defensive programming suggestions\n`;\n        } else {\n            contextContent += `1. 🔍 ROOT CAUSE ANALYSIS\n   • What specific changes are breaking the tests?\n   • Are there type mismatches or interface changes?\n   • Did method signatures change?\n\n2. 🛠️ CONCRETE FIXES (PRIORITY 1)\n   • Exact code changes needed to fix failing tests\n   • Updated test expectations if business logic changed\n   • Type definitions or interface updates required\n\n3. 🧪 EXISTING TEST FIXES (PRIORITY 1)\n   • Fix existing failing tests first\n   • Update test assertions to match new behavior\n   • Fix test setup or mocking issues\n\n4. 🚀 IMPLEMENTATION GUIDANCE (PRIORITY 1)\n   • Order of fixes (dependencies first)\n   • Potential side effects to watch for\n   • Getting tests green is the immediate priority\n\n5. ✨ NEW TEST SUGGESTIONS (PRIORITY 2 - AFTER FIXES)\n   • Missing test coverage for new functionality\n   • Edge cases that should be tested\n   • Additional test scenarios to prevent regressions\n   • Test improvements for better maintainability\n   • File-specific coverage analysis (diff coverage vs total coverage)\n   • Specify files and line numbers where new tests should be added. \n\nNOTE: Focus on items 1-4 first to get tests passing, then implement item 5\n`;\n        }\n\n        // Add focus-specific guidance\n        if (focusArea) {\n            contextContent += `\\n`;\n            switch (focusArea) {\n                case \"types\":\n                    contextContent += `FOCUS AREA: TypeScript type issues and interface mismatches\n• Pay special attention to type definitions and interface changes\n• Look for property name mismatches or type incompatibilities\n`;\n                    break;\n                case \"tests\":\n                    contextContent += `FOCUS AREA: Test logic and assertions\n• Focus on test expectations vs actual implementation\n• Look for test data setup issues or mock problems\n`;\n                    break;\n                case \"performance\":\n                    contextContent += `FOCUS AREA: Performance and optimization\n• Identify slow tests and optimization opportunities\n• Look for inefficient test patterns or setup\n`;\n                    break;\n            }\n        }\n\n        // Add test results\n        contextContent += `\\n==================================================================\n🧪 TEST RESULTS ANALYSIS\n==================================================================\n\n`;\n\n        try {\n            const testContent = await this.fileManager.getFileContent('jest-output');\n            contextContent += testContent;\n        } catch {\n            contextContent += \"❌ No test results available\\n\";\n        }\n\n        // Add code quality results\n        contextContent += `\\n==================================================================\n🔧 CODE QUALITY RESULTS\n==================================================================\n\n📋 LINTING RESULTS:\n`;\n\n        if (lintExitCode === 0) {\n            contextContent += `✅ Status: PASSED\n• All linting rules satisfied\n• No code quality issues detected\n• Code follows project style guidelines\n`;\n        } else {\n            contextContent += `❌ Status: FAILED (Exit code: ${lintExitCode})\n• Linting errors detected above in test output\n• Code quality issues need attention\n• Some errors may be auto-fixable with --fix flag\n`;\n        }\n\n        contextContent += `\\n✨ FORMATTING RESULTS:\n`;\n\n        if (prettierExitCode === 0) {\n            contextContent += `✅ Status: COMPLETED\n• Code formatting applied successfully\n• All files follow consistent style\n• Ready for commit\n`;\n        } else if (lintExitCode !== 0) {\n            contextContent += `⏭️  Status: SKIPPED\n• Skipped due to linting failures\n• Fix linting issues first\n• Formatting will run after lint passes\n`;\n        } else {\n            contextContent += `❌ Status: FAILED (Exit code: ${prettierExitCode})\n• Formatting errors detected\n• Check syntax errors in files\n• Ensure all files are valid\n`;\n        }\n\n        // Add push readiness\n        contextContent += `\\n🚀 PUSH READINESS:\n`;\n\n        if (exitCode === 0 && lintExitCode === 0 && prettierExitCode === 0) {\n            contextContent += `✅ READY TO PUSH\n• Tests: Passing ✅\n• Lint: Clean ✅\n• Format: Applied ✅\n• All quality gates satisfied\n`;\n        } else {\n            contextContent += `⚠️  NOT READY - Issues need resolution:\n`;\n            if (exitCode !== 0) {\n                contextContent += \"• Tests: Failing ❌\\n\";\n            }\n            if (lintExitCode !== 0) {\n                contextContent += \"• Lint: Issues detected ❌\\n\";\n            }\n            if (prettierExitCode !== 0) {\n                contextContent += \"• Format: Failed ❌\\n\";\n            }\n        }\n\n        // Add git changes analysis\n        contextContent += `\\n==================================================================\n📋 CODE CHANGES ANALYSIS\n==================================================================\n\n`;\n\n        try {\n            const diffContent = await this.fileManager.getFileContent('diff');\n            contextContent += diffContent;\n        } catch {\n            contextContent += `ℹ️  No recent code changes detected\n\nThis suggests the test failures may be due to:\n• Environment or configuration issues\n• Dependencies or version conflicts\n• Test setup or teardown problems\n• Race conditions or timing issues\n`;\n        }\n\n        // Add final guidance\n        contextContent += `\\n==================================================================\n🚀 AI ASSISTANT GUIDANCE\n==================================================================\nThis context file is optimized for AI analysis with:\n• Structured failure information for easy parsing\n• Code changes correlated with test failures\n• Clear focus areas for targeted analysis\n• Actionable fix categories for systematic resolution\n\nContext file size: ${contextContent.split('\\n').length} lines (optimized for AI processing)\n`;\n\n        await this.fileManager.saveOutput('ai-debug-context', contextContent);\n    }\n\n    private async createPrDescriptionPrompts(\n        prFile: string,\n        diffFile: string,\n        testFile: string,\n        project: string,\n        exitCode: number,\n        lintExitCode: number,\n        prettierExitCode: number\n    ): Promise<void> {\n        const timestamp = new Date().toISOString();\n        const testStatus = exitCode === 0 ? \"✅ All tests passing\" : \"❌ Some tests failing (needs fixes)\";\n        const lintStatus = lintExitCode === 0 ? \"✅ Linting passed\" : \"❌ Linting failed\";\n        const formatStatus = prettierExitCode === 0 ? \"✅ Code formatted\" : \"❌ Formatting failed\";\n\n        const prContent = `=================================================================\n📝 GITHUB PR DESCRIPTION GENERATION PROMPTS\n=================================================================\n\nINSTRUCTIONS FOR AI ASSISTANT:\nUsing the data gathered in the ai-debug-context.txt file, write a GitHub PR \ndescription that follows the format below. Focus on newly added functions \nand updates. Don't add fluff.\n\n=================================================================\n🎯 PRIMARY PR DESCRIPTION PROMPT\n=================================================================\n\nPlease analyze the code changes and test results to create a GitHub PR description \nfollowing this exact format:\n\n**Problem**\nWhat is the problem you're solving or feature you're implementing? Please include \na link to any related discussion or tasks in Jira if applicable.\n[Jira Link if applicable]\n\n**Solution**\nDescribe the feature or bug fix -- what's changing?\n\n**Details**\nInclude a brief overview of the technical process you took (or are going to take!) \nto get from the problem to the solution.\n\n**QA**\nProvide any technical details needed to test this change and/or parts that you \nwish to have tested.\n\n=================================================================\n📊 CONTEXT FOR PR DESCRIPTION\n=================================================================\n\nPROJECT: Angular NX Monorepo\nTARGET: ${project}\nTEST STATUS: ${testStatus}\nLINT STATUS: ${lintStatus}\nFORMAT STATUS: ${formatStatus}\nTIMESTAMP: ${timestamp}\n\n📋 TESTING INSTRUCTIONS:\n• Run: yarn nx test ${project}\n• Run: yarn nx lint ${project}\n• Run: yarn nx prettier ${project} --write\n• Verify all tests pass and code follows style guidelines\n• Test the specific functionality mentioned in the Solution section\n• Check for any UI/UX changes if applicable\n\n🎯 READY TO USE: Copy the primary prompt above, attach ai-debug-context.txt, and ask your AI assistant to create the PR description!\n`;\n\n        await this.fileManager.saveOutput('pr-description-prompt', prContent);\n    }\n\n    private async displayAiDebugSummary(\n        contextFile: string,\n        exitCode: number,\n        focusArea: string,\n        prDescriptionEnabled: boolean,\n        prDescriptionFile: string,\n        lintExitCode: number,\n        prettierExitCode: number,\n        project: string\n    ): Promise<void> {\n        const contextStats = await this.fileManager.getFileStats(contextFile);\n        \n        let summaryTitle = \"\";\n        if (exitCode === 0) {\n            if (lintExitCode === 0 && prettierExitCode === 0) {\n                summaryTitle = \"🎉 Ready to Push: Tests ✅ Lint ✅ Format ✅\";\n            } else if (lintExitCode !== 0) {\n                summaryTitle = \"⚠️  Tests Pass but Lint Issues: Tests ✅ Lint ❌ Format ⏭️\";\n            } else {\n                summaryTitle = \"⚠️  Tests Pass but Format Issues: Tests ✅ Lint ✅ Format ❌\";\n            }\n        } else {\n            summaryTitle = \"🔍 AI Debug Context: Test failures detected\";\n        }\n\n        this.showInfo(`\\n${\"=\".repeat(60)}`);\n        this.showInfo(summaryTitle);\n        this.showInfo(`${\"=\".repeat(60)}`);\n\n        // Show focus and suggested prompts\n        if (exitCode === 0) {\n            if (lintExitCode === 0 && prettierExitCode === 0) {\n                this.showInfo(\"🎯 FOCUS: Final code review and PR preparation\");\n                this.showInfo(\"\\n📋 SUGGESTED AI PROMPTS:\");\n                this.showInfo('• \"Generate a GitHub PR description using the PR description prompts file\"');\n                this.showInfo('• \"Review this code for quality and suggest any improvements\"');\n                this.showInfo('• \"Check if mock objects have correct property names and realistic values\"');\n            } else {\n                this.showInfo(\"🎯 FOCUS: Fix code quality issues before PR\");\n                this.showInfo(\"\\n📋 SUGGESTED AI PROMPTS:\");\n                this.showInfo('• \"Help me fix the linting/formatting issues shown above\"');\n                this.showInfo('• \"Review this code for quality and suggest any improvements\"');\n                if (lintExitCode !== 0) {\n                    this.showInfo('• \"Analyze the linting errors and provide specific fixes\"');\n                }\n            }\n        } else {\n            this.showInfo(\"🎯 FOCUS: Failure analysis and fix recommendations\");\n            this.showInfo(\"\\n📋 SUGGESTED AI PROMPTS:\");\n            this.showInfo('• \"Analyze these test failures and provide specific fixes first\"');\n            this.showInfo('• \"What code changes are breaking these tests and how do I fix them?\"');\n            this.showInfo('• \"Help me fix failing tests first, then suggest new test coverage\"');\n        }\n\n        // Show file details\n        this.showInfo(\"\\n📄 CONTEXT FILE DETAILS:\");\n        this.showInfo(`• Location: ${contextFile}`);\n        if (contextStats) {\n            this.showInfo(`• Size: ${contextStats.size} bytes`);\n        }\n        this.showInfo(\"• Optimized: ✅ AI-friendly structure\");\n        this.showInfo(`• Focus: ${focusArea || \"General\"}`);\n        \n        if (exitCode === 0) {\n            this.showInfo(\"• Tests: ✅ Passing\");\n            this.showInfo(`• Lint: ${lintExitCode === 0 ? \"✅ Passed\" : \"❌ Failed\"}`);\n            this.showInfo(`• Format: ${prettierExitCode === 0 ? \"✅ Applied\" : \"❌ Failed\"}`);\n        }\n\n        if (prDescriptionEnabled) {\n            const prStats = await this.fileManager.getFileStats(prDescriptionFile);\n            this.showInfo(\"\\n📝 PR DESCRIPTION PROMPTS:\");\n            this.showInfo(`• Location: ${prDescriptionFile}`);\n            if (prStats) {\n                this.showInfo(`• Size: ${prStats.size} bytes`);\n            }\n            this.showInfo(\"• Ready: ✅ GitHub PR format prompts generated\");\n        }\n\n        // Show next steps\n        this.showInfo(\"\\n🚀 NEXT STEPS:\");\n        if (exitCode === 0) {\n            if (lintExitCode === 0 && prettierExitCode === 0) {\n                this.showInfo(\"1. Upload PR description prompts to your AI assistant\");\n                this.showInfo(\"2. Generate GitHub PR description\");\n                this.showInfo(\"3. Review any formatting changes made by prettier\");\n                this.showInfo(\"4. Commit and push: git add . && git commit && git push\");\n            } else {\n                let step = 1;\n                if (lintExitCode !== 0) {\n                    this.showInfo(`${step}. Fix linting errors (try: yarn nx lint ${project} --fix)`);\n                    step++;\n                }\n                if (prettierExitCode !== 0) {\n                    this.showInfo(`${step}. Fix prettier formatting issues`);\n                    step++;\n                }\n                this.showInfo(`${step}. Re-run aiDebug to verify all checks pass`);\n            }\n        } else {\n            this.showInfo(\"1. Upload the context file to your AI assistant\");\n            this.showInfo(\"2. Use one of the suggested prompts above\");\n            this.showInfo(\"3. Follow the AI's specific fix recommendations\");\n            this.showInfo(\"4. Re-run aiDebug to verify fixes\");\n        }\n\n        this.showInfo(`\\n${\"=\".repeat(60)}`);\n    }\n\n    private countChangedFiles(diffOutput: string): number {\n        const matches = diffOutput.match(/^📁/gm);\n        return matches ? matches.length : 0;\n    }\n\n    private getWorkspaceRoot(): string {\n        return vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\n    }\n\n    private showProgress(title: string, details: Record<string, string>) {\n        this.showInfo(`\\n${\"=\".repeat(60)}`);\n        this.showInfo(`🤖 ${title}`);\n        this.showInfo(`${\"=\".repeat(60)}`);\n        \n        Object.entries(details).forEach(([key, value]) => {\n            this.showInfo(`${key}: ${value}`);\n        });\n        \n        this.showInfo(\"\");\n    }\n\n    private async showStep(message: string) {\n        this.showInfo(message);\n    }\n\n    private showSuccess(message: string) {\n        this.showInfo(`✅ ${message}`);\n    }\n\n    private showWarning(message: string) {\n        this.showInfo(`⚠️  ${message}`);\n    }\n\n    private showError(message: string) {\n        this.showInfo(`❌ ${message}`);\n    }\n\n    private showInfo(message: string) {\n        this.outputChannel.appendLine(message);\n        this.outputChannel.show();\n    }\n}"],"version":3}