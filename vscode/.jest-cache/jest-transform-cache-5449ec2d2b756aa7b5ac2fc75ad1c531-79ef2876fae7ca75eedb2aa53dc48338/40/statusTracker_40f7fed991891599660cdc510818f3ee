a2638ac34f865f893801be637bc7774e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusTracker = void 0;
const vscode = __importStar(require("vscode"));
const events_1 = require("events");
class StatusTracker extends events_1.EventEmitter {
    _statusBarItem;
    _projects = [];
    _currentStatus = {
        isRunning: false,
        lastUpdated: new Date()
    };
    _commandStatuses = new Map();
    _commandHistory = [];
    constructor() {
        super();
        this._statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
        this._statusBarItem.show();
        this._updateStatusBar();
    }
    // Start a new command
    startCommand(action, project, options) {
        const commandId = `${action}-${Date.now()}`;
        const commandStatus = {
            id: commandId,
            action,
            project,
            status: 'running',
            startTime: new Date(),
            progress: 0,
            output: ''
        };
        this._commandStatuses.set(commandId, commandStatus);
        this.updateStatus({
            isRunning: true,
            currentAction: action,
            progress: 0
        });
        this.emit('status_change', { commandId, status: commandStatus });
        return commandId;
    }
    // Complete a command
    completeCommand(commandId, result) {
        const commandStatus = this._commandStatuses.get(commandId);
        if (!commandStatus) {
            return;
        }
        commandStatus.status = result.success ? 'success' : 'error';
        commandStatus.endTime = new Date();
        commandStatus.duration = result.duration;
        commandStatus.output = result.output;
        commandStatus.error = result.error;
        commandStatus.progress = 100;
        this._commandHistory.push(commandStatus);
        this._commandStatuses.delete(commandId);
        // Update status if this was the current command
        if (this._commandStatuses.size === 0) {
            this.updateStatus({
                isRunning: false,
                currentAction: undefined,
                progress: 100,
                message: result.success ? 'Command completed' : 'Command failed'
            });
        }
        this.emit('status_change', { commandId, status: commandStatus });
        this.emit('history_updated', this._commandHistory);
    }
    // Cancel a command
    cancelCommand(commandId) {
        const commandStatus = this._commandStatuses.get(commandId);
        if (!commandStatus) {
            return;
        }
        commandStatus.status = 'cancelled';
        commandStatus.endTime = new Date();
        commandStatus.progress = 0;
        this._commandHistory.push(commandStatus);
        this._commandStatuses.delete(commandId);
        if (this._commandStatuses.size === 0) {
            this.updateStatus({
                isRunning: false,
                currentAction: undefined,
                progress: undefined,
                message: 'Command cancelled'
            });
        }
        this.emit('status_change', { commandId, status: commandStatus });
    }
    // Update command progress
    updateProgress(commandId, progress) {
        const commandStatus = this._commandStatuses.get(commandId);
        if (!commandStatus) {
            return;
        }
        commandStatus.progress = Math.max(0, Math.min(100, progress));
        this.updateStatus({
            progress: commandStatus.progress
        });
        this.emit('status_change', { commandId, status: commandStatus });
    }
    // Append output to command
    appendOutput(commandId, output) {
        const commandStatus = this._commandStatuses.get(commandId);
        if (!commandStatus) {
            return;
        }
        commandStatus.output += output;
        this.emit('status_change', { commandId, status: commandStatus });
    }
    // Append error to command
    appendError(commandId, error) {
        const commandStatus = this._commandStatuses.get(commandId);
        if (!commandStatus) {
            return;
        }
        commandStatus.error = (commandStatus.error || '') + error;
        this.emit('status_change', { commandId, status: commandStatus });
    }
    // Get all current statuses
    getAllStatuses() {
        return Array.from(this._commandStatuses.values());
    }
    // Get running commands
    getRunningCommands() {
        return Array.from(this._commandStatuses.values()).filter(status => status.status === 'running');
    }
    // Get command history
    getHistory() {
        return [...this._commandHistory];
    }
    // Clear command history
    clearHistory() {
        this._commandHistory = [];
        this.emit('history_updated', this._commandHistory);
    }
    // Get command statistics
    getCommandStats(action) {
        let commands = this._commandHistory;
        if (action) {
            commands = commands.filter(cmd => cmd.action === action);
        }
        const successful = commands.filter(cmd => cmd.status === 'success').length;
        const failed = commands.filter(cmd => cmd.status === 'error').length;
        const totalDuration = commands.reduce((sum, cmd) => sum + (cmd.duration || 0), 0);
        return {
            total: commands.length,
            successful,
            failed,
            averageDuration: commands.length > 0 ? totalDuration / commands.length : 0,
            recentCommands: commands.slice(-10)
        };
    }
    // Generate status report
    generateStatusReport() {
        const stats = this.getCommandStats();
        const runningCommands = this.getRunningCommands();
        return `
AI Debug Status Report
=====================

Current Status: ${this._currentStatus.isRunning ? 'Running' : 'Idle'}
Running Commands: ${runningCommands.length}
Total Commands: ${stats.total}
Success Rate: ${stats.total > 0 ? ((stats.successful / stats.total) * 100).toFixed(1) : 0}%
Average Duration: ${stats.averageDuration.toFixed(0)}ms

Recent Commands:
${stats.recentCommands.slice(-5).map(cmd => `- ${cmd.action} (${cmd.project || 'N/A'}): ${cmd.status} - ${cmd.duration || 0}ms`).join('\n')}
        `.trim();
    }
    // Convert to action buttons
    toActionButtons() {
        const buttons = {};
        // Default actions
        const actions = ['aiDebug', 'nxTest', 'gitDiff', 'prepareToPush'];
        for (const action of actions) {
            const runningCommand = this.getRunningCommands().find(cmd => cmd.action === action);
            const recentCommand = this._commandHistory
                .filter(cmd => cmd.action === action)
                .sort((a, b) => b.startTime.getTime() - a.startTime.getTime())[0];
            buttons[action] = {
                id: action,
                label: action.charAt(0).toUpperCase() + action.slice(1),
                icon: this._getActionIcon(action),
                status: runningCommand ? 'running' :
                    recentCommand?.status === 'success' ? 'success' :
                        recentCommand?.status === 'error' ? 'error' : 'idle',
                lastRun: recentCommand?.endTime,
                enabled: !runningCommand,
                progress: runningCommand?.progress
            };
        }
        return buttons;
    }
    _getActionIcon(action) {
        switch (action) {
            case 'aiDebug': return '$(debug-alt)';
            case 'nxTest': return '$(beaker)';
            case 'gitDiff': return '$(git-compare)';
            case 'prepareToPush': return '$(cloud-upload)';
            default: return '$(play)';
        }
    }
    updateStatus(status) {
        this._currentStatus = {
            ...this._currentStatus,
            ...status,
            lastUpdated: new Date()
        };
        this._updateStatusBar();
    }
    setRunning(action, message) {
        this.updateStatus({
            isRunning: true,
            currentAction: action,
            message,
            progress: 0
        });
    }
    setProgress(progress, message) {
        this.updateStatus({
            progress,
            message
        });
    }
    setComplete(message) {
        this.updateStatus({
            isRunning: false,
            currentAction: undefined,
            progress: 100,
            message
        });
        // Clear the message after 3 seconds
        setTimeout(() => {
            if (!this._currentStatus.isRunning) {
                this.updateStatus({
                    message: undefined,
                    progress: undefined
                });
            }
        }, 3000);
    }
    setError(error) {
        this.updateStatus({
            isRunning: false,
            currentAction: undefined,
            message: `Error: ${error}`,
            progress: undefined
        });
        // Clear the error after 5 seconds
        setTimeout(() => {
            if (!this._currentStatus.isRunning) {
                this.updateStatus({
                    message: undefined
                });
            }
        }, 5000);
    }
    setProjects(projects) {
        this._projects = projects;
        this._updateStatusBar();
    }
    getProjects() {
        return this._projects;
    }
    getCurrentStatus() {
        return { ...this._currentStatus };
    }
    _updateStatusBar() {
        let text = '$(debug-alt) AI Debug';
        let tooltip = 'AI Debug Utilities';
        if (this._currentStatus.isRunning) {
            text = `$(loading~spin) ${this._currentStatus.currentAction || 'Running'}`;
            tooltip = this._currentStatus.message || 'Command running...';
            if (this._currentStatus.progress !== undefined) {
                text += ` (${this._currentStatus.progress}%)`;
            }
        }
        else if (this._currentStatus.message) {
            text = `$(info) ${this._currentStatus.message}`;
            tooltip = this._currentStatus.message;
        }
        if (this._projects.length > 0) {
            text += ` (${this._projects.length} projects)`;
        }
        this._statusBarItem.text = text;
        this._statusBarItem.tooltip = tooltip;
        this._statusBarItem.command = 'aiDebugUtilities.openPanel';
    }
    dispose() {
        this._statusBarItem.dispose();
        this.removeAllListeners();
    }
}
exports.StatusTracker = StatusTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,