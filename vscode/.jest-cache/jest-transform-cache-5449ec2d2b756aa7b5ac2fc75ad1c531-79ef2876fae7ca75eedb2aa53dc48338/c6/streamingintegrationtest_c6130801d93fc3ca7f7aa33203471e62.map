{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/__tests__/streaming.integration.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/__tests__/streaming.integration.test.ts"],"sourcesContent":["import { WebviewProvider } from '../webview/provider';\nimport { StreamingCommandRunner } from '../utils/streamingRunner';\nimport { ProjectDetector } from '../utils/projectDetector';\nimport { CommandRunner } from '../utils/shellRunner';\nimport { FileManager } from '../utils/fileManager';\nimport { StatusTracker } from '../utils/statusTracker';\nimport { StreamingMessage, WebviewMessage } from '../types';\nimport * as vscode from 'vscode';\nimport { EventEmitter } from 'events';\n\n// Mock VSCode completely for integration tests\njest.mock('vscode', () => ({\n    StatusBarAlignment: {\n        Left: 1,\n        Right: 2\n    },\n    Uri: {\n        joinPath: jest.fn(() => ({ toString: () => 'mock://uri' })),\n        parse: jest.fn(() => ({ toString: () => 'mock://uri' }))\n    },\n    workspace: {\n        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\n        getConfiguration: jest.fn(() => ({\n            get: jest.fn(() => true)\n        }))\n    },\n    window: {\n        createStatusBarItem: jest.fn(() => ({\n            show: jest.fn(),\n            hide: jest.fn(),\n            dispose: jest.fn(),\n            text: '',\n            tooltip: '',\n            command: ''\n        })),\n        showInformationMessage: jest.fn(),\n        showErrorMessage: jest.fn(),\n        createOutputChannel: jest.fn(() => ({\n            append: jest.fn(),\n            appendLine: jest.fn(),\n            show: jest.fn(),\n            hide: jest.fn(),\n            dispose: jest.fn()\n        }))\n    }\n}));\n\n// Mock child_process for integration\nconst mockChildProcess = new EventEmitter() as any;\nmockChildProcess.stdout = new EventEmitter();\nmockChildProcess.stderr = new EventEmitter();\nmockChildProcess.kill = jest.fn();\n\njest.mock('child_process', () => ({\n    spawn: jest.fn(() => mockChildProcess)\n}));\n\ndescribe('Streaming Integration Tests', () => {\n    let provider: WebviewProvider;\n    let streamingRunner: StreamingCommandRunner;\n    let mockProjectDetector: jest.Mocked<ProjectDetector>;\n    let mockCommandRunner: jest.Mocked<CommandRunner>;\n    let mockFileManager: jest.Mocked<FileManager>;\n    let mockWebviewView: jest.Mocked<vscode.WebviewView>;\n    let mockWebview: jest.Mocked<vscode.Webview>;\n    let receivedMessages: any[] = [];\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        receivedMessages = [];\n\n        // Create real streaming runner for integration testing\n        streamingRunner = new StreamingCommandRunner({} as any);\n\n        // Setup mocked dependencies\n        mockProjectDetector = {\n            getProjects: jest.fn().mockResolvedValue([\n                { name: 'test-app', root: 'apps/test-app', projectType: 'application' }\n            ]),\n            getCurrentProject: jest.fn().mockResolvedValue({ name: 'test-app', root: 'apps/test-app', projectType: 'application' })\n        } as any;\n\n        mockCommandRunner = {\n            runAiDebug: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'AI debug complete', duration: 2000 })\n        } as any;\n\n        mockFileManager = {\n            watchFiles: jest.fn(),\n            getFileContent: jest.fn().mockResolvedValue('test file content'),\n            openFile: jest.fn()\n        } as any;\n\n        // Setup webview mocks that capture messages\n        mockWebview = {\n            asWebviewUri: jest.fn().mockReturnValue('mock://webview-uri'),\n            postMessage: jest.fn((message) => {\n                receivedMessages.push(message);\n                return Promise.resolve(true);\n            }),\n            onDidReceiveMessage: jest.fn(),\n            html: '',\n            options: {}\n        } as any;\n\n        mockWebviewView = {\n            webview: mockWebview,\n            show: jest.fn()\n        } as any;\n\n        // Create provider with real streaming runner\n        const mockStatusTracker = new StatusTracker();\n        provider = new WebviewProvider(\n            vscode.Uri.parse('test://extension'),\n            mockProjectDetector,\n            mockCommandRunner,\n            mockFileManager,\n            mockStatusTracker\n        );\n\n        // Replace the internal streaming runner with our test instance\n        (provider as any).streamingRunner = streamingRunner;\n        (provider as any).setupStreamingListeners();\n    });\n\n    afterEach(() => {\n        streamingRunner.removeAllListeners();\n    });\n\n    describe('end-to-end command execution with streaming', () => {\n        beforeEach(() => {\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n        });\n\n        it('should stream output during command execution', async () => {\n            // Arrange\n            const { spawn } = require('child_process');\n            let commandPromise: Promise<any>;\n\n            // Act - start command\n            commandPromise = (provider as any).runCommand('nxTest', { project: 'test-app' });\n\n            // Simulate command output streaming\n            await new Promise(resolve => setTimeout(resolve, 10)); // Let command start\n\n            mockChildProcess.stdout.emit('data', Buffer.from('Determining test suites to run...\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            mockChildProcess.stdout.emit('data', Buffer.from('Found 5 test suites\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            mockChildProcess.stdout.emit('data', Buffer.from('Running tests...\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            mockChildProcess.stdout.emit('data', Buffer.from('Test results:\\n PASS src/app.spec.ts\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Complete command\n            mockChildProcess.emit('close', 0);\n\n            // Wait for command to complete\n            await commandPromise;\n\n            // Assert - check that streaming messages were sent\n            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');\n            \n            expect(streamingMessages.length).toBeGreaterThan(0);\n            \n            // Check for output messages\n            const outputMessages = streamingMessages.filter(msg => msg.message.type === 'output');\n            expect(outputMessages.length).toBeGreaterThan(0);\n            expect(outputMessages[0].message.data.text).toContain('Determining test suites');\n            \n            // Check for progress messages\n            const progressMessages = streamingMessages.filter(msg => msg.message.type === 'progress');\n            expect(progressMessages.length).toBeGreaterThan(0);\n            \n            // Check for completion message\n            const completeMessages = streamingMessages.filter(msg => msg.message.type === 'complete');\n            expect(completeMessages.length).toBe(1);\n            expect(completeMessages[0].message.data.result.success).toBe(true);\n        });\n\n        it('should handle command cancellation', async () => {\n            // Arrange\n            let commandPromise: Promise<any>;\n\n            // Act - start command\n            commandPromise = (provider as any).runCommand('nxTest', { project: 'test-app' });\n            await new Promise(resolve => setTimeout(resolve, 10)); // Let command start\n\n            // Simulate user cancellation\n            const cancelMessage: WebviewMessage = {\n                command: 'cancelCommand',\n                data: {}\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n            await messageHandler(cancelMessage);\n\n            // Complete the cancelled command\n            mockChildProcess.emit('close', 1);\n            await commandPromise;\n\n            // Assert\n            expect(mockChildProcess.kill).toHaveBeenCalledWith('SIGTERM');\n            expect((provider as any)._state.isStreaming).toBe(false);\n        });\n\n        it('should handle command failure with error streaming', async () => {\n            // Arrange\n            let commandPromise: Promise<any>;\n\n            // Act - start command\n            commandPromise = (provider as any).runCommand('nxTest', { project: 'test-app' });\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Simulate error output\n            mockChildProcess.stderr.emit('data', Buffer.from('Error: Test failed\\n'));\n            mockChildProcess.stdout.emit('data', Buffer.from('FAIL src/app.spec.ts\\n'));\n            \n            // Complete with failure\n            mockChildProcess.emit('close', 1);\n            await commandPromise;\n\n            // Assert\n            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');\n            const errorMessages = streamingMessages.filter(msg => msg.message.type === 'error');\n            \n            expect(errorMessages.length).toBeGreaterThan(0);\n            expect(errorMessages[0].message.data.text).toContain('Error: Test failed');\n            \n            const completeMessages = streamingMessages.filter(msg => msg.message.type === 'complete');\n            expect(completeMessages[0].message.data.result.success).toBe(false);\n        });\n\n        it('should coordinate multi-step AI Debug workflow', async () => {\n            // Arrange\n            let commandPromise: Promise<any>;\n\n            // Act - start AI Debug command\n            commandPromise = (provider as any).runCommand('aiDebug', { project: 'test-app' });\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Simulate Step 1: Tests\n            mockChildProcess.stdout.emit('data', Buffer.from('Determining test suites to run...\\n'));\n            mockChildProcess.emit('close', 0);\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // The workflow should continue to git diff step\n            // Reset for next command\n            mockChildProcess.removeAllListeners();\n            mockChildProcess.stdout = new EventEmitter();\n            mockChildProcess.stderr = new EventEmitter();\n\n            // Simulate Step 2: Git diff\n            mockChildProcess.stdout.emit('data', Buffer.from('Analyzing repository...\\n'));\n            mockChildProcess.emit('close', 0);\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Wait for command to complete\n            await commandPromise;\n\n            // Assert\n            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');\n            const statusMessages = streamingMessages.filter(msg => msg.message.type === 'status');\n            \n            // Should have status messages for each step\n            const stepMessages = statusMessages.filter(msg => \n                msg.message.data.status.includes('Step 1/3') || \n                msg.message.data.status.includes('Step 2/3') ||\n                msg.message.data.status.includes('Step 3/3')\n            );\n            expect(stepMessages.length).toBeGreaterThan(0);\n            \n            // Should complete successfully\n            const completeMessages = streamingMessages.filter(msg => msg.message.type === 'complete');\n            expect(completeMessages.length).toBe(1);\n            expect(mockCommandRunner.runAiDebug).toHaveBeenCalled();\n        });\n    });\n\n    describe('webview message handling integration', () => {\n        beforeEach(() => {\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n        });\n\n        it('should handle runCommand message and stream results', async () => {\n            // Arrange\n            const message: WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'nxTest',\n                    project: 'test-app'\n                }\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            const handlePromise = messageHandler(message);\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Simulate command execution\n            mockChildProcess.stdout.emit('data', Buffer.from('Test output\\n'));\n            mockChildProcess.emit('close', 0);\n\n            await handlePromise;\n\n            // Assert\n            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');\n            expect(streamingMessages.length).toBeGreaterThan(0);\n        });\n\n        it('should handle clearOutput message', async () => {\n            // Arrange\n            const message: WebviewMessage = {\n                command: 'clearOutput',\n                data: {}\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n            \n            // Add some output first\n            streamingRunner.emit('output', 'test output');\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            // Should have cleared output\n            expect(receivedMessages.some(msg => msg.command === 'clearOutput')).toBe(true);\n        });\n    });\n\n    describe('progress tracking integration', () => {\n        beforeEach(() => {\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n        });\n\n        it('should track progress through command execution phases', async () => {\n            // Arrange\n            let commandPromise: Promise<any>;\n\n            // Act\n            commandPromise = (provider as any).runCommand('nxTest', { project: 'test-app' });\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Simulate different progress phases\n            mockChildProcess.stdout.emit('data', Buffer.from('Determining test suites to run...\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            mockChildProcess.stdout.emit('data', Buffer.from('Found test suites\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            mockChildProcess.stdout.emit('data', Buffer.from('Running tests\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            mockChildProcess.stdout.emit('data', Buffer.from('Test suites completed\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            mockChildProcess.emit('close', 0);\n            await commandPromise;\n\n            // Assert\n            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');\n            const progressMessages = streamingMessages.filter(msg => msg.message.type === 'progress');\n            \n            // Should have progress updates\n            expect(progressMessages.length).toBeGreaterThan(0);\n            \n            // Progress should increase over time\n            const progressValues = progressMessages.map(msg => msg.message.data.progress);\n            for (let i = 1; i < progressValues.length; i++) {\n                expect(progressValues[i]).toBeGreaterThanOrEqual(progressValues[i - 1]);\n            }\n        });\n\n        it('should update action button progress in state', async () => {\n            // Arrange\n            let commandPromise: Promise<any>;\n\n            // Act\n            commandPromise = (provider as any).runCommand('nxTest', { project: 'test-app' });\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Simulate progress\n            mockChildProcess.stdout.emit('data', Buffer.from('Running tests\\n'));\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Check intermediate state\n            const state = (provider as any)._state;\n            expect(state.actions.nxTest.status).toBe('running');\n\n            mockChildProcess.emit('close', 0);\n            await commandPromise;\n\n            // Check final state\n            expect(state.actions.nxTest.status).toBe('success');\n            expect(state.actions.nxTest.progress).toBeUndefined(); // Should be cleared on completion\n        });\n    });\n\n    describe('error handling integration', () => {\n        beforeEach(() => {\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n        });\n\n        it('should handle process spawn errors', async () => {\n            // Arrange\n            const { spawn } = require('child_process');\n            spawn.mockImplementationOnce(() => {\n                const errorProcess = new EventEmitter();\n                setTimeout(() => {\n                    errorProcess.emit('error', new Error('Command not found'));\n                }, 10);\n                return errorProcess;\n            });\n\n            // Act\n            await (provider as any).runCommand('nxTest', { project: 'test-app' });\n\n            // Assert\n            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');\n            const completeMessages = streamingMessages.filter(msg => msg.message.type === 'complete');\n            \n            expect(completeMessages.length).toBe(1);\n            expect(completeMessages[0].message.data.result.success).toBe(false);\n            expect(completeMessages[0].message.data.result.error).toContain('Command not found');\n        });\n\n        it('should handle invalid action gracefully', async () => {\n            // Act & Assert - should not throw\n            await expect((provider as any).runCommand('invalidAction' as any, {})).resolves.toBeUndefined();\n            \n            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(\n                expect.stringContaining('Unknown action: invalidAction')\n            );\n        });\n    });\n\n    describe('state consistency integration', () => {\n        beforeEach(() => {\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n        });\n\n        it('should maintain consistent state throughout command lifecycle', async () => {\n            // Arrange\n            const state = (provider as any)._state;\n            \n            expect(state.isStreaming).toBe(false);\n            expect(state.currentAction).toBeUndefined();\n\n            // Act - start command\n            const commandPromise = (provider as any).runCommand('nxTest', { project: 'test-app' });\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            // Assert - during execution\n            expect(state.isStreaming).toBe(true);\n            expect(state.currentAction).toBe('nxTest');\n            expect(state.actions.nxTest.status).toBe('running');\n\n            // Complete command\n            mockChildProcess.emit('close', 0);\n            await commandPromise;\n\n            // Assert - after completion\n            expect(state.isStreaming).toBe(false);\n            expect(state.currentAction).toBeUndefined();\n            expect(state.actions.nxTest.status).toBe('success');\n        });\n\n        it('should reset state properly on command failure', async () => {\n            // Arrange\n            const state = (provider as any)._state;\n\n            // Act - start and fail command\n            const commandPromise = (provider as any).runCommand('nxTest', { project: 'test-app' });\n            await new Promise(resolve => setTimeout(resolve, 10));\n\n            mockChildProcess.emit('close', 1); // Failure\n            await commandPromise;\n\n            // Assert\n            expect(state.isStreaming).toBe(false);\n            expect(state.currentAction).toBeUndefined();\n            expect(state.actions.nxTest.status).toBe('error');\n        });\n    });\n});"],"version":3}