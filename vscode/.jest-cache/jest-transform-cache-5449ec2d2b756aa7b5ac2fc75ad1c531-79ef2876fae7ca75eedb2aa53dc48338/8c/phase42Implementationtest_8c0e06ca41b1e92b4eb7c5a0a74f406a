ec46fc95b0ff859c6c64ff0f11d03aef
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock VSCode
globals_1.jest.mock('vscode', () => ({
    ExtensionContext: globals_1.jest.fn(),
    Disposable: globals_1.jest.fn()
}));
const intelligentSuggestionsEngine_1 = require("../engines/intelligentSuggestionsEngine");
const automatedInsightsEngine_1 = require("../engines/automatedInsightsEngine");
const naturalLanguageQueryEngine_1 = require("../engines/naturalLanguageQueryEngine");
const aiInsightsEngine_1 = require("../aiInsightsEngine");
(0, globals_1.describe)('Phase 4.2 AI Insights Implementation', () => {
    let mockContext;
    let aiInsightsEngine;
    let intelligentSuggestionsEngine;
    let automatedInsightsEngine;
    let naturalLanguageQueryEngine;
    const createMockExecutionContext = () => ({
        project: 'test-project',
        currentFiles: ['src/app.ts', 'src/utils.ts'],
        recentCommands: [],
        gitStatus: {
            branch: 'main',
            hasUncommittedChanges: true,
            changedFiles: ['src/app.ts'],
            commitsBehind: 0,
            commitsAhead: 1,
            lastCommit: {
                hash: 'abc123',
                message: 'Test commit',
                author: 'Test User',
                date: new Date(),
                files: ['src/app.ts'],
                stats: { additions: 10, deletions: 2 }
            }
        },
        testStatus: {
            passing: 15,
            failing: 3,
            skipped: 1,
            coverage: 85,
            lastRun: new Date(),
            failingTests: [
                {
                    suite: 'app.spec.ts',
                    test: 'should handle errors',
                    status: 'failed',
                    duration: 100,
                    error: 'Assertion failed',
                    timestamp: new Date()
                }
            ]
        },
        timestamp: new Date()
    });
    const createMockAnalysisData = () => ({
        commandHistory: [
            {
                id: 'cmd1',
                action: 'nxTest',
                project: 'test-project',
                status: 'completed',
                startTime: new Date(Date.now() - 60000),
                endTime: new Date(),
                progress: 100,
                output: ['Test passed'],
                initiator: {
                    id: 'user1',
                    name: 'Test User',
                    role: 'owner',
                    joinedAt: new Date(),
                    isOnline: true
                },
                sharedWith: []
            }
        ],
        projectFiles: ['src/app.ts', 'src/utils.ts', 'src/types.ts'],
        gitHistory: [
            {
                hash: 'abc123',
                message: 'Add new feature',
                author: 'Test User',
                date: new Date(),
                files: ['src/app.ts'],
                stats: { additions: 25, deletions: 5 }
            }
        ],
        testResults: [
            {
                suite: 'app.spec.ts',
                test: 'should work correctly',
                status: 'passed',
                duration: 50,
                timestamp: new Date()
            },
            {
                suite: 'utils.spec.ts',
                test: 'should handle edge case',
                status: 'failed',
                duration: 120,
                error: 'Expected true but got false',
                timestamp: new Date()
            }
        ],
        performanceMetrics: [
            {
                metric: 'test-execution-time',
                value: 45000,
                unit: 'ms',
                timestamp: new Date(),
                context: { project: 'test-project' }
            }
        ],
        errorPatterns: [
            {
                pattern: 'TypeError: Cannot read property',
                frequency: 5,
                lastSeen: new Date(),
                affectedFiles: ['src/app.ts', 'src/utils.ts'],
                suggestedFix: 'Add null check before property access'
            }
        ]
    });
    (0, globals_1.beforeEach)(() => {
        mockContext = {
            globalState: {
                get: globals_1.jest.fn().mockReturnValue(undefined),
                update: globals_1.jest.fn().mockImplementation((...args) => Promise.resolve())
            }
        };
        aiInsightsEngine = new aiInsightsEngine_1.AIInsightsEngine(mockContext);
        intelligentSuggestionsEngine = new intelligentSuggestionsEngine_1.IntelligentSuggestionsEngine(mockContext);
        automatedInsightsEngine = new automatedInsightsEngine_1.AutomatedInsightsEngine(mockContext);
        naturalLanguageQueryEngine = new naturalLanguageQueryEngine_1.NaturalLanguageQueryEngine(mockContext);
    });
    (0, globals_1.describe)('IntelligentSuggestionsEngine', () => {
        (0, globals_1.test)('should generate intelligent command suggestions', async () => {
            const context = createMockExecutionContext();
            const suggestions = await intelligentSuggestionsEngine.generateIntelligentSuggestions(context);
            (0, globals_1.expect)(suggestions).toBeDefined();
            (0, globals_1.expect)(Array.isArray(suggestions)).toBe(true);
            (0, globals_1.expect)(suggestions.length).toBeGreaterThan(0);
            // Should suggest running tests due to failing tests
            const testSuggestion = suggestions.find(s => s.command === 'nxTest');
            (0, globals_1.expect)(testSuggestion).toBeDefined();
            (0, globals_1.expect)(testSuggestion?.confidence).toBeGreaterThan(0.5); // Reduced expectation due to success prediction adjustments
        });
        (0, globals_1.test)('should analyze execution patterns', async () => {
            const executions = [
                {
                    id: 'cmd1',
                    action: 'nxTest',
                    project: 'test-project',
                    status: 'completed',
                    startTime: new Date(Date.now() - 60000),
                    endTime: new Date(),
                    progress: 100,
                    output: ['Tests passed'],
                    initiator: {
                        id: 'user1',
                        name: 'Test User',
                        role: 'owner',
                        joinedAt: new Date(),
                        isOnline: true
                    },
                    sharedWith: []
                }
            ];
            const patterns = await intelligentSuggestionsEngine.analyzeExecutionPatterns(executions);
            (0, globals_1.expect)(patterns).toBeDefined();
            (0, globals_1.expect)(Array.isArray(patterns)).toBe(true);
        });
        (0, globals_1.test)('should predict command success', async () => {
            const context = createMockExecutionContext();
            const predictions = await intelligentSuggestionsEngine.predictCommandSuccess(context);
            (0, globals_1.expect)(predictions).toBeDefined();
            (0, globals_1.expect)(predictions instanceof Map).toBe(true);
            (0, globals_1.expect)(predictions.size).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('AutomatedInsightsEngine', () => {
        (0, globals_1.test)('should generate automated insights', async () => {
            const data = createMockAnalysisData();
            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);
            (0, globals_1.expect)(insights).toBeDefined();
            (0, globals_1.expect)(Array.isArray(insights)).toBe(true);
            (0, globals_1.expect)(insights.length).toBeGreaterThan(0);
            // Should detect test failures
            const testInsight = insights.find(i => i.category === 'testing');
            (0, globals_1.expect)(testInsight).toBeDefined();
        });
        (0, globals_1.test)('should prioritize insights correctly', async () => {
            const data = createMockAnalysisData();
            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);
            // Insights should be sorted by priority and confidence
            for (let i = 0; i < insights.length - 1; i++) {
                const current = insights[i];
                const next = insights[i + 1];
                const priorityScore = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };
                const currentScore = priorityScore[current.priority] * current.confidence;
                const nextScore = priorityScore[next.priority] * next.confidence;
                (0, globals_1.expect)(currentScore).toBeGreaterThanOrEqual(nextScore);
            }
        });
        (0, globals_1.test)('should generate actionable suggestions', async () => {
            const data = createMockAnalysisData();
            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);
            const actionableInsights = insights.filter(i => i.actionable);
            (0, globals_1.expect)(actionableInsights.length).toBeGreaterThan(0);
            actionableInsights.forEach(insight => {
                (0, globals_1.expect)(insight.suggestions).toBeDefined();
                (0, globals_1.expect)(insight.suggestions.length).toBeGreaterThan(0);
                insight.suggestions.forEach(suggestion => {
                    (0, globals_1.expect)(suggestion.title).toBeDefined();
                    (0, globals_1.expect)(suggestion.description).toBeDefined();
                    (0, globals_1.expect)(suggestion.action).toBeDefined();
                    (0, globals_1.expect)(suggestion.estimatedImpact).toMatch(/^(low|medium|high)$/);
                    (0, globals_1.expect)(suggestion.estimatedEffort).toMatch(/^(minutes|hours|days)$/);
                });
            });
        });
    });
    (0, globals_1.describe)('NaturalLanguageQueryEngine', () => {
        (0, globals_1.test)('should process test-related queries', async () => {
            const query = "Show me failing tests from this week";
            const context = createMockAnalysisData();
            const result = await naturalLanguageQueryEngine.processQuery(query, context);
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.intent).toBe('test-query');
            (0, globals_1.expect)(result.confidence).toBeGreaterThan(0.5);
            (0, globals_1.expect)(result.response).toContain('test');
            (0, globals_1.expect)(result.suggestedActions.length).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should process error-related queries', async () => {
            const query = "What are the most common errors?";
            const context = createMockAnalysisData();
            const result = await naturalLanguageQueryEngine.processQuery(query, context);
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.intent).toBe('error-query');
            (0, globals_1.expect)(result.confidence).toBeGreaterThan(0.5);
            (0, globals_1.expect)(result.response).toContain('error');
        });
        (0, globals_1.test)('should generate contextual query suggestions', async () => {
            const context = createMockAnalysisData();
            const suggestions = await naturalLanguageQueryEngine.getQuerySuggestions(context);
            (0, globals_1.expect)(suggestions).toBeDefined();
            (0, globals_1.expect)(Array.isArray(suggestions)).toBe(true);
            (0, globals_1.expect)(suggestions.length).toBeGreaterThan(0);
            (0, globals_1.expect)(suggestions.length).toBeLessThanOrEqual(8);
            // Should include test-related suggestions due to failing tests
            const testSuggestion = suggestions.find(s => s.toLowerCase().includes('test'));
            (0, globals_1.expect)(testSuggestion).toBeDefined();
        });
    });
    (0, globals_1.describe)('AIInsightsEngine Integration', () => {
        (0, globals_1.test)('should integrate Phase 4.2 engines', async () => {
            const data = createMockAnalysisData();
            const context = createMockExecutionContext();
            // Test enhanced pattern analysis
            const insights = await aiInsightsEngine.analyzePattern(data);
            (0, globals_1.expect)(insights).toBeDefined();
            (0, globals_1.expect)(insights.length).toBeGreaterThan(0);
            // Test enhanced command suggestions
            const suggestions = await aiInsightsEngine.suggestCommand(context);
            (0, globals_1.expect)(suggestions).toBeDefined();
            (0, globals_1.expect)(suggestions.length).toBeGreaterThan(0);
            (0, globals_1.expect)(suggestions.length).toBeLessThanOrEqual(8);
            // Test enhanced natural language processing
            const query = "Show me failing tests";
            const queryResult = await aiInsightsEngine.processNaturalLanguageQuery(query, data);
            (0, globals_1.expect)(queryResult).toBeDefined();
            (0, globals_1.expect)(queryResult.confidence).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should provide Phase 4.2 specific methods', async () => {
            const data = createMockAnalysisData();
            const context = createMockExecutionContext();
            // Test query suggestions
            const querySuggestions = await aiInsightsEngine.getQuerySuggestions(data);
            (0, globals_1.expect)(querySuggestions).toBeDefined();
            (0, globals_1.expect)(Array.isArray(querySuggestions)).toBe(true);
            // Test execution pattern analysis
            await aiInsightsEngine.analyzeExecutionPatterns(data.commandHistory);
            // Should not throw
            // Test command success prediction
            const predictions = await aiInsightsEngine.predictCommandSuccess(context);
            (0, globals_1.expect)(predictions).toBeDefined();
            (0, globals_1.expect)(predictions instanceof Map).toBe(true);
            // Test query analytics
            const analytics = await aiInsightsEngine.getQueryAnalytics();
            (0, globals_1.expect)(analytics).toBeDefined();
            (0, globals_1.expect)(analytics).toHaveProperty('patterns');
        });
        (0, globals_1.test)('should save and dispose engine states properly', async () => {
            await aiInsightsEngine.saveEngineStates();
            // Should not throw
            aiInsightsEngine.dispose();
            // Should not throw
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,