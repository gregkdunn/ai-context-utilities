{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/git/GitCommandProvider.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/git/GitCommandProvider.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { GitDiffManager, GitCommit, GitBranch, GitDiff } from './GitDiffManager';\n\nexport class GitCommandProvider {\n    constructor(private gitManager: GitDiffManager) {}\n\n    register(): vscode.Disposable[] {\n        return [\n            vscode.commands.registerCommand('git.interactiveDiff', this.interactiveDiff.bind(this)),\n            vscode.commands.registerCommand('git.compareCommits', this.compareCommits.bind(this)),\n            vscode.commands.registerCommand('git.compareBranches', this.compareBranches.bind(this)),\n            vscode.commands.registerCommand('git.showCommitHistory', this.showCommitHistory.bind(this)),\n            vscode.commands.registerCommand('git.enhancedDiff', this.enhancedDiff.bind(this))\n        ];\n    }\n\n    private async interactiveDiff(): Promise<void> {\n        try {\n            const isGitRepo = await this.gitManager.isGitRepository();\n            if (!isGitRepo) {\n                vscode.window.showErrorMessage('Not a Git repository');\n                return;\n            }\n\n            const action = await vscode.window.showQuickPick([\n                { label: 'Compare Commits', description: 'Select two commits to compare' },\n                { label: 'Compare Branches', description: 'Select two branches to compare' },\n                { label: 'View Commit History', description: 'Browse recent commits' }\n            ], {\n                placeHolder: 'What would you like to do?'\n            });\n\n            if (!action) {\n                return;\n            }\n\n            switch (action.label) {\n                case 'Compare Commits':\n                    await this.compareCommits();\n                    break;\n                case 'Compare Branches':\n                    await this.compareBranches();\n                    break;\n                case 'View Commit History':\n                    await this.showCommitHistory();\n                    break;\n            }\n        } catch (error) {\n            vscode.window.showErrorMessage(`Interactive diff failed: ${(error as Error).message}`);\n        }\n    }\n\n    private async compareCommits(): Promise<void> {\n        try {\n            const commits = await this.gitManager.getCommitHistory(50);\n            if (commits.length === 0) {\n                vscode.window.showErrorMessage('No commits found');\n                return;\n            }\n\n            const commit1 = await this.selectCommit(commits, 'Select first commit');\n            if (!commit1) {\n                return;\n            }\n\n            const commit2 = await this.selectCommit(commits, 'Select second commit');\n            if (!commit2) {\n                return;\n            }\n\n            const diff = await this.gitManager.getCommitDiff(commit1.hash, commit2.hash);\n            await this.showDiffResults(diff, `${commit1.hash.substring(0, 7)} → ${commit2.hash.substring(0, 7)}`);\n\n            // Show detailed diff in a new document\n            const detailedDiff = await this.gitManager.getInteractiveDiff(commit1.hash, commit2.hash);\n            await this.showDiffDocument(detailedDiff, `Diff: ${commit1.hash.substring(0, 7)} → ${commit2.hash.substring(0, 7)}`);\n        } catch (error) {\n            vscode.window.showErrorMessage(`Compare commits failed: ${(error as Error).message}`);\n        }\n    }\n\n    private async compareBranches(): Promise<void> {\n        try {\n            const branches = await this.gitManager.getBranches();\n            if (branches.length === 0) {\n                vscode.window.showErrorMessage('No branches found');\n                return;\n            }\n\n            const branch1 = await this.selectBranch(branches, 'Select first branch');\n            if (!branch1) {\n                return;\n            }\n\n            const branch2 = await this.selectBranch(branches, 'Select second branch');\n            if (!branch2) {\n                return;\n            }\n\n            const diff = await this.gitManager.getBranchDiff(branch1.name, branch2.name);\n            await this.showDiffResults(diff, `${branch1.name} → ${branch2.name}`);\n\n            // Show detailed diff in a new document\n            const detailedDiff = await this.gitManager.getInteractiveDiff(branch1.name, branch2.name);\n            await this.showDiffDocument(detailedDiff, `Diff: ${branch1.name} → ${branch2.name}`);\n        } catch (error) {\n            vscode.window.showErrorMessage(`Compare branches failed: ${(error as Error).message}`);\n        }\n    }\n\n    private async showCommitHistory(): Promise<void> {\n        try {\n            const commits = await this.gitManager.getCommitHistory(100);\n            if (commits.length === 0) {\n                vscode.window.showErrorMessage('No commits found');\n                return;\n            }\n\n            const quickPick = vscode.window.createQuickPick();\n            quickPick.items = commits.map(commit => ({\n                label: `$(git-commit) ${commit.hash.substring(0, 7)}`,\n                description: commit.message,\n                detail: `${commit.author} • ${commit.date}`,\n                commit\n            }));\n            quickPick.title = 'Git Commit History';\n            quickPick.placeholder = 'Select a commit to view details';\n            quickPick.matchOnDescription = true;\n            quickPick.matchOnDetail = true;\n\n            quickPick.onDidAccept(async () => {\n                const selectedItem = quickPick.selectedItems[0] as any;\n                if (selectedItem) {\n                    await this.showCommitDetails(selectedItem.commit);\n                }\n                quickPick.dispose();\n            });\n\n            quickPick.show();\n        } catch (error) {\n            vscode.window.showErrorMessage(`Show commit history failed: ${(error as Error).message}`);\n        }\n    }\n\n    private async enhancedDiff(): Promise<void> {\n        try {\n            const currentBranch = await this.gitManager.getCurrentBranch();\n            const mainBranch = await this.detectMainBranch();\n\n            if (currentBranch === mainBranch) {\n                vscode.window.showInformationMessage('You are already on the main branch');\n                return;\n            }\n\n            const diff = await this.gitManager.getBranchDiff(mainBranch, currentBranch);\n            await this.showDiffResults(diff, `${mainBranch} → ${currentBranch}`);\n\n            // Show detailed diff in a new document\n            const detailedDiff = await this.gitManager.getInteractiveDiff(mainBranch, currentBranch);\n            await this.showDiffDocument(detailedDiff, `Enhanced Diff: ${mainBranch} → ${currentBranch}`);\n        } catch (error) {\n            vscode.window.showErrorMessage(`Enhanced diff failed: ${(error as Error).message}`);\n        }\n    }\n\n    private async selectCommit(commits: GitCommit[], title: string): Promise<GitCommit | undefined> {\n        const selected = await vscode.window.showQuickPick(\n            commits.map(commit => ({\n                label: `$(git-commit) ${commit.hash.substring(0, 7)}`,\n                description: commit.message,\n                detail: `${commit.author} • ${commit.date}`,\n                commit\n            })),\n            {\n                placeHolder: title,\n                matchOnDescription: true,\n                matchOnDetail: true\n            }\n        );\n\n        return selected?.commit;\n    }\n\n    private async selectBranch(branches: GitBranch[], title: string): Promise<GitBranch | undefined> {\n        const selected = await vscode.window.showQuickPick(\n            branches.map(branch => ({\n                label: `$(git-branch) ${branch.name}`,\n                description: branch.isRemote ? 'Remote' : 'Local',\n                detail: branch.isHead ? 'Current branch' : '',\n                branch\n            })),\n            {\n                placeHolder: title\n            }\n        );\n\n        return selected?.branch;\n    }\n\n    private async showDiffResults(diff: GitDiff, title: string): Promise<void> {\n        const panel = vscode.window.createWebviewPanel(\n            'gitDiffResults',\n            `Git Diff: ${title}`,\n            vscode.ViewColumn.Two,\n            { enableScripts: true }\n        );\n\n        const filesList = diff.files.map(file => {\n            const statusIcon = this.getStatusIcon(file.status);\n            return `<div class=\"file-item\">\n                <span class=\"status-icon ${file.status}\">${statusIcon}</span>\n                <span class=\"file-path\">${file.path}</span>\n            </div>`;\n        }).join('');\n\n        panel.webview.html = `\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <style>\n                    body { font-family: var(--vscode-font-family); }\n                    .summary { \n                        background: var(--vscode-editor-background); \n                        padding: 15px; \n                        border-radius: 5px; \n                        margin-bottom: 20px; \n                    }\n                    .file-item { \n                        display: flex; \n                        align-items: center; \n                        padding: 5px 0; \n                        border-bottom: 1px solid var(--vscode-widget-border);\n                    }\n                    .status-icon { \n                        margin-right: 10px; \n                        width: 20px; \n                        font-weight: bold; \n                    }\n                    .added { color: var(--vscode-gitDecoration-addedResourceForeground); }\n                    .modified { color: var(--vscode-gitDecoration-modifiedResourceForeground); }\n                    .deleted { color: var(--vscode-gitDecoration-deletedResourceForeground); }\n                    .renamed { color: var(--vscode-gitDecoration-renamedResourceForeground); }\n                    .file-path { font-family: var(--vscode-editor-font-family); }\n                </style>\n            </head>\n            <body>\n                <div class=\"summary\">\n                    <h3>Diff Summary</h3>\n                    <p>${diff.summary}</p>\n                </div>\n                <div class=\"files\">\n                    <h3>Changed Files (${diff.files.length})</h3>\n                    ${filesList}\n                </div>\n            </body>\n            </html>\n        `;\n    }\n\n    private getStatusIcon(status: string): string {\n        switch (status) {\n            case 'added': return '+';\n            case 'modified': return '~';\n            case 'deleted': return '-';\n            case 'renamed': return '→';\n            default: return '?';\n        }\n    }\n\n    private async showDiffDocument(diffContent: string, title: string): Promise<void> {\n        const doc = await vscode.workspace.openTextDocument({\n            content: diffContent,\n            language: 'diff'\n        });\n        await vscode.window.showTextDocument(doc, { preview: false });\n    }\n\n    private async showCommitDetails(commit: GitCommit): Promise<void> {\n        const details = `# Commit Details\\n\\n` +\n            `**Hash:** ${commit.hash}\\n` +\n            `**Message:** ${commit.message}\\n` +\n            `**Author:** ${commit.author}\\n` +\n            `**Date:** ${commit.date}\\n` +\n            `**Parents:** ${commit.parents.join(', ')}\\n\\n` +\n            `## Actions\\n\\n` +\n            `- Compare with parent\\n` +\n            `- View file changes\\n` +\n            `- Show commit in terminal`;\n\n        const doc = await vscode.workspace.openTextDocument({\n            content: details,\n            language: 'markdown'\n        });\n        await vscode.window.showTextDocument(doc);\n    }\n\n    private async detectMainBranch(): Promise<string> {\n        const branches = await this.gitManager.getBranches();\n        const mainBranches = ['main', 'master', 'develop'];\n        \n        for (const mainBranch of mainBranches) {\n            if (branches.some(b => b.name === mainBranch)) {\n                return mainBranch;\n            }\n        }\n        \n        return 'main'; // Default fallback\n    }\n}\n"],"version":3}