{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/engines/metricsCollectionEngine.ts","mappings":";;;AAAA,mCAAsC;AAetC;;;;;;;;;;GAUG;AACH,MAAa,uBAAwB,SAAQ,qBAAY;IAC/C,MAAM,CAA0B;IAChC,iBAAiB,GAAkC,IAAI,GAAG,EAAE,CAAC;IAC7D,eAAe,GAAgC,IAAI,GAAG,EAAE,CAAC;IACzD,YAAY,GAA+B,IAAI,GAAG,EAAE,CAAC;IACrD,gBAAgB,GAAmC,IAAI,GAAG,EAAE,CAAC;IAC7D,sBAAsB,CAAkB;IACxC,mBAAmB,CAAkB;IACrC,YAAY,GAAG,KAAK,CAAC;IACrB,mBAAmB,GAAS,IAAI,IAAI,EAAE,CAAC;IAE/C,YAAY,SAAkC,EAAE;QAC9C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG;YACZ,UAAU,EAAE,KAAK;YACjB,aAAa,EAAE,IAAI,EAAE,YAAY;YACjC,mBAAmB,EAAE,IAAI;YACzB,qBAAqB,EAAE,IAAI,EAAE,WAAW;YACxC,mBAAmB,EAAE,IAAI;YACzB,oBAAoB,EAAE,IAAI;YAC1B,kBAAkB,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;YAC5C,eAAe,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,SAAS;YACnD,sBAAsB,EAAE,IAAI;YAC5B,kBAAkB,EAAE,IAAI;YACxB,GAAG,MAAM;SACV,CAAC;QAEF,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACK,gBAAgB;QACtB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,2BAA2B,EAAE,CAAC;QACnC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAE3B,IAAI,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;YACpC,IAAI,CAAC,4BAA4B,EAAE,CAAC;QACtC,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,eAAe;QACpB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,mBAAmB,GAAG,IAAI,IAAI,EAAE,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,cAAc;QACnB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,UAA4B;QAC9C,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,IAAI,IAAI,CAAC,EAAE,CAAC;YAC9E,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,EAAE,CAAC;YACrF,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QACxD,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,UAAkB;QACpC,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1D,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACzC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QACzC,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,aAAa,CAAC,UAAkB,EAAE,KAAa,EAAE,IAA6B;QACnF,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC1D,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,uBAAuB,UAAU,EAAE,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,WAAW,GAAgB;YAC/B,IAAI,EAAE,UAAU;YAChB,KAAK;YACL,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,IAAI,EAAE,IAAI,IAAI,EAAE;YAChB,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,IAAI,EAAE,UAAU,CAAC,IAAI;SACtB,CAAC;QAEF,yBAAyB;QACzB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,EAAE,CAAC;YAC3C,OAAO;QACT,CAAC;QAED,iBAAiB;QACjB,IAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,CAAC;YAC7F,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,WAAW,CAAC,CAAC;YACjD,OAAO;QACT,CAAC;QAED,gBAAgB;QAChB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,cAAc,CAAC,OAAyE;QAC7F,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,oBAAoB,CAAC,IAAoB;QAC9C,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,oBAAoB,CAAC,MAAc;QACxC,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,oBAAoB,CACzB,UAAkB,EAClB,MAAyB,EACzB,SAAgB,EAChB,OAAc;QAEd,MAAM,QAAQ,GAAG,GAAG,UAAU,IAAI,MAAM,IAAI,SAAS,EAAE,OAAO,EAAE,IAAI,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC;QAEzF,oBAAoB;QACpB,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC;QAC9C,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAChF,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAEtE,mBAAmB;QACnB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAEjD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,gBAAgB;QACrB,OAAO;YACL,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,GAAG,EAAE,IAAI,CAAC,kBAAkB,EAAE;YAC9B,MAAM,EAAE,IAAI,CAAC,qBAAqB,EAAE;YACpC,IAAI,EAAE,IAAI,CAAC,mBAAmB,EAAE;YAChC,OAAO,EAAE,IAAI,CAAC,sBAAsB,EAAE;YACtC,SAAS,EAAE,IAAI,CAAC,sBAAsB,EAAE;YACxC,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE;SAC/B,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,WAAW;QAChB,MAAM,QAAQ,GAAoB;YAChC,EAAE,EAAE,IAAI,CAAC,kBAAkB,EAAE;YAC7B,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,OAAO,EAAE,IAAI,GAAG,EAAE;YAClB,aAAa,EAAE,IAAI,CAAC,gBAAgB,EAAE;YACtC,eAAe,EAAE,IAAI,CAAC,kBAAkB,EAAE;YAC1C,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE;SACnC,CAAC;QAEF,oCAAoC;QACpC,KAAK,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACrD,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;QAChD,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,oBAAoB;QACzB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,kBAAkB;QACvB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACI,eAAe;QACpB,MAAM,MAAM,GAAG,IAAI,GAAG,EAA+C,CAAC;QAEtE,KAAK,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACrD,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE;gBACrB,IAAI,EAAE,MAAM,CAAC,MAAM;gBACnB,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;aAC3D,CAAC,CAAC;QACL,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,YAAY;QACjB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC1B,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,aAAa,CAAC,SAAwC,MAAM;QACjE,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAEpC,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACrC,KAAK,KAAK;gBACR,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YACpC,KAAK,YAAY;gBACf,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAC3C;gBACE,MAAM,IAAI,KAAK,CAAC,8BAA8B,MAAM,EAAE,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAED;;OAEG;IACI,eAAe;QACpB,MAAM,KAAK,GAAG;YACZ,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI;YACzC,WAAW,EAAE,CAAC;YACd,iBAAiB,EAAE,CAAC;YACpB,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE,CAAC;YACd,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE;SACxD,CAAC;QAEF,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC;YAChD,KAAK,CAAC,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC;QACrC,CAAC;QAED,KAAK,CAAC,iBAAiB,GAAG,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAChH,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC,WAAW,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,oBAAoB;QAEtF,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAChC,aAAa,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC1C,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,yBAAyB;IAEjB,mBAAmB;QACzB,MAAM,cAAc,GAAuB;YACzC;gBACE,IAAI,EAAE,wBAAwB;gBAC9B,IAAI,EAAE,WAAW;gBACjB,IAAI,EAAE,cAAc;gBACpB,WAAW,EAAE,gCAAgC;gBAC7C,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;aACpC;YACD;gBACE,IAAI,EAAE,yBAAyB;gBAC/B,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,6BAA6B;gBAC1C,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;aACpC;YACD;gBACE,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,8BAA8B;gBAC3C,IAAI,EAAE,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC;aACxC;YACD;gBACE,IAAI,EAAE,cAAc;gBACpB,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,sBAAsB;gBACnC,IAAI,EAAE,CAAC,WAAW,CAAC;aACpB;YACD;gBACE,IAAI,EAAE,WAAW;gBACjB,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,YAAY;gBAClB,WAAW,EAAE,mBAAmB;gBAChC,IAAI,EAAE,CAAC,WAAW,CAAC;aACpB;SACF,CAAC;QAEF,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEO,2BAA2B;QACjC,MAAM,YAAY,GAAqB;YACrC;gBACE,EAAE,EAAE,gBAAgB;gBACpB,IAAI,EAAE,qBAAqB;gBAC3B,SAAS,EAAE,+BAA+B;gBAC1C,MAAM,EAAE,QAAQ;gBAChB,UAAU,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE;gBAC/B,QAAQ,EAAE,IAAI;aACf;YACD;gBACE,EAAE,EAAE,2BAA2B;gBAC/B,IAAI,EAAE,2BAA2B;gBACjC,SAAS,EAAE,yBAAyB;gBACpC,MAAM,EAAE,UAAU;gBAClB,UAAU,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE;gBAC5B,QAAQ,EAAE,IAAI;aACf;SACF,CAAC;QAEF,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;IAChE,CAAC;IAEO,4BAA4B;QAClC,IAAI,CAAC,sBAAsB,GAAG,WAAW,CAAC,GAAG,EAAE;YAC7C,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBACtB,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC9B,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;IACxC,CAAC;IAEO,oBAAoB;QAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExC,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,aAAa,CAAC,qBAAqB,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;QACrF,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;IACvF,CAAC;IAEO,mBAAmB;QACzB,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,GAAG,EAAE;YAC1C,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAChC,CAAC;IAEO,sBAAsB,CAAC,UAAkB;QAC/C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YACvC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IAEO,wBAAwB,CAAC,UAA4B;QAC3D,OAAO,CAAC,CAAC,CACP,UAAU,CAAC,IAAI;YACf,UAAU,CAAC,IAAI;YACf,UAAU,CAAC,IAAI;YACf,CAAC,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CACvE,CAAC;IACJ,CAAC;IAEO,mBAAmB,CAAC,KAAkB,EAAE,UAA4B;QAC1E,6BAA6B;QAC7B,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1D,OAAO,KAAK,CAAC;QACf,CAAC;QAED,uCAAuC;QACvC,IAAI,UAAU,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,IAAI,UAAU,CAAC,IAAI,KAAK,YAAY,CAAC,EAAE,CAAC;YACzF,OAAO,KAAK,CAAC;QACf,CAAC;QAED,yCAAyC;QACzC,IAAI,UAAU,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;YACrD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,mBAAmB,CAAC,MAAmB;QAC7C,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC;YACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAAA,SAAS;YAAA,CAAC;YAE/B,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC;gBACnD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC,CAAC,qBAAqB;IACpC,CAAC;IAEO,iBAAiB,CAAC,SAAiB,EAAE,MAAmB;QAC9D,IAAI,CAAC;YACH,iFAAiF;YACjF,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,CAAC;YAC3B,OAAO,IAAI,QAAQ,CAAC,QAAQ,EAAE,UAAU,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAEO,eAAe,CAAC,IAAoB,EAAE,MAAmB;QAC/D,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;YACpB,KAAK,QAAQ;gBACX,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,UAAU,IAAI,CAAC,CAAC;gBACpD,OAAO,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC;YAEpC,KAAK,UAAU;gBACb,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,OAAO,IAAI,GAAG,CAAC;gBAChD,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAEvD,KAAK,QAAQ;gBACX,OAAO,KAAK,CAAC,CAAC,wBAAwB;YAExC;gBACE,OAAO,IAAI,CAAC;QAChB,CAAC;IACH,CAAC;IAEO,kBAAkB,CAAC,UAAkB,EAAE,OAAe;QAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,EAAE,CAAC;YAAA,OAAO,IAAI,CAAC;QAAA,CAAC;QAE3B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,YAAY,GAAG,GAAG,GAAG,IAAI,CAAC;QAChC,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,CAAC;QAE9E,OAAO,YAAY,CAAC,MAAM,GAAG,OAAO,CAAC;IACvC,CAAC;IAEO,WAAW,CAAC,WAAwB;QAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACvC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEzB,+BAA+B;QAC/B,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,KAAK,CAAC,EAAE,CAAC;YACtD,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,sBAAsB;QACxC,CAAC;IACH,CAAC;IAEO,eAAe;QACrB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IAEO,cAAc;QACpB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAEzF,KAAK,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACrD,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;YACxE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAEO,qBAAqB;QAC3B,gDAAgD;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QAExE,KAAK,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACvD,IAAI,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,UAAU,EAAE,CAAC;gBACjD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC;QACH,CAAC;IACH,CAAC;IAEO,uBAAuB,CAC7B,MAAqB,EACrB,SAAgB,EAChB,OAAc;QAEd,IAAI,QAAQ,GAAG,MAAM,CAAC;QAEtB,IAAI,SAAS,EAAE,CAAC;YACd,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,CAAC;QAC5D,CAAC;QAED,IAAI,OAAO,EAAE,CAAC;YACZ,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,oBAAoB,CAAC,MAAqB,EAAE,MAAyB;QAC3E,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,OAAO;gBACL,UAAU,EAAE,EAAE;gBACd,MAAM;gBACN,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,KAAK,EAAE,CAAC;gBACR,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;gBACN,GAAG,EAAE,CAAC;aACP,CAAC;QACJ,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpE,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAEpD,OAAO;YACL,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI;YAC1B,MAAM;YACN,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,KAAK,EAAE,MAAM,CAAC,MAAM;YACpB,GAAG;YACH,GAAG,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM;YACxB,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC;YACpB,GAAG,EAAE,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1C,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,EAAE,CAAC;YAC/C,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,EAAE,CAAC;YAC/C,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,EAAE,CAAC;YAC/C,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,EAAE,CAAC;SAChD,CAAC;IACJ,CAAC;IAEO,mBAAmB,CAAC,YAAsB,EAAE,UAAkB;QACpE,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,GAAG,GAAG,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACtE,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;IAEO,kBAAkB;QACxB,mCAAmC;QACnC,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG;YAC1B,KAAK,EAAE,CAAC;YACR,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;SAC7B,CAAC;IACJ,CAAC;IAEO,qBAAqB;QAC3B,sCAAsC;QACtC,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,MAAM;QAC5C,MAAM,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;QAEjD,OAAO;YACL,KAAK;YACL,IAAI;YACJ,IAAI,EAAE,KAAK,GAAG,IAAI;YAClB,UAAU,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,GAAG;SACjC,CAAC;IACJ,CAAC;IAEO,mBAAmB;QACzB,oCAAoC;QACpC,MAAM,KAAK,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,QAAQ;QAChD,MAAM,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;QAEjD,OAAO;YACL,KAAK;YACL,IAAI;YACJ,IAAI,EAAE,KAAK,GAAG,IAAI;YAClB,UAAU,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,GAAG;SACjC,CAAC;IACJ,CAAC;IAEO,sBAAsB;QAC5B,uCAAuC;QACvC,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,YAAY;YAC7C,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,YAAY;YAC7C,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI;YAC/B,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI;SAChC,CAAC;IACJ,CAAC;IAEO,sBAAsB;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;IAC9C,CAAC;IAEO,eAAe;QACrB,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC;IACzD,CAAC;IAEO,kBAAkB;QACxB,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,mBAAmB;YACnC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI;YACzC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;YACnG,YAAY,EAAE,IAAI,CAAC,YAAY;SAChC,CAAC;IACJ,CAAC;IAEO,cAAc;QACpB,MAAM,KAAK,GAAG;YACZ,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI;YACpC,WAAW,EAAE,CAAC;YACd,aAAa,EAAE,CAAC;YAChB,aAAa,EAAE,QAAQ;YACvB,aAAa,EAAE,CAAC;SACjB,CAAC;QAEF,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC;YAChD,KAAK,CAAC,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC;YACnC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YACnE,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACrE,CAAC;QAED,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC;QAE7D,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,YAAY,CAAC,QAAyB;QAC5C,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,OAAO,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC;YAC7C,aAAa,EAAE,QAAQ,CAAC,aAAa;YACrC,KAAK,EAAE,QAAQ,CAAC,eAAe;SAChC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACd,CAAC;IAEO,WAAW,CAAC,QAAyB;QAC3C,MAAM,KAAK,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAE9C,KAAK,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;YACpD,MAAM,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;gBAC5B,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC/E,KAAK,CAAC,IAAI,CAAC,GAAG,UAAU,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAEO,kBAAkB,CAAC,QAAyB;QAClD,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,KAAK,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;YACpD,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9C,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;qBAC1C,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;qBAC9B,IAAI,CAAC,GAAG,CAAC,CAAC;gBACb,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC5C,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,WAAW,CAAC,KAAK,IAAI,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACzF,CAAC;QACH,CAAC;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAEO,kBAAkB;QACxB,OAAO,YAAY,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IAC7E,CAAC;CACF;AA7tBD,0DA6tBC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/engines/metricsCollectionEngine.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { \n  AnalyticsEvent, \n  MetricsCollectionConfig, \n  MetricDefinition, \n  MetricValue, \n  MetricAggregation,\n  CollectionRule,\n  MetricsSnapshot,\n  SystemMetrics,\n  CustomMetric,\n  MetricFilter,\n  AggregationPeriod\n} from '../../../types';\n\n/**\n * Advanced Metrics Collection Engine for Phase 4.4\n * \n * Comprehensive metrics collection system with:\n * - Real-time metrics capture and processing\n * - Custom metric definitions and aggregations\n * - Automatic system metrics collection\n * - Configurable collection rules and filters\n * - High-performance buffering and batching\n * - Metric validation and quality assurance\n */\nexport class MetricsCollectionEngine extends EventEmitter {\n  private config: MetricsCollectionConfig;\n  private metricDefinitions: Map<string, MetricDefinition> = new Map();\n  private collectionRules: Map<string, CollectionRule> = new Map();\n  private metricBuffer: Map<string, MetricValue[]> = new Map();\n  private aggregationCache: Map<string, MetricAggregation> = new Map();\n  private systemMetricsCollector?: NodeJS.Timeout;\n  private bufferFlushInterval?: NodeJS.Timeout;\n  private isCollecting = false;\n  private collectionStartTime: Date = new Date();\n\n  constructor(config: MetricsCollectionConfig = {}) {\n    super();\n    this.config = {\n      bufferSize: 10000,\n      flushInterval: 5000, // 5 seconds\n      enableSystemMetrics: true,\n      systemMetricsInterval: 1000, // 1 second\n      enableCustomMetrics: true,\n      maxMetricDefinitions: 1000,\n      aggregationPeriods: ['1m', '5m', '1h', '1d'],\n      retentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7 days\n      enableMetricValidation: true,\n      compressionEnabled: true,\n      ...config\n    };\n    \n    this.initializeEngine();\n  }\n\n  /**\n   * Initialize the metrics collection engine\n   */\n  private initializeEngine(): void {\n    this.setupDefaultMetrics();\n    this.setupDefaultCollectionRules();\n    this.startBufferFlushing();\n    \n    if (this.config.enableSystemMetrics) {\n      this.startSystemMetricsCollection();\n    }\n    \n    this.emit('engineInitialized');\n  }\n\n  /**\n   * Start metrics collection\n   */\n  public startCollection(): void {\n    if (this.isCollecting) {\n      return;\n    }\n    \n    this.isCollecting = true;\n    this.collectionStartTime = new Date();\n    this.emit('collectionStarted');\n  }\n\n  /**\n   * Stop metrics collection\n   */\n  public stopCollection(): void {\n    if (!this.isCollecting) {\n      return;\n    }\n    \n    this.isCollecting = false;\n    this.flushAllBuffers();\n    this.emit('collectionStopped');\n  }\n\n  /**\n   * Define a custom metric\n   */\n  public defineMetric(definition: MetricDefinition): void {\n    if (this.metricDefinitions.size >= (this.config.maxMetricDefinitions || 1000)) {\n      throw new Error('Maximum number of metric definitions reached');\n    }\n    \n    if (this.config.enableMetricValidation && !this.validateMetricDefinition(definition)) {\n      throw new Error('Invalid metric definition');\n    }\n    \n    this.metricDefinitions.set(definition.name, definition);\n    this.initializeMetricBuffer(definition.name);\n    this.emit('metricDefined', definition);\n  }\n\n  /**\n   * Remove a metric definition\n   */\n  public removeMetric(metricName: string): boolean {\n    const removed = this.metricDefinitions.delete(metricName);\n    if (removed) {\n      this.metricBuffer.delete(metricName);\n      this.aggregationCache.delete(metricName);\n      this.emit('metricRemoved', metricName);\n    }\n    return removed;\n  }\n\n  /**\n   * Collect a metric value\n   */\n  public collectMetric(metricName: string, value: number, tags?: Record<string, string>): void {\n    if (!this.isCollecting) {\n      return;\n    }\n    \n    const definition = this.metricDefinitions.get(metricName);\n    if (!definition) {\n      throw new Error(`Metric not defined: ${metricName}`);\n    }\n    \n    const metricValue: MetricValue = {\n      name: metricName,\n      value,\n      timestamp: new Date(),\n      tags: tags || {},\n      unit: definition.unit,\n      type: definition.type\n    };\n    \n    // Apply collection rules\n    if (!this.shouldCollectMetric(metricValue)) {\n      return;\n    }\n    \n    // Validate value\n    if (this.config.enableMetricValidation && !this.validateMetricValue(metricValue, definition)) {\n      this.emit('metricValidationFailed', metricValue);\n      return;\n    }\n    \n    // Add to buffer\n    this.addToBuffer(metricValue);\n    this.emit('metricCollected', metricValue);\n  }\n\n  /**\n   * Collect multiple metrics at once\n   */\n  public collectMetrics(metrics: { name: string; value: number; tags?: Record<string, string> }[]): void {\n    metrics.forEach(metric => {\n      this.collectMetric(metric.name, metric.value, metric.tags);\n    });\n  }\n\n  /**\n   * Create a collection rule\n   */\n  public createCollectionRule(rule: CollectionRule): void {\n    this.collectionRules.set(rule.id, rule);\n    this.emit('collectionRuleCreated', rule);\n  }\n\n  /**\n   * Remove a collection rule\n   */\n  public removeCollectionRule(ruleId: string): boolean {\n    const removed = this.collectionRules.delete(ruleId);\n    if (removed) {\n      this.emit('collectionRuleRemoved', ruleId);\n    }\n    return removed;\n  }\n\n  /**\n   * Get aggregated metrics for a time period\n   */\n  public getAggregatedMetrics(\n    metricName: string, \n    period: AggregationPeriod, \n    startTime?: Date, \n    endTime?: Date\n  ): MetricAggregation | null {\n    const cacheKey = `${metricName}_${period}_${startTime?.getTime()}_${endTime?.getTime()}`;\n    \n    // Check cache first\n    if (this.aggregationCache.has(cacheKey)) {\n      return this.aggregationCache.get(cacheKey)!;\n    }\n    \n    const buffer = this.metricBuffer.get(metricName);\n    if (!buffer) {\n      return null;\n    }\n    \n    const filteredValues = this.filterValuesByTimeRange(buffer, startTime, endTime);\n    const aggregation = this.calculateAggregation(filteredValues, period);\n    \n    // Cache the result\n    this.aggregationCache.set(cacheKey, aggregation);\n    \n    return aggregation;\n  }\n\n  /**\n   * Get current system metrics\n   */\n  public getSystemMetrics(): SystemMetrics {\n    return {\n      timestamp: new Date(),\n      cpu: this.getCurrentCpuUsage(),\n      memory: this.getCurrentMemoryUsage(),\n      disk: this.getCurrentDiskUsage(),\n      network: this.getCurrentNetworkUsage(),\n      processes: this.getCurrentProcessCount(),\n      uptime: this.getSystemUptime()\n    };\n  }\n\n  /**\n   * Get metrics snapshot\n   */\n  public getSnapshot(): MetricsSnapshot {\n    const snapshot: MetricsSnapshot = {\n      id: this.generateSnapshotId(),\n      timestamp: new Date(),\n      metrics: new Map(),\n      systemMetrics: this.getSystemMetrics(),\n      collectionStats: this.getCollectionStats(),\n      bufferStats: this.getBufferStats()\n    };\n    \n    // Include all current metric values\n    for (const [metricName, buffer] of this.metricBuffer) {\n      snapshot.metrics.set(metricName, [...buffer]);\n    }\n    \n    return snapshot;\n  }\n\n  /**\n   * Get metric definitions\n   */\n  public getMetricDefinitions(): MetricDefinition[] {\n    return Array.from(this.metricDefinitions.values());\n  }\n\n  /**\n   * Get collection rules\n   */\n  public getCollectionRules(): CollectionRule[] {\n    return Array.from(this.collectionRules.values());\n  }\n\n  /**\n   * Get metric buffer status\n   */\n  public getBufferStatus(): Map<string, { size: number; lastUpdated: Date }> {\n    const status = new Map<string, { size: number; lastUpdated: Date }>();\n    \n    for (const [metricName, buffer] of this.metricBuffer) {\n      const lastValue = buffer[buffer.length - 1];\n      status.set(metricName, {\n        size: buffer.length,\n        lastUpdated: lastValue ? lastValue.timestamp : new Date(0)\n      });\n    }\n    \n    return status;\n  }\n\n  /**\n   * Clear all metrics data\n   */\n  public clearMetrics(): void {\n    this.metricBuffer.clear();\n    this.aggregationCache.clear();\n    this.emit('metricsCleared');\n  }\n\n  /**\n   * Export metrics data\n   */\n  public exportMetrics(format: 'json' | 'csv' | 'prometheus' = 'json'): string {\n    const snapshot = this.getSnapshot();\n    \n    switch (format) {\n      case 'json':\n        return this.exportAsJson(snapshot);\n      case 'csv':\n        return this.exportAsCsv(snapshot);\n      case 'prometheus':\n        return this.exportAsPrometheus(snapshot);\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n  }\n\n  /**\n   * Get metrics statistics\n   */\n  public getMetricsStats(): any {\n    const stats = {\n      totalMetrics: this.metricDefinitions.size,\n      totalValues: 0,\n      bufferUtilization: 0,\n      collectionRate: 0,\n      memoryUsage: 0,\n      uptime: Date.now() - this.collectionStartTime.getTime()\n    };\n    \n    for (const buffer of this.metricBuffer.values()) {\n      stats.totalValues += buffer.length;\n    }\n    \n    stats.bufferUtilization = stats.totalValues / ((this.config.bufferSize || 10000) * this.metricDefinitions.size);\n    stats.collectionRate = stats.totalValues / (stats.uptime / 1000); // values per second\n    \n    return stats;\n  }\n\n  /**\n   * Dispose of the metrics collection engine\n   */\n  public dispose(): void {\n    this.stopCollection();\n    \n    if (this.systemMetricsCollector) {\n      clearInterval(this.systemMetricsCollector);\n    }\n    \n    if (this.bufferFlushInterval) {\n      clearInterval(this.bufferFlushInterval);\n    }\n    \n    this.clearMetrics();\n    this.removeAllListeners();\n  }\n\n  // Private helper methods\n\n  private setupDefaultMetrics(): void {\n    const defaultMetrics: MetricDefinition[] = [\n      {\n        name: 'command.execution.time',\n        type: 'histogram',\n        unit: 'milliseconds',\n        description: 'Time taken to execute commands',\n        tags: ['command', 'user', 'status']\n      },\n      {\n        name: 'command.execution.count',\n        type: 'counter',\n        unit: 'count',\n        description: 'Number of commands executed',\n        tags: ['command', 'user', 'status']\n      },\n      {\n        name: 'error.count',\n        type: 'counter',\n        unit: 'count',\n        description: 'Number of errors encountered',\n        tags: ['type', 'component', 'severity']\n      },\n      {\n        name: 'memory.usage',\n        type: 'gauge',\n        unit: 'bytes',\n        description: 'Current memory usage',\n        tags: ['component']\n      },\n      {\n        name: 'cpu.usage',\n        type: 'gauge',\n        unit: 'percentage',\n        description: 'Current CPU usage',\n        tags: ['component']\n      }\n    ];\n    \n    defaultMetrics.forEach(metric => this.defineMetric(metric));\n  }\n\n  private setupDefaultCollectionRules(): void {\n    const defaultRules: CollectionRule[] = [\n      {\n        id: 'error_sampling',\n        name: 'Error Sampling Rule',\n        condition: 'metric.name === \"error.count\"',\n        action: 'sample',\n        parameters: { sampleRate: 0.1 },\n        isActive: true\n      },\n      {\n        id: 'high_frequency_throttling',\n        name: 'High Frequency Throttling',\n        condition: 'metric.frequency > 1000',\n        action: 'throttle',\n        parameters: { maxRate: 100 },\n        isActive: true\n      }\n    ];\n    \n    defaultRules.forEach(rule => this.createCollectionRule(rule));\n  }\n\n  private startSystemMetricsCollection(): void {\n    this.systemMetricsCollector = setInterval(() => {\n      if (this.isCollecting) {\n        this.collectSystemMetrics();\n      }\n    }, this.config.systemMetricsInterval);\n  }\n\n  private collectSystemMetrics(): void {\n    const metrics = this.getSystemMetrics();\n    \n    this.collectMetric('system.cpu.usage', metrics.cpu.usage, { component: 'system' });\n    this.collectMetric('system.memory.usage', metrics.memory.used, { component: 'system' });\n    this.collectMetric('system.disk.usage', metrics.disk.used, { component: 'system' });\n    this.collectMetric('system.network.rx', metrics.network.rx, { component: 'system' });\n    this.collectMetric('system.network.tx', metrics.network.tx, { component: 'system' });\n  }\n\n  private startBufferFlushing(): void {\n    this.bufferFlushInterval = setInterval(() => {\n      this.flushOldValues();\n      this.clearAggregationCache();\n    }, this.config.flushInterval);\n  }\n\n  private initializeMetricBuffer(metricName: string): void {\n    if (!this.metricBuffer.has(metricName)) {\n      this.metricBuffer.set(metricName, []);\n    }\n  }\n\n  private validateMetricDefinition(definition: MetricDefinition): boolean {\n    return !!(\n      definition.name &&\n      definition.type &&\n      definition.unit &&\n      ['counter', 'gauge', 'histogram', 'summary'].includes(definition.type)\n    );\n  }\n\n  private validateMetricValue(value: MetricValue, definition: MetricDefinition): boolean {\n    // Check if value is a number\n    if (typeof value.value !== 'number' || isNaN(value.value)) {\n      return false;\n    }\n    \n    // Check for gauge-specific constraints\n    if (definition.type === 'gauge' && (value.value < 0 && definition.unit !== 'percentage')) {\n      return false;\n    }\n    \n    // Check for counter-specific constraints\n    if (definition.type === 'counter' && value.value < 0) {\n      return false;\n    }\n    \n    return true;\n  }\n\n  private shouldCollectMetric(metric: MetricValue): boolean {\n    for (const rule of this.collectionRules.values()) {\n      if (!rule.isActive) {continue;}\n      \n      if (this.evaluateCondition(rule.condition, metric)) {\n        return this.applyRuleAction(rule, metric);\n      }\n    }\n    \n    return true; // Collect by default\n  }\n\n  private evaluateCondition(condition: string, metric: MetricValue): boolean {\n    try {\n      // Simple condition evaluation (in production, use a proper expression evaluator)\n      const context = { metric };\n      return new Function('metric', `return ${condition}`)(metric);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  private applyRuleAction(rule: CollectionRule, metric: MetricValue): boolean {\n    switch (rule.action) {\n      case 'sample':\n        const sampleRate = rule.parameters?.sampleRate || 1;\n        return Math.random() < sampleRate;\n      \n      case 'throttle':\n        const maxRate = rule.parameters?.maxRate || 100;\n        return this.checkThrottleLimit(metric.name, maxRate);\n      \n      case 'filter':\n        return false; // Filter out the metric\n      \n      default:\n        return true;\n    }\n  }\n\n  private checkThrottleLimit(metricName: string, maxRate: number): boolean {\n    const buffer = this.metricBuffer.get(metricName);\n    if (!buffer) {return true;}\n    \n    const now = Date.now();\n    const oneSecondAgo = now - 1000;\n    const recentValues = buffer.filter(v => v.timestamp.getTime() > oneSecondAgo);\n    \n    return recentValues.length < maxRate;\n  }\n\n  private addToBuffer(metricValue: MetricValue): void {\n    const buffer = this.metricBuffer.get(metricValue.name);\n    if (!buffer) {\n      this.initializeMetricBuffer(metricValue.name);\n      return this.addToBuffer(metricValue);\n    }\n    \n    buffer.push(metricValue);\n    \n    // Keep buffer size under limit\n    if (buffer.length > (this.config.bufferSize || 10000)) {\n      buffer.shift(); // Remove oldest value\n    }\n  }\n\n  private flushAllBuffers(): void {\n    const snapshot = this.getSnapshot();\n    this.emit('buffersFlushed', snapshot);\n  }\n\n  private flushOldValues(): void {\n    const cutoffTime = Date.now() - (this.config.retentionPeriod || 7 * 24 * 60 * 60 * 1000);\n    \n    for (const [metricName, buffer] of this.metricBuffer) {\n      const filtered = buffer.filter(v => v.timestamp.getTime() > cutoffTime);\n      this.metricBuffer.set(metricName, filtered);\n    }\n  }\n\n  private clearAggregationCache(): void {\n    // Clear cache entries older than flush interval\n    const cutoffTime = Date.now() - (this.config.flushInterval || 5000) * 2;\n    \n    for (const [key, aggregation] of this.aggregationCache) {\n      if (aggregation.timestamp.getTime() < cutoffTime) {\n        this.aggregationCache.delete(key);\n      }\n    }\n  }\n\n  private filterValuesByTimeRange(\n    values: MetricValue[], \n    startTime?: Date, \n    endTime?: Date\n  ): MetricValue[] {\n    let filtered = values;\n    \n    if (startTime) {\n      filtered = filtered.filter(v => v.timestamp >= startTime);\n    }\n    \n    if (endTime) {\n      filtered = filtered.filter(v => v.timestamp <= endTime);\n    }\n    \n    return filtered;\n  }\n\n  private calculateAggregation(values: MetricValue[], period: AggregationPeriod): MetricAggregation {\n    if (values.length === 0) {\n      return {\n        metricName: '',\n        period,\n        timestamp: new Date(),\n        count: 0,\n        sum: 0,\n        avg: 0,\n        min: 0,\n        max: 0,\n        p50: 0,\n        p90: 0,\n        p95: 0,\n        p99: 0\n      };\n    }\n    \n    const sortedValues = values.map(v => v.value).sort((a, b) => a - b);\n    const sum = sortedValues.reduce((a, b) => a + b, 0);\n    \n    return {\n      metricName: values[0].name,\n      period,\n      timestamp: new Date(),\n      count: values.length,\n      sum,\n      avg: sum / values.length,\n      min: sortedValues[0],\n      max: sortedValues[sortedValues.length - 1],\n      p50: this.calculatePercentile(sortedValues, 50),\n      p90: this.calculatePercentile(sortedValues, 90),\n      p95: this.calculatePercentile(sortedValues, 95),\n      p99: this.calculatePercentile(sortedValues, 99)\n    };\n  }\n\n  private calculatePercentile(sortedValues: number[], percentile: number): number {\n    const index = Math.ceil((percentile / 100) * sortedValues.length) - 1;\n    return sortedValues[Math.max(0, Math.min(index, sortedValues.length - 1))];\n  }\n\n  private getCurrentCpuUsage(): any {\n    // Simplified CPU usage calculation\n    return {\n      usage: Math.random() * 100,\n      cores: 4,\n      loadAverage: [0.5, 0.7, 0.8]\n    };\n  }\n\n  private getCurrentMemoryUsage(): any {\n    // Simplified memory usage calculation\n    const total = 8 * 1024 * 1024 * 1024; // 8GB\n    const used = total * (0.3 + Math.random() * 0.4);\n    \n    return {\n      total,\n      used,\n      free: total - used,\n      percentage: (used / total) * 100\n    };\n  }\n\n  private getCurrentDiskUsage(): any {\n    // Simplified disk usage calculation\n    const total = 500 * 1024 * 1024 * 1024; // 500GB\n    const used = total * (0.4 + Math.random() * 0.3);\n    \n    return {\n      total,\n      used,\n      free: total - used,\n      percentage: (used / total) * 100\n    };\n  }\n\n  private getCurrentNetworkUsage(): any {\n    // Simplified network usage calculation\n    return {\n      rx: Math.random() * 1024 * 1024, // bytes/sec\n      tx: Math.random() * 1024 * 1024, // bytes/sec\n      rxPackets: Math.random() * 1000,\n      txPackets: Math.random() * 1000\n    };\n  }\n\n  private getCurrentProcessCount(): number {\n    return Math.floor(50 + Math.random() * 100);\n  }\n\n  private getSystemUptime(): number {\n    return Date.now() - this.collectionStartTime.getTime();\n  }\n\n  private getCollectionStats(): any {\n    return {\n      startTime: this.collectionStartTime,\n      totalMetrics: this.metricDefinitions.size,\n      totalValues: Array.from(this.metricBuffer.values()).reduce((sum, buffer) => sum + buffer.length, 0),\n      isCollecting: this.isCollecting\n    };\n  }\n\n  private getBufferStats(): any {\n    const stats = {\n      totalBuffers: this.metricBuffer.size,\n      totalValues: 0,\n      maxBufferSize: 0,\n      minBufferSize: Infinity,\n      avgBufferSize: 0\n    };\n    \n    for (const buffer of this.metricBuffer.values()) {\n      stats.totalValues += buffer.length;\n      stats.maxBufferSize = Math.max(stats.maxBufferSize, buffer.length);\n      stats.minBufferSize = Math.min(stats.minBufferSize, buffer.length);\n    }\n    \n    stats.avgBufferSize = stats.totalValues / stats.totalBuffers;\n    \n    return stats;\n  }\n\n  private exportAsJson(snapshot: MetricsSnapshot): string {\n    return JSON.stringify({\n      timestamp: snapshot.timestamp,\n      metrics: Object.fromEntries(snapshot.metrics),\n      systemMetrics: snapshot.systemMetrics,\n      stats: snapshot.collectionStats\n    }, null, 2);\n  }\n\n  private exportAsCsv(snapshot: MetricsSnapshot): string {\n    const lines = ['Metric,Value,Timestamp,Tags'];\n    \n    for (const [metricName, values] of snapshot.metrics) {\n      values.forEach((value: any) => {\n        const tags = Object.entries(value.tags).map(([k, v]) => `${k}=${v}`).join(';');\n        lines.push(`${metricName},${value.value},${value.timestamp.toISOString()},${tags}`);\n      });\n    }\n    \n    return lines.join('\\n');\n  }\n\n  private exportAsPrometheus(snapshot: MetricsSnapshot): string {\n    const lines: string[] = [];\n    \n    for (const [metricName, values] of snapshot.metrics) {\n      const latestValue = values[values.length - 1];\n      if (latestValue) {\n        const tags = Object.entries(latestValue.tags)\n          .map(([k, v]) => `${k}=\"${v}\"`)\n          .join(',');\n        const name = metricName.replace(/\\./g, '_');\n        lines.push(`${name}{${tags}} ${latestValue.value} ${latestValue.timestamp.getTime()}`);\n      }\n    }\n    \n    return lines.join('\\n');\n  }\n\n  private generateSnapshotId(): string {\n    return `snapshot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n"],"version":3}