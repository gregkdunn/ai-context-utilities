{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/projectDetector.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/projectDetector.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport interface ProjectInfo {\n    name: string;\n    root: string;\n    type: 'nx' | 'angular' | 'npm';\n    packageJsonPath: string;\n    configPath?: string;\n    projectType?: 'application' | 'library'; // Added for compatibility\n    targets?: Record<string, any>;\n}\n\nexport class ProjectDetector {\n    private _cache: Map<string, ProjectInfo[]> = new Map();\n\n    constructor(private readonly _workspacePath: string) {}\n\n    // Find NX workspace configuration\n    public async findNxWorkspace(): Promise<string | null> {\n        try {\n            const nxConfigPath = path.join(this._workspacePath, 'nx.json');\n            const angularConfigPath = path.join(this._workspacePath, 'angular.json');\n            \n            if (fs.existsSync(nxConfigPath)) {\n                return nxConfigPath;\n            }\n            \n            if (fs.existsSync(angularConfigPath)) {\n                return angularConfigPath;\n            }\n            \n            return null;\n        } catch (error) {\n            console.error('Error finding workspace configuration:', error);\n            return null;\n        }\n    }\n\n    // Get all projects\n    public async getProjects(): Promise<ProjectInfo[]> {\n        return this.detectProjects();\n    }\n\n    // Get specific project by name\n    public async getProject(name: string): Promise<ProjectInfo | null> {\n        const projects = await this.detectProjects();\n        return projects.find(project => project.name === name) || null;\n    }\n\n    // Check if project has a specific target\n    public async hasTarget(projectName: string, targetName: string): Promise<boolean> {\n        const project = await this.getProject(projectName);\n        return project?.targets?.[targetName] !== undefined;\n    }\n\n    // Get workspace root\n    public getWorkspaceRoot(): string {\n        return this._workspacePath;\n    }\n\n    // Legacy method name for compatibility\n    public async detectCurrentProject(): Promise<ProjectInfo | undefined> {\n        return this.getCurrentProject();\n    }\n\n    public async detectProjects(): Promise<ProjectInfo[]> {\n        const cacheKey = this._workspacePath;\n        \n        if (this._cache.has(cacheKey)) {\n            return this._cache.get(cacheKey)!;\n        }\n\n        const projects = await this._scanForProjects();\n        this._cache.set(cacheKey, projects);\n        \n        return projects;\n    }\n\n    private async _scanForProjects(): Promise<ProjectInfo[]> {\n        const projects: ProjectInfo[] = [];\n\n        try {\n            // Check for NX workspace\n            const nxConfigPath = path.join(this._workspacePath, 'nx.json');\n            if (fs.existsSync(nxConfigPath)) {\n                const nxProjects = await this._detectNxProjects();\n                projects.push(...nxProjects);\n            }\n\n            // Check for Angular workspace\n            const angularConfigPath = path.join(this._workspacePath, 'angular.json');\n            if (fs.existsSync(angularConfigPath)) {\n                const angularProjects = await this._detectAngularProjects();\n                projects.push(...angularProjects);\n            }\n\n            // Fallback to npm projects\n            if (projects.length === 0) {\n                const npmProjects = await this._detectNpmProjects();\n                projects.push(...npmProjects);\n            }\n\n        } catch (error) {\n            console.error('Error detecting projects:', error);\n        }\n\n        return projects;\n    }\n\n    private async _detectNxProjects(): Promise<ProjectInfo[]> {\n        const projects: ProjectInfo[] = [];\n        const nxConfigPath = path.join(this._workspacePath, 'nx.json');\n        \n        try {\n            const nxConfig = JSON.parse(fs.readFileSync(nxConfigPath, 'utf8'));\n            \n            // Check for projects in nx.json\n            if (nxConfig.projects) {\n                for (const [name, projectPath] of Object.entries(nxConfig.projects)) {\n                    const fullPath = path.join(this._workspacePath, projectPath as string);\n                    const packageJsonPath = path.join(fullPath, 'package.json');\n                    \n                    if (fs.existsSync(packageJsonPath)) {\n                        projects.push({\n                            name,\n                            root: fullPath,\n                            type: 'nx',\n                            packageJsonPath,\n                            configPath: nxConfigPath,\n                            projectType: 'application' // Default\n                        });\n                    }\n                }\n            }\n\n            // Check for project.json files\n            const projectJsonPaths = await this._findProjectJsonFiles();\n            for (const projectJsonPath of projectJsonPaths) {\n                const projectConfig = JSON.parse(fs.readFileSync(projectJsonPath, 'utf8'));\n                const projectDir = path.dirname(projectJsonPath);\n                const projectName = path.basename(projectDir);\n                \n                projects.push({\n                    name: projectName,\n                    root: projectDir,\n                    type: 'nx',\n                    packageJsonPath: path.join(projectDir, 'package.json'),\n                    configPath: projectJsonPath,\n                    projectType: projectConfig.projectType || 'application',\n                    targets: projectConfig.targets\n                });\n            }\n\n        } catch (error) {\n            console.error('Error detecting NX projects:', error);\n        }\n\n        return projects;\n    }\n\n    private async _detectAngularProjects(): Promise<ProjectInfo[]> {\n        const projects: ProjectInfo[] = [];\n        const angularConfigPath = path.join(this._workspacePath, 'angular.json');\n        \n        try {\n            const angularConfig = JSON.parse(fs.readFileSync(angularConfigPath, 'utf8'));\n            \n            if (angularConfig.projects) {\n                for (const [name, projectConfig] of Object.entries(angularConfig.projects)) {\n                    const config = projectConfig as any;\n                    const projectRoot = path.join(this._workspacePath, config.root || '');\n                    const packageJsonPath = path.join(projectRoot, 'package.json');\n                    \n                    projects.push({\n                        name,\n                        root: projectRoot,\n                        type: 'angular',\n                        packageJsonPath,\n                        configPath: angularConfigPath,\n                        projectType: config.projectType || 'application',\n                        targets: config.architect\n                    });\n                }\n            }\n\n        } catch (error) {\n            console.error('Error detecting Angular projects:', error);\n        }\n\n        return projects;\n    }\n\n    private async _detectNpmProjects(): Promise<ProjectInfo[]> {\n        const projects: ProjectInfo[] = [];\n        const packageJsonPath = path.join(this._workspacePath, 'package.json');\n        \n        if (fs.existsSync(packageJsonPath)) {\n            try {\n                const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n                \n                projects.push({\n                    name: packageJson.name || 'root',\n                    root: this._workspacePath,\n                    type: 'npm',\n                    packageJsonPath,\n                    projectType: 'application',\n                    targets: packageJson.scripts ? Object.keys(packageJson.scripts).reduce((acc, script) => {\n                        acc[script] = { executor: 'npm', options: { command: script } };\n                        return acc;\n                    }, {} as Record<string, any>) : undefined\n                });\n\n            } catch (error) {\n                console.error('Error detecting npm project:', error);\n            }\n        }\n\n        return projects;\n    }\n\n    private async _findProjectJsonFiles(): Promise<string[]> {\n        const projectJsonFiles: string[] = [];\n        \n        const findFiles = (dir: string) => {\n            const files = fs.readdirSync(dir);\n            \n            for (const file of files) {\n                const fullPath = path.join(dir, file);\n                const stat = fs.statSync(fullPath);\n                \n                if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {\n                    findFiles(fullPath);\n                } else if (file === 'project.json') {\n                    projectJsonFiles.push(fullPath);\n                }\n            }\n        };\n\n        try {\n            findFiles(this._workspacePath);\n        } catch (error) {\n            console.error('Error finding project.json files:', error);\n        }\n\n        return projectJsonFiles;\n    }\n\n    public clearCache(): void {\n        this._cache.clear();\n    }\n\n    public async getCurrentProject(): Promise<ProjectInfo | undefined> {\n        const activeEditor = vscode.window.activeTextEditor;\n        if (!activeEditor) {\n            return undefined;\n        }\n\n        const activeFilePath = activeEditor.document.uri.fsPath;\n        const projects = await this.detectProjects();\n        \n        // Find the project that contains the active file\n        return projects.find(project => \n            activeFilePath.startsWith(project.root)\n        );\n    }\n}"],"version":3}