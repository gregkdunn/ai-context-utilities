c98c5cb27f5f83a1d6a36d639a6b40ca
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandCoordinator = void 0;
const events_1 = require("events");
const vscode = __importStar(require("vscode"));
const streamingRunner_1 = require("./streamingRunner");
/**
 * Coordinates command execution with real-time status tracking and streaming
 */
class CommandCoordinator extends events_1.EventEmitter {
    statusTracker;
    context;
    activeCommands = new Map();
    commandQueue = [];
    maxConcurrentCommands = 3;
    constructor(statusTracker, context) {
        super();
        this.statusTracker = statusTracker;
        this.context = context;
        // Listen to status tracker events
        this.statusTracker.on('status_change', (event) => {
            this.emit('status_update', event);
        });
    }
    /**
     * Execute a command with full status tracking and streaming
     */
    async executeCommand(command, args, options = {}) {
        // Check if we're at the concurrent limit
        if (this.activeCommands.size >= this.maxConcurrentCommands) {
            if (options.priority === 'high') {
                // Cancel lowest priority command for high priority
                this.cancelLowestPriorityCommand();
            }
            else {
                // Queue the command
                return this.queueCommand(command, args, options);
            }
        }
        const commandId = this.statusTracker.startCommand(command, options.project, options.commandOptions);
        try {
            return await this.executeCommandInternal(commandId, command, args, options);
        }
        catch (error) {
            this.statusTracker.updateStatus({ message: error instanceof Error ? error.message : 'Unknown error' });
            throw error;
        }
    }
    /**
     * Cancel a specific command
     */
    cancelCommand(commandId) {
        const runner = this.activeCommands.get(commandId);
        if (runner && runner.isRunning) {
            runner.cancel();
            this.statusTracker.cancelCommand(commandId);
            this.activeCommands.delete(commandId);
            this.processQueue(); // Process next queued command
            return true;
        }
        return false;
    }
    /**
     * Cancel all running commands
     */
    cancelAllCommands() {
        for (const [commandId, runner] of this.activeCommands) {
            if (runner.isRunning) {
                runner.cancel();
                this.statusTracker.cancelCommand(commandId);
            }
        }
        this.activeCommands.clear();
        this.commandQueue = [];
    }
    /**
     * Get current execution status
     */
    getExecutionStatus() {
        return {
            active: this.activeCommands.size,
            queued: this.commandQueue.length,
            maxConcurrent: this.maxConcurrentCommands,
            commands: this.statusTracker.getAllStatuses()
        };
    }
    /**
     * Set maximum concurrent commands
     */
    setMaxConcurrentCommands(max) {
        this.maxConcurrentCommands = Math.max(1, Math.min(10, max));
        // If we're over the limit, queue doesn't need immediate action
        // as commands will naturally complete and be processed
    }
    /**
     * Get streaming output for a command
     */
    getCommandOutput(commandId) {
        const runner = this.activeCommands.get(commandId);
        return runner?.getCurrentOutput() || '';
    }
    /**
     * Clear output for a command
     */
    clearCommandOutput(commandId) {
        const runner = this.activeCommands.get(commandId);
        if (runner) {
            runner.clearOutput();
        }
    }
    /**
     * Get detailed execution metrics
     */
    getExecutionMetrics() {
        const history = this.statusTracker.getHistory();
        const stats = this.statusTracker.getCommandStats();
        return {
            totalCommands: stats.total,
            successRate: stats.total > 0 ? (stats.successful / stats.total) * 100 : 0,
            averageExecutionTime: stats.averageDuration,
            concurrentPeak: this.maxConcurrentCommands, // Could track actual peak
            queueTimeAverage: 0 // Would need to track queue times
        };
    }
    /**
     * Create execution health report
     */
    createHealthReport() {
        const status = this.getExecutionStatus();
        const metrics = this.getExecutionMetrics();
        const now = new Date();
        return `
=================================================================
🏥 COMMAND EXECUTION HEALTH REPORT
=================================================================

📊 Generated: ${now.toISOString()}
🔧 System Status: ${status.active > 0 ? 'ACTIVE' : 'IDLE'}

=================================================================
📈 CURRENT STATUS
=================================================================

🔄 Active Commands: ${status.active}/${status.maxConcurrent}
⏳ Queued Commands: ${status.queued}
📊 Total Executed: ${metrics.totalCommands}
✅ Success Rate: ${metrics.successRate.toFixed(1)}%
⏱️  Avg Execution: ${(metrics.averageExecutionTime / 1000).toFixed(1)}s

=================================================================
🚀 ACTIVE COMMANDS
=================================================================

${this.formatActiveCommands(status.commands)}

=================================================================
⚡ PERFORMANCE METRICS
=================================================================

• Concurrent Limit: ${status.maxConcurrent} commands
• Queue Processing: ${status.queued > 0 ? 'PROCESSING' : 'IDLE'}
• Memory Usage: ${this.getMemoryUsage()}
• Uptime: ${this.getUptime()}

=================================================================
💡 RECOMMENDATIONS
=================================================================

${this.generateRecommendations(status, metrics)}

=================================================================
`;
    }
    // Private methods
    async executeCommandInternal(commandId, command, args, options) {
        const outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');
        const runner = new streamingRunner_1.StreamingCommandRunner(outputChannel);
        this.activeCommands.set(commandId, runner);
        // Set up streaming event handlers
        runner.on('output', (output) => {
            this.statusTracker.appendOutput(commandId, output);
            this.emitStreamingMessage(commandId, 'output', { text: output });
        });
        runner.on('error', (error) => {
            this.statusTracker.appendError(commandId, error);
            this.emitStreamingMessage(commandId, 'error', { text: error });
        });
        runner.on('progress', (progress) => {
            this.statusTracker.updateProgress(commandId, progress);
            this.emitStreamingMessage(commandId, 'progress', { progress });
        });
        runner.on('status', (status) => {
            this.statusTracker.updateStatus({ message: status });
            this.emitStreamingMessage(commandId, 'status', { status });
        });
        try {
            // Execute based on command type with appropriate streaming
            let result;
            switch (command) {
                case 'nxTest':
                    result = await runner.executeTestCommand('npx', ['nx', 'test', ...args], options.cwd || process.cwd());
                    break;
                case 'gitDiff':
                    result = await runner.executeGitCommand(['diff', ...args], options.cwd || process.cwd());
                    break;
                case 'prepareToPush':
                    result = await runner.executeLintCommand('npx', ['nx', 'lint', ...args], options.cwd || process.cwd());
                    break;
                default:
                    // Generic command execution
                    result = await runner.executeWithStreaming(command, args, {
                        cwd: options.cwd
                    });
            }
            // Complete the command
            this.statusTracker.completeCommand(commandId, result);
            this.emitStreamingMessage(commandId, 'complete', { result });
            return result;
        }
        finally {
            // Clean up
            this.activeCommands.delete(commandId);
            runner.removeAllListeners();
            // Process next queued command
            this.processQueue();
        }
    }
    async queueCommand(command, args, options) {
        return new Promise((resolve, reject) => {
            const commandId = `queued-${Date.now()}`;
            this.commandQueue.push({
                id: commandId,
                command,
                args,
                options,
                resolve,
                reject
            });
            // Emit queue status update
            this.emit('queue_update', {
                queued: this.commandQueue.length,
                position: this.commandQueue.length
            });
        });
    }
    processQueue() {
        if (this.commandQueue.length === 0 || this.activeCommands.size >= this.maxConcurrentCommands) {
            return;
        }
        const next = this.commandQueue.shift();
        if (!next) {
            return;
        }
        // Execute the queued command
        this.executeCommand(next.command, next.args, next.options).then(next.resolve).catch(next.reject);
        // Update queue status
        this.emit('queue_update', {
            queued: this.commandQueue.length,
            processed: true
        });
    }
    cancelLowestPriorityCommand() {
        // Find running command with lowest priority (most recent for now)
        const commandIds = Array.from(this.activeCommands.keys());
        if (commandIds.length > 0) {
            const commandToCancel = commandIds[commandIds.length - 1]; // Most recent
            this.cancelCommand(commandToCancel);
        }
    }
    emitStreamingMessage(commandId, type, data) {
        const message = {
            type,
            data: {
                ...data,
                actionId: commandId
            },
            timestamp: new Date()
        };
        this.emit('streaming_message', message);
    }
    formatActiveCommands(commands) {
        const active = commands.filter(c => c.status === 'running');
        if (active.length === 0) {
            return '✅ No commands currently active';
        }
        return active.map(cmd => {
            const elapsed = cmd.startTime ? Date.now() - cmd.startTime.getTime() : 0;
            const elapsedSeconds = Math.round(elapsed / 1000);
            return `🔄 ${cmd.command || cmd.action}${cmd.project ? ` (${cmd.project})` : ''}
   Progress: ${cmd.progress}% | Elapsed: ${elapsedSeconds}s
   Status: ${cmd.message || cmd.output}
   ID: ${cmd.id.substring(0, 8)}...`;
        }).join('\n\n');
    }
    getMemoryUsage() {
        const usage = process.memoryUsage();
        return `${Math.round(usage.heapUsed / 1024 / 1024)}MB`;
    }
    getUptime() {
        const uptimeMs = process.uptime() * 1000;
        const hours = Math.floor(uptimeMs / (1000 * 60 * 60));
        const minutes = Math.floor((uptimeMs % (1000 * 60 * 60)) / (1000 * 60));
        return `${hours}h ${minutes}m`;
    }
    generateRecommendations(status, metrics) {
        const recommendations = [];
        if (status.queued > 5) {
            recommendations.push('⚠️  High queue backlog - consider increasing concurrent limit');
        }
        if (metrics.successRate < 80) {
            recommendations.push('🔧 Low success rate - check command configurations');
        }
        if (metrics.averageExecutionTime > 60000) {
            recommendations.push('⏰ Long execution times - consider optimizing commands');
        }
        if (status.active === status.maxConcurrent) {
            recommendations.push('📈 At concurrent limit - monitor for bottlenecks');
        }
        if (recommendations.length === 0) {
            recommendations.push('✅ System running optimally');
        }
        return recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n');
    }
    /**
     * Dispose of resources
     */
    dispose() {
        this.cancelAllCommands();
        this.removeAllListeners();
    }
}
exports.CommandCoordinator = CommandCoordinator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,