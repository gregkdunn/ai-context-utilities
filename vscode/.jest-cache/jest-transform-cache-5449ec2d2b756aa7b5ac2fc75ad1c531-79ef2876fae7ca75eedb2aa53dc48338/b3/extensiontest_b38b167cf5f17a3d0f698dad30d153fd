bd703e44cc942c9e45e096b2a67bd866
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock all dependencies
jest.mock('../webview/provider');
jest.mock('../utils/projectDetector');
jest.mock('../utils/shellRunner');
jest.mock('../utils/fileManager');
// Mock additional dependencies
jest.mock('../utils/statusTracker');
jest.mock('../utils/commandCoordinator');
jest.mock('../services/plugins/pluginManager');
jest.mock('../services/plugins/pluginMarketplace');
jest.mock('../services/plugins/pluginDiscovery');
jest.mock('../services/nx/NxAffectedManager');
jest.mock('../services/nx/NxCommandProvider');
jest.mock('../services/nx/NxStatusBar');
jest.mock('../services/git/GitDiffManager');
jest.mock('../services/git/GitCommandProvider');
jest.mock('../services/flipper/FlipperDetectionManager');
// Mock vscode module
jest.mock('vscode', () => ({
    window: {
        registerWebviewViewProvider: jest.fn(),
        showInformationMessage: jest.fn(() => Promise.resolve(undefined)),
        showWarningMessage: jest.fn(),
        createOutputChannel: jest.fn(() => ({
            appendLine: jest.fn(),
            show: jest.fn()
        }))
    },
    commands: {
        registerCommand: jest.fn(() => ({ dispose: jest.fn() })),
        executeCommand: jest.fn()
    },
    workspace: {
        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],
        getConfiguration: jest.fn((section) => ({
            get: jest.fn((key) => {
                if (key === 'showNotifications') {
                    return true;
                }
                return undefined;
            })
        }))
    }
}));
const extension_1 = require("../extension");
const provider_1 = require("../webview/provider");
const projectDetector_1 = require("../utils/projectDetector");
const shellRunner_1 = require("../utils/shellRunner");
const fileManager_1 = require("../utils/fileManager");
const MockedWebviewProvider = provider_1.WebviewProvider;
const MockedProjectDetector = projectDetector_1.ProjectDetector;
const MockedCommandRunner = shellRunner_1.CommandRunner;
const MockedFileManager = fileManager_1.FileManager;
describe('Extension', () => {
    let mockContext;
    let mockProjectDetector;
    let mockCommandRunner;
    let mockFileManager;
    let mockWebviewProvider;
    beforeEach(() => {
        jest.clearAllMocks();
        // Setup mock context
        mockContext = {
            subscriptions: [],
            extensionUri: { fsPath: '/extension/path' }
        };
        // Setup mock instances
        mockProjectDetector = new MockedProjectDetector('test-workspace');
        mockCommandRunner = new MockedCommandRunner({});
        mockFileManager = new MockedFileManager({});
        // Mock methods that are called in the tests
        mockProjectDetector.findNxWorkspace = jest.fn();
        mockProjectDetector.getCurrentProject = jest.fn();
        // Setup mock return values for constructors
        MockedProjectDetector.mockImplementation(() => mockProjectDetector);
        MockedCommandRunner.mockImplementation(() => mockCommandRunner);
        MockedFileManager.mockImplementation(() => mockFileManager);
        // Create a mock webview provider that will be returned by the constructor
        mockWebviewProvider = {
            show: jest.fn(),
            runCommand: jest.fn(),
            resolveWebviewView: jest.fn()
        };
        MockedWebviewProvider.mockImplementation(() => mockWebviewProvider);
    });
    describe('activate', () => {
        it('should activate extension when NX workspace is detected', async () => {
            const vscode = require('vscode');
            // Mock NX workspace detection
            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');
            await (0, extension_1.activate)(mockContext);
            expect(vscode.commands.executeCommand).toHaveBeenCalledWith('setContext', 'workspaceHasNxProject', true);
            expect(vscode.window.registerWebviewViewProvider).toHaveBeenCalledWith('aiDebugUtilities', mockWebviewProvider);
            expect(vscode.commands.registerCommand).toHaveBeenCalled();
            expect(mockContext.subscriptions.length).toBeGreaterThan(0);
        });
        it('should remain dormant when no NX workspace is detected', async () => {
            const vscode = require('vscode');
            // Mock no NX workspace
            mockProjectDetector.findNxWorkspace.mockResolvedValue(null);
            await (0, extension_1.activate)(mockContext);
            expect(vscode.commands.executeCommand).toHaveBeenCalledWith('setContext', 'workspaceHasNxProject', false);
            expect(vscode.window.registerWebviewViewProvider).not.toHaveBeenCalled();
        });
        it('should show welcome notification when notifications are enabled', async () => {
            const vscode = require('vscode');
            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');
            vscode.window.showInformationMessage.mockResolvedValue('Open Panel');
            await (0, extension_1.activate)(mockContext);
            // The test should wait for the notification to appear
            await new Promise(resolve => setTimeout(resolve, 100));
            expect(vscode.window.showInformationMessage).toHaveBeenCalledWith('AI Debug Utilities activated! Open the panel to get started.', 'Open Panel');
            // Wait for the .then() handler to execute
            await new Promise(resolve => setTimeout(resolve, 10));
            expect(vscode.commands.executeCommand).toHaveBeenCalledWith('aiDebugUtilities.openPanel');
        });
        it('should register all required commands', async () => {
            const vscode = require('vscode');
            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');
            await (0, extension_1.activate)(mockContext);
            const registeredCommands = vscode.commands.registerCommand.mock.calls.map((call) => call[0]);
            expect(registeredCommands).toContain('aiDebugUtilities.openPanel');
            expect(registeredCommands).toContain('aiDebugUtilities.runAiDebug');
            expect(registeredCommands).toContain('aiDebugUtilities.runNxTest');
            expect(registeredCommands).toContain('aiDebugUtilities.runGitDiff');
            expect(registeredCommands).toContain('aiDebugUtilities.runPrepareToPush');
        });
    });
    describe('registered commands', () => {
        beforeEach(async () => {
            const vscode = require('vscode');
            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');
            await (0, extension_1.activate)(mockContext);
        });
        it('should register openPanel command', async () => {
            const vscode = require('vscode');
            const openPanelCall = vscode.commands.registerCommand.mock.calls
                .find((call) => call[0] === 'aiDebugUtilities.openPanel');
            if (openPanelCall && openPanelCall[1]) {
                openPanelCall[1]();
                expect(mockWebviewProvider.show).toHaveBeenCalled();
            }
        });
        it('should register runAiDebug command with project detection', async () => {
            const vscode = require('vscode');
            const runAiDebugCall = vscode.commands.registerCommand.mock.calls
                .find((call) => call[0] === 'aiDebugUtilities.runAiDebug');
            mockProjectDetector.getCurrentProject.mockResolvedValue({
                name: 'my-app',
                root: 'apps/my-app',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: 'apps/my-app/package.json'
            });
            if (runAiDebugCall && runAiDebugCall[1]) {
                await runAiDebugCall[1]();
                expect(mockProjectDetector.getCurrentProject).toHaveBeenCalled();
                expect(mockWebviewProvider.runCommand).toHaveBeenCalledWith('aiDebug', { project: 'my-app' });
            }
        });
        it('should register runAiDebug command and show warning when no project detected', async () => {
            const vscode = require('vscode');
            const runAiDebugCall = vscode.commands.registerCommand.mock.calls
                .find((call) => call[0] === 'aiDebugUtilities.runAiDebug');
            mockProjectDetector.getCurrentProject.mockResolvedValue(undefined);
            if (runAiDebugCall && runAiDebugCall[1]) {
                await runAiDebugCall[1]();
                expect(vscode.window.showWarningMessage).toHaveBeenCalledWith('No NX project detected. Please select a project first.');
                expect(mockWebviewProvider.runCommand).not.toHaveBeenCalled();
            }
        });
        it('should register runNxTest command with project detection', async () => {
            const vscode = require('vscode');
            const runNxTestCall = vscode.commands.registerCommand.mock.calls
                .find((call) => call[0] === 'aiDebugUtilities.runNxTest');
            mockProjectDetector.getCurrentProject.mockResolvedValue({
                name: 'my-lib',
                root: 'libs/my-lib',
                projectType: 'library',
                type: 'nx',
                packageJsonPath: 'libs/my-lib/package.json'
            });
            if (runNxTestCall && runNxTestCall[1]) {
                await runNxTestCall[1]();
                expect(mockProjectDetector.getCurrentProject).toHaveBeenCalled();
                expect(mockWebviewProvider.runCommand).toHaveBeenCalledWith('nxTest', { project: 'my-lib' });
            }
        });
        it('should register runNxTest command and show warning when no project detected', async () => {
            const vscode = require('vscode');
            const runNxTestCall = vscode.commands.registerCommand.mock.calls
                .find((call) => call[0] === 'aiDebugUtilities.runNxTest');
            mockProjectDetector.getCurrentProject.mockResolvedValue(undefined);
            if (runNxTestCall && runNxTestCall[1]) {
                await runNxTestCall[1]();
                expect(vscode.window.showWarningMessage).toHaveBeenCalledWith('No NX project detected. Please select a project first.');
                expect(mockWebviewProvider.runCommand).not.toHaveBeenCalled();
            }
        });
        it('should register runGitDiff command', async () => {
            const vscode = require('vscode');
            const runGitDiffCall = vscode.commands.registerCommand.mock.calls
                .find((call) => call[0] === 'aiDebugUtilities.runGitDiff');
            if (runGitDiffCall && runGitDiffCall[1]) {
                await runGitDiffCall[1]();
                expect(mockWebviewProvider.runCommand).toHaveBeenCalledWith('gitDiff', {});
            }
        });
        it('should register runPrepareToPush command with project detection', async () => {
            const vscode = require('vscode');
            const runPrepareToPushCall = vscode.commands.registerCommand.mock.calls
                .find((call) => call[0] === 'aiDebugUtilities.runPrepareToPush');
            mockProjectDetector.getCurrentProject.mockResolvedValue({
                name: 'my-app',
                root: 'apps/my-app',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: 'apps/my-app/package.json'
            });
            if (runPrepareToPushCall && runPrepareToPushCall[1]) {
                await runPrepareToPushCall[1]();
                expect(mockProjectDetector.getCurrentProject).toHaveBeenCalled();
                expect(mockWebviewProvider.runCommand).toHaveBeenCalledWith('prepareToPush', { project: 'my-app' });
            }
        });
        it('should register runPrepareToPush command and show warning when no project detected', async () => {
            const vscode = require('vscode');
            const runPrepareToPushCall = vscode.commands.registerCommand.mock.calls
                .find((call) => call[0] === 'aiDebugUtilities.runPrepareToPush');
            mockProjectDetector.getCurrentProject.mockResolvedValue(undefined);
            if (runPrepareToPushCall && runPrepareToPushCall[1]) {
                await runPrepareToPushCall[1]();
                expect(vscode.window.showWarningMessage).toHaveBeenCalledWith('No NX project detected. Please select a project first.');
                expect(mockWebviewProvider.runCommand).not.toHaveBeenCalled();
            }
        });
    });
    describe('error handling', () => {
        it('should handle workspace detection errors gracefully', async () => {
            const vscode = require('vscode');
            mockProjectDetector.findNxWorkspace.mockRejectedValue(new Error('Workspace detection failed'));
            await (0, extension_1.activate)(mockContext);
            // The extension should set context to false when workspace detection fails
            expect(vscode.commands.executeCommand).toHaveBeenCalledWith('setContext', 'workspaceHasNxProject', false);
        });
        it('should handle command registration errors gracefully', async () => {
            const vscode = require('vscode');
            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');
            vscode.commands.registerCommand.mockImplementation(() => {
                throw new Error('Command registration failed');
            });
            await (0, extension_1.activate)(mockContext);
            // The extension should set context to false when command registration fails
            expect(vscode.commands.executeCommand).toHaveBeenCalledWith('setContext', 'workspaceHasNxProject', false);
        });
    });
    describe('deactivate', () => {
        it('should deactivate extension cleanly', () => {
            // Should not throw
            expect(() => (0, extension_1.deactivate)()).not.toThrow();
        });
    });
    describe('integration', () => {
        it('should create all necessary instances with correct dependencies', async () => {
            // Clear previous mock calls
            MockedProjectDetector.mockClear();
            MockedCommandRunner.mockClear();
            MockedFileManager.mockClear();
            MockedWebviewProvider.mockClear();
            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');
            await (0, extension_1.activate)(mockContext);
            expect(MockedProjectDetector).toHaveBeenCalledTimes(1);
            expect(MockedCommandRunner).toHaveBeenCalledTimes(1);
            expect(MockedFileManager).toHaveBeenCalledTimes(1);
            expect(MockedWebviewProvider).toHaveBeenCalledWith(mockContext.extensionUri, mockProjectDetector, mockCommandRunner, mockFileManager, expect.anything() // statusTracker
            );
        });
        it('should properly dispose of resources through context subscriptions', async () => {
            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');
            await (0, extension_1.activate)(mockContext);
            expect(mockContext.subscriptions.length).toBeGreaterThan(0);
            // All subscriptions should be disposable objects
            mockContext.subscriptions.forEach(subscription => {
                if (subscription) {
                    expect(subscription).toHaveProperty('dispose');
                }
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,