{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/ai-insights/__tests__/phase42Implementation.test.ts","mappings":";;AAAA,2CAAyE;AAgBzE,cAAc;AACd,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;IACvB,gBAAgB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC3B,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;CACxB,CAAC,CAAC,CAAC;AAlBJ,0FAAuF;AACvF,gFAA6E;AAC7E,sFAAmF;AACnF,0DAAuD;AAiBvD,IAAA,kBAAQ,EAAC,sCAAsC,EAAE,GAAG,EAAE;IAClD,IAAI,WAAoC,CAAC;IACzC,IAAI,gBAAkC,CAAC;IACvC,IAAI,4BAA0D,CAAC;IAC/D,IAAI,uBAAgD,CAAC;IACrD,IAAI,0BAAsD,CAAC;IAE3D,MAAM,0BAA0B,GAAG,GAAqB,EAAE,CAAC,CAAC;QACxD,OAAO,EAAE,cAAc;QACvB,YAAY,EAAE,CAAC,YAAY,EAAE,cAAc,CAAC;QAC5C,cAAc,EAAE,EAAE;QAClB,SAAS,EAAE;YACP,MAAM,EAAE,MAAM;YACd,qBAAqB,EAAE,IAAI;YAC3B,YAAY,EAAE,CAAC,YAAY,CAAC;YAC5B,aAAa,EAAE,CAAC;YAChB,YAAY,EAAE,CAAC;YACf,UAAU,EAAE;gBACR,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,aAAa;gBACtB,MAAM,EAAE,WAAW;gBACnB,IAAI,EAAE,IAAI,IAAI,EAAE;gBAChB,KAAK,EAAE,CAAC,YAAY,CAAC;gBACrB,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;aACzC;SACJ;QACD,UAAU,EAAE;YACR,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,CAAC;YACV,QAAQ,EAAE,EAAE;YACZ,OAAO,EAAE,IAAI,IAAI,EAAE;YACnB,YAAY,EAAE;gBACV;oBACI,KAAK,EAAE,aAAa;oBACpB,IAAI,EAAE,sBAAsB;oBAC5B,MAAM,EAAE,QAAQ;oBAChB,QAAQ,EAAE,GAAG;oBACb,KAAK,EAAE,kBAAkB;oBACzB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACxB;aACJ;SACJ;QACD,SAAS,EAAE,IAAI,IAAI,EAAE;KACxB,CAAC,CAAC;IAEH,MAAM,sBAAsB,GAAG,GAAiB,EAAE,CAAC,CAAC;QAChD,cAAc,EAAE;YACZ;gBACI,EAAE,EAAE,MAAM;gBACV,MAAM,EAAE,QAAQ;gBAChB,OAAO,EAAE,cAAc;gBACvB,MAAM,EAAE,WAAW;gBACnB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;gBACvC,OAAO,EAAE,IAAI,IAAI,EAAE;gBACnB,QAAQ,EAAE,GAAG;gBACb,MAAM,EAAE,CAAC,aAAa,CAAC;gBACvB,SAAS,EAAE;oBACP,EAAE,EAAE,OAAO;oBACX,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,IAAI,IAAI,EAAE;oBACpB,QAAQ,EAAE,IAAI;iBACjB;gBACD,UAAU,EAAE,EAAE;aACjB;SACJ;QACD,YAAY,EAAE,CAAC,YAAY,EAAE,cAAc,EAAE,cAAc,CAAC;QAC5D,UAAU,EAAE;YACR;gBACI,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,iBAAiB;gBAC1B,MAAM,EAAE,WAAW;gBACnB,IAAI,EAAE,IAAI,IAAI,EAAE;gBAChB,KAAK,EAAE,CAAC,YAAY,CAAC;gBACrB,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;aACzC;SACJ;QACD,WAAW,EAAE;YACT;gBACI,KAAK,EAAE,aAAa;gBACpB,IAAI,EAAE,uBAAuB;gBAC7B,MAAM,EAAE,QAAQ;gBAChB,QAAQ,EAAE,EAAE;gBACZ,SAAS,EAAE,IAAI,IAAI,EAAE;aACxB;YACD;gBACI,KAAK,EAAE,eAAe;gBACtB,IAAI,EAAE,yBAAyB;gBAC/B,MAAM,EAAE,QAAQ;gBAChB,QAAQ,EAAE,GAAG;gBACb,KAAK,EAAE,6BAA6B;gBACpC,SAAS,EAAE,IAAI,IAAI,EAAE;aACxB;SACJ;QACD,kBAAkB,EAAE;YAChB;gBACI,MAAM,EAAE,qBAAqB;gBAC7B,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,IAAI;gBACV,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE;aACvC;SACJ;QACD,aAAa,EAAE;YACX;gBACI,OAAO,EAAE,iCAAiC;gBAC1C,SAAS,EAAE,CAAC;gBACZ,QAAQ,EAAE,IAAI,IAAI,EAAE;gBACpB,aAAa,EAAE,CAAC,YAAY,EAAE,cAAc,CAAC;gBAC7C,YAAY,EAAE,uCAAuC;aACxD;SACJ;KACJ,CAAC,CAAC;IAEH,IAAA,oBAAU,EAAC,GAAG,EAAE;QACZ,WAAW,GAAG;YACV,WAAW,EAAE;gBACT,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,SAAS,CAAC;gBACzC,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aAClF;SACG,CAAC;QAET,gBAAgB,GAAG,IAAI,mCAAgB,CAAC,WAAW,CAAC,CAAC;QACrD,4BAA4B,GAAG,IAAI,2DAA4B,CAAC,WAAW,CAAC,CAAC;QAC7E,uBAAuB,GAAG,IAAI,iDAAuB,CAAC,WAAW,CAAC,CAAC;QACnE,0BAA0B,GAAG,IAAI,uDAA0B,CAAC,WAAW,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,8BAA8B,EAAE,GAAG,EAAE;QAC1C,IAAA,cAAI,EAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,OAAO,GAAG,0BAA0B,EAAE,CAAC;YAC7C,MAAM,WAAW,GAAG,MAAM,4BAA4B,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;YAE/F,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,WAAW,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAE9C,oDAAoD;YACpD,MAAM,cAAc,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC;YACrE,IAAA,gBAAM,EAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YACrC,IAAA,gBAAM,EAAC,cAAc,EAAE,UAAU,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,UAAU,GAAuB;gBACnC;oBACI,EAAE,EAAE,MAAM;oBACV,MAAM,EAAE,QAAQ;oBAChB,OAAO,EAAE,cAAc;oBACvB,MAAM,EAAE,WAAW;oBACnB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;oBACvC,OAAO,EAAE,IAAI,IAAI,EAAE;oBACnB,QAAQ,EAAE,GAAG;oBACb,MAAM,EAAE,CAAC,cAAc,CAAC;oBACxB,SAAS,EAAE;wBACP,EAAE,EAAE,OAAO;wBACX,IAAI,EAAE,WAAW;wBACjB,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE,IAAI,IAAI,EAAE;wBACpB,QAAQ,EAAE,IAAI;qBACjB;oBACD,UAAU,EAAE,EAAE;iBACjB;aACJ,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,4BAA4B,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YACzF,IAAA,gBAAM,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,OAAO,GAAG,0BAA0B,EAAE,CAAC;YAC7C,MAAM,WAAW,GAAG,MAAM,4BAA4B,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAEtF,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,WAAW,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,WAAW,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACrC,IAAA,cAAI,EAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,IAAI,GAAG,sBAAsB,EAAE,CAAC;YACtC,MAAM,QAAQ,GAAG,MAAM,uBAAuB,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YAE/E,IAAA,gBAAM,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAE3C,8BAA8B;YAC9B,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC;YACjE,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,IAAI,GAAG,sBAAsB,EAAE,CAAC;YACtC,MAAM,QAAQ,GAAG,MAAM,uBAAuB,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YAE/E,uDAAuD;YACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3C,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAE7B,MAAM,aAAa,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;gBAC1E,MAAM,YAAY,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;gBAC1E,MAAM,SAAS,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;gBAEjE,IAAA,gBAAM,EAAC,YAAY,CAAC,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;YAC3D,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,IAAI,GAAG,sBAAsB,EAAE,CAAC;YACtC,MAAM,QAAQ,GAAG,MAAM,uBAAuB,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YAE/E,MAAM,kBAAkB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;YAC9D,IAAA,gBAAM,EAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAErD,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBACjC,IAAA,gBAAM,EAAC,OAAO,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC1C,IAAA,gBAAM,EAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAEtD,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;oBACrC,IAAA,gBAAM,EAAC,UAAU,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;oBACvC,IAAA,gBAAM,EAAC,UAAU,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;oBAC7C,IAAA,gBAAM,EAAC,UAAU,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;oBACxC,IAAA,gBAAM,EAAC,UAAU,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;oBAClE,IAAA,gBAAM,EAAC,UAAU,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,4BAA4B,EAAE,GAAG,EAAE;QACxC,IAAA,cAAI,EAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,KAAK,GAAG,sCAAsC,CAAC;YACrD,MAAM,OAAO,GAAG,sBAAsB,EAAE,CAAC;YACzC,MAAM,MAAM,GAAG,MAAM,0BAA0B,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE7E,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACzC,IAAA,gBAAM,EAAC,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAC/C,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,KAAK,GAAG,kCAAkC,CAAC;YACjD,MAAM,OAAO,GAAG,sBAAsB,EAAE,CAAC;YACzC,MAAM,MAAM,GAAG,MAAM,0BAA0B,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE7E,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAC/C,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,OAAO,GAAG,sBAAsB,EAAE,CAAC;YACzC,MAAM,WAAW,GAAG,MAAM,0BAA0B,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YAElF,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,WAAW,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,WAAW,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAElD,+DAA+D;YAC/D,MAAM,cAAc,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC/E,IAAA,gBAAM,EAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,8BAA8B,EAAE,GAAG,EAAE;QAC1C,IAAA,cAAI,EAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,IAAI,GAAG,sBAAsB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,0BAA0B,EAAE,CAAC;YAE7C,iCAAiC;YACjC,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAA,gBAAM,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAE3C,oCAAoC;YACpC,MAAM,WAAW,GAAG,MAAM,gBAAgB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACnE,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,WAAW,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,WAAW,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAElD,4CAA4C;YAC5C,MAAM,KAAK,GAAG,uBAAuB,CAAC;YACtC,MAAM,WAAW,GAAG,MAAM,gBAAgB,CAAC,2BAA2B,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpF,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,WAAW,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,IAAI,GAAG,sBAAsB,EAAE,CAAC;YACtC,MAAM,OAAO,GAAG,0BAA0B,EAAE,CAAC;YAE7C,yBAAyB;YACzB,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAC1E,IAAA,gBAAM,EAAC,gBAAgB,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnD,kCAAkC;YAClC,MAAM,gBAAgB,CAAC,wBAAwB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACrE,mBAAmB;YAEnB,kCAAkC;YAClC,MAAM,WAAW,GAAG,MAAM,gBAAgB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAC1E,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,WAAW,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE9C,uBAAuB;YACvB,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,iBAAiB,EAAE,CAAC;YAC7D,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAChC,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAA,cAAI,EAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;YAC1C,mBAAmB;YAEnB,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAC3B,mBAAmB;QACvB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/ai-insights/__tests__/phase42Implementation.test.ts"],"sourcesContent":["import { describe, test, expect, beforeEach, jest } from '@jest/globals';\nimport * as vscode from 'vscode';\nimport { IntelligentSuggestionsEngine } from '../engines/intelligentSuggestionsEngine';\nimport { AutomatedInsightsEngine } from '../engines/automatedInsightsEngine';\nimport { NaturalLanguageQueryEngine } from '../engines/naturalLanguageQueryEngine';\nimport { AIInsightsEngine } from '../aiInsightsEngine';\nimport {\n    ExecutionContext,\n    AnalysisData,\n    CommandExecution,\n    TestResult,\n    ErrorPattern,\n    PerformanceMetric,\n    GitCommit\n} from '../../../types';\n\n// Mock VSCode\njest.mock('vscode', () => ({\n    ExtensionContext: jest.fn(),\n    Disposable: jest.fn()\n}));\n\ndescribe('Phase 4.2 AI Insights Implementation', () => {\n    let mockContext: vscode.ExtensionContext;\n    let aiInsightsEngine: AIInsightsEngine;\n    let intelligentSuggestionsEngine: IntelligentSuggestionsEngine;\n    let automatedInsightsEngine: AutomatedInsightsEngine;\n    let naturalLanguageQueryEngine: NaturalLanguageQueryEngine;\n\n    const createMockExecutionContext = (): ExecutionContext => ({\n        project: 'test-project',\n        currentFiles: ['src/app.ts', 'src/utils.ts'],\n        recentCommands: [],\n        gitStatus: {\n            branch: 'main',\n            hasUncommittedChanges: true,\n            changedFiles: ['src/app.ts'],\n            commitsBehind: 0,\n            commitsAhead: 1,\n            lastCommit: {\n                hash: 'abc123',\n                message: 'Test commit',\n                author: 'Test User',\n                date: new Date(),\n                files: ['src/app.ts'],\n                stats: { additions: 10, deletions: 2 }\n            }\n        },\n        testStatus: {\n            passing: 15,\n            failing: 3,\n            skipped: 1,\n            coverage: 85,\n            lastRun: new Date(),\n            failingTests: [\n                {\n                    suite: 'app.spec.ts',\n                    test: 'should handle errors',\n                    status: 'failed',\n                    duration: 100,\n                    error: 'Assertion failed',\n                    timestamp: new Date()\n                }\n            ]\n        },\n        timestamp: new Date()\n    });\n\n    const createMockAnalysisData = (): AnalysisData => ({\n        commandHistory: [\n            {\n                id: 'cmd1',\n                action: 'nxTest',\n                project: 'test-project',\n                status: 'completed',\n                startTime: new Date(Date.now() - 60000),\n                endTime: new Date(),\n                progress: 100,\n                output: ['Test passed'],\n                initiator: {\n                    id: 'user1',\n                    name: 'Test User',\n                    role: 'owner',\n                    joinedAt: new Date(),\n                    isOnline: true\n                },\n                sharedWith: []\n            }\n        ],\n        projectFiles: ['src/app.ts', 'src/utils.ts', 'src/types.ts'],\n        gitHistory: [\n            {\n                hash: 'abc123',\n                message: 'Add new feature',\n                author: 'Test User',\n                date: new Date(),\n                files: ['src/app.ts'],\n                stats: { additions: 25, deletions: 5 }\n            }\n        ],\n        testResults: [\n            {\n                suite: 'app.spec.ts',\n                test: 'should work correctly',\n                status: 'passed',\n                duration: 50,\n                timestamp: new Date()\n            },\n            {\n                suite: 'utils.spec.ts',\n                test: 'should handle edge case',\n                status: 'failed',\n                duration: 120,\n                error: 'Expected true but got false',\n                timestamp: new Date()\n            }\n        ],\n        performanceMetrics: [\n            {\n                metric: 'test-execution-time',\n                value: 45000,\n                unit: 'ms',\n                timestamp: new Date(),\n                context: { project: 'test-project' }\n            }\n        ],\n        errorPatterns: [\n            {\n                pattern: 'TypeError: Cannot read property',\n                frequency: 5,\n                lastSeen: new Date(),\n                affectedFiles: ['src/app.ts', 'src/utils.ts'],\n                suggestedFix: 'Add null check before property access'\n            }\n        ]\n    });\n\n    beforeEach(() => {\n        mockContext = {\n            globalState: {\n                get: jest.fn().mockReturnValue(undefined),\n                update: jest.fn().mockImplementation((...args: unknown[]) => Promise.resolve())\n            }\n        } as any;\n\n        aiInsightsEngine = new AIInsightsEngine(mockContext);\n        intelligentSuggestionsEngine = new IntelligentSuggestionsEngine(mockContext);\n        automatedInsightsEngine = new AutomatedInsightsEngine(mockContext);\n        naturalLanguageQueryEngine = new NaturalLanguageQueryEngine(mockContext);\n    });\n\n    describe('IntelligentSuggestionsEngine', () => {\n        test('should generate intelligent command suggestions', async () => {\n            const context = createMockExecutionContext();\n            const suggestions = await intelligentSuggestionsEngine.generateIntelligentSuggestions(context);\n\n            expect(suggestions).toBeDefined();\n            expect(Array.isArray(suggestions)).toBe(true);\n            expect(suggestions.length).toBeGreaterThan(0);\n            \n            // Should suggest running tests due to failing tests\n            const testSuggestion = suggestions.find(s => s.command === 'nxTest');\n            expect(testSuggestion).toBeDefined();\n            expect(testSuggestion?.confidence).toBeGreaterThan(0.8);\n        });\n\n        test('should analyze execution patterns', async () => {\n            const executions: CommandExecution[] = [\n                {\n                    id: 'cmd1',\n                    action: 'nxTest',\n                    project: 'test-project',\n                    status: 'completed',\n                    startTime: new Date(Date.now() - 60000),\n                    endTime: new Date(),\n                    progress: 100,\n                    output: ['Tests passed'],\n                    initiator: {\n                        id: 'user1',\n                        name: 'Test User',\n                        role: 'owner',\n                        joinedAt: new Date(),\n                        isOnline: true\n                    },\n                    sharedWith: []\n                }\n            ];\n\n            const patterns = await intelligentSuggestionsEngine.analyzeExecutionPatterns(executions);\n            expect(patterns).toBeDefined();\n            expect(Array.isArray(patterns)).toBe(true);\n        });\n\n        test('should predict command success', async () => {\n            const context = createMockExecutionContext();\n            const predictions = await intelligentSuggestionsEngine.predictCommandSuccess(context);\n\n            expect(predictions).toBeDefined();\n            expect(predictions instanceof Map).toBe(true);\n            expect(predictions.size).toBeGreaterThan(0);\n        });\n    });\n\n    describe('AutomatedInsightsEngine', () => {\n        test('should generate automated insights', async () => {\n            const data = createMockAnalysisData();\n            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);\n\n            expect(insights).toBeDefined();\n            expect(Array.isArray(insights)).toBe(true);\n            expect(insights.length).toBeGreaterThan(0);\n\n            // Should detect test failures\n            const testInsight = insights.find(i => i.category === 'testing');\n            expect(testInsight).toBeDefined();\n        });\n\n        test('should prioritize insights correctly', async () => {\n            const data = createMockAnalysisData();\n            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);\n\n            // Insights should be sorted by priority and confidence\n            for (let i = 0; i < insights.length - 1; i++) {\n                const current = insights[i];\n                const next = insights[i + 1];\n                \n                const priorityScore = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };\n                const currentScore = priorityScore[current.priority] * current.confidence;\n                const nextScore = priorityScore[next.priority] * next.confidence;\n                \n                expect(currentScore).toBeGreaterThanOrEqual(nextScore);\n            }\n        });\n\n        test('should generate actionable suggestions', async () => {\n            const data = createMockAnalysisData();\n            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);\n\n            const actionableInsights = insights.filter(i => i.actionable);\n            expect(actionableInsights.length).toBeGreaterThan(0);\n\n            actionableInsights.forEach(insight => {\n                expect(insight.suggestions).toBeDefined();\n                expect(insight.suggestions.length).toBeGreaterThan(0);\n                \n                insight.suggestions.forEach(suggestion => {\n                    expect(suggestion.title).toBeDefined();\n                    expect(suggestion.description).toBeDefined();\n                    expect(suggestion.action).toBeDefined();\n                    expect(suggestion.estimatedImpact).toMatch(/^(low|medium|high)$/);\n                    expect(suggestion.estimatedEffort).toMatch(/^(minutes|hours|days)$/);\n                });\n            });\n        });\n    });\n\n    describe('NaturalLanguageQueryEngine', () => {\n        test('should process test-related queries', async () => {\n            const query = \"Show me failing tests from this week\";\n            const context = createMockAnalysisData();\n            const result = await naturalLanguageQueryEngine.processQuery(query, context);\n\n            expect(result).toBeDefined();\n            expect(result.intent).toBe('test-query');\n            expect(result.confidence).toBeGreaterThan(0.5);\n            expect(result.response).toContain('test');\n            expect(result.suggestedActions.length).toBeGreaterThan(0);\n        });\n\n        test('should process error-related queries', async () => {\n            const query = \"What are the most common errors?\";\n            const context = createMockAnalysisData();\n            const result = await naturalLanguageQueryEngine.processQuery(query, context);\n\n            expect(result).toBeDefined();\n            expect(result.intent).toBe('error-query');\n            expect(result.confidence).toBeGreaterThan(0.5);\n            expect(result.response).toContain('error');\n        });\n\n        test('should generate contextual query suggestions', async () => {\n            const context = createMockAnalysisData();\n            const suggestions = await naturalLanguageQueryEngine.getQuerySuggestions(context);\n\n            expect(suggestions).toBeDefined();\n            expect(Array.isArray(suggestions)).toBe(true);\n            expect(suggestions.length).toBeGreaterThan(0);\n            expect(suggestions.length).toBeLessThanOrEqual(8);\n\n            // Should include test-related suggestions due to failing tests\n            const testSuggestion = suggestions.find(s => s.toLowerCase().includes('test'));\n            expect(testSuggestion).toBeDefined();\n        });\n    });\n\n    describe('AIInsightsEngine Integration', () => {\n        test('should integrate Phase 4.2 engines', async () => {\n            const data = createMockAnalysisData();\n            const context = createMockExecutionContext();\n\n            // Test enhanced pattern analysis\n            const insights = await aiInsightsEngine.analyzePattern(data);\n            expect(insights).toBeDefined();\n            expect(insights.length).toBeGreaterThan(0);\n\n            // Test enhanced command suggestions\n            const suggestions = await aiInsightsEngine.suggestCommand(context);\n            expect(suggestions).toBeDefined();\n            expect(suggestions.length).toBeGreaterThan(0);\n            expect(suggestions.length).toBeLessThanOrEqual(8);\n\n            // Test enhanced natural language processing\n            const query = \"Show me failing tests\";\n            const queryResult = await aiInsightsEngine.processNaturalLanguageQuery(query, data);\n            expect(queryResult).toBeDefined();\n            expect(queryResult.confidence).toBeGreaterThan(0);\n        });\n\n        test('should provide Phase 4.2 specific methods', async () => {\n            const data = createMockAnalysisData();\n            const context = createMockExecutionContext();\n\n            // Test query suggestions\n            const querySuggestions = await aiInsightsEngine.getQuerySuggestions(data);\n            expect(querySuggestions).toBeDefined();\n            expect(Array.isArray(querySuggestions)).toBe(true);\n\n            // Test execution pattern analysis\n            await aiInsightsEngine.analyzeExecutionPatterns(data.commandHistory);\n            // Should not throw\n\n            // Test command success prediction\n            const predictions = await aiInsightsEngine.predictCommandSuccess(context);\n            expect(predictions).toBeDefined();\n            expect(predictions instanceof Map).toBe(true);\n\n            // Test query analytics\n            const analytics = await aiInsightsEngine.getQueryAnalytics();\n            expect(analytics).toBeDefined();\n            expect(analytics).toHaveProperty('patterns');\n        });\n\n        test('should save and dispose engine states properly', async () => {\n            await aiInsightsEngine.saveEngineStates();\n            // Should not throw\n\n            aiInsightsEngine.dispose();\n            // Should not throw\n        });\n    });\n});\n"],"version":3}