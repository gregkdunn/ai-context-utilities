{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/nxTest.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/nxTest.test.ts"],"sourcesContent":["import { NxTestCommand } from '../nxTest';\nimport { CommandOptions } from '../../types';\nimport { FileManager } from '../../utils/fileManager';\nimport { StreamingCommandRunner } from '../../utils/streamingRunner';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\n\n// Mock VSCode API\njest.mock('vscode', () => ({\n    workspace: {\n        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\n        getConfiguration: jest.fn(() => ({\n            get: jest.fn(() => '.github/instructions/ai_utilities_context')\n        }))\n    },\n    window: {\n        createOutputChannel: jest.fn(() => ({\n            appendLine: jest.fn(),\n            show: jest.fn()\n        }))\n    }\n}));\n\n// Mock FileManager\njest.mock('../../utils/fileManager');\nconst MockedFileManager = FileManager as jest.MockedClass<typeof FileManager>;\n\n// Mock StreamingCommandRunner\njest.mock('../../utils/streamingRunner');\nconst MockedStreamingCommandRunner = StreamingCommandRunner as jest.MockedClass<typeof StreamingCommandRunner>;\n\n// Mock fs module with proper setup\njest.mock('fs', () => {\n    const mockPromises = {\n        unlink: jest.fn(),\n        copyFile: jest.fn(),\n        readFile: jest.fn(),\n        writeFile: jest.fn()\n    };\n    \n    return {\n        promises: mockPromises,\n        existsSync: jest.fn(),\n        statSync: jest.fn(),\n        readFileSync: jest.fn(),\n        createWriteStream: jest.fn()\n    };\n});\n\n// Mock child_process\njest.mock('child_process', () => ({\n    spawn: jest.fn()\n}));\n\n// Mock os module\njest.mock('os', () => ({\n    tmpdir: jest.fn(() => '/tmp')\n}));\n\n// Mock path module\njest.mock('path', () => ({\n    join: jest.fn((...args) => args.join('/')),\n    dirname: jest.fn((p) => p.split('/').slice(0, -1).join('/'))\n}));\n\ndescribe('NxTestCommand', () => {\n    let nxTestCommand: NxTestCommand;\n    let mockFileManager: jest.Mocked<FileManager>;\n    let mockFs: jest.Mocked<typeof fs>;\n    let mockFsPromises: any;\n    let mockSpawn: jest.MockedFunction<any>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        // Setup FileManager mock\n        mockFileManager = {\n            getOutputFilePath: jest.fn().mockReturnValue('/test/jest-output.txt'),\n            ensureDirectoryExists: jest.fn(),\n            getFileStats: jest.fn().mockResolvedValue({\n                size: 1024,\n                created: new Date(),\n                modified: new Date(),\n                accessed: new Date()\n            })\n        } as any;\n\n        mockFs = fs as jest.Mocked<typeof fs>;\n        mockFsPromises = mockFs.promises;\n        mockSpawn = require('child_process').spawn;\n\n        MockedFileManager.mockImplementation(() => mockFileManager);\n        \n        nxTestCommand = new NxTestCommand();\n    });\n\n    describe('run', () => {\n        beforeEach(() => {\n            // Setup default file system mocks\n            mockFs.existsSync.mockReturnValue(true);\n            mockFs.statSync.mockReturnValue({ size: 1000 } as any);\n            mockFs.readFileSync.mockReturnValue('test output\\nline 2\\nline 3');\n            mockFsPromises.readFile.mockResolvedValue('test output content');\n            mockFsPromises.writeFile.mockResolvedValue(undefined);\n            mockFs.createWriteStream.mockReturnValue({\n                write: jest.fn(),\n                end: jest.fn()\n            } as any);\n        });\n\n        it('should run tests and generate AI-optimized output', async () => {\n            // Arrange\n            const project = 'test-project';\n            const options: CommandOptions = {};\n\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10); // Success\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await nxTestCommand.run(project, options);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.exitCode).toBe(0);\n            expect(mockSpawn).toHaveBeenCalledWith(\n                'yarn',\n                ['nx', 'test', project, '--verbose'],\n                expect.objectContaining({\n                    cwd: '/test/workspace',\n                    shell: true\n                })\n            );\n        });\n\n        it('should use expected output when useExpected option is true', async () => {\n            // Arrange\n            const project = 'test-project';\n            const options: CommandOptions = { useExpected: true };\n\n            mockFileManager.getOutputFilePath.mockImplementation((fileName: string) => {\n                if (fileName === 'jest-output.txt') {return '/test/jest-output.txt';}\n                if (fileName === 'jest-output-expected.txt') {return '/test/jest-output-expected.txt';}\n                return '/test/' + fileName;\n            });\n\n            // Act\n            const result = await nxTestCommand.run(project, options);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(mockFsPromises.copyFile).toHaveBeenCalledWith(\n                '/test/jest-output-expected.txt',\n                '/test/jest-output.txt'\n            );\n            expect(mockSpawn).not.toHaveBeenCalled(); // Should not run tests\n        });\n\n        it('should handle test execution failure', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(1), 10); // Failure\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await nxTestCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n        });\n\n        it('should generate full output when fullOutput option is true', async () => {\n            // Arrange\n            const project = 'test-project';\n            const options: CommandOptions = { fullOutput: true };\n\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10); // Success\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            await nxTestCommand.run(project, options);\n\n            // Assert\n            // Verify that full output is used instead of AI-optimized\n            expect(mockFsPromises.copyFile).toHaveBeenCalled();\n        });\n\n        it('should handle missing raw output file', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            mockFs.existsSync.mockReturnValue(false);\n            \n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await nxTestCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.error).toBe('No test output captured');\n        });\n    });\n\n    describe('cleanAnsiCodes', () => {\n        it('should remove ANSI escape sequences', async () => {\n            // Arrange\n            const inputFile = '/tmp/input.txt';\n            const outputFile = '/tmp/output.txt';\n            const content = '\\x1b[32mGreen text\\x1b[0m\\r\\nNormal text';\n            \n            mockFsPromises.readFile.mockResolvedValue(content);\n            mockFsPromises.writeFile.mockResolvedValue(undefined);\n\n            // Act\n            const result = await (nxTestCommand as any).cleanAnsiCodes(inputFile, outputFile);\n\n            // Assert\n            expect(result).toBe(true);\n            expect(mockFsPromises.writeFile).toHaveBeenCalledWith(\n                outputFile,\n                'Green textNormal text'\n            );\n        });\n\n        it('should handle file read error', async () => {\n            // Arrange\n            const inputFile = '/tmp/input.txt';\n            const outputFile = '/tmp/output.txt';\n            \n            mockFsPromises.readFile.mockRejectedValue(new Error('File not found'));\n\n            // Act\n            const result = await (nxTestCommand as any).cleanAnsiCodes(inputFile, outputFile);\n\n            // Assert\n            expect(result).toBe(false);\n        });\n    });\n\n    describe('createAiOptimizedOutput', () => {\n        it('should create optimized output for passing tests', async () => {\n            // Arrange\n            const inputFile = '/tmp/input.txt';\n            const outputFile = '/tmp/output.txt';\n            const testArgs = 'test-project';\n            const exitCode = 0;\n\n            const testOutput = `\nPASS src/app/test.spec.ts (5.123 s)\nPASS src/lib/other.spec.ts (2.456 s)\nTest Suites: 2 passed, 2 total\nTests: 10 passed, 10 total\nTime: 7.579 s\n            `.trim();\n\n            mockFsPromises.readFile.mockResolvedValue(testOutput);\n            mockFsPromises.writeFile.mockResolvedValue(undefined);\n\n            // Act\n            await (nxTestCommand as any).createAiOptimizedOutput(inputFile, outputFile, testArgs, exitCode);\n\n            // Assert\n            expect(mockFsPromises.writeFile).toHaveBeenCalledWith(\n                outputFile,\n                expect.stringContaining('STATUS: ✅ PASSED')\n            );\n            expect(mockFsPromises.writeFile).toHaveBeenCalledWith(\n                outputFile,\n                expect.stringContaining('EXECUTIVE SUMMARY')\n            );\n        });\n\n        it('should create optimized output for failing tests', async () => {\n            // Arrange\n            const inputFile = '/tmp/input.txt';\n            const outputFile = '/tmp/output.txt';\n            const testArgs = 'test-project';\n            const exitCode = 1;\n\n            const testOutput = `\nFAIL src/app/test.spec.ts\n● Component › should create\n  expect(received).toBeTruthy()\nTest suite failed to run\nerror TS2345: Argument of type 'string' is not assignable to parameter\nTest Suites: 1 failed, 1 total\nTests: 0 passed, 1 failed, 1 total\nTime: 3.123 s\n            `.trim();\n\n            mockFsPromises.readFile.mockResolvedValue(testOutput);\n            mockFsPromises.writeFile.mockResolvedValue(undefined);\n\n            // Act\n            await (nxTestCommand as any).createAiOptimizedOutput(inputFile, outputFile, testArgs, exitCode);\n\n            // Assert\n            expect(mockFsPromises.writeFile).toHaveBeenCalledWith(\n                outputFile,\n                expect.stringContaining('STATUS: ❌ FAILED')\n            );\n            expect(mockFsPromises.writeFile).toHaveBeenCalledWith(\n                outputFile,\n                expect.stringContaining('FAILURE ANALYSIS')\n            );\n            expect(mockFsPromises.writeFile).toHaveBeenCalledWith(\n                outputFile,\n                expect.stringContaining('COMPILATION/RUNTIME ERRORS')\n            );\n        });\n    });\n\n    describe('extractPattern', () => {\n        it('should extract matching pattern from lines', () => {\n            // Arrange\n            const lines = [\n                'Some text',\n                'Test Suites: 2 passed, 0 failed, 2 total',\n                'More text'\n            ];\n            const pattern = /Test Suites:.*total/;\n\n            // Act\n            const result = (nxTestCommand as any).extractPattern(lines, pattern);\n\n            // Assert\n            expect(result).toBe('Test Suites: 2 passed, 0 failed, 2 total');\n        });\n\n        it('should return empty string when pattern not found', () => {\n            // Arrange\n            const lines = ['Some text', 'More text'];\n            const pattern = /Test Suites:.*total/;\n\n            // Act\n            const result = (nxTestCommand as any).extractPattern(lines, pattern);\n\n            // Assert\n            expect(result).toBe('');\n        });\n    });\n\n    describe('countMatches', () => {\n        it('should count matching lines', () => {\n            // Arrange\n            const lines = [\n                'PASS src/app/test.spec.ts',\n                'FAIL src/app/other.spec.ts',\n                'PASS src/lib/service.spec.ts',\n                'Some other text'\n            ];\n            const pattern = /PASS.*\\.spec\\.ts/;\n\n            // Act\n            const result = (nxTestCommand as any).countMatches(lines, pattern);\n\n            // Assert\n            expect(result).toBe(2);\n        });\n\n        it('should return 0 when no matches found', () => {\n            // Arrange\n            const lines = ['Some text', 'More text'];\n            const pattern = /PASS.*\\.spec\\.ts/;\n\n            // Act\n            const result = (nxTestCommand as any).countMatches(lines, pattern);\n\n            // Assert\n            expect(result).toBe(0);\n        });\n    });\n});\n"],"version":3}