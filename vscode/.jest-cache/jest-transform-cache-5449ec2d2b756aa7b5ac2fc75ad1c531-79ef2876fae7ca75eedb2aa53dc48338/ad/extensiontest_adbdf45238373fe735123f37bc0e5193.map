{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/__tests__/extension.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/__tests__/extension.test.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { activate, deactivate } from '../extension';\nimport { WebviewProvider } from '../webview/provider';\nimport { ProjectDetector } from '../utils/projectDetector';\nimport { CommandRunner } from '../utils/shellRunner';\nimport { FileManager } from '../utils/fileManager';\n\n// Mock all dependencies\njest.mock('../webview/provider');\njest.mock('../utils/projectDetector');\njest.mock('../utils/shellRunner');\njest.mock('../utils/fileManager');\n\n// Mock additional dependencies\njest.mock('../utils/statusTracker');\njest.mock('../utils/commandCoordinator');\njest.mock('../services/plugins/pluginManager');\njest.mock('../services/plugins/pluginMarketplace');\njest.mock('../services/plugins/pluginDiscovery');\njest.mock('../services/nx/NxAffectedManager');\njest.mock('../services/nx/NxCommandProvider');\njest.mock('../services/nx/NxStatusBar');\njest.mock('../services/git/GitDiffManager');\njest.mock('../services/git/GitCommandProvider');\njest.mock('../services/flipper/FlipperDetectionManager');\n\n// Mock vscode module\njest.mock('vscode', () => ({\n  window: {\n    registerWebviewViewProvider: jest.fn(),\n    showInformationMessage: jest.fn(() => Promise.resolve(undefined)),\n    showWarningMessage: jest.fn(),\n    createOutputChannel: jest.fn(() => ({\n      appendLine: jest.fn(),\n      show: jest.fn()\n    }))\n  },\n  commands: {\n    registerCommand: jest.fn(() => ({ dispose: jest.fn() })),\n    executeCommand: jest.fn()\n  },\n  workspace: {\n    workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\n    getConfiguration: jest.fn((section?: string) => ({\n      get: jest.fn((key: string) => {\n        if (key === 'showNotifications') {\n          return true;\n        }\n        return undefined;\n      })\n    }))\n  }\n}));\n\nconst MockedWebviewProvider = WebviewProvider as jest.MockedClass<typeof WebviewProvider>;\nconst MockedProjectDetector = ProjectDetector as jest.MockedClass<typeof ProjectDetector>;\nconst MockedCommandRunner = CommandRunner as jest.MockedClass<typeof CommandRunner>;\nconst MockedFileManager = FileManager as jest.MockedClass<typeof FileManager>;\n\ndescribe('Extension', () => {\n  let mockContext: vscode.ExtensionContext;\n  let mockProjectDetector: jest.Mocked<ProjectDetector>;\n  let mockCommandRunner: jest.Mocked<CommandRunner>;\n  let mockFileManager: jest.Mocked<FileManager>;\n  let mockWebviewProvider: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup mock context\n    mockContext = {\n      subscriptions: [],\n      extensionUri: { fsPath: '/extension/path' }\n    } as any;\n\n    // Setup mock instances\n    mockProjectDetector = new MockedProjectDetector('test-workspace') as jest.Mocked<ProjectDetector>;\n    mockCommandRunner = new MockedCommandRunner({} as any) as jest.Mocked<CommandRunner>;\n    mockFileManager = new MockedFileManager({} as any) as jest.Mocked<FileManager>;\n    \n    // Mock methods that are called in the tests\n    mockProjectDetector.findNxWorkspace = jest.fn();\n    mockProjectDetector.getCurrentProject = jest.fn();\n    \n    // Setup mock return values for constructors\n    MockedProjectDetector.mockImplementation(() => mockProjectDetector);\n    MockedCommandRunner.mockImplementation(() => mockCommandRunner);\n    MockedFileManager.mockImplementation(() => mockFileManager);\n    \n    // Create a mock webview provider that will be returned by the constructor\n    mockWebviewProvider = {\n      show: jest.fn(),\n      runCommand: jest.fn(),\n      resolveWebviewView: jest.fn()\n    } as any;\n    \n    MockedWebviewProvider.mockImplementation(() => mockWebviewProvider);\n  });\n\n  describe('activate', () => {\n    it('should activate extension when NX workspace is detected', async () => {\n      const vscode = require('vscode');\n      \n      // Mock NX workspace detection\n      mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');\n\n      await activate(mockContext);\n\n      expect(vscode.commands.executeCommand).toHaveBeenCalledWith('setContext', 'workspaceHasNxProject', true);\n      expect(vscode.window.registerWebviewViewProvider).toHaveBeenCalledWith('aiDebugUtilities', mockWebviewProvider);\n      expect(vscode.commands.registerCommand).toHaveBeenCalled();\n      expect(mockContext.subscriptions.length).toBeGreaterThan(0);\n    });\n\n    it('should remain dormant when no NX workspace is detected', async () => {\n      const vscode = require('vscode');\n      \n      // Mock no NX workspace\n      mockProjectDetector.findNxWorkspace.mockResolvedValue(null);\n\n      await activate(mockContext);\n\n      expect(vscode.commands.executeCommand).toHaveBeenCalledWith('setContext', 'workspaceHasNxProject', false);\n      expect(vscode.window.registerWebviewViewProvider).not.toHaveBeenCalled();\n    });\n\n    it('should show welcome notification when notifications are enabled', async () => {\n            const vscode = require('vscode');\n            \n            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');\n            \n            // Create a promise-based mock for the notification\n            let notificationResolve: (value: string) => void;\n            const notificationPromise = new Promise<string>((resolve) => {\n                notificationResolve = resolve;\n            });\n            \n            vscode.window.showInformationMessage.mockImplementation(() => {\n                // Simulate user clicking \"Open Panel\" after a short delay\n                setTimeout(() => notificationResolve('Open Panel'), 50);\n                return notificationPromise;\n            });\n\n            await activate(mockContext);\n\n            // Wait for the notification promise to resolve\n            await notificationPromise;\n            \n            // Give time for the .then() handler to execute\n            await new Promise(resolve => setTimeout(resolve, 50));\n\n            expect(vscode.window.showInformationMessage).toHaveBeenCalledWith(\n                'AI Debug Utilities activated! Open the panel to get started.',\n                'Open Panel'\n            );\n            \n            expect(vscode.commands.executeCommand).toHaveBeenCalledWith('aiDebugUtilities.openPanel');\n    });\n\n    it('should register all required commands', async () => {\n      const vscode = require('vscode');\n      \n      mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');\n\n      await activate(mockContext);\n\n      const registeredCommands = vscode.commands.registerCommand.mock.calls.map((call: any) => call[0]);\n      \n      expect(registeredCommands).toContain('aiDebugUtilities.openPanel');\n      expect(registeredCommands).toContain('aiDebugUtilities.runAiDebug');\n      expect(registeredCommands).toContain('aiDebugUtilities.runNxTest');\n      expect(registeredCommands).toContain('aiDebugUtilities.runGitDiff');\n      expect(registeredCommands).toContain('aiDebugUtilities.runPrepareToPush');\n    });\n  });\n\n  describe('registered commands', () => {\n    beforeEach(async () => {\n      const vscode = require('vscode');\n      mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');\n      await activate(mockContext);\n    });\n\n    it('should register openPanel command', async () => {\n      const vscode = require('vscode');\n      const openPanelCall = vscode.commands.registerCommand.mock.calls\n        .find((call: any) => call[0] === 'aiDebugUtilities.openPanel');\n      \n      if (openPanelCall && openPanelCall[1]) {\n        openPanelCall[1]();\n        expect(mockWebviewProvider.show).toHaveBeenCalled();\n      }\n    });\n\n    it('should register runAiDebug command with project detection', async () => {\n      const vscode = require('vscode');\n      const runAiDebugCall = vscode.commands.registerCommand.mock.calls\n        .find((call: any) => call[0] === 'aiDebugUtilities.runAiDebug');\n\n      mockProjectDetector.getCurrentProject.mockResolvedValue({ \n        name: 'my-app', \n        root: 'apps/my-app', \n        projectType: 'application',\n        type: 'nx',\n        packageJsonPath: 'apps/my-app/package.json'\n      });\n\n      if (runAiDebugCall && runAiDebugCall[1]) {\n        await runAiDebugCall[1]();\n\n        expect(mockProjectDetector.getCurrentProject).toHaveBeenCalled();\n        expect(mockWebviewProvider.runCommand).toHaveBeenCalledWith('aiDebug', { project: 'my-app' });\n      }\n    });\n\n    it('should register runAiDebug command and show warning when no project detected', async () => {\n      const vscode = require('vscode');\n      const runAiDebugCall = vscode.commands.registerCommand.mock.calls\n        .find((call: any) => call[0] === 'aiDebugUtilities.runAiDebug');\n\n      mockProjectDetector.getCurrentProject.mockResolvedValue(undefined);\n\n      if (runAiDebugCall && runAiDebugCall[1]) {\n        await runAiDebugCall[1]();\n\n        expect(vscode.window.showWarningMessage).toHaveBeenCalledWith(\n          'No NX project detected. Please select a project first.'\n        );\n        expect(mockWebviewProvider.runCommand).not.toHaveBeenCalled();\n      }\n    });\n\n    it('should register runNxTest command with project detection', async () => {\n      const vscode = require('vscode');\n      const runNxTestCall = vscode.commands.registerCommand.mock.calls\n        .find((call: any) => call[0] === 'aiDebugUtilities.runNxTest');\n\n      mockProjectDetector.getCurrentProject.mockResolvedValue({ \n        name: 'my-lib', \n        root: 'libs/my-lib', \n        projectType: 'library',\n        type: 'nx',\n        packageJsonPath: 'libs/my-lib/package.json'\n      });\n\n      if (runNxTestCall && runNxTestCall[1]) {\n        await runNxTestCall[1]();\n\n        expect(mockProjectDetector.getCurrentProject).toHaveBeenCalled();\n        expect(mockWebviewProvider.runCommand).toHaveBeenCalledWith('nxTest', { project: 'my-lib' });\n      }\n    });\n\n    it('should register runNxTest command and show warning when no project detected', async () => {\n      const vscode = require('vscode');\n      const runNxTestCall = vscode.commands.registerCommand.mock.calls\n        .find((call: any) => call[0] === 'aiDebugUtilities.runNxTest');\n\n      mockProjectDetector.getCurrentProject.mockResolvedValue(undefined);\n\n      if (runNxTestCall && runNxTestCall[1]) {\n        await runNxTestCall[1]();\n\n        expect(vscode.window.showWarningMessage).toHaveBeenCalledWith(\n          'No NX project detected. Please select a project first.'\n        );\n        expect(mockWebviewProvider.runCommand).not.toHaveBeenCalled();\n      }\n    });\n\n    it('should register runGitDiff command', async () => {\n      const vscode = require('vscode');\n      const runGitDiffCall = vscode.commands.registerCommand.mock.calls\n        .find((call: any) => call[0] === 'aiDebugUtilities.runGitDiff');\n\n      if (runGitDiffCall && runGitDiffCall[1]) {\n        await runGitDiffCall[1]();\n        expect(mockWebviewProvider.runCommand).toHaveBeenCalledWith('gitDiff', {});\n      }\n    });\n\n    it('should register runPrepareToPush command with project detection', async () => {\n      const vscode = require('vscode');\n      const runPrepareToPushCall = vscode.commands.registerCommand.mock.calls\n        .find((call: any) => call[0] === 'aiDebugUtilities.runPrepareToPush');\n\n      mockProjectDetector.getCurrentProject.mockResolvedValue({ \n        name: 'my-app', \n        root: 'apps/my-app', \n        projectType: 'application',\n        type: 'nx',\n        packageJsonPath: 'apps/my-app/package.json'\n      });\n\n      if (runPrepareToPushCall && runPrepareToPushCall[1]) {\n        await runPrepareToPushCall[1]();\n\n        expect(mockProjectDetector.getCurrentProject).toHaveBeenCalled();\n        expect(mockWebviewProvider.runCommand).toHaveBeenCalledWith('prepareToPush', { project: 'my-app' });\n      }\n    });\n\n    it('should register runPrepareToPush command and show warning when no project detected', async () => {\n      const vscode = require('vscode');\n      const runPrepareToPushCall = vscode.commands.registerCommand.mock.calls\n        .find((call: any) => call[0] === 'aiDebugUtilities.runPrepareToPush');\n\n      mockProjectDetector.getCurrentProject.mockResolvedValue(undefined);\n\n      if (runPrepareToPushCall && runPrepareToPushCall[1]) {\n        await runPrepareToPushCall[1]();\n\n        expect(vscode.window.showWarningMessage).toHaveBeenCalledWith(\n          'No NX project detected. Please select a project first.'\n        );\n        expect(mockWebviewProvider.runCommand).not.toHaveBeenCalled();\n      }\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle workspace detection errors gracefully', async () => {\n      const vscode = require('vscode');\n      \n      mockProjectDetector.findNxWorkspace.mockRejectedValue(new Error('Workspace detection failed'));\n\n      await activate(mockContext);\n      \n      // The extension should set context to false when workspace detection fails\n      expect(vscode.commands.executeCommand).toHaveBeenCalledWith('setContext', 'workspaceHasNxProject', false);\n    });\n\n    it('should handle command registration errors gracefully', async () => {\n      const vscode = require('vscode');\n      \n      mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');\n      vscode.commands.registerCommand.mockImplementation(() => {\n        throw new Error('Command registration failed');\n      });\n\n      await activate(mockContext);\n      \n      // The extension should set context to false when command registration fails\n      expect(vscode.commands.executeCommand).toHaveBeenCalledWith('setContext', 'workspaceHasNxProject', false);\n    });\n  });\n\n  describe('deactivate', () => {\n    it('should deactivate extension cleanly', () => {\n      // Should not throw\n      expect(() => deactivate()).not.toThrow();\n    });\n  });\n\n  describe('integration', () => {\n    it('should create all necessary instances with correct dependencies', async () => {\n      // Clear previous mock calls\n      MockedProjectDetector.mockClear();\n      MockedCommandRunner.mockClear();\n      MockedFileManager.mockClear();\n      MockedWebviewProvider.mockClear();\n      \n      mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');\n      \n      await activate(mockContext);\n\n      expect(MockedProjectDetector).toHaveBeenCalledTimes(1);\n      expect(MockedCommandRunner).toHaveBeenCalledTimes(1);\n      expect(MockedFileManager).toHaveBeenCalledTimes(1);\n      expect(MockedWebviewProvider).toHaveBeenCalledWith(\n      mockContext.extensionUri,\n      mockProjectDetector,\n      mockCommandRunner,\n      mockFileManager,\n      expect.anything() // statusTracker\n      );\n    });\n\n    it('should properly dispose of resources through context subscriptions', async () => {\n            mockProjectDetector.findNxWorkspace.mockResolvedValue('/workspace/nx.json');\n            \n            await activate(mockContext);\n\n            expect(mockContext.subscriptions.length).toBeGreaterThan(0);\n            \n            // All subscriptions should be disposable objects\n            mockContext.subscriptions.forEach(subscription => {\n                if (subscription) {\n            expect(subscription).toHaveProperty('dispose');\n        }\n    });\n    });\n  });\n});\n"],"version":3}