{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/streamingRunner.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/streamingRunner.test.ts"],"sourcesContent":["import { StreamingCommandRunner } from '../../utils/streamingRunner';\nimport { CommandResult } from '../../types';\nimport { EventEmitter } from 'events';\n\n// Mock child_process\nclass MockChildProcess extends EventEmitter {\n    stdout = new EventEmitter();\n    stderr = new EventEmitter();\n    kill = jest.fn().mockReturnValue(true);\n    pid = 12345;\n}\n\nconst mockStdout = new EventEmitter();\nconst mockStderr = new EventEmitter();\nconst mockProcess = new MockChildProcess();\n\nObject.assign(mockProcess, {\n    stdout: mockStdout,\n    stderr: mockStderr\n});\n\njest.mock('child_process', () => ({\n    spawn: jest.fn(() => mockProcess)\n}));\n\nconst { spawn } = require('child_process');\n\ndescribe('StreamingCommandRunner', () => {\n    let streamingRunner: StreamingCommandRunner;\n    let mockSpawn: jest.MockedFunction<typeof spawn>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        // Create mock output channel\n        const mockOutputChannel = {\n            appendLine: jest.fn(),\n            append: jest.fn(),\n            show: jest.fn(),\n            hide: jest.fn(),\n            dispose: jest.fn(),\n            name: 'Test Output Channel'\n        } as any;\n        \n        streamingRunner = new StreamingCommandRunner(mockOutputChannel);\n        mockSpawn = spawn as jest.MockedFunction<typeof spawn>;\n        mockSpawn.mockReturnValue(mockProcess);\n    });\n\n    afterEach(() => {\n        streamingRunner.removeAllListeners();\n        // Clean up any remaining listeners on mock process\n        mockProcess.removeAllListeners();\n        mockStdout.removeAllListeners();\n        mockStderr.removeAllListeners();\n    });\n\n    describe('executeWithStreaming', () => {\n        it('should execute command and emit output events', async () => {\n            // Arrange\n            const outputSpy = jest.fn();\n            const completeSpy = jest.fn();\n\n            streamingRunner.on('output', outputSpy);\n            streamingRunner.on('complete', completeSpy);\n\n            // Act\n            const promise = streamingRunner.executeWithStreaming('echo', ['hello']);\n\n            // Simulate command execution\n            mockStdout.emit('data', Buffer.from('hello\\n'));\n            mockProcess.emit('close', 0);\n\n            const result = await promise;\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.exitCode).toBe(0);\n            expect(result.output).toBe('hello\\n');\n            expect(outputSpy).toHaveBeenCalledWith('hello\\n');\n            expect(completeSpy).toHaveBeenCalledWith(result);\n        });\n\n        it('should track progress based on output patterns', async () => {\n            // Arrange\n            const outputSpy = jest.fn();\n\n            streamingRunner.on('output', outputSpy);\n\n            // Act\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            // Simulate progress\n            mockStdout.emit('data', Buffer.from('Starting the process...\\n'));\n            mockStdout.emit('data', Buffer.from('Processing files...\\n'));\n            mockStdout.emit('data', Buffer.from('Finishing up...\\n'));\n            mockProcess.emit('close', 0);\n\n            await promise;\n\n            // Assert\n            expect(outputSpy).toHaveBeenCalledWith('Starting the process...\\n');\n            expect(outputSpy).toHaveBeenCalledWith('Processing files...\\n');\n            expect(outputSpy).toHaveBeenCalledWith('Finishing up...\\n');\n        });\n\n        it('should handle stderr output', async () => {\n            // Arrange\n            const errorSpy = jest.fn();\n            streamingRunner.on('error', errorSpy);\n\n            // Act\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            // Simulate stderr output\n            mockStderr.emit('data', Buffer.from('warning: something happened\\n'));\n            mockProcess.emit('close', 0);\n\n            const result = await promise;\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.error).toBe('warning: something happened\\n');\n            expect(errorSpy).toHaveBeenCalledWith('warning: something happened\\n');\n        });\n\n        it('should handle command failure', async () => {\n            // Arrange\n            const completeSpy = jest.fn();\n            streamingRunner.on('complete', completeSpy);\n\n            // Act\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            // Simulate command failure\n            mockStdout.emit('data', Buffer.from('some output\\n'));\n            mockProcess.emit('close', 1);\n\n            const result = await promise;\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(result.output).toBe('some output\\n');\n            expect(completeSpy).toHaveBeenCalledWith(result);\n        });\n\n        it('should handle process error', async () => {\n            // Arrange\n            const completeSpy = jest.fn();\n            streamingRunner.on('complete', completeSpy);\n\n            // Act\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            // Simulate process error\n            const error = new Error('Command not found');\n            mockProcess.emit('error', error);\n\n            const result = await promise;\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(result.error).toBe('Command not found');\n            expect(completeSpy).toHaveBeenCalledWith(result);\n        });\n\n        it('should pass correct spawn options', async () => {\n            // Arrange\n            const options = {\n                cwd: '/test/dir'\n            };\n\n            // Act\n            const promise = streamingRunner.executeWithStreaming('test', ['arg1', 'arg2'], options);\n            mockProcess.emit('close', 0);\n            await promise;\n\n            // Assert\n            expect(mockSpawn).toHaveBeenCalledWith('test', ['arg1', 'arg2'], expect.objectContaining({\n                cwd: '/test/dir',\n                env: expect.any(Object),\n                stdio: ['pipe', 'pipe', 'pipe']\n            }));\n        });\n    });\n\n    describe('cancel', () => {\n        it('should cancel running command', () => {\n            // Start a command\n            streamingRunner.executeWithStreaming('test', []);\n            expect(streamingRunner.isRunning).toBe(true);\n\n            // Act\n            streamingRunner.cancel();\n\n            // Assert\n            expect(mockProcess.kill).toHaveBeenCalledWith('SIGTERM');\n            // Note: isRunning might still be true until the process actually terminates\n        });\n\n        it('should force kill after timeout', (done) => {\n            // Arrange\n            jest.useFakeTimers();\n            \n            // Start a command\n            streamingRunner.executeWithStreaming('test', []);\n            \n            // Act\n            streamingRunner.cancel();\n            \n            // Fast-forward time\n            jest.advanceTimersByTime(6000);\n\n            // Assert\n            setTimeout(() => {\n                expect(mockProcess.kill).toHaveBeenCalledWith('SIGTERM');\n                expect(mockProcess.kill).toHaveBeenCalledWith('SIGKILL');\n                jest.useRealTimers();\n                done();\n            }, 0);\n        });\n\n        it('should do nothing if no command running', () => {\n            // Arrange\n            expect(streamingRunner.isRunning).toBe(false);\n\n            // Act\n            streamingRunner.cancel();\n\n            // Assert\n            expect(mockProcess.kill).not.toHaveBeenCalled();\n        });\n    });\n\n    describe('isRunning', () => {\n        it('should return true when command is running', () => {\n            // Act\n            streamingRunner.executeWithStreaming('test', []);\n\n            // Assert\n            expect(streamingRunner.isRunning).toBe(true);\n        });\n\n        it('should return false when no command is running', () => {\n            // Assert\n            expect(streamingRunner.isRunning).toBe(false);\n        });\n\n        it('should return false after command completes', async () => {\n            // Arrange\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            expect(streamingRunner.isRunning).toBe(true);\n\n            // Act\n            mockProcess.emit('close', 0);\n            await promise;\n\n            // Assert\n            expect(streamingRunner.isRunning).toBe(false);\n        });\n    });\n\n    describe('getCurrentOutput', () => {\n        it('should return accumulated output', async () => {\n            // Act\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            mockStdout.emit('data', Buffer.from('line 1\\n'));\n            mockStdout.emit('data', Buffer.from('line 2\\n'));\n\n            // Assert\n            expect(streamingRunner.getCurrentOutput()).toBe('line 1\\nline 2\\n');\n\n            mockProcess.emit('close', 0);\n            await promise;\n        });\n    });\n\n    describe('clearOutput', () => {\n        it('should clear output buffers', async () => {\n            // Arrange\n            const promise = streamingRunner.executeWithStreaming('test', []);\n            mockStdout.emit('data', Buffer.from('some output\\n'));\n            mockStderr.emit('data', Buffer.from('some error\\n'));\n\n            expect(streamingRunner.getCurrentOutput()).toBe('some output\\n');\n\n            // Act\n            streamingRunner.clearOutput();\n\n            // Assert\n            expect(streamingRunner.getCurrentOutput()).toBe('');\n\n            mockProcess.emit('close', 0);\n            await promise;\n        });\n    });\n\n    describe('simulateProgress', () => {\n        it('should emit progress events over time', (done) => {\n            // Arrange\n            jest.useFakeTimers();\n            const progressSpy = jest.fn();\n            streamingRunner.on('progress', progressSpy);\n\n            // Start a command\n            streamingRunner.executeWithStreaming('test', []);\n\n            // Act\n            streamingRunner.simulateProgress(10000); // 10 seconds\n\n            // Fast-forward time\n            jest.advanceTimersByTime(1000); // 1 second = 9% progress\n            jest.advanceTimersByTime(5000); // 6 seconds = 54% progress\n            jest.advanceTimersByTime(4000); // 10 seconds = 90% progress\n\n            // Assert\n            setTimeout(() => {\n                expect(progressSpy).toHaveBeenCalledWith(9);\n                expect(progressSpy).toHaveBeenCalledWith(54);\n                expect(progressSpy).toHaveBeenCalledWith(90);\n                jest.useRealTimers();\n                done();\n            }, 0);\n        });\n\n        it('should stop when command is no longer running', (done) => {\n            // Arrange\n            jest.useFakeTimers();\n            const progressSpy = jest.fn();\n            streamingRunner.on('progress', progressSpy);\n\n            // Start and immediately complete command\n            const promise = streamingRunner.executeWithStreaming('test', []);\n            mockProcess.emit('close', 0);\n\n            // Act\n            streamingRunner.simulateProgress(10000);\n            jest.advanceTimersByTime(5000);\n\n            // Assert\n            setTimeout(() => {\n                expect(progressSpy).not.toHaveBeenCalled();\n                jest.useRealTimers();\n                done();\n            }, 0);\n        });\n    });\n\n    describe('executeTestCommand', () => {\n        it('should execute test command with predefined progress steps', async () => {\n            // Arrange\n            const outputSpy = jest.fn();\n            streamingRunner.on('output', outputSpy);\n\n            // Act\n            const promise = streamingRunner.executeTestCommand('yarn', ['nx', 'test', 'project'], '/test/cwd');\n\n            // Simulate test output with progress keywords\n            mockStdout.emit('data', Buffer.from('Determining test suites to run...\\n'));\n            mockStdout.emit('data', Buffer.from('Found test suites in project\\n'));\n            mockStdout.emit('data', Buffer.from('Running tests now...\\n'));\n            mockProcess.emit('close', 0);\n\n            await promise;\n\n            // Assert\n            expect(outputSpy).toHaveBeenCalled();\n            expect(mockSpawn).toHaveBeenCalledWith('yarn', ['nx', 'test', 'project'], expect.objectContaining({\n                cwd: '/test/cwd'\n            }));\n        });\n    });\n\n    describe('executeGitCommand', () => {\n        it('should execute git command with git-specific progress steps', async () => {\n            // Arrange\n            const outputSpy = jest.fn();\n            streamingRunner.on('output', outputSpy);\n\n            // Act\n            const promise = streamingRunner.executeGitCommand(['diff', '--name-only'], '/test/cwd');\n\n            mockStdout.emit('data', Buffer.from('Analyzing repository state...\\n'));\n            mockProcess.emit('close', 0);\n\n            await promise;\n\n            // Assert\n            expect(outputSpy).toHaveBeenCalled();\n            expect(mockSpawn).toHaveBeenCalledWith('git', ['diff', '--name-only'], expect.objectContaining({\n                cwd: '/test/cwd'\n            }));\n        });\n    });\n\n    describe('executeLintCommand', () => {\n        it('should execute lint command with lint-specific progress steps', async () => {\n            // Arrange\n            const outputSpy = jest.fn();\n            streamingRunner.on('output', outputSpy);\n\n            // Act\n            const promise = streamingRunner.executeLintCommand('yarn', ['nx', 'lint', 'project'], '/test/cwd');\n\n            mockStdout.emit('data', Buffer.from('Loading configuration files...\\n'));\n            mockProcess.emit('close', 0);\n\n            await promise;\n\n            // Assert\n            expect(outputSpy).toHaveBeenCalled();\n            expect(mockSpawn).toHaveBeenCalledWith('yarn', ['nx', 'lint', 'project'], expect.objectContaining({\n                cwd: '/test/cwd'\n            }));\n        });\n    });\n\n    describe('event handling', () => {\n        it('should implement StreamingEventEmitter interface', () => {\n            // Assert\n            expect(streamingRunner.on).toBeDefined();\n            expect(streamingRunner.emit).toBeDefined();\n            expect(streamingRunner.removeAllListeners).toBeDefined();\n        });\n\n        it('should allow multiple listeners for same event', () => {\n            // Arrange\n            const listener1 = jest.fn();\n            const listener2 = jest.fn();\n\n            streamingRunner.on('output', listener1);\n            streamingRunner.on('output', listener2);\n\n            // Act\n            streamingRunner.emit('output', 'test data');\n\n            // Assert\n            expect(listener1).toHaveBeenCalledWith('test data');\n            expect(listener2).toHaveBeenCalledWith('test data');\n        });\n\n        it('should clean up listeners', () => {\n            // Arrange\n            const listener = jest.fn();\n            streamingRunner.on('output', listener);\n\n            // Act\n            streamingRunner.removeAllListeners();\n            streamingRunner.emit('output', 'test data');\n\n            // Assert\n            expect(listener).not.toHaveBeenCalled();\n        });\n    });\n\n    describe('error scenarios', () => {\n        it('should handle stdout stream errors gracefully', async () => {\n            // Arrange\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            // Act - simulate stream error (this shouldn't crash)\n            mockStdout.emit('error', new Error('Stream error'));\n            mockProcess.emit('close', 0);\n\n            const result = await promise;\n\n            // Assert\n            expect(result.success).toBe(true); // Should still complete\n        });\n\n        it('should handle stderr stream errors gracefully', async () => {\n            // Arrange\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            // Act - simulate stream error\n            mockStderr.emit('error', new Error('Stream error'));\n            mockProcess.emit('close', 0);\n\n            const result = await promise;\n\n            // Assert\n            expect(result.success).toBe(true); // Should still complete\n        });\n\n        it('should measure command duration correctly', async () => {\n            // Arrange\n            const startTime = Date.now();\n            const promise = streamingRunner.executeWithStreaming('test', []);\n\n            // Simulate some delay\n            setTimeout(() => {\n                mockProcess.emit('close', 0);\n            }, 100);\n\n            // Act\n            const result = await promise;\n\n            // Assert\n            expect(result.duration).toBeGreaterThan(90); // At least 90ms\n            expect(result.duration).toBeLessThan(200); // But not too much more\n        });\n    });\n});"],"version":3}