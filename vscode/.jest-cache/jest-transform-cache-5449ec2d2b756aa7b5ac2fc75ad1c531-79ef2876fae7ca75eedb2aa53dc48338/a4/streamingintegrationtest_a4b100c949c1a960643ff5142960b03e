96c8a8efb8b38a093c2bc5aa3ec4e54e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock VSCode completely for integration tests
jest.mock('vscode', () => ({
    StatusBarAlignment: {
        Left: 1,
        Right: 2
    },
    Uri: {
        joinPath: jest.fn(() => ({ toString: () => 'mock://uri' })),
        parse: jest.fn(() => ({ toString: () => 'mock://uri' }))
    },
    workspace: {
        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],
        getConfiguration: jest.fn(() => ({
            get: jest.fn(() => true)
        }))
    },
    window: {
        createStatusBarItem: jest.fn(() => ({
            show: jest.fn(),
            hide: jest.fn(),
            dispose: jest.fn(),
            text: '',
            tooltip: '',
            command: ''
        })),
        showInformationMessage: jest.fn(),
        showErrorMessage: jest.fn(),
        createOutputChannel: jest.fn(() => ({
            append: jest.fn(),
            appendLine: jest.fn(),
            show: jest.fn(),
            hide: jest.fn(),
            dispose: jest.fn()
        }))
    }
}));
jest.mock('child_process', () => ({
    spawn: jest.fn(() => mockChildProcess)
}));
const provider_1 = require("../webview/provider");
const streamingRunner_1 = require("../utils/streamingRunner");
const statusTracker_1 = require("../utils/statusTracker");
const vscode = __importStar(require("vscode"));
const events_1 = require("events");
// Mock child_process for integration
const mockChildProcess = new events_1.EventEmitter();
mockChildProcess.stdout = new events_1.EventEmitter();
mockChildProcess.stderr = new events_1.EventEmitter();
mockChildProcess.kill = jest.fn();
describe('Streaming Integration Tests', () => {
    let provider;
    let streamingRunner;
    let mockProjectDetector;
    let mockCommandRunner;
    let mockFileManager;
    let mockWebviewView;
    let mockWebview;
    let receivedMessages = [];
    beforeEach(() => {
        jest.clearAllMocks();
        receivedMessages = [];
        // Create real streaming runner for integration testing
        streamingRunner = new streamingRunner_1.StreamingCommandRunner({});
        // Setup mocked dependencies
        mockProjectDetector = {
            getProjects: jest.fn().mockResolvedValue([
                { name: 'test-app', root: 'apps/test-app', projectType: 'application' }
            ]),
            getCurrentProject: jest.fn().mockResolvedValue({ name: 'test-app', root: 'apps/test-app', projectType: 'application' })
        };
        mockCommandRunner = {
            runAiDebug: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'AI debug complete', duration: 2000 })
        };
        mockFileManager = {
            watchFiles: jest.fn(),
            getFileContent: jest.fn().mockResolvedValue('test file content'),
            openFile: jest.fn()
        };
        // Setup webview mocks that capture messages
        mockWebview = {
            asWebviewUri: jest.fn().mockReturnValue('mock://webview-uri'),
            postMessage: jest.fn((message) => {
                receivedMessages.push(message);
                return Promise.resolve(true);
            }),
            onDidReceiveMessage: jest.fn(),
            html: '',
            options: {}
        };
        mockWebviewView = {
            webview: mockWebview,
            show: jest.fn()
        };
        // Create provider with real streaming runner
        const mockStatusTracker = new statusTracker_1.StatusTracker();
        provider = new provider_1.WebviewProvider(vscode.Uri.parse('test://extension'), mockProjectDetector, mockCommandRunner, mockFileManager, mockStatusTracker);
        // Replace the internal streaming runner with our test instance
        provider.streamingRunner = streamingRunner;
        provider.setupStreamingListeners();
    });
    afterEach(() => {
        streamingRunner.removeAllListeners();
    });
    describe('end-to-end command execution with streaming', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should stream output during command execution', async () => {
            // Arrange
            const { spawn } = require('child_process');
            let commandPromise;
            // Act - start command
            commandPromise = provider.runCommand('nxTest', { project: 'test-app' });
            // Simulate command output streaming
            await new Promise(resolve => setTimeout(resolve, 10)); // Let command start
            mockChildProcess.stdout.emit('data', Buffer.from('Determining test suites to run...\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            mockChildProcess.stdout.emit('data', Buffer.from('Found 5 test suites\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            mockChildProcess.stdout.emit('data', Buffer.from('Running tests...\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            mockChildProcess.stdout.emit('data', Buffer.from('Test results:\n PASS src/app.spec.ts\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            // Complete command
            mockChildProcess.emit('close', 0);
            // Wait for command to complete
            await commandPromise;
            // Assert - check that streaming messages were sent
            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');
            expect(streamingMessages.length).toBeGreaterThan(0);
            // Check for output messages
            const outputMessages = streamingMessages.filter(msg => msg.message.type === 'output');
            expect(outputMessages.length).toBeGreaterThan(0);
            expect(outputMessages[0].message.data.text).toContain('Determining test suites');
            // Check for progress messages
            const progressMessages = streamingMessages.filter(msg => msg.message.type === 'progress');
            expect(progressMessages.length).toBeGreaterThan(0);
            // Check for completion message
            const completeMessages = streamingMessages.filter(msg => msg.message.type === 'complete');
            expect(completeMessages.length).toBe(1);
            expect(completeMessages[0].message.data.result.success).toBe(true);
        });
        it('should handle command cancellation', async () => {
            // Arrange
            let commandPromise;
            // Act - start command
            commandPromise = provider.runCommand('nxTest', { project: 'test-app' });
            await new Promise(resolve => setTimeout(resolve, 10)); // Let command start
            // Simulate user cancellation
            const cancelMessage = {
                command: 'cancelCommand',
                data: {}
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            await messageHandler(cancelMessage);
            // Complete the cancelled command
            mockChildProcess.emit('close', 1);
            await commandPromise;
            // Assert
            expect(mockChildProcess.kill).toHaveBeenCalledWith('SIGTERM');
            expect(provider._state.isStreaming).toBe(false);
        });
        it('should handle command failure with error streaming', async () => {
            // Arrange
            let commandPromise;
            // Act - start command
            commandPromise = provider.runCommand('nxTest', { project: 'test-app' });
            await new Promise(resolve => setTimeout(resolve, 10));
            // Simulate error output
            mockChildProcess.stderr.emit('data', Buffer.from('Error: Test failed\n'));
            mockChildProcess.stdout.emit('data', Buffer.from('FAIL src/app.spec.ts\n'));
            // Complete with failure
            mockChildProcess.emit('close', 1);
            await commandPromise;
            // Assert
            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');
            const errorMessages = streamingMessages.filter(msg => msg.message.type === 'error');
            expect(errorMessages.length).toBeGreaterThan(0);
            expect(errorMessages[0].message.data.text).toContain('Error: Test failed');
            const completeMessages = streamingMessages.filter(msg => msg.message.type === 'complete');
            expect(completeMessages[0].message.data.result.success).toBe(false);
        });
        it('should coordinate multi-step AI Debug workflow', async () => {
            // Arrange
            let commandPromise;
            // Act - start AI Debug command
            commandPromise = provider.runCommand('aiDebug', { project: 'test-app' });
            await new Promise(resolve => setTimeout(resolve, 10));
            // Simulate Step 1: Tests
            mockChildProcess.stdout.emit('data', Buffer.from('Determining test suites to run...\n'));
            mockChildProcess.emit('close', 0);
            await new Promise(resolve => setTimeout(resolve, 10));
            // The workflow should continue to git diff step
            // Reset for next command
            mockChildProcess.removeAllListeners();
            mockChildProcess.stdout = new events_1.EventEmitter();
            mockChildProcess.stderr = new events_1.EventEmitter();
            // Simulate Step 2: Git diff
            mockChildProcess.stdout.emit('data', Buffer.from('Analyzing repository...\n'));
            mockChildProcess.emit('close', 0);
            await new Promise(resolve => setTimeout(resolve, 10));
            // Wait for command to complete
            await commandPromise;
            // Assert
            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');
            const statusMessages = streamingMessages.filter(msg => msg.message.type === 'status');
            // Should have status messages for each step
            const stepMessages = statusMessages.filter(msg => msg.message.data.status.includes('Step 1/3') ||
                msg.message.data.status.includes('Step 2/3') ||
                msg.message.data.status.includes('Step 3/3'));
            expect(stepMessages.length).toBeGreaterThan(0);
            // Should complete successfully
            const completeMessages = streamingMessages.filter(msg => msg.message.type === 'complete');
            expect(completeMessages.length).toBe(1);
            expect(mockCommandRunner.runAiDebug).toHaveBeenCalled();
        });
    });
    describe('webview message handling integration', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should handle runCommand message and stream results', async () => {
            // Arrange
            const message = {
                command: 'runCommand',
                data: {
                    action: 'nxTest',
                    project: 'test-app'
                }
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            const handlePromise = messageHandler(message);
            await new Promise(resolve => setTimeout(resolve, 10));
            // Simulate command execution
            mockChildProcess.stdout.emit('data', Buffer.from('Test output\n'));
            mockChildProcess.emit('close', 0);
            await handlePromise;
            // Assert
            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');
            expect(streamingMessages.length).toBeGreaterThan(0);
        });
        it('should handle clearOutput message', async () => {
            // Arrange
            const message = {
                command: 'clearOutput',
                data: {}
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Add some output first
            streamingRunner.emit('output', 'test output');
            // Act
            await messageHandler(message);
            // Assert
            // Should have cleared output
            expect(receivedMessages.some(msg => msg.command === 'clearOutput')).toBe(true);
        });
    });
    describe('progress tracking integration', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should track progress through command execution phases', async () => {
            // Arrange
            let commandPromise;
            // Act
            commandPromise = provider.runCommand('nxTest', { project: 'test-app' });
            await new Promise(resolve => setTimeout(resolve, 10));
            // Simulate different progress phases
            mockChildProcess.stdout.emit('data', Buffer.from('Determining test suites to run...\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            mockChildProcess.stdout.emit('data', Buffer.from('Found test suites\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            mockChildProcess.stdout.emit('data', Buffer.from('Running tests\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            mockChildProcess.stdout.emit('data', Buffer.from('Test suites completed\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            mockChildProcess.emit('close', 0);
            await commandPromise;
            // Assert
            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');
            const progressMessages = streamingMessages.filter(msg => msg.message.type === 'progress');
            // Should have progress updates
            expect(progressMessages.length).toBeGreaterThan(0);
            // Progress should increase over time
            const progressValues = progressMessages.map(msg => msg.message.data.progress);
            for (let i = 1; i < progressValues.length; i++) {
                expect(progressValues[i]).toBeGreaterThanOrEqual(progressValues[i - 1]);
            }
        });
        it('should update action button progress in state', async () => {
            // Arrange
            let commandPromise;
            // Act
            commandPromise = provider.runCommand('nxTest', { project: 'test-app' });
            await new Promise(resolve => setTimeout(resolve, 10));
            // Simulate progress
            mockChildProcess.stdout.emit('data', Buffer.from('Running tests\n'));
            await new Promise(resolve => setTimeout(resolve, 10));
            // Check intermediate state
            const state = provider._state;
            expect(state.actions.nxTest.status).toBe('running');
            mockChildProcess.emit('close', 0);
            await commandPromise;
            // Check final state
            expect(state.actions.nxTest.status).toBe('success');
            expect(state.actions.nxTest.progress).toBeUndefined(); // Should be cleared on completion
        });
    });
    describe('error handling integration', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should handle process spawn errors', async () => {
            // Arrange
            const { spawn } = require('child_process');
            spawn.mockImplementationOnce(() => {
                const errorProcess = new events_1.EventEmitter();
                setTimeout(() => {
                    errorProcess.emit('error', new Error('Command not found'));
                }, 10);
                return errorProcess;
            });
            // Act
            await provider.runCommand('nxTest', { project: 'test-app' });
            // Assert
            const streamingMessages = receivedMessages.filter(msg => msg.command === 'streamingUpdate');
            const completeMessages = streamingMessages.filter(msg => msg.message.type === 'complete');
            expect(completeMessages.length).toBe(1);
            expect(completeMessages[0].message.data.result.success).toBe(false);
            expect(completeMessages[0].message.data.result.error).toContain('Command not found');
        });
        it('should handle invalid action gracefully', async () => {
            // Act & Assert - should not throw
            await expect(provider.runCommand('invalidAction', {})).resolves.toBeUndefined();
            expect(vscode.window.showErrorMessage).toHaveBeenCalledWith(expect.stringContaining('Unknown action: invalidAction'));
        });
    });
    describe('state consistency integration', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should maintain consistent state throughout command lifecycle', async () => {
            // Arrange
            const state = provider._state;
            expect(state.isStreaming).toBe(false);
            expect(state.currentAction).toBeUndefined();
            // Act - start command
            const commandPromise = provider.runCommand('nxTest', { project: 'test-app' });
            await new Promise(resolve => setTimeout(resolve, 10));
            // Assert - during execution
            expect(state.isStreaming).toBe(true);
            expect(state.currentAction).toBe('nxTest');
            expect(state.actions.nxTest.status).toBe('running');
            // Complete command
            mockChildProcess.emit('close', 0);
            await commandPromise;
            // Assert - after completion
            expect(state.isStreaming).toBe(false);
            expect(state.currentAction).toBeUndefined();
            expect(state.actions.nxTest.status).toBe('success');
        });
        it('should reset state properly on command failure', async () => {
            // Arrange
            const state = provider._state;
            // Act - start and fail command
            const commandPromise = provider.runCommand('nxTest', { project: 'test-app' });
            await new Promise(resolve => setTimeout(resolve, 10));
            mockChildProcess.emit('close', 1); // Failure
            await commandPromise;
            // Assert
            expect(state.isStreaming).toBe(false);
            expect(state.currentAction).toBeUndefined();
            expect(state.actions.nxTest.status).toBe('error');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,