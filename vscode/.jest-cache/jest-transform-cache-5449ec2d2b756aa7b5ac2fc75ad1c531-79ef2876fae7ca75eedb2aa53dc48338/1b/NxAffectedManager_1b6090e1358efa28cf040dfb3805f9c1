bc719c13a8985e87d2b3807639a90858
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NxAffectedManager = void 0;
const vscode = __importStar(require("vscode"));
const child_process_1 = require("child_process");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
class NxAffectedManager {
    context;
    workspaceRoot;
    nxConfig;
    affectedCache = new Map();
    fileWatcher = null;
    constructor(context) {
        this.context = context;
        this.workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
        this.initialize();
    }
    async initialize() {
        try {
            await this.loadNxConfiguration();
            this.setupFileWatcher();
        }
        catch (error) {
            console.error('Failed to initialize NX Affected Manager:', error);
        }
    }
    async loadNxConfiguration() {
        const nxConfigPath = path.join(this.workspaceRoot, 'nx.json');
        const angularConfigPath = path.join(this.workspaceRoot, 'angular.json');
        try {
            if (fs.existsSync(nxConfigPath)) {
                const configContent = fs.readFileSync(nxConfigPath, 'utf-8');
                this.nxConfig = JSON.parse(configContent);
            }
            else if (fs.existsSync(angularConfigPath)) {
                const configContent = fs.readFileSync(angularConfigPath, 'utf-8');
                this.nxConfig = JSON.parse(configContent);
            }
            else {
                throw new Error('No NX configuration found');
            }
        }
        catch (error) {
            throw new Error(`Failed to load NX configuration: ${error.message}`);
        }
    }
    setupFileWatcher() {
        if (this.fileWatcher) {
            this.fileWatcher.dispose();
        }
        this.fileWatcher = vscode.workspace.createFileSystemWatcher('**/*');
        this.fileWatcher.onDidChange(() => this.clearAffectedCache());
        this.fileWatcher.onDidCreate(() => this.clearAffectedCache());
        this.fileWatcher.onDidDelete(() => this.clearAffectedCache());
        this.context.subscriptions.push(this.fileWatcher);
    }
    clearAffectedCache() {
        this.affectedCache.clear();
    }
    async getAffectedProjects(base = 'main') {
        const headCommit = await this.getHeadCommit();
        const cacheKey = `${base}-${headCommit}`;
        if (this.affectedCache.has(cacheKey)) {
            return this.affectedCache.get(cacheKey);
        }
        try {
            const projects = await this.executeNxCommand(['show', 'projects', '--affected', '--base', base]);
            this.affectedCache.set(cacheKey, projects);
            return projects;
        }
        catch (error) {
            console.error('Failed to get affected projects:', error);
            return [];
        }
    }
    async getAllProjects() {
        try {
            const projectNames = await this.executeNxCommand(['show', 'projects']);
            const projects = [];
            for (const projectName of projectNames) {
                try {
                    const projectConfig = await this.getProjectConfiguration(projectName);
                    projects.push(projectConfig);
                }
                catch (error) {
                    console.warn(`Failed to get configuration for project ${projectName}:`, error);
                }
            }
            return projects;
        }
        catch (error) {
            console.error('Failed to get all projects:', error);
            return [];
        }
    }
    async getProjectConfiguration(projectName) {
        try {
            const configOutput = await this.executeNxCommandRaw(['show', 'project', projectName, '--json']);
            const config = JSON.parse(configOutput);
            return {
                name: projectName,
                root: config.root || '',
                targets: config.targets || {},
                type: this.inferProjectType(config)
            };
        }
        catch (error) {
            throw new Error(`Failed to get project configuration for ${projectName}: ${error.message}`);
        }
    }
    inferProjectType(config) {
        if (config.targets && config.targets.serve) {
            return 'application';
        }
        return 'library';
    }
    async runAffectedCommand(target, base = 'main', options = []) {
        try {
            const projects = await this.getAffectedProjects(base);
            if (projects.length === 0) {
                return {
                    projects: [],
                    output: 'No affected projects found',
                    success: true
                };
            }
            const args = ['run-many', '--target', target, '--projects', projects.join(','), ...options];
            const output = await this.executeNxCommandRaw(args);
            return {
                projects,
                output,
                success: true
            };
        }
        catch (error) {
            return {
                projects: [],
                output: error.message,
                success: false,
                errors: [error.message]
            };
        }
    }
    async runAffectedTest(base = 'main', parallel = true) {
        const options = parallel ? ['--parallel'] : [];
        return this.runAffectedCommand('test', base, options);
    }
    async runAffectedLint(base = 'main', parallel = true) {
        const options = parallel ? ['--parallel'] : [];
        return this.runAffectedCommand('lint', base, options);
    }
    async runAffectedBuild(base = 'main', parallel = true) {
        const options = parallel ? ['--parallel'] : [];
        return this.runAffectedCommand('build', base, options);
    }
    async executeNxCommand(args) {
        const output = await this.executeNxCommandRaw(args);
        return output.trim().split('\n').filter(line => line.length > 0);
    }
    async executeNxCommandRaw(args) {
        return new Promise((resolve, reject) => {
            const child = (0, child_process_1.spawn)('npx', ['nx', ...args], {
                cwd: this.workspaceRoot,
                stdio: 'pipe',
                shell: process.platform === 'win32'
            });
            let output = '';
            let errorOutput = '';
            child.stdout.on('data', (data) => {
                output += data.toString();
            });
            child.stderr.on('data', (data) => {
                errorOutput += data.toString();
            });
            child.on('close', (code) => {
                if (code === 0) {
                    resolve(output);
                }
                else {
                    reject(new Error(`NX command failed with code ${code}: ${errorOutput}`));
                }
            });
            child.on('error', (error) => {
                reject(new Error(`Failed to execute NX command: ${error.message}`));
            });
            // Set timeout for long-running commands
            setTimeout(() => {
                child.kill();
                reject(new Error('NX command timeout'));
            }, 120000); // 2 minutes timeout
        });
    }
    async getHeadCommit() {
        return new Promise((resolve, reject) => {
            const child = (0, child_process_1.spawn)('git', ['rev-parse', 'HEAD'], {
                cwd: this.workspaceRoot,
                stdio: 'pipe'
            });
            let output = '';
            child.stdout.on('data', (data) => {
                output += data.toString();
            });
            child.on('close', (code) => {
                if (code === 0) {
                    resolve(output.trim());
                }
                else {
                    resolve('unknown');
                }
            });
            child.on('error', () => {
                resolve('unknown');
            });
        });
    }
    async isNxWorkspace() {
        const nxConfig = path.join(this.workspaceRoot, 'nx.json');
        const angularConfig = path.join(this.workspaceRoot, 'angular.json');
        return fs.existsSync(nxConfig) || fs.existsSync(angularConfig);
    }
    dispose() {
        if (this.fileWatcher) {
            this.fileWatcher.dispose();
        }
        this.clearAffectedCache();
    }
}
exports.NxAffectedManager = NxAffectedManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,