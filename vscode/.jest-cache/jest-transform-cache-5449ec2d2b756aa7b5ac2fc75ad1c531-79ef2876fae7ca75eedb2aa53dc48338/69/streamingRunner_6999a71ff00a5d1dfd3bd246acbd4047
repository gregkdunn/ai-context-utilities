63c9ec65b948453036657618d86d8a7b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingCommandRunner = void 0;
const events_1 = require("events");
const child_process_1 = require("child_process");
const vscode = __importStar(require("vscode"));
class StreamingCommandRunner extends events_1.EventEmitter {
    _outputChannel;
    _activeProcess;
    _isRunning = false;
    _startTime;
    _currentOutput = '';
    constructor(_outputChannel) {
        super();
        this._outputChannel = _outputChannel;
    }
    // Main execution method
    async executeWithStreaming(command, args, options = {}) {
        if (this._isRunning) {
            throw new Error('Command is already running');
        }
        this._isRunning = true;
        this._startTime = Date.now();
        this._currentOutput = '';
        try {
            return await this._executeCommand(command, args, options);
        }
        finally {
            this._isRunning = false;
            this._activeProcess = undefined;
        }
    }
    // Test command execution
    async executeTestCommand(command, args, cwd) {
        return this.executeWithStreaming(command, args, { cwd });
    }
    // Git command execution
    async executeGitCommand(args, cwd) {
        return this.executeWithStreaming('git', args, { cwd });
    }
    // Lint command execution
    async executeLintCommand(command, args, cwd) {
        return this.executeWithStreaming(command, args, { cwd });
    }
    async _executeCommand(command, args, options) {
        return new Promise((resolve, reject) => {
            this._activeProcess = (0, child_process_1.spawn)(command, args, {
                cwd: options.cwd || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath,
                env: { ...process.env, ...options.env },
                stdio: ['pipe', 'pipe', 'pipe']
            });
            let output = '';
            let error = '';
            this._activeProcess.stdout?.on('data', (data) => {
                const text = data.toString();
                output += text;
                this._currentOutput += text;
                this.emit('output', text);
                this._outputChannel.append(text);
            });
            this._activeProcess.stderr?.on('data', (data) => {
                const text = data.toString();
                error += text;
                this._currentOutput += text;
                this.emit('error', text);
                this._outputChannel.append(text);
            });
            this._activeProcess.on('close', (code) => {
                const duration = Date.now() - (this._startTime || 0);
                const result = {
                    success: code === 0,
                    exitCode: code,
                    output,
                    error,
                    duration
                };
                this.emit('complete', result);
                resolve(result);
            });
            this._activeProcess.on('error', (err) => {
                const duration = Date.now() - (this._startTime || 0);
                const result = {
                    success: false,
                    exitCode: 1,
                    output,
                    error: err.message,
                    duration
                };
                this.emit('error', err.message);
                this.emit('complete', result);
                resolve(result);
            });
            // Handle timeout
            if (options.timeout) {
                setTimeout(() => {
                    if (this._activeProcess && this._isRunning) {
                        this.cancel();
                        reject(new Error('Command timed out'));
                    }
                }, options.timeout);
            }
        });
    }
    cancel() {
        if (this._activeProcess) {
            this._activeProcess.kill('SIGTERM');
            // Force kill after 5 seconds
            setTimeout(() => {
                if (this._activeProcess) {
                    this._activeProcess.kill('SIGKILL');
                }
            }, 5000);
        }
    }
    get isRunning() {
        return this._isRunning;
    }
    getCurrentOutput() {
        return this._currentOutput;
    }
    clearOutput() {
        this._currentOutput = '';
    }
    simulateProgress(duration) {
        const interval = 100; // Update every 100ms
        const steps = duration / interval;
        let currentStep = 0;
        const progressInterval = setInterval(() => {
            currentStep++;
            const progress = Math.min(100, (currentStep / steps) * 100);
            this.emit('progress', progress);
            if (currentStep >= steps) {
                clearInterval(progressInterval);
            }
        }, interval);
    }
    dispose() {
        this.cancel();
        this.removeAllListeners();
    }
}
exports.StreamingCommandRunner = StreamingCommandRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,