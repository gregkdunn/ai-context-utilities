{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/flipper/__tests__/FlipperDetectionManager.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,oBAAoB;AACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAJpB,wEAAqE;AACrE,+CAAiC;AAKjC,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACrC,IAAI,cAAuC,CAAC;IAC5C,IAAI,WAAoC,CAAC;IAEzC,UAAU,CAAC,GAAG,EAAE;QACZ,WAAW,GAAG;YACV,aAAa,EAAE,EAAE;YACjB,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;SAClC,CAAC;QAET,wBAAwB;QACvB,MAAM,CAAC,SAAiB,CAAC,uBAAuB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;YAC1E,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACrB,CAAC,CAAC;QAEH,cAAc,GAAG,IAAI,iDAAuB,CAAC,WAAW,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,IAAI,GAAG,wDAAwD,CAAC;YAEtE,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,IAAI,GAAG,gEAAgE,CAAC;YAE9E,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,IAAI,GAAG;;;;aAIZ,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,IAAI,GAAG;;;;;;;;;;;;;aAaZ,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAEpD,0CAA0C;YAC1C,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,IAAI,GAAG,wEAAwE,CAAC;YAEtF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,IAAI,GAAG,mCAAmC,CAAC;YAEjD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,IAAI,GAAG;;;;;;aAMZ,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACjE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,IAAI,GAAG;;;OAGlB,CAAC;YAEI,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;;aAehB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;YACzE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,QAAQ,GAAG;;;;;aAKhB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,oCAAoC,CAAC,CAAC;YACzE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,uCAAuC,CAAC,CAAC;YAC5E,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,QAAQ,GAAG;;;;;aAKhB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;YACxE,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,QAAQ,GAAG;;;aAGhB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,QAAQ,GAAG;;;;;aAKhB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,IAAI,GAAG,yDAAyD,CAAC;YAEvE,aAAa;YACb,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEvD,+BAA+B;YAC/B,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEvD,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACjC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,IAAI,GAAG,iEAAiE,CAAC;YAE/E,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,IAAI,GAAG;;;;;;;aAOZ,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,aAAa,GAAG;gBAClB,mBAAmB;gBACnB,gBAAgB;gBAChB,sBAAsB;gBACtB,gBAAgB;gBAChB,0BAA0B;gBAC1B,sCAAsC;aACzC,CAAC;YAEF,MAAM,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC7E,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACzB,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/flipper/__tests__/FlipperDetectionManager.test.ts"],"sourcesContent":["import { FlipperDetectionManager } from '../FlipperDetectionManager';\nimport * as vscode from 'vscode';\n\n// Mock dependencies\njest.mock('vscode');\n\ndescribe('FlipperDetectionManager', () => {\n    let flipperManager: FlipperDetectionManager;\n    let mockContext: vscode.ExtensionContext;\n\n    beforeEach(() => {\n        mockContext = {\n            subscriptions: [],\n            extensionUri: vscode.Uri.file('/test')\n        } as any;\n\n        // Mock vscode.workspace\n        (vscode.workspace as any).createFileSystemWatcher = jest.fn().mockReturnValue({\n            onDidChange: jest.fn(),\n            onDidCreate: jest.fn(),\n            onDidDelete: jest.fn(),\n            dispose: jest.fn()\n        });\n\n        flipperManager = new FlipperDetectionManager(mockContext);\n    });\n\n    afterEach(() => {\n        jest.clearAllMocks();\n    });\n\n    describe('analyzeCode', () => {\n        it('should detect FlipperService imports', async () => {\n            const code = `import { FlipperService } from '@callrail/looky/core';`;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections).toHaveLength(1);\n            expect(result.detections[0].type).toBe('import');\n            expect(result.detections[0].pattern).toContain('FlipperService import');\n        });\n\n        it('should detect and extract flag names from flipperEnabled calls', async () => {\n            const code = `if (this.flipperService.flipperEnabled('zuora_maintenance')) {`;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections).toHaveLength(1);\n            expect(result.detections[0].type).toBe('method_call');\n            expect(result.detections[0].flagName).toBe('zuora_maintenance');\n        });\n\n        it('should detect predefined observable usage', async () => {\n            const code = `\n                return this.flipperService.zuoraMaintenance$.pipe(\n                    switchMap(enabled => enabled ? this.processPayment() : of(false))\n                );\n            `;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections.length).toBeGreaterThan(0);\n            expect(result.detections.some(d => d.flagName === 'zuora_maintenance')).toBe(true);\n        });\n\n        it('should detect multiple different patterns in same code', async () => {\n            const code = `\n                import { FlipperService } from '@callrail/looky/core';\n                \n                export class TestService {\n                    constructor(private flipperService: FlipperService) {}\n                    \n                    test() {\n                        if (this.flipperService.flipperEnabled('test_flag')) {\n                            return this.flipperService.eagerlyEnabled('another_flag');\n                        }\n                        return this.flipperService.zuoraMaintenance$.pipe(map(x => x));\n                    }\n                }\n            `;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections.length).toBeGreaterThan(3);\n            \n            // Check for different types of detections\n            const types = result.detections.map(d => d.type);\n            expect(types).toContain('import');\n            expect(types).toContain('injection');\n            expect(types).toContain('method_call');\n            expect(types).toContain('predefined_observable');\n        });\n\n        it('should detect Angular template patterns', async () => {\n            const code = `<div *ngIf=\"flipperService.flipperEnabled('ui_feature')\">Content</div>`;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections).toHaveLength(1);\n            expect(result.detections[0].type).toBe('template');\n            expect(result.detections[0].flagName).toBe('ui_feature');\n        });\n\n        it('should detect flag literals', async () => {\n            const code = `const flag = 'zuora_maintenance';`;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections).toHaveLength(1);\n            expect(result.detections[0].type).toBe('flag_literal');\n            expect(result.detections[0].flagName).toBe('zuora_maintenance');\n        });\n\n        it('should provide context for detections', async () => {\n            const code = `\n                const someCode = 'before';\n                if (this.flipperService.flipperEnabled('test_flag')) {\n                    console.log('feature enabled');\n                }\n                const moreCode = 'after';\n            `;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections).toHaveLength(1);\n            expect(result.detections[0].context).toContain('flipperEnabled');\n            expect(result.detections[0].context).toContain('test_flag');\n        });\n\n        it('should calculate line and column numbers correctly', async () => {\n            const code = `line 1\nline 2\nif (this.flipperService.flipperEnabled('test_flag')) {\nline 4`;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections).toHaveLength(1);\n            expect(result.detections[0].line).toBe(3);\n            expect(result.detections[0].column).toBeGreaterThan(0);\n        });\n    });\n\n    describe('analyzeGitDiffForFlippers', () => {\n        it('should analyze git diff and detect flipper changes', async () => {\n            const mockDiff = `\ndiff --git a/src/app/services/billing.service.ts b/src/app/services/billing.service.ts\nindex 1234567..abcdefg 100644\n--- a/src/app/services/billing.service.ts\n+++ b/src/app/services/billing.service.ts\n@@ -1,4 +1,8 @@\n+import { FlipperService } from '@callrail/looky/core';\n+\n export class BillingService {\n+  constructor(private flipperService: FlipperService) {}\n+  \n+  isZuoraMaintenance = this.flipperService.flipperEnabled('zuora_maintenance');\n   canProcessPayment(): Observable<boolean> {\n     return of(true);\n   }\n            `;\n            \n            const result = await flipperManager.analyzeGitDiffForFlippers(mockDiff);\n            \n            expect(result.detectedFlags).toContain('zuora_maintenance');\n            expect(result.files).toHaveLength(1);\n            expect(result.files[0].path).toBe('src/app/services/billing.service.ts');\n            expect(result.files[0].detections.length).toBeGreaterThan(0);\n        });\n\n        it('should generate QA section for PR', async () => {\n            const mockDiff = `\ndiff --git a/src/app/test.ts b/src/app/test.ts\n+  if (this.flipperService.flipperEnabled('new_feature')) {\n+    // New feature implementation\n+  }\n            `;\n            \n            const result = await flipperManager.analyzeGitDiffForFlippers(mockDiff);\n            \n            expect(result.qaSection).toContain('🔄 Feature Flags / Flipper Changes');\n            expect(result.qaSection).toContain('QA Checklist - Flipper Setup Required');\n            expect(result.qaSection).toContain('new_feature');\n            expect(result.qaSection).toContain('Schedule flipper removal');\n        });\n\n        it('should generate details section for environment setup', async () => {\n            const mockDiff = `\ndiff --git a/src/app/test.ts b/src/app/test.ts\n+  if (this.flipperService.flipperEnabled('test_flag')) {\n+    return true;\n+  }\n            `;\n            \n            const result = await flipperManager.analyzeGitDiffForFlippers(mockDiff);\n            \n            expect(result.detailsSection).toContain('Environment Setup Details');\n            expect(result.detailsSection).toContain('Staging Environment Setup');\n            expect(result.detailsSection).toContain('Production Environment Setup');\n            expect(result.detailsSection).toContain('test_flag');\n        });\n\n        it('should return empty sections when no flippers detected', async () => {\n            const mockDiff = `\ndiff --git a/src/app/test.ts b/src/app/test.ts\n+  const normalCode = 'no flippers here';\n            `;\n            \n            const result = await flipperManager.analyzeGitDiffForFlippers(mockDiff);\n            \n            expect(result.detectedFlags).toHaveLength(0);\n            expect(result.qaSection).toBe('');\n            expect(result.detailsSection).toBe('');\n        });\n\n        it('should only analyze relevant file types', async () => {\n            const mockDiff = `\ndiff --git a/README.md b/README.md\n+  # This contains flipperEnabled('test') but should be ignored\ndiff --git a/src/app/test.ts b/src/app/test.ts\n+  if (this.flipperService.flipperEnabled('real_flag')) {\n            `;\n            \n            const result = await flipperManager.analyzeGitDiffForFlippers(mockDiff);\n            \n            expect(result.files).toHaveLength(1);\n            expect(result.files[0].path).toBe('src/app/test.ts');\n            expect(result.detectedFlags).toEqual(['real_flag']);\n        });\n    });\n\n    describe('caching', () => {\n        it('should cache analysis results', async () => {\n            const code = `if (this.flipperService.flipperEnabled('test_flag')) {}`;\n            \n            // First call\n            const result1 = await flipperManager.analyzeCode(code);\n            \n            // Second call should use cache\n            const result2 = await flipperManager.analyzeCode(code);\n            \n            expect(result1).toEqual(result2);\n            expect(result1.detections).toHaveLength(1);\n        });\n    });\n\n    describe('flag mapping', () => {\n        it('should map predefined observables to correct flag names', async () => {\n            const code = `return this.flipperService.zuoraMaintenance$.pipe(map(x => x));`;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            expect(result.detections.some(d => d.flagName === 'zuora_maintenance')).toBe(true);\n        });\n\n        it('should handle all predefined observable mappings', async () => {\n            const code = `\n                this.flipperService.zuoraMaintenance$.subscribe();\n                this.flipperService.reportingNoop$.subscribe();\n                this.flipperService.acceleratedCallLog$.subscribe();\n                this.flipperService.otherHomepage$.subscribe();\n                this.flipperService.fullstory$.subscribe();\n                this.flipperService.cursorPaginateAcceleratedCallLog$.subscribe();\n            `;\n            \n            const result = await flipperManager.analyzeCode(code);\n            \n            const expectedFlags = [\n                'zuora_maintenance',\n                'reporting_noop',\n                'accelerated_call_log',\n                'other_homepage',\n                'allow_fullstory_tracking',\n                'cursor_paginate_accelerated_call_log'\n            ];\n            \n            const detectedFlags = result.detections.map(d => d.flagName).filter(Boolean);\n            expectedFlags.forEach(flag => {\n                expect(detectedFlags).toContain(flag);\n            });\n        });\n    });\n});\n"],"version":3}