80c68c7c1c8d32fd042ffc641880e77d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsCollectionEngine = void 0;
const events_1 = require("events");
/**
 * Advanced Metrics Collection Engine for Phase 4.4
 *
 * Comprehensive metrics collection system with:
 * - Real-time metrics capture and processing
 * - Custom metric definitions and aggregations
 * - Automatic system metrics collection
 * - Configurable collection rules and filters
 * - High-performance buffering and batching
 * - Metric validation and quality assurance
 */
class MetricsCollectionEngine extends events_1.EventEmitter {
    config;
    metricDefinitions = new Map();
    collectionRules = new Map();
    metricBuffer = new Map();
    aggregationCache = new Map();
    systemMetricsCollector;
    bufferFlushInterval;
    isCollecting = false;
    collectionStartTime = new Date();
    constructor(config = {}) {
        super();
        this.config = {
            bufferSize: 10000,
            flushInterval: 5000, // 5 seconds
            enableSystemMetrics: true,
            systemMetricsInterval: 1000, // 1 second
            enableCustomMetrics: true,
            maxMetricDefinitions: 1000,
            aggregationPeriods: ['1m', '5m', '1h', '1d'],
            retentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7 days
            enableMetricValidation: true,
            compressionEnabled: true,
            ...config
        };
        this.initializeEngine();
    }
    /**
     * Initialize the metrics collection engine
     */
    initializeEngine() {
        this.setupDefaultMetrics();
        this.setupDefaultCollectionRules();
        this.startBufferFlushing();
        if (this.config.enableSystemMetrics) {
            this.startSystemMetricsCollection();
        }
        this.emit('engineInitialized');
    }
    /**
     * Start metrics collection
     */
    startCollection() {
        if (this.isCollecting) {
            return;
        }
        this.isCollecting = true;
        this.collectionStartTime = new Date();
        this.emit('collectionStarted');
    }
    /**
     * Stop metrics collection
     */
    stopCollection() {
        if (!this.isCollecting) {
            return;
        }
        this.isCollecting = false;
        this.flushAllBuffers();
        this.emit('collectionStopped');
    }
    /**
     * Define a custom metric
     */
    defineMetric(definition) {
        if (this.metricDefinitions.size >= (this.config.maxMetricDefinitions || 1000)) {
            throw new Error('Maximum number of metric definitions reached');
        }
        if (this.config.enableMetricValidation && !this.validateMetricDefinition(definition)) {
            throw new Error('Invalid metric definition');
        }
        this.metricDefinitions.set(definition.name, definition);
        this.initializeMetricBuffer(definition.name);
        this.emit('metricDefined', definition);
    }
    /**
     * Remove a metric definition
     */
    removeMetric(metricName) {
        const removed = this.metricDefinitions.delete(metricName);
        if (removed) {
            this.metricBuffer.delete(metricName);
            this.aggregationCache.delete(metricName);
            this.emit('metricRemoved', metricName);
        }
        return removed;
    }
    /**
     * Collect a metric value
     */
    collectMetric(metricName, value, tags) {
        if (!this.isCollecting) {
            return;
        }
        const definition = this.metricDefinitions.get(metricName);
        if (!definition) {
            throw new Error(`Metric not defined: ${metricName}`);
        }
        const metricValue = {
            name: metricName,
            value,
            timestamp: new Date(),
            tags: tags || {},
            unit: definition.unit,
            type: definition.type
        };
        // Apply collection rules
        if (!this.shouldCollectMetric(metricValue)) {
            return;
        }
        // Validate value
        if (this.config.enableMetricValidation && !this.validateMetricValue(metricValue, definition)) {
            this.emit('metricValidationFailed', metricValue);
            return;
        }
        // Add to buffer
        this.addToBuffer(metricValue);
        this.emit('metricCollected', metricValue);
    }
    /**
     * Collect multiple metrics at once
     */
    collectMetrics(metrics) {
        metrics.forEach(metric => {
            this.collectMetric(metric.name, metric.value, metric.tags);
        });
    }
    /**
     * Create a collection rule
     */
    createCollectionRule(rule) {
        this.collectionRules.set(rule.id, rule);
        this.emit('collectionRuleCreated', rule);
    }
    /**
     * Remove a collection rule
     */
    removeCollectionRule(ruleId) {
        const removed = this.collectionRules.delete(ruleId);
        if (removed) {
            this.emit('collectionRuleRemoved', ruleId);
        }
        return removed;
    }
    /**
     * Get aggregated metrics for a time period
     */
    getAggregatedMetrics(metricName, period, startTime, endTime) {
        const cacheKey = `${metricName}_${period}_${startTime?.getTime()}_${endTime?.getTime()}`;
        // Check cache first
        if (this.aggregationCache.has(cacheKey)) {
            return this.aggregationCache.get(cacheKey);
        }
        const buffer = this.metricBuffer.get(metricName);
        if (!buffer) {
            return null;
        }
        const filteredValues = this.filterValuesByTimeRange(buffer, startTime, endTime);
        const aggregation = this.calculateAggregation(filteredValues, period);
        // Cache the result
        this.aggregationCache.set(cacheKey, aggregation);
        return aggregation;
    }
    /**
     * Get current system metrics
     */
    getSystemMetrics() {
        return {
            timestamp: new Date(),
            cpu: this.getCurrentCpuUsage(),
            memory: this.getCurrentMemoryUsage(),
            disk: this.getCurrentDiskUsage(),
            network: this.getCurrentNetworkUsage(),
            processes: this.getCurrentProcessCount(),
            uptime: this.getSystemUptime()
        };
    }
    /**
     * Get metrics snapshot
     */
    getSnapshot() {
        const snapshot = {
            id: this.generateSnapshotId(),
            timestamp: new Date(),
            metrics: new Map(),
            systemMetrics: this.getSystemMetrics(),
            collectionStats: this.getCollectionStats(),
            bufferStats: this.getBufferStats()
        };
        // Include all current metric values
        for (const [metricName, buffer] of this.metricBuffer) {
            snapshot.metrics.set(metricName, [...buffer]);
        }
        return snapshot;
    }
    /**
     * Get metric definitions
     */
    getMetricDefinitions() {
        return Array.from(this.metricDefinitions.values());
    }
    /**
     * Get collection rules
     */
    getCollectionRules() {
        return Array.from(this.collectionRules.values());
    }
    /**
     * Get metric buffer status
     */
    getBufferStatus() {
        const status = new Map();
        for (const [metricName, buffer] of this.metricBuffer) {
            const lastValue = buffer[buffer.length - 1];
            status.set(metricName, {
                size: buffer.length,
                lastUpdated: lastValue ? lastValue.timestamp : new Date(0)
            });
        }
        return status;
    }
    /**
     * Clear all metrics data
     */
    clearMetrics() {
        this.metricBuffer.clear();
        this.aggregationCache.clear();
        this.emit('metricsCleared');
    }
    /**
     * Export metrics data
     */
    exportMetrics(format = 'json') {
        const snapshot = this.getSnapshot();
        switch (format) {
            case 'json':
                return this.exportAsJson(snapshot);
            case 'csv':
                return this.exportAsCsv(snapshot);
            case 'prometheus':
                return this.exportAsPrometheus(snapshot);
            default:
                throw new Error(`Unsupported export format: ${format}`);
        }
    }
    /**
     * Get metrics statistics
     */
    getMetricsStats() {
        const stats = {
            totalMetrics: this.metricDefinitions.size,
            totalValues: 0,
            bufferUtilization: 0,
            collectionRate: 0,
            memoryUsage: 0,
            uptime: Date.now() - this.collectionStartTime.getTime()
        };
        for (const buffer of this.metricBuffer.values()) {
            stats.totalValues += buffer.length;
        }
        stats.bufferUtilization = stats.totalValues / ((this.config.bufferSize || 10000) * this.metricDefinitions.size);
        stats.collectionRate = stats.totalValues / (stats.uptime / 1000); // values per second
        return stats;
    }
    /**
     * Dispose of the metrics collection engine
     */
    dispose() {
        this.stopCollection();
        if (this.systemMetricsCollector) {
            clearInterval(this.systemMetricsCollector);
        }
        if (this.bufferFlushInterval) {
            clearInterval(this.bufferFlushInterval);
        }
        this.clearMetrics();
        this.removeAllListeners();
    }
    // Private helper methods
    setupDefaultMetrics() {
        const defaultMetrics = [
            {
                name: 'command.execution.time',
                type: 'histogram',
                unit: 'milliseconds',
                description: 'Time taken to execute commands',
                tags: ['command', 'user', 'status']
            },
            {
                name: 'command.execution.count',
                type: 'counter',
                unit: 'count',
                description: 'Number of commands executed',
                tags: ['command', 'user', 'status']
            },
            {
                name: 'error.count',
                type: 'counter',
                unit: 'count',
                description: 'Number of errors encountered',
                tags: ['type', 'component', 'severity']
            },
            {
                name: 'memory.usage',
                type: 'gauge',
                unit: 'bytes',
                description: 'Current memory usage',
                tags: ['component']
            },
            {
                name: 'cpu.usage',
                type: 'gauge',
                unit: 'percentage',
                description: 'Current CPU usage',
                tags: ['component']
            }
        ];
        defaultMetrics.forEach(metric => this.defineMetric(metric));
    }
    setupDefaultCollectionRules() {
        const defaultRules = [
            {
                id: 'error_sampling',
                name: 'Error Sampling Rule',
                condition: 'metric.name === "error.count"',
                action: 'sample',
                parameters: { sampleRate: 0.1 },
                isActive: true
            },
            {
                id: 'high_frequency_throttling',
                name: 'High Frequency Throttling',
                condition: 'metric.frequency > 1000',
                action: 'throttle',
                parameters: { maxRate: 100 },
                isActive: true
            }
        ];
        defaultRules.forEach(rule => this.createCollectionRule(rule));
    }
    startSystemMetricsCollection() {
        this.systemMetricsCollector = setInterval(() => {
            if (this.isCollecting) {
                this.collectSystemMetrics();
            }
        }, this.config.systemMetricsInterval);
    }
    collectSystemMetrics() {
        const metrics = this.getSystemMetrics();
        this.collectMetric('system.cpu.usage', metrics.cpu.usage, { component: 'system' });
        this.collectMetric('system.memory.usage', metrics.memory.used, { component: 'system' });
        this.collectMetric('system.disk.usage', metrics.disk.used, { component: 'system' });
        this.collectMetric('system.network.rx', metrics.network.rx, { component: 'system' });
        this.collectMetric('system.network.tx', metrics.network.tx, { component: 'system' });
    }
    startBufferFlushing() {
        this.bufferFlushInterval = setInterval(() => {
            this.flushOldValues();
            this.clearAggregationCache();
        }, this.config.flushInterval);
    }
    initializeMetricBuffer(metricName) {
        if (!this.metricBuffer.has(metricName)) {
            this.metricBuffer.set(metricName, []);
        }
    }
    validateMetricDefinition(definition) {
        return !!(definition.name &&
            definition.type &&
            definition.unit &&
            ['counter', 'gauge', 'histogram', 'summary'].includes(definition.type));
    }
    validateMetricValue(value, definition) {
        // Check if value is a number
        if (typeof value.value !== 'number' || isNaN(value.value)) {
            return false;
        }
        // Check for gauge-specific constraints
        if (definition.type === 'gauge' && (value.value < 0 && definition.unit !== 'percentage')) {
            return false;
        }
        // Check for counter-specific constraints
        if (definition.type === 'counter' && value.value < 0) {
            return false;
        }
        return true;
    }
    shouldCollectMetric(metric) {
        for (const rule of this.collectionRules.values()) {
            if (!rule.isActive) {
                continue;
            }
            if (this.evaluateCondition(rule.condition, metric)) {
                return this.applyRuleAction(rule, metric);
            }
        }
        return true; // Collect by default
    }
    evaluateCondition(condition, metric) {
        try {
            // Simple condition evaluation (in production, use a proper expression evaluator)
            const context = { metric };
            return new Function('metric', `return ${condition}`)(metric);
        }
        catch (error) {
            return false;
        }
    }
    applyRuleAction(rule, metric) {
        switch (rule.action) {
            case 'sample':
                const sampleRate = rule.parameters?.sampleRate || 1;
                return Math.random() < sampleRate;
            case 'throttle':
                const maxRate = rule.parameters?.maxRate || 100;
                return this.checkThrottleLimit(metric.name, maxRate);
            case 'filter':
                return false; // Filter out the metric
            default:
                return true;
        }
    }
    checkThrottleLimit(metricName, maxRate) {
        const buffer = this.metricBuffer.get(metricName);
        if (!buffer) {
            return true;
        }
        const now = Date.now();
        const oneSecondAgo = now - 1000;
        const recentValues = buffer.filter(v => v.timestamp.getTime() > oneSecondAgo);
        return recentValues.length < maxRate;
    }
    addToBuffer(metricValue) {
        const buffer = this.metricBuffer.get(metricValue.name);
        if (!buffer) {
            this.initializeMetricBuffer(metricValue.name);
            return this.addToBuffer(metricValue);
        }
        buffer.push(metricValue);
        // Keep buffer size under limit
        if (buffer.length > (this.config.bufferSize || 10000)) {
            buffer.shift(); // Remove oldest value
        }
    }
    flushAllBuffers() {
        const snapshot = this.getSnapshot();
        this.emit('buffersFlushed', snapshot);
    }
    flushOldValues() {
        const cutoffTime = Date.now() - (this.config.retentionPeriod || 7 * 24 * 60 * 60 * 1000);
        for (const [metricName, buffer] of this.metricBuffer) {
            const filtered = buffer.filter(v => v.timestamp.getTime() > cutoffTime);
            this.metricBuffer.set(metricName, filtered);
        }
    }
    clearAggregationCache() {
        // Clear cache entries older than flush interval
        const cutoffTime = Date.now() - (this.config.flushInterval || 5000) * 2;
        for (const [key, aggregation] of this.aggregationCache) {
            if (aggregation.timestamp.getTime() < cutoffTime) {
                this.aggregationCache.delete(key);
            }
        }
    }
    filterValuesByTimeRange(values, startTime, endTime) {
        let filtered = values;
        if (startTime) {
            filtered = filtered.filter(v => v.timestamp >= startTime);
        }
        if (endTime) {
            filtered = filtered.filter(v => v.timestamp <= endTime);
        }
        return filtered;
    }
    calculateAggregation(values, period) {
        if (values.length === 0) {
            return {
                metricName: '',
                period,
                timestamp: new Date(),
                count: 0,
                sum: 0,
                avg: 0,
                min: 0,
                max: 0,
                p50: 0,
                p90: 0,
                p95: 0,
                p99: 0
            };
        }
        const sortedValues = values.map(v => v.value).sort((a, b) => a - b);
        const sum = sortedValues.reduce((a, b) => a + b, 0);
        return {
            metricName: values[0].name,
            period,
            timestamp: new Date(),
            count: values.length,
            sum,
            avg: sum / values.length,
            min: sortedValues[0],
            max: sortedValues[sortedValues.length - 1],
            p50: this.calculatePercentile(sortedValues, 50),
            p90: this.calculatePercentile(sortedValues, 90),
            p95: this.calculatePercentile(sortedValues, 95),
            p99: this.calculatePercentile(sortedValues, 99)
        };
    }
    calculatePercentile(sortedValues, percentile) {
        const index = Math.ceil((percentile / 100) * sortedValues.length) - 1;
        return sortedValues[Math.max(0, Math.min(index, sortedValues.length - 1))];
    }
    getCurrentCpuUsage() {
        // Simplified CPU usage calculation
        return {
            usage: Math.random() * 100,
            cores: 4,
            loadAverage: [0.5, 0.7, 0.8]
        };
    }
    getCurrentMemoryUsage() {
        // Simplified memory usage calculation
        const total = 8 * 1024 * 1024 * 1024; // 8GB
        const used = total * (0.3 + Math.random() * 0.4);
        return {
            total,
            used,
            free: total - used,
            percentage: (used / total) * 100
        };
    }
    getCurrentDiskUsage() {
        // Simplified disk usage calculation
        const total = 500 * 1024 * 1024 * 1024; // 500GB
        const used = total * (0.4 + Math.random() * 0.3);
        return {
            total,
            used,
            free: total - used,
            percentage: (used / total) * 100
        };
    }
    getCurrentNetworkUsage() {
        // Simplified network usage calculation
        return {
            rx: Math.random() * 1024 * 1024, // bytes/sec
            tx: Math.random() * 1024 * 1024, // bytes/sec
            rxPackets: Math.random() * 1000,
            txPackets: Math.random() * 1000
        };
    }
    getCurrentProcessCount() {
        return Math.floor(50 + Math.random() * 100);
    }
    getSystemUptime() {
        return Date.now() - this.collectionStartTime.getTime();
    }
    getCollectionStats() {
        return {
            startTime: this.collectionStartTime,
            totalMetrics: this.metricDefinitions.size,
            totalValues: Array.from(this.metricBuffer.values()).reduce((sum, buffer) => sum + buffer.length, 0),
            isCollecting: this.isCollecting
        };
    }
    getBufferStats() {
        const stats = {
            totalBuffers: this.metricBuffer.size,
            totalValues: 0,
            maxBufferSize: 0,
            minBufferSize: Infinity,
            avgBufferSize: 0
        };
        for (const buffer of this.metricBuffer.values()) {
            stats.totalValues += buffer.length;
            stats.maxBufferSize = Math.max(stats.maxBufferSize, buffer.length);
            stats.minBufferSize = Math.min(stats.minBufferSize, buffer.length);
        }
        stats.avgBufferSize = stats.totalValues / stats.totalBuffers;
        return stats;
    }
    exportAsJson(snapshot) {
        return JSON.stringify({
            timestamp: snapshot.timestamp,
            metrics: Object.fromEntries(snapshot.metrics),
            systemMetrics: snapshot.systemMetrics,
            stats: snapshot.collectionStats
        }, null, 2);
    }
    exportAsCsv(snapshot) {
        const lines = ['Metric,Value,Timestamp,Tags'];
        for (const [metricName, values] of snapshot.metrics) {
            values.forEach((value) => {
                const tags = Object.entries(value.tags).map(([k, v]) => `${k}=${v}`).join(';');
                lines.push(`${metricName},${value.value},${value.timestamp.toISOString()},${tags}`);
            });
        }
        return lines.join('\n');
    }
    exportAsPrometheus(snapshot) {
        const lines = [];
        for (const [metricName, values] of snapshot.metrics) {
            const latestValue = values[values.length - 1];
            if (latestValue) {
                const tags = Object.entries(latestValue.tags)
                    .map(([k, v]) => `${k}="${v}"`)
                    .join(',');
                const name = metricName.replace(/\./g, '_');
                lines.push(`${name}{${tags}} ${latestValue.value} ${latestValue.timestamp.getTime()}`);
            }
        }
        return lines.join('\n');
    }
    generateSnapshotId() {
        return `snapshot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
}
exports.MetricsCollectionEngine = MetricsCollectionEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dyZWdkdW5uL3NyYy90ZXN0L2FpX2RlYnVnX2NvbnRleHQvdnNjb2RlL3NyYy9zZXJ2aWNlcy9hbmFseXRpY3MvZW5naW5lcy9tZXRyaWNzQ29sbGVjdGlvbkVuZ2luZS50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBc0M7QUFldEM7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQWEsdUJBQXdCLFNBQVEscUJBQVk7SUFDL0MsTUFBTSxDQUEwQjtJQUNoQyxpQkFBaUIsR0FBa0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUM3RCxlQUFlLEdBQWdDLElBQUksR0FBRyxFQUFFLENBQUM7SUFDekQsWUFBWSxHQUErQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3JELGdCQUFnQixHQUFtQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQzdELHNCQUFzQixDQUFrQjtJQUN4QyxtQkFBbUIsQ0FBa0I7SUFDckMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUNyQixtQkFBbUIsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO0lBRS9DLFlBQVksU0FBa0MsRUFBRTtRQUM5QyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDWixVQUFVLEVBQUUsS0FBSztZQUNqQixhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVk7WUFDakMsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixxQkFBcUIsRUFBRSxJQUFJLEVBQUUsV0FBVztZQUN4QyxtQkFBbUIsRUFBRSxJQUFJO1lBQ3pCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsa0JBQWtCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7WUFDNUMsZUFBZSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEVBQUUsU0FBUztZQUNuRCxzQkFBc0IsRUFBRSxJQUFJO1lBQzVCLGtCQUFrQixFQUFFLElBQUk7WUFDeEIsR0FBRyxNQUFNO1NBQ1YsQ0FBQztRQUVGLElBQUks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QUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdFLENBQUM7Q0FDRjtBQTd0QkQsMERBNnRCQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZ3JlZ2R1bm4vc3JjL3Rlc3QvYWlfZGVidWdfY29udGV4dC92c2NvZGUvc3JjL3NlcnZpY2VzL2FuYWx5dGljcy9lbmdpbmVzL21ldHJpY3NDb2xsZWN0aW9uRW5naW5lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBcbiAgQW5hbHl0aWNzRXZlbnQsIFxuICBNZXRyaWNzQ29sbGVjdGlvbkNvbmZpZywgXG4gIE1ldHJpY0RlZmluaXRpb24sIFxuICBNZXRyaWNWYWx1ZSwgXG4gIE1ldHJpY0FnZ3JlZ2F0aW9uLFxuICBDb2xsZWN0aW9uUnVsZSxcbiAgTWV0cmljc1NuYXBzaG90LFxuICBTeXN0ZW1NZXRyaWNzLFxuICBDdXN0b21NZXRyaWMsXG4gIE1ldHJpY0ZpbHRlcixcbiAgQWdncmVnYXRpb25QZXJpb2Rcbn0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuXG4vKipcbiAqIEFkdmFuY2VkIE1ldHJpY3MgQ29sbGVjdGlvbiBFbmdpbmUgZm9yIFBoYXNlIDQuNFxuICogXG4gKiBDb21wcmVoZW5zaXZlIG1ldHJpY3MgY29sbGVjdGlvbiBzeXN0ZW0gd2l0aDpcbiAqIC0gUmVhbC10aW1lIG1ldHJpY3MgY2FwdHVyZSBhbmQgcHJvY2Vzc2luZ1xuICogLSBDdXN0b20gbWV0cmljIGRlZmluaXRpb25zIGFuZCBhZ2dyZWdhdGlvbnNcbiAqIC0gQXV0b21hdGljIHN5c3RlbSBtZXRyaWNzIGNvbGxlY3Rpb25cbiAqIC0gQ29uZmlndXJhYmxlIGNvbGxlY3Rpb24gcnVsZXMgYW5kIGZpbHRlcnNcbiAqIC0gSGlnaC1wZXJmb3JtYW5jZSBidWZmZXJpbmcgYW5kIGJhdGNoaW5nXG4gKiAtIE1ldHJpYyB2YWxpZGF0aW9uIGFuZCBxdWFsaXR5IGFzc3VyYW5jZVxuICovXG5leHBvcnQgY2xhc3MgTWV0cmljc0NvbGxlY3Rpb25FbmdpbmUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBwcml2YXRlIGNvbmZpZzogTWV0cmljc0NvbGxlY3Rpb25Db25maWc7XG4gIHByaXZhdGUgbWV0cmljRGVmaW5pdGlvbnM6IE1hcDxzdHJpbmcsIE1ldHJpY0RlZmluaXRpb24+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIGNvbGxlY3Rpb25SdWxlczogTWFwPHN0cmluZywgQ29sbGVjdGlvblJ1bGU+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIG1ldHJpY0J1ZmZlcjogTWFwPHN0cmluZywgTWV0cmljVmFsdWVbXT4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgYWdncmVnYXRpb25DYWNoZTogTWFwPHN0cmluZywgTWV0cmljQWdncmVnYXRpb24+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIHN5c3RlbU1ldHJpY3NDb2xsZWN0b3I/OiBOb2RlSlMuVGltZW91dDtcbiAgcHJpdmF0ZSBidWZmZXJGbHVzaEludGVydmFsPzogTm9kZUpTLlRpbWVvdXQ7XG4gIHByaXZhdGUgaXNDb2xsZWN0aW5nID0gZmFsc2U7XG4gIHByaXZhdGUgY29sbGVjdGlvblN0YXJ0VGltZTogRGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBNZXRyaWNzQ29sbGVjdGlvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIGJ1ZmZlclNpemU6IDEwMDAwLFxuICAgICAgZmx1c2hJbnRlcnZhbDogNTAwMCwgLy8gNSBzZWNvbmRzXG4gICAgICBlbmFibGVTeXN0ZW1NZXRyaWNzOiB0cnVlLFxuICAgICAgc3lzdGVtTWV0cmljc0ludGVydmFsOiAxMDAwLCAvLyAxIHNlY29uZFxuICAgICAgZW5hYmxlQ3VzdG9tTWV0cmljczogdHJ1ZSxcbiAgICAgIG1heE1ldHJpY0RlZmluaXRpb25zOiAxMDAwLFxuICAgICAgYWdncmVnYXRpb25QZXJpb2RzOiBbJzFtJywgJzVtJywgJzFoJywgJzFkJ10sXG4gICAgICByZXRlbnRpb25QZXJpb2Q6IDcgKiAyNCAqIDYwICogNjAgKiAxMDAwLCAvLyA3IGRheXNcbiAgICAgIGVuYWJsZU1ldHJpY1ZhbGlkYXRpb246IHRydWUsXG4gICAgICBjb21wcmVzc2lvbkVuYWJsZWQ6IHRydWUsXG4gICAgICAuLi5jb25maWdcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuaW5pdGlhbGl6ZUVuZ2luZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIG1ldHJpY3MgY29sbGVjdGlvbiBlbmdpbmVcbiAgICovXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUVuZ2luZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNldHVwRGVmYXVsdE1ldHJpY3MoKTtcbiAgICB0aGlzLnNldHVwRGVmYXVsdENvbGxlY3Rpb25SdWxlcygpO1xuICAgIHRoaXMuc3RhcnRCdWZmZXJGbHVzaGluZygpO1xuICAgIFxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVTeXN0ZW1NZXRyaWNzKSB7XG4gICAgICB0aGlzLnN0YXJ0U3lzdGVtTWV0cmljc0NvbGxlY3Rpb24oKTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5lbWl0KCdlbmdpbmVJbml0aWFsaXplZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IG1ldHJpY3MgY29sbGVjdGlvblxuICAgKi9cbiAgcHVibGljIHN0YXJ0Q29sbGVjdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0NvbGxlY3RpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5pc0NvbGxlY3RpbmcgPSB0cnVlO1xuICAgIHRoaXMuY29sbGVjdGlvblN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5lbWl0KCdjb2xsZWN0aW9uU3RhcnRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgbWV0cmljcyBjb2xsZWN0aW9uXG4gICAqL1xuICBwdWJsaWMgc3RvcENvbGxlY3Rpb24oKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzQ29sbGVjdGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLmlzQ29sbGVjdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZmx1c2hBbGxCdWZmZXJzKCk7XG4gICAgdGhpcy5lbWl0KCdjb2xsZWN0aW9uU3RvcHBlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSBhIGN1c3RvbSBtZXRyaWNcbiAgICovXG4gIHB1YmxpYyBkZWZpbmVNZXRyaWMoZGVmaW5pdGlvbjogTWV0cmljRGVmaW5pdGlvbik6IHZvaWQge1xuICAgIGlmICh0aGlzLm1ldHJpY0RlZmluaXRpb25zLnNpemUgPj0gKHRoaXMuY29uZmlnLm1heE1ldHJpY0RlZmluaXRpb25zIHx8IDEwMDApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01heGltdW0gbnVtYmVyIG9mIG1ldHJpYyBkZWZpbml0aW9ucyByZWFjaGVkJyk7XG4gICAgfVxuICAgIFxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVNZXRyaWNWYWxpZGF0aW9uICYmICF0aGlzLnZhbGlkYXRlTWV0cmljRGVmaW5pdGlvbihkZWZpbml0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldHJpYyBkZWZpbml0aW9uJyk7XG4gICAgfVxuICAgIFxuICAgIHRoaXMubWV0cmljRGVmaW5pdGlvbnMuc2V0KGRlZmluaXRpb24ubmFtZSwgZGVmaW5pdGlvbik7XG4gICAgdGhpcy5pbml0aWFsaXplTWV0cmljQnVmZmVyKGRlZmluaXRpb24ubmFtZSk7XG4gICAgdGhpcy5lbWl0KCdtZXRyaWNEZWZpbmVkJywgZGVmaW5pdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgbWV0cmljIGRlZmluaXRpb25cbiAgICovXG4gIHB1YmxpYyByZW1vdmVNZXRyaWMobWV0cmljTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgcmVtb3ZlZCA9IHRoaXMubWV0cmljRGVmaW5pdGlvbnMuZGVsZXRlKG1ldHJpY05hbWUpO1xuICAgIGlmIChyZW1vdmVkKSB7XG4gICAgICB0aGlzLm1ldHJpY0J1ZmZlci5kZWxldGUobWV0cmljTmFtZSk7XG4gICAgICB0aGlzLmFnZ3JlZ2F0aW9uQ2FjaGUuZGVsZXRlKG1ldHJpY05hbWUpO1xuICAgICAgdGhpcy5lbWl0KCdtZXRyaWNSZW1vdmVkJywgbWV0cmljTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiByZW1vdmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbGxlY3QgYSBtZXRyaWMgdmFsdWVcbiAgICovXG4gIHB1YmxpYyBjb2xsZWN0TWV0cmljKG1ldHJpY05hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlciwgdGFncz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNDb2xsZWN0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLm1ldHJpY0RlZmluaXRpb25zLmdldChtZXRyaWNOYW1lKTtcbiAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTWV0cmljIG5vdCBkZWZpbmVkOiAke21ldHJpY05hbWV9YCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IG1ldHJpY1ZhbHVlOiBNZXRyaWNWYWx1ZSA9IHtcbiAgICAgIG5hbWU6IG1ldHJpY05hbWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIHRhZ3M6IHRhZ3MgfHwge30sXG4gICAgICB1bml0OiBkZWZpbml0aW9uLnVuaXQsXG4gICAgICB0eXBlOiBkZWZpbml0aW9uLnR5cGVcbiAgICB9O1xuICAgIFxuICAgIC8vIEFwcGx5IGNvbGxlY3Rpb24gcnVsZXNcbiAgICBpZiAoIXRoaXMuc2hvdWxkQ29sbGVjdE1ldHJpYyhtZXRyaWNWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8gVmFsaWRhdGUgdmFsdWVcbiAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlTWV0cmljVmFsaWRhdGlvbiAmJiAhdGhpcy52YWxpZGF0ZU1ldHJpY1ZhbHVlKG1ldHJpY1ZhbHVlLCBkZWZpbml0aW9uKSkge1xuICAgICAgdGhpcy5lbWl0KCdtZXRyaWNWYWxpZGF0aW9uRmFpbGVkJywgbWV0cmljVmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyBBZGQgdG8gYnVmZmVyXG4gICAgdGhpcy5hZGRUb0J1ZmZlcihtZXRyaWNWYWx1ZSk7XG4gICAgdGhpcy5lbWl0KCdtZXRyaWNDb2xsZWN0ZWQnLCBtZXRyaWNWYWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdCBtdWx0aXBsZSBtZXRyaWNzIGF0IG9uY2VcbiAgICovXG4gIHB1YmxpYyBjb2xsZWN0TWV0cmljcyhtZXRyaWNzOiB7IG5hbWU6IHN0cmluZzsgdmFsdWU6IG51bWJlcjsgdGFncz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfVtdKTogdm9pZCB7XG4gICAgbWV0cmljcy5mb3JFYWNoKG1ldHJpYyA9PiB7XG4gICAgICB0aGlzLmNvbGxlY3RNZXRyaWMobWV0cmljLm5hbWUsIG1ldHJpYy52YWx1ZSwgbWV0cmljLnRhZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNvbGxlY3Rpb24gcnVsZVxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUNvbGxlY3Rpb25SdWxlKHJ1bGU6IENvbGxlY3Rpb25SdWxlKTogdm9pZCB7XG4gICAgdGhpcy5jb2xsZWN0aW9uUnVsZXMuc2V0KHJ1bGUuaWQsIHJ1bGUpO1xuICAgIHRoaXMuZW1pdCgnY29sbGVjdGlvblJ1bGVDcmVhdGVkJywgcnVsZSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgY29sbGVjdGlvbiBydWxlXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlQ29sbGVjdGlvblJ1bGUocnVsZUlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCByZW1vdmVkID0gdGhpcy5jb2xsZWN0aW9uUnVsZXMuZGVsZXRlKHJ1bGVJZCk7XG4gICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgIHRoaXMuZW1pdCgnY29sbGVjdGlvblJ1bGVSZW1vdmVkJywgcnVsZUlkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbW92ZWQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFnZ3JlZ2F0ZWQgbWV0cmljcyBmb3IgYSB0aW1lIHBlcmlvZFxuICAgKi9cbiAgcHVibGljIGdldEFnZ3JlZ2F0ZWRNZXRyaWNzKFxuICAgIG1ldHJpY05hbWU6IHN0cmluZywgXG4gICAgcGVyaW9kOiBBZ2dyZWdhdGlvblBlcmlvZCwgXG4gICAgc3RhcnRUaW1lPzogRGF0ZSwgXG4gICAgZW5kVGltZT86IERhdGVcbiAgKTogTWV0cmljQWdncmVnYXRpb24gfCBudWxsIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGAke21ldHJpY05hbWV9XyR7cGVyaW9kfV8ke3N0YXJ0VGltZT8uZ2V0VGltZSgpfV8ke2VuZFRpbWU/LmdldFRpbWUoKX1gO1xuICAgIFxuICAgIC8vIENoZWNrIGNhY2hlIGZpcnN0XG4gICAgaWYgKHRoaXMuYWdncmVnYXRpb25DYWNoZS5oYXMoY2FjaGVLZXkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hZ2dyZWdhdGlvbkNhY2hlLmdldChjYWNoZUtleSkhO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBidWZmZXIgPSB0aGlzLm1ldHJpY0J1ZmZlci5nZXQobWV0cmljTmFtZSk7XG4gICAgaWYgKCFidWZmZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBmaWx0ZXJlZFZhbHVlcyA9IHRoaXMuZmlsdGVyVmFsdWVzQnlUaW1lUmFuZ2UoYnVmZmVyLCBzdGFydFRpbWUsIGVuZFRpbWUpO1xuICAgIGNvbnN0IGFnZ3JlZ2F0aW9uID0gdGhpcy5jYWxjdWxhdGVBZ2dyZWdhdGlvbihmaWx0ZXJlZFZhbHVlcywgcGVyaW9kKTtcbiAgICBcbiAgICAvLyBDYWNoZSB0aGUgcmVzdWx0XG4gICAgdGhpcy5hZ2dyZWdhdGlvbkNhY2hlLnNldChjYWNoZUtleSwgYWdncmVnYXRpb24pO1xuICAgIFxuICAgIHJldHVybiBhZ2dyZWdhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBzeXN0ZW0gbWV0cmljc1xuICAgKi9cbiAgcHVibGljIGdldFN5c3RlbU1ldHJpY3MoKTogU3lzdGVtTWV0cmljcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIGNwdTogdGhpcy5nZXRDdXJyZW50Q3B1VXNhZ2UoKSxcbiAgICAgIG1lbW9yeTogdGhpcy5nZXRDdXJyZW50TWVtb3J5VXNhZ2UoKSxcbiAgICAgIGRpc2s6IHRoaXMuZ2V0Q3VycmVudERpc2tVc2FnZSgpLFxuICAgICAgbmV0d29yazogdGhpcy5nZXRDdXJyZW50TmV0d29ya1VzYWdlKCksXG4gICAgICBwcm9jZXNzZXM6IHRoaXMuZ2V0Q3VycmVudFByb2Nlc3NDb3VudCgpLFxuICAgICAgdXB0aW1lOiB0aGlzLmdldFN5c3RlbVVwdGltZSgpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbWV0cmljcyBzbmFwc2hvdFxuICAgKi9cbiAgcHVibGljIGdldFNuYXBzaG90KCk6IE1ldHJpY3NTbmFwc2hvdCB7XG4gICAgY29uc3Qgc25hcHNob3Q6IE1ldHJpY3NTbmFwc2hvdCA9IHtcbiAgICAgIGlkOiB0aGlzLmdlbmVyYXRlU25hcHNob3RJZCgpLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgbWV0cmljczogbmV3IE1hcCgpLFxuICAgICAgc3lzdGVtTWV0cmljczogdGhpcy5nZXRTeXN0ZW1NZXRyaWNzKCksXG4gICAgICBjb2xsZWN0aW9uU3RhdHM6IHRoaXMuZ2V0Q29sbGVjdGlvblN0YXRzKCksXG4gICAgICBidWZmZXJTdGF0czogdGhpcy5nZXRCdWZmZXJTdGF0cygpXG4gICAgfTtcbiAgICBcbiAgICAvLyBJbmNsdWRlIGFsbCBjdXJyZW50IG1ldHJpYyB2YWx1ZXNcbiAgICBmb3IgKGNvbnN0IFttZXRyaWNOYW1lLCBidWZmZXJdIG9mIHRoaXMubWV0cmljQnVmZmVyKSB7XG4gICAgICBzbmFwc2hvdC5tZXRyaWNzLnNldChtZXRyaWNOYW1lLCBbLi4uYnVmZmVyXSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBzbmFwc2hvdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbWV0cmljIGRlZmluaXRpb25zXG4gICAqL1xuICBwdWJsaWMgZ2V0TWV0cmljRGVmaW5pdGlvbnMoKTogTWV0cmljRGVmaW5pdGlvbltdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm1ldHJpY0RlZmluaXRpb25zLnZhbHVlcygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY29sbGVjdGlvbiBydWxlc1xuICAgKi9cbiAgcHVibGljIGdldENvbGxlY3Rpb25SdWxlcygpOiBDb2xsZWN0aW9uUnVsZVtdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNvbGxlY3Rpb25SdWxlcy52YWx1ZXMoKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG1ldHJpYyBidWZmZXIgc3RhdHVzXG4gICAqL1xuICBwdWJsaWMgZ2V0QnVmZmVyU3RhdHVzKCk6IE1hcDxzdHJpbmcsIHsgc2l6ZTogbnVtYmVyOyBsYXN0VXBkYXRlZDogRGF0ZSB9PiB7XG4gICAgY29uc3Qgc3RhdHVzID0gbmV3IE1hcDxzdHJpbmcsIHsgc2l6ZTogbnVtYmVyOyBsYXN0VXBkYXRlZDogRGF0ZSB9PigpO1xuICAgIFxuICAgIGZvciAoY29uc3QgW21ldHJpY05hbWUsIGJ1ZmZlcl0gb2YgdGhpcy5tZXRyaWNCdWZmZXIpIHtcbiAgICAgIGNvbnN0IGxhc3RWYWx1ZSA9IGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gMV07XG4gICAgICBzdGF0dXMuc2V0KG1ldHJpY05hbWUsIHtcbiAgICAgICAgc2l6ZTogYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgbGFzdFVwZGF0ZWQ6IGxhc3RWYWx1ZSA/IGxhc3RWYWx1ZS50aW1lc3RhbXAgOiBuZXcgRGF0ZSgwKVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBzdGF0dXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIG1ldHJpY3MgZGF0YVxuICAgKi9cbiAgcHVibGljIGNsZWFyTWV0cmljcygpOiB2b2lkIHtcbiAgICB0aGlzLm1ldHJpY0J1ZmZlci5jbGVhcigpO1xuICAgIHRoaXMuYWdncmVnYXRpb25DYWNoZS5jbGVhcigpO1xuICAgIHRoaXMuZW1pdCgnbWV0cmljc0NsZWFyZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvcnQgbWV0cmljcyBkYXRhXG4gICAqL1xuICBwdWJsaWMgZXhwb3J0TWV0cmljcyhmb3JtYXQ6ICdqc29uJyB8ICdjc3YnIHwgJ3Byb21ldGhldXMnID0gJ2pzb24nKTogc3RyaW5nIHtcbiAgICBjb25zdCBzbmFwc2hvdCA9IHRoaXMuZ2V0U25hcHNob3QoKTtcbiAgICBcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgY2FzZSAnanNvbic6XG4gICAgICAgIHJldHVybiB0aGlzLmV4cG9ydEFzSnNvbihzbmFwc2hvdCk7XG4gICAgICBjYXNlICdjc3YnOlxuICAgICAgICByZXR1cm4gdGhpcy5leHBvcnRBc0NzdihzbmFwc2hvdCk7XG4gICAgICBjYXNlICdwcm9tZXRoZXVzJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwb3J0QXNQcm9tZXRoZXVzKHNuYXBzaG90KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZXhwb3J0IGZvcm1hdDogJHtmb3JtYXR9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBtZXRyaWNzIHN0YXRpc3RpY3NcbiAgICovXG4gIHB1YmxpYyBnZXRNZXRyaWNzU3RhdHMoKTogYW55IHtcbiAgICBjb25zdCBzdGF0cyA9IHtcbiAgICAgIHRvdGFsTWV0cmljczogdGhpcy5tZXRyaWNEZWZpbml0aW9ucy5zaXplLFxuICAgICAgdG90YWxWYWx1ZXM6IDAsXG4gICAgICBidWZmZXJVdGlsaXphdGlvbjogMCxcbiAgICAgIGNvbGxlY3Rpb25SYXRlOiAwLFxuICAgICAgbWVtb3J5VXNhZ2U6IDAsXG4gICAgICB1cHRpbWU6IERhdGUubm93KCkgLSB0aGlzLmNvbGxlY3Rpb25TdGFydFRpbWUuZ2V0VGltZSgpXG4gICAgfTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGJ1ZmZlciBvZiB0aGlzLm1ldHJpY0J1ZmZlci52YWx1ZXMoKSkge1xuICAgICAgc3RhdHMudG90YWxWYWx1ZXMgKz0gYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgXG4gICAgc3RhdHMuYnVmZmVyVXRpbGl6YXRpb24gPSBzdGF0cy50b3RhbFZhbHVlcyAvICgodGhpcy5jb25maWcuYnVmZmVyU2l6ZSB8fCAxMDAwMCkgKiB0aGlzLm1ldHJpY0RlZmluaXRpb25zLnNpemUpO1xuICAgIHN0YXRzLmNvbGxlY3Rpb25SYXRlID0gc3RhdHMudG90YWxWYWx1ZXMgLyAoc3RhdHMudXB0aW1lIC8gMTAwMCk7IC8vIHZhbHVlcyBwZXIgc2Vjb25kXG4gICAgXG4gICAgcmV0dXJuIHN0YXRzO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgdGhlIG1ldHJpY3MgY29sbGVjdGlvbiBlbmdpbmVcbiAgICovXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcENvbGxlY3Rpb24oKTtcbiAgICBcbiAgICBpZiAodGhpcy5zeXN0ZW1NZXRyaWNzQ29sbGVjdG9yKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuc3lzdGVtTWV0cmljc0NvbGxlY3Rvcik7XG4gICAgfVxuICAgIFxuICAgIGlmICh0aGlzLmJ1ZmZlckZsdXNoSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5idWZmZXJGbHVzaEludGVydmFsKTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5jbGVhck1ldHJpY3MoKTtcbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gUHJpdmF0ZSBoZWxwZXIgbWV0aG9kc1xuXG4gIHByaXZhdGUgc2V0dXBEZWZhdWx0TWV0cmljcygpOiB2b2lkIHtcbiAgICBjb25zdCBkZWZhdWx0TWV0cmljczogTWV0cmljRGVmaW5pdGlvbltdID0gW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnY29tbWFuZC5leGVjdXRpb24udGltZScsXG4gICAgICAgIHR5cGU6ICdoaXN0b2dyYW0nLFxuICAgICAgICB1bml0OiAnbWlsbGlzZWNvbmRzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaW1lIHRha2VuIHRvIGV4ZWN1dGUgY29tbWFuZHMnLFxuICAgICAgICB0YWdzOiBbJ2NvbW1hbmQnLCAndXNlcicsICdzdGF0dXMnXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ2NvbW1hbmQuZXhlY3V0aW9uLmNvdW50JyxcbiAgICAgICAgdHlwZTogJ2NvdW50ZXInLFxuICAgICAgICB1bml0OiAnY291bnQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ051bWJlciBvZiBjb21tYW5kcyBleGVjdXRlZCcsXG4gICAgICAgIHRhZ3M6IFsnY29tbWFuZCcsICd1c2VyJywgJ3N0YXR1cyddXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnZXJyb3IuY291bnQnLFxuICAgICAgICB0eXBlOiAnY291bnRlcicsXG4gICAgICAgIHVuaXQ6ICdjb3VudCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTnVtYmVyIG9mIGVycm9ycyBlbmNvdW50ZXJlZCcsXG4gICAgICAgIHRhZ3M6IFsndHlwZScsICdjb21wb25lbnQnLCAnc2V2ZXJpdHknXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ21lbW9yeS51c2FnZScsXG4gICAgICAgIHR5cGU6ICdnYXVnZScsXG4gICAgICAgIHVuaXQ6ICdieXRlcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQ3VycmVudCBtZW1vcnkgdXNhZ2UnLFxuICAgICAgICB0YWdzOiBbJ2NvbXBvbmVudCddXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnY3B1LnVzYWdlJyxcbiAgICAgICAgdHlwZTogJ2dhdWdlJyxcbiAgICAgICAgdW5pdDogJ3BlcmNlbnRhZ2UnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0N1cnJlbnQgQ1BVIHVzYWdlJyxcbiAgICAgICAgdGFnczogWydjb21wb25lbnQnXVxuICAgICAgfVxuICAgIF07XG4gICAgXG4gICAgZGVmYXVsdE1ldHJpY3MuZm9yRWFjaChtZXRyaWMgPT4gdGhpcy5kZWZpbmVNZXRyaWMobWV0cmljKSk7XG4gIH1cblxuICBwcml2YXRlIHNldHVwRGVmYXVsdENvbGxlY3Rpb25SdWxlcygpOiB2b2lkIHtcbiAgICBjb25zdCBkZWZhdWx0UnVsZXM6IENvbGxlY3Rpb25SdWxlW10gPSBbXG4gICAgICB7XG4gICAgICAgIGlkOiAnZXJyb3Jfc2FtcGxpbmcnLFxuICAgICAgICBuYW1lOiAnRXJyb3IgU2FtcGxpbmcgUnVsZScsXG4gICAgICAgIGNvbmRpdGlvbjogJ21ldHJpYy5uYW1lID09PSBcImVycm9yLmNvdW50XCInLFxuICAgICAgICBhY3Rpb246ICdzYW1wbGUnLFxuICAgICAgICBwYXJhbWV0ZXJzOiB7IHNhbXBsZVJhdGU6IDAuMSB9LFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdoaWdoX2ZyZXF1ZW5jeV90aHJvdHRsaW5nJyxcbiAgICAgICAgbmFtZTogJ0hpZ2ggRnJlcXVlbmN5IFRocm90dGxpbmcnLFxuICAgICAgICBjb25kaXRpb246ICdtZXRyaWMuZnJlcXVlbmN5ID4gMTAwMCcsXG4gICAgICAgIGFjdGlvbjogJ3Rocm90dGxlJyxcbiAgICAgICAgcGFyYW1ldGVyczogeyBtYXhSYXRlOiAxMDAgfSxcbiAgICAgICAgaXNBY3RpdmU6IHRydWVcbiAgICAgIH1cbiAgICBdO1xuICAgIFxuICAgIGRlZmF1bHRSdWxlcy5mb3JFYWNoKHJ1bGUgPT4gdGhpcy5jcmVhdGVDb2xsZWN0aW9uUnVsZShydWxlKSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0U3lzdGVtTWV0cmljc0NvbGxlY3Rpb24oKTogdm9pZCB7XG4gICAgdGhpcy5zeXN0ZW1NZXRyaWNzQ29sbGVjdG9yID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNDb2xsZWN0aW5nKSB7XG4gICAgICAgIHRoaXMuY29sbGVjdFN5c3RlbU1ldHJpY3MoKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmNvbmZpZy5zeXN0ZW1NZXRyaWNzSW50ZXJ2YWwpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb2xsZWN0U3lzdGVtTWV0cmljcygpOiB2b2lkIHtcbiAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5nZXRTeXN0ZW1NZXRyaWNzKCk7XG4gICAgXG4gICAgdGhpcy5jb2xsZWN0TWV0cmljKCdzeXN0ZW0uY3B1LnVzYWdlJywgbWV0cmljcy5jcHUudXNhZ2UsIHsgY29tcG9uZW50OiAnc3lzdGVtJyB9KTtcbiAgICB0aGlzLmNvbGxlY3RNZXRyaWMoJ3N5c3RlbS5tZW1vcnkudXNhZ2UnLCBtZXRyaWNzLm1lbW9yeS51c2VkLCB7IGNvbXBvbmVudDogJ3N5c3RlbScgfSk7XG4gICAgdGhpcy5jb2xsZWN0TWV0cmljKCdzeXN0ZW0uZGlzay51c2FnZScsIG1ldHJpY3MuZGlzay51c2VkLCB7IGNvbXBvbmVudDogJ3N5c3RlbScgfSk7XG4gICAgdGhpcy5jb2xsZWN0TWV0cmljKCdzeXN0ZW0ubmV0d29yay5yeCcsIG1ldHJpY3MubmV0d29yay5yeCwgeyBjb21wb25lbnQ6ICdzeXN0ZW0nIH0pO1xuICAgIHRoaXMuY29sbGVjdE1ldHJpYygnc3lzdGVtLm5ldHdvcmsudHgnLCBtZXRyaWNzLm5ldHdvcmsudHgsIHsgY29tcG9uZW50OiAnc3lzdGVtJyB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRCdWZmZXJGbHVzaGluZygpOiB2b2lkIHtcbiAgICB0aGlzLmJ1ZmZlckZsdXNoSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLmZsdXNoT2xkVmFsdWVzKCk7XG4gICAgICB0aGlzLmNsZWFyQWdncmVnYXRpb25DYWNoZSgpO1xuICAgIH0sIHRoaXMuY29uZmlnLmZsdXNoSW50ZXJ2YWwpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplTWV0cmljQnVmZmVyKG1ldHJpY05hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghdGhpcy5tZXRyaWNCdWZmZXIuaGFzKG1ldHJpY05hbWUpKSB7XG4gICAgICB0aGlzLm1ldHJpY0J1ZmZlci5zZXQobWV0cmljTmFtZSwgW10pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVNZXRyaWNEZWZpbml0aW9uKGRlZmluaXRpb246IE1ldHJpY0RlZmluaXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEoXG4gICAgICBkZWZpbml0aW9uLm5hbWUgJiZcbiAgICAgIGRlZmluaXRpb24udHlwZSAmJlxuICAgICAgZGVmaW5pdGlvbi51bml0ICYmXG4gICAgICBbJ2NvdW50ZXInLCAnZ2F1Z2UnLCAnaGlzdG9ncmFtJywgJ3N1bW1hcnknXS5pbmNsdWRlcyhkZWZpbml0aW9uLnR5cGUpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVNZXRyaWNWYWx1ZSh2YWx1ZTogTWV0cmljVmFsdWUsIGRlZmluaXRpb246IE1ldHJpY0RlZmluaXRpb24pOiBib29sZWFuIHtcbiAgICAvLyBDaGVjayBpZiB2YWx1ZSBpcyBhIG51bWJlclxuICAgIGlmICh0eXBlb2YgdmFsdWUudmFsdWUgIT09ICdudW1iZXInIHx8IGlzTmFOKHZhbHVlLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBmb3IgZ2F1Z2Utc3BlY2lmaWMgY29uc3RyYWludHNcbiAgICBpZiAoZGVmaW5pdGlvbi50eXBlID09PSAnZ2F1Z2UnICYmICh2YWx1ZS52YWx1ZSA8IDAgJiYgZGVmaW5pdGlvbi51bml0ICE9PSAncGVyY2VudGFnZScpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIGZvciBjb3VudGVyLXNwZWNpZmljIGNvbnN0cmFpbnRzXG4gICAgaWYgKGRlZmluaXRpb24udHlwZSA9PT0gJ2NvdW50ZXInICYmIHZhbHVlLnZhbHVlIDwgMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkQ29sbGVjdE1ldHJpYyhtZXRyaWM6IE1ldHJpY1ZhbHVlKTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIHRoaXMuY29sbGVjdGlvblJ1bGVzLnZhbHVlcygpKSB7XG4gICAgICBpZiAoIXJ1bGUuaXNBY3RpdmUpIHtjb250aW51ZTt9XG4gICAgICBcbiAgICAgIGlmICh0aGlzLmV2YWx1YXRlQ29uZGl0aW9uKHJ1bGUuY29uZGl0aW9uLCBtZXRyaWMpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UnVsZUFjdGlvbihydWxlLCBtZXRyaWMpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdHJ1ZTsgLy8gQ29sbGVjdCBieSBkZWZhdWx0XG4gIH1cblxuICBwcml2YXRlIGV2YWx1YXRlQ29uZGl0aW9uKGNvbmRpdGlvbjogc3RyaW5nLCBtZXRyaWM6IE1ldHJpY1ZhbHVlKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFNpbXBsZSBjb25kaXRpb24gZXZhbHVhdGlvbiAoaW4gcHJvZHVjdGlvbiwgdXNlIGEgcHJvcGVyIGV4cHJlc3Npb24gZXZhbHVhdG9yKVxuICAgICAgY29uc3QgY29udGV4dCA9IHsgbWV0cmljIH07XG4gICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdtZXRyaWMnLCBgcmV0dXJuICR7Y29uZGl0aW9ufWApKG1ldHJpYyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFwcGx5UnVsZUFjdGlvbihydWxlOiBDb2xsZWN0aW9uUnVsZSwgbWV0cmljOiBNZXRyaWNWYWx1ZSk6IGJvb2xlYW4ge1xuICAgIHN3aXRjaCAocnVsZS5hY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3NhbXBsZSc6XG4gICAgICAgIGNvbnN0IHNhbXBsZVJhdGUgPSBydWxlLnBhcmFtZXRlcnM/LnNhbXBsZVJhdGUgfHwgMTtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgPCBzYW1wbGVSYXRlO1xuICAgICAgXG4gICAgICBjYXNlICd0aHJvdHRsZSc6XG4gICAgICAgIGNvbnN0IG1heFJhdGUgPSBydWxlLnBhcmFtZXRlcnM/Lm1heFJhdGUgfHwgMTAwO1xuICAgICAgICByZXR1cm4gdGhpcy5jaGVja1Rocm90dGxlTGltaXQobWV0cmljLm5hbWUsIG1heFJhdGUpO1xuICAgICAgXG4gICAgICBjYXNlICdmaWx0ZXInOlxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEZpbHRlciBvdXQgdGhlIG1ldHJpY1xuICAgICAgXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoZWNrVGhyb3R0bGVMaW1pdChtZXRyaWNOYW1lOiBzdHJpbmcsIG1heFJhdGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMubWV0cmljQnVmZmVyLmdldChtZXRyaWNOYW1lKTtcbiAgICBpZiAoIWJ1ZmZlcikge3JldHVybiB0cnVlO31cbiAgICBcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IG9uZVNlY29uZEFnbyA9IG5vdyAtIDEwMDA7XG4gICAgY29uc3QgcmVjZW50VmFsdWVzID0gYnVmZmVyLmZpbHRlcih2ID0+IHYudGltZXN0YW1wLmdldFRpbWUoKSA+IG9uZVNlY29uZEFnbyk7XG4gICAgXG4gICAgcmV0dXJuIHJlY2VudFZhbHVlcy5sZW5ndGggPCBtYXhSYXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRUb0J1ZmZlcihtZXRyaWNWYWx1ZTogTWV0cmljVmFsdWUpOiB2b2lkIHtcbiAgICBjb25zdCBidWZmZXIgPSB0aGlzLm1ldHJpY0J1ZmZlci5nZXQobWV0cmljVmFsdWUubmFtZSk7XG4gICAgaWYgKCFidWZmZXIpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZU1ldHJpY0J1ZmZlcihtZXRyaWNWYWx1ZS5uYW1lKTtcbiAgICAgIHJldHVybiB0aGlzLmFkZFRvQnVmZmVyKG1ldHJpY1ZhbHVlKTtcbiAgICB9XG4gICAgXG4gICAgYnVmZmVyLnB1c2gobWV0cmljVmFsdWUpO1xuICAgIFxuICAgIC8vIEtlZXAgYnVmZmVyIHNpemUgdW5kZXIgbGltaXRcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCA+ICh0aGlzLmNvbmZpZy5idWZmZXJTaXplIHx8IDEwMDAwKSkge1xuICAgICAgYnVmZmVyLnNoaWZ0KCk7IC8vIFJlbW92ZSBvbGRlc3QgdmFsdWVcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGZsdXNoQWxsQnVmZmVycygpOiB2b2lkIHtcbiAgICBjb25zdCBzbmFwc2hvdCA9IHRoaXMuZ2V0U25hcHNob3QoKTtcbiAgICB0aGlzLmVtaXQoJ2J1ZmZlcnNGbHVzaGVkJywgc25hcHNob3QpO1xuICB9XG5cbiAgcHJpdmF0ZSBmbHVzaE9sZFZhbHVlcygpOiB2b2lkIHtcbiAgICBjb25zdCBjdXRvZmZUaW1lID0gRGF0ZS5ub3coKSAtICh0aGlzLmNvbmZpZy5yZXRlbnRpb25QZXJpb2QgfHwgNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgIFxuICAgIGZvciAoY29uc3QgW21ldHJpY05hbWUsIGJ1ZmZlcl0gb2YgdGhpcy5tZXRyaWNCdWZmZXIpIHtcbiAgICAgIGNvbnN0IGZpbHRlcmVkID0gYnVmZmVyLmZpbHRlcih2ID0+IHYudGltZXN0YW1wLmdldFRpbWUoKSA+IGN1dG9mZlRpbWUpO1xuICAgICAgdGhpcy5tZXRyaWNCdWZmZXIuc2V0KG1ldHJpY05hbWUsIGZpbHRlcmVkKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNsZWFyQWdncmVnYXRpb25DYWNoZSgpOiB2b2lkIHtcbiAgICAvLyBDbGVhciBjYWNoZSBlbnRyaWVzIG9sZGVyIHRoYW4gZmx1c2ggaW50ZXJ2YWxcbiAgICBjb25zdCBjdXRvZmZUaW1lID0gRGF0ZS5ub3coKSAtICh0aGlzLmNvbmZpZy5mbHVzaEludGVydmFsIHx8IDUwMDApICogMjtcbiAgICBcbiAgICBmb3IgKGNvbnN0IFtrZXksIGFnZ3JlZ2F0aW9uXSBvZiB0aGlzLmFnZ3JlZ2F0aW9uQ2FjaGUpIHtcbiAgICAgIGlmIChhZ2dyZWdhdGlvbi50aW1lc3RhbXAuZ2V0VGltZSgpIDwgY3V0b2ZmVGltZSkge1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0aW9uQ2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJWYWx1ZXNCeVRpbWVSYW5nZShcbiAgICB2YWx1ZXM6IE1ldHJpY1ZhbHVlW10sIFxuICAgIHN0YXJ0VGltZT86IERhdGUsIFxuICAgIGVuZFRpbWU/OiBEYXRlXG4gICk6IE1ldHJpY1ZhbHVlW10ge1xuICAgIGxldCBmaWx0ZXJlZCA9IHZhbHVlcztcbiAgICBcbiAgICBpZiAoc3RhcnRUaW1lKSB7XG4gICAgICBmaWx0ZXJlZCA9IGZpbHRlcmVkLmZpbHRlcih2ID0+IHYudGltZXN0YW1wID49IHN0YXJ0VGltZSk7XG4gICAgfVxuICAgIFxuICAgIGlmIChlbmRUaW1lKSB7XG4gICAgICBmaWx0ZXJlZCA9IGZpbHRlcmVkLmZpbHRlcih2ID0+IHYudGltZXN0YW1wIDw9IGVuZFRpbWUpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmlsdGVyZWQ7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUFnZ3JlZ2F0aW9uKHZhbHVlczogTWV0cmljVmFsdWVbXSwgcGVyaW9kOiBBZ2dyZWdhdGlvblBlcmlvZCk6IE1ldHJpY0FnZ3JlZ2F0aW9uIHtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWV0cmljTmFtZTogJycsXG4gICAgICAgIHBlcmlvZCxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgc3VtOiAwLFxuICAgICAgICBhdmc6IDAsXG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiAwLFxuICAgICAgICBwNTA6IDAsXG4gICAgICAgIHA5MDogMCxcbiAgICAgICAgcDk1OiAwLFxuICAgICAgICBwOTk6IDBcbiAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHNvcnRlZFZhbHVlcyA9IHZhbHVlcy5tYXAodiA9PiB2LnZhbHVlKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgY29uc3Qgc3VtID0gc29ydGVkVmFsdWVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBtZXRyaWNOYW1lOiB2YWx1ZXNbMF0ubmFtZSxcbiAgICAgIHBlcmlvZCxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIGNvdW50OiB2YWx1ZXMubGVuZ3RoLFxuICAgICAgc3VtLFxuICAgICAgYXZnOiBzdW0gLyB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbWluOiBzb3J0ZWRWYWx1ZXNbMF0sXG4gICAgICBtYXg6IHNvcnRlZFZhbHVlc1tzb3J0ZWRWYWx1ZXMubGVuZ3RoIC0gMV0sXG4gICAgICBwNTA6IHRoaXMuY2FsY3VsYXRlUGVyY2VudGlsZShzb3J0ZWRWYWx1ZXMsIDUwKSxcbiAgICAgIHA5MDogdGhpcy5jYWxjdWxhdGVQZXJjZW50aWxlKHNvcnRlZFZhbHVlcywgOTApLFxuICAgICAgcDk1OiB0aGlzLmNhbGN1bGF0ZVBlcmNlbnRpbGUoc29ydGVkVmFsdWVzLCA5NSksXG4gICAgICBwOTk6IHRoaXMuY2FsY3VsYXRlUGVyY2VudGlsZShzb3J0ZWRWYWx1ZXMsIDk5KVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZVBlcmNlbnRpbGUoc29ydGVkVmFsdWVzOiBudW1iZXJbXSwgcGVyY2VudGlsZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBpbmRleCA9IE1hdGguY2VpbCgocGVyY2VudGlsZSAvIDEwMCkgKiBzb3J0ZWRWYWx1ZXMubGVuZ3RoKSAtIDE7XG4gICAgcmV0dXJuIHNvcnRlZFZhbHVlc1tNYXRoLm1heCgwLCBNYXRoLm1pbihpbmRleCwgc29ydGVkVmFsdWVzLmxlbmd0aCAtIDEpKV07XG4gIH1cblxuICBwcml2YXRlIGdldEN1cnJlbnRDcHVVc2FnZSgpOiBhbnkge1xuICAgIC8vIFNpbXBsaWZpZWQgQ1BVIHVzYWdlIGNhbGN1bGF0aW9uXG4gICAgcmV0dXJuIHtcbiAgICAgIHVzYWdlOiBNYXRoLnJhbmRvbSgpICogMTAwLFxuICAgICAgY29yZXM6IDQsXG4gICAgICBsb2FkQXZlcmFnZTogWzAuNSwgMC43LCAwLjhdXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q3VycmVudE1lbW9yeVVzYWdlKCk6IGFueSB7XG4gICAgLy8gU2ltcGxpZmllZCBtZW1vcnkgdXNhZ2UgY2FsY3VsYXRpb25cbiAgICBjb25zdCB0b3RhbCA9IDggKiAxMDI0ICogMTAyNCAqIDEwMjQ7IC8vIDhHQlxuICAgIGNvbnN0IHVzZWQgPSB0b3RhbCAqICgwLjMgKyBNYXRoLnJhbmRvbSgpICogMC40KTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgdG90YWwsXG4gICAgICB1c2VkLFxuICAgICAgZnJlZTogdG90YWwgLSB1c2VkLFxuICAgICAgcGVyY2VudGFnZTogKHVzZWQgLyB0b3RhbCkgKiAxMDBcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDdXJyZW50RGlza1VzYWdlKCk6IGFueSB7XG4gICAgLy8gU2ltcGxpZmllZCBkaXNrIHVzYWdlIGNhbGN1bGF0aW9uXG4gICAgY29uc3QgdG90YWwgPSA1MDAgKiAxMDI0ICogMTAyNCAqIDEwMjQ7IC8vIDUwMEdCXG4gICAgY29uc3QgdXNlZCA9IHRvdGFsICogKDAuNCArIE1hdGgucmFuZG9tKCkgKiAwLjMpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB0b3RhbCxcbiAgICAgIHVzZWQsXG4gICAgICBmcmVlOiB0b3RhbCAtIHVzZWQsXG4gICAgICBwZXJjZW50YWdlOiAodXNlZCAvIHRvdGFsKSAqIDEwMFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldEN1cnJlbnROZXR3b3JrVXNhZ2UoKTogYW55IHtcbiAgICAvLyBTaW1wbGlmaWVkIG5ldHdvcmsgdXNhZ2UgY2FsY3VsYXRpb25cbiAgICByZXR1cm4ge1xuICAgICAgcng6IE1hdGgucmFuZG9tKCkgKiAxMDI0ICogMTAyNCwgLy8gYnl0ZXMvc2VjXG4gICAgICB0eDogTWF0aC5yYW5kb20oKSAqIDEwMjQgKiAxMDI0LCAvLyBieXRlcy9zZWNcbiAgICAgIHJ4UGFja2V0czogTWF0aC5yYW5kb20oKSAqIDEwMDAsXG4gICAgICB0eFBhY2tldHM6IE1hdGgucmFuZG9tKCkgKiAxMDAwXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q3VycmVudFByb2Nlc3NDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLmZsb29yKDUwICsgTWF0aC5yYW5kb20oKSAqIDEwMCk7XG4gIH1cblxuICBwcml2YXRlIGdldFN5c3RlbVVwdGltZSgpOiBudW1iZXIge1xuICAgIHJldHVybiBEYXRlLm5vdygpIC0gdGhpcy5jb2xsZWN0aW9uU3RhcnRUaW1lLmdldFRpbWUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29sbGVjdGlvblN0YXRzKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0VGltZTogdGhpcy5jb2xsZWN0aW9uU3RhcnRUaW1lLFxuICAgICAgdG90YWxNZXRyaWNzOiB0aGlzLm1ldHJpY0RlZmluaXRpb25zLnNpemUsXG4gICAgICB0b3RhbFZhbHVlczogQXJyYXkuZnJvbSh0aGlzLm1ldHJpY0J1ZmZlci52YWx1ZXMoKSkucmVkdWNlKChzdW0sIGJ1ZmZlcikgPT4gc3VtICsgYnVmZmVyLmxlbmd0aCwgMCksXG4gICAgICBpc0NvbGxlY3Rpbmc6IHRoaXMuaXNDb2xsZWN0aW5nXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QnVmZmVyU3RhdHMoKTogYW55IHtcbiAgICBjb25zdCBzdGF0cyA9IHtcbiAgICAgIHRvdGFsQnVmZmVyczogdGhpcy5tZXRyaWNCdWZmZXIuc2l6ZSxcbiAgICAgIHRvdGFsVmFsdWVzOiAwLFxuICAgICAgbWF4QnVmZmVyU2l6ZTogMCxcbiAgICAgIG1pbkJ1ZmZlclNpemU6IEluZmluaXR5LFxuICAgICAgYXZnQnVmZmVyU2l6ZTogMFxuICAgIH07XG4gICAgXG4gICAgZm9yIChjb25zdCBidWZmZXIgb2YgdGhpcy5tZXRyaWNCdWZmZXIudmFsdWVzKCkpIHtcbiAgICAgIHN0YXRzLnRvdGFsVmFsdWVzICs9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICBzdGF0cy5tYXhCdWZmZXJTaXplID0gTWF0aC5tYXgoc3RhdHMubWF4QnVmZmVyU2l6ZSwgYnVmZmVyLmxlbmd0aCk7XG4gICAgICBzdGF0cy5taW5CdWZmZXJTaXplID0gTWF0aC5taW4oc3RhdHMubWluQnVmZmVyU2l6ZSwgYnVmZmVyLmxlbmd0aCk7XG4gICAgfVxuICAgIFxuICAgIHN0YXRzLmF2Z0J1ZmZlclNpemUgPSBzdGF0cy50b3RhbFZhbHVlcyAvIHN0YXRzLnRvdGFsQnVmZmVycztcbiAgICBcbiAgICByZXR1cm4gc3RhdHM7XG4gIH1cblxuICBwcml2YXRlIGV4cG9ydEFzSnNvbihzbmFwc2hvdDogTWV0cmljc1NuYXBzaG90KTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdGltZXN0YW1wOiBzbmFwc2hvdC50aW1lc3RhbXAsXG4gICAgICBtZXRyaWNzOiBPYmplY3QuZnJvbUVudHJpZXMoc25hcHNob3QubWV0cmljcyksXG4gICAgICBzeXN0ZW1NZXRyaWNzOiBzbmFwc2hvdC5zeXN0ZW1NZXRyaWNzLFxuICAgICAgc3RhdHM6IHNuYXBzaG90LmNvbGxlY3Rpb25TdGF0c1xuICAgIH0sIG51bGwsIDIpO1xuICB9XG5cbiAgcHJpdmF0ZSBleHBvcnRBc0NzdihzbmFwc2hvdDogTWV0cmljc1NuYXBzaG90KTogc3RyaW5nIHtcbiAgICBjb25zdCBsaW5lcyA9IFsnTWV0cmljLFZhbHVlLFRpbWVzdGFtcCxUYWdzJ107XG4gICAgXG4gICAgZm9yIChjb25zdCBbbWV0cmljTmFtZSwgdmFsdWVzXSBvZiBzbmFwc2hvdC5tZXRyaWNzKSB7XG4gICAgICB2YWx1ZXMuZm9yRWFjaCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCB0YWdzID0gT2JqZWN0LmVudHJpZXModmFsdWUudGFncykubWFwKChbaywgdl0pID0+IGAke2t9PSR7dn1gKS5qb2luKCc7Jyk7XG4gICAgICAgIGxpbmVzLnB1c2goYCR7bWV0cmljTmFtZX0sJHt2YWx1ZS52YWx1ZX0sJHt2YWx1ZS50aW1lc3RhbXAudG9JU09TdHJpbmcoKX0sJHt0YWdzfWApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHByaXZhdGUgZXhwb3J0QXNQcm9tZXRoZXVzKHNuYXBzaG90OiBNZXRyaWNzU25hcHNob3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3QgW21ldHJpY05hbWUsIHZhbHVlc10gb2Ygc25hcHNob3QubWV0cmljcykge1xuICAgICAgY29uc3QgbGF0ZXN0VmFsdWUgPSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxhdGVzdFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHRhZ3MgPSBPYmplY3QuZW50cmllcyhsYXRlc3RWYWx1ZS50YWdzKVxuICAgICAgICAgIC5tYXAoKFtrLCB2XSkgPT4gYCR7a309XCIke3Z9XCJgKVxuICAgICAgICAgIC5qb2luKCcsJyk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBtZXRyaWNOYW1lLnJlcGxhY2UoL1xcLi9nLCAnXycpO1xuICAgICAgICBsaW5lcy5wdXNoKGAke25hbWV9eyR7dGFnc319ICR7bGF0ZXN0VmFsdWUudmFsdWV9ICR7bGF0ZXN0VmFsdWUudGltZXN0YW1wLmdldFRpbWUoKX1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVNuYXBzaG90SWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYHNuYXBzaG90XyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YDtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9