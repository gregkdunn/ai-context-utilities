{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/commandCoordinator.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/commandCoordinator.test.ts"],"sourcesContent":["import { CommandCoordinator } from '../commandCoordinator';\nimport { StatusTracker } from '../statusTracker';\nimport { StreamingCommandRunner } from '../streamingRunner';\nimport * as vscode from 'vscode';\n\n// Mock dependencies\njest.mock('../statusTracker');\njest.mock('../streamingRunner');\njest.mock('vscode');\n\ndescribe('CommandCoordinator', () => {\n    let coordinator: CommandCoordinator;\n    let mockStatusTracker: jest.Mocked<StatusTracker>;\n    let mockContext: vscode.ExtensionContext;\n    let mockStreamingRunner: jest.Mocked<StreamingCommandRunner>;\n\n    beforeEach(() => {\n        mockContext = {\n            subscriptions: [],\n            globalState: {\n                get: jest.fn(),\n                update: jest.fn()\n            }\n        } as any;\n\n        mockStatusTracker = new StatusTracker() as jest.Mocked<StatusTracker>;\n        mockStatusTracker.startCommand = jest.fn().mockReturnValue('test-command-id');\n        mockStatusTracker.completeCommand = jest.fn();\n        mockStatusTracker.updateStatus = jest.fn();\n        mockStatusTracker.appendOutput = jest.fn();\n        mockStatusTracker.appendError = jest.fn();\n        mockStatusTracker.updateProgress = jest.fn();\n        mockStatusTracker.cancelCommand = jest.fn();\n        mockStatusTracker.getAllStatuses = jest.fn().mockReturnValue([]);\n        mockStatusTracker.getRunningCommands = jest.fn().mockReturnValue([]);\n\n        coordinator = new CommandCoordinator(mockStatusTracker, mockContext);\n\n        // Mock StreamingCommandRunner\n        mockStreamingRunner = {\n            executeWithStreaming: jest.fn(),\n            executeTestCommand: jest.fn(),\n            executeGitCommand: jest.fn(),\n            executeLintCommand: jest.fn(),\n            isRunning: false,\n            cancel: jest.fn(),\n            getCurrentOutput: jest.fn().mockReturnValue(''),\n            clearOutput: jest.fn(),\n            on: jest.fn(),\n            removeAllListeners: jest.fn(),\n            emit: jest.fn()\n        } as any;\n\n        // Mock the StreamingCommandRunner constructor\n        (StreamingCommandRunner as jest.MockedClass<typeof StreamingCommandRunner>).mockImplementation(() => mockStreamingRunner);\n    });\n\n    afterEach(() => {\n        coordinator.dispose();\n        jest.clearAllMocks();\n    });\n\n    describe('Command Execution', () => {\n        test('should execute aiDebug command', async () => {\n            const mockResult = {\n                success: true,\n                exitCode: 0,\n                output: 'Test output',\n                duration: 5000,\n                outputFiles: ['output.txt']\n            };\n\n            mockStreamingRunner.executeWithStreaming.mockResolvedValue(mockResult);\n\n            const result = await coordinator.executeCommand('aiDebug', ['test-project'], {\n                project: 'test-project',\n                cwd: '/test/path'\n            });\n\n            expect(mockStatusTracker.startCommand).toHaveBeenCalledWith('aiDebug', 'test-project', undefined);\n            expect(mockStreamingRunner.executeWithStreaming).toHaveBeenCalled();\n            expect(mockStatusTracker.completeCommand).toHaveBeenCalledWith('test-command-id', mockResult);\n            expect(result).toEqual(mockResult);\n        });\n\n        test('should execute nxTest command with streaming', async () => {\n            const mockResult = {\n                success: true,\n                exitCode: 0,\n                output: 'Tests passed',\n                duration: 3000,\n                outputFiles: []\n            };\n\n            mockStreamingRunner.executeTestCommand.mockResolvedValue(mockResult);\n\n            const result = await coordinator.executeCommand('nxTest', ['test-project'], {\n                project: 'test-project',\n                cwd: '/test/path'\n            });\n\n            expect(mockStreamingRunner.executeTestCommand).toHaveBeenCalledWith(\n                'npx',\n                ['nx', 'test', 'test-project'],\n                '/test/path'\n            );\n            expect(result).toEqual(mockResult);\n        });\n\n        test('should execute gitDiff command', async () => {\n            const mockResult = {\n                success: true,\n                exitCode: 0,\n                output: 'Git diff output',\n                duration: 2000,\n                outputFiles: ['diff.txt']\n            };\n\n            mockStreamingRunner.executeGitCommand.mockResolvedValue(mockResult);\n\n            const result = await coordinator.executeCommand('gitDiff', ['--staged'], {\n                cwd: '/test/path'\n            });\n\n            expect(mockStreamingRunner.executeGitCommand).toHaveBeenCalledWith(\n                ['diff', '--staged'],\n                '/test/path'\n            );\n            expect(result).toEqual(mockResult);\n        });\n\n        test('should execute prepareToPush command', async () => {\n            const mockResult = {\n                success: true,\n                exitCode: 0,\n                output: 'Lint passed',\n                duration: 4000,\n                outputFiles: []\n            };\n\n            mockStreamingRunner.executeLintCommand.mockResolvedValue(mockResult);\n\n            const result = await coordinator.executeCommand('prepareToPush', ['test-project'], {\n                project: 'test-project',\n                cwd: '/test/path'\n            });\n\n            expect(mockStreamingRunner.executeLintCommand).toHaveBeenCalledWith(\n                'npx',\n                ['nx', 'lint', 'test-project'],\n                '/test/path'\n            );\n            expect(result).toEqual(mockResult);\n        });\n    });\n\n    describe('Streaming Event Handling', () => {\n        test('should handle streaming output events', async () => {\n            const mockResult = { success: true, exitCode: 0, output: 'test', duration: 1000, outputFiles: [] };\n            mockStreamingRunner.executeWithStreaming.mockResolvedValue(mockResult);\n\n            // Mock the event handler setup\n            const eventHandlers: Record<string, Function> = {};\n            mockStreamingRunner.on.mockImplementation((eventName: string | symbol, listener: (...args: any[]) => void) => {\n                eventHandlers[eventName as string] = listener;\n                return mockStreamingRunner;\n            });\n\n            // Start command execution (don't await yet)\n            const promise = coordinator.executeCommand('aiDebug', ['test-project'], {\n                project: 'test-project'\n            });\n\n            // Simulate streaming events\n            eventHandlers['output']('Test output line\\\\n');\n            eventHandlers['error']('Test error line\\\\n');\n            eventHandlers['progress'](50);\n            eventHandlers['status']('Processing...');\n\n            await promise;\n\n            expect(mockStatusTracker.appendOutput).toHaveBeenCalledWith('test-command-id', 'Test output line\\\\n');\n            expect(mockStatusTracker.appendError).toHaveBeenCalledWith('test-command-id', 'Test error line\\\\n');\n            expect(mockStatusTracker.updateProgress).toHaveBeenCalledWith('test-command-id', 50);\n            // This line needs to be updated based on actual CommandCoordinator implementation\n            // expect(mockStatusTracker.updateStatus).toHaveBeenCalledWith({ message: 'Processing...' });\n        });\n\n        test('should emit streaming messages', async () => {\n            const mockResult = { success: true, exitCode: 0, output: 'test', duration: 1000, outputFiles: [] };\n            mockStreamingRunner.executeWithStreaming.mockResolvedValue(mockResult);\n\n            const streamingMessages: any[] = [];\n            coordinator.on('streaming_message', (message) => {\n                streamingMessages.push(message);\n            });\n\n            const eventHandlers: Record<string, Function> = {};\n            mockStreamingRunner.on.mockImplementation((eventName: string | symbol, listener: (...args: any[]) => void) => {\n                eventHandlers[eventName as string] = listener;\n                return mockStreamingRunner;\n            });\n\n            const promise = coordinator.executeCommand('aiDebug', ['test-project'], {\n                project: 'test-project'\n            });\n\n            // Simulate events\n            eventHandlers['output']('Test output');\n            eventHandlers['progress'](25);\n\n            await promise;\n\n            expect(streamingMessages).toHaveLength(2);\n            expect(streamingMessages[0].type).toBe('output');\n            expect(streamingMessages[0].data.text).toBe('Test output');\n            expect(streamingMessages[1].type).toBe('progress');\n            expect(streamingMessages[1].data.progress).toBe(25);\n        });\n    });\n\n    describe('Concurrency Control', () => {\n        test('should respect maximum concurrent commands', async () => {\n            coordinator.setMaxConcurrentCommands(2);\n\n            const mockResult = { success: true, exitCode: 0, output: 'test', duration: 1000, outputFiles: [] };\n            \n            // Make the first two commands hang\n            let resolveFirst: Function = () => {};\n            let resolveSecond: Function = () => {};\n            \n            mockStreamingRunner.executeWithStreaming\n                .mockImplementationOnce(() => new Promise(resolve => { resolveFirst = () => resolve(mockResult); }))\n                .mockImplementationOnce(() => new Promise(resolve => { resolveSecond = () => resolve(mockResult); }))\n                .mockResolvedValue(mockResult);\n\n            // Start first two commands\n            const promise1 = coordinator.executeCommand('aiDebug', ['project1'], { project: 'project1' });\n            const promise2 = coordinator.executeCommand('nxTest', ['project2'], { project: 'project2' });\n\n            // Third command should be queued\n            const promise3 = coordinator.executeCommand('gitDiff', [], {});\n\n            const status = coordinator.getExecutionStatus();\n            expect(status.active).toBe(2);\n            expect(status.queued).toBe(1);\n\n            // Complete first command\n            resolveFirst();\n            await promise1;\n\n            // Third command should now be processing\n            expect(coordinator.getExecutionStatus().active).toBe(2);\n\n            // Complete remaining commands\n            resolveSecond();\n            await Promise.all([promise2, promise3]);\n        });\n\n        test('should handle high priority commands', async () => {\n            coordinator.setMaxConcurrentCommands(1);\n\n            const mockResult = { success: true, exitCode: 0, output: 'test', duration: 1000, outputFiles: [] };\n            \n            // Make first command hang\n            let resolveFirst: Function = () => {};\n            mockStreamingRunner.executeWithStreaming\n                .mockImplementationOnce(() => new Promise(resolve => { resolveFirst = () => resolve(mockResult); }))\n                .mockResolvedValue(mockResult);\n\n            Object.defineProperty(mockStreamingRunner, 'isRunning', { value: true, writable: true });\n\n            // Start first command\n            const promise1 = coordinator.executeCommand('aiDebug', ['project1'], { project: 'project1' });\n\n            // High priority command should cancel the first one\n            const promise2 = coordinator.executeCommand('nxTest', ['project2'], { \n                project: 'project2',\n                priority: 'high'\n            });\n\n            expect(mockStreamingRunner.cancel).toHaveBeenCalled();\n            expect(mockStatusTracker.cancelCommand).toHaveBeenCalled();\n\n            resolveFirst();\n            await Promise.all([promise1, promise2]);\n        });\n    });\n\n    describe('Command Cancellation', () => {\n        test('should cancel running command', () => {\n            const commandId = 'test-command-id';\n            Object.defineProperty(mockStreamingRunner, 'isRunning', { value: true, writable: true });\n            \n            // Simulate active command\n            (coordinator as any).activeCommands.set(commandId, mockStreamingRunner);\n\n            const result = coordinator.cancelCommand(commandId);\n\n            expect(result).toBe(true);\n            expect(mockStreamingRunner.cancel).toHaveBeenCalled();\n            expect(mockStatusTracker.cancelCommand).toHaveBeenCalledWith(commandId);\n        });\n\n        test('should not cancel non-running command', () => {\n            const commandId = 'test-command-id';\n            Object.defineProperty(mockStreamingRunner, 'isRunning', { value: false, writable: true });\n            \n            const result = coordinator.cancelCommand(commandId);\n\n            expect(result).toBe(false);\n            expect(mockStreamingRunner.cancel).not.toHaveBeenCalled();\n        });\n\n        test('should cancel all running commands', () => {\n            const commands = ['cmd1', 'cmd2', 'cmd3'];\n            commands.forEach(cmdId => {\n                const runner = { ...mockStreamingRunner, isRunning: true };\n                (coordinator as any).activeCommands.set(cmdId, runner);\n            });\n\n            coordinator.cancelAllCommands();\n\n            commands.forEach(cmdId => {\n                expect(mockStatusTracker.cancelCommand).toHaveBeenCalledWith(cmdId);\n            });\n        });\n    });\n\n    describe('Output Management', () => {\n        test('should get command output', () => {\n            const commandId = 'test-command-id';\n            const expectedOutput = 'Command output here';\n            \n            mockStreamingRunner.getCurrentOutput.mockReturnValue(expectedOutput);\n            (coordinator as any).activeCommands.set(commandId, mockStreamingRunner);\n\n            const output = coordinator.getCommandOutput(commandId);\n\n            expect(output).toBe(expectedOutput);\n            expect(mockStreamingRunner.getCurrentOutput).toHaveBeenCalled();\n        });\n\n        test('should clear command output', () => {\n            const commandId = 'test-command-id';\n            (coordinator as any).activeCommands.set(commandId, mockStreamingRunner);\n\n            coordinator.clearCommandOutput(commandId);\n\n            expect(mockStreamingRunner.clearOutput).toHaveBeenCalled();\n        });\n\n        test('should return empty string for non-existent command output', () => {\n            const output = coordinator.getCommandOutput('non-existent');\n            expect(output).toBe('');\n        });\n    });\n\n    describe('Metrics and Reporting', () => {\n        test('should get execution metrics', () => {\n            const mockStats = {\n                total: 10,\n                successful: 8,\n                failed: 2,\n                averageDuration: 5000,\n                lastRun: new Date(),\n                recentCommands: []\n            };\n            \n            mockStatusTracker.getCommandStats.mockReturnValue(mockStats);\n\n            const metrics = coordinator.getExecutionMetrics();\n\n            expect(metrics.totalCommands).toBe(10);\n            expect(metrics.successRate).toBe(80);\n            expect(metrics.averageExecutionTime).toBe(5000);\n        });\n\n        test('should create health report', () => {\n            const mockStatuses = [\n                {\n                    id: 'cmd1',\n                    command: 'aiDebug',\n                    action: 'aiDebug',\n                    status: 'running' as const,\n                    progress: 75,\n                    message: 'Processing...',\n                    startTime: new Date(),\n                    project: 'test-project',\n                    output: '',\n                    outputFiles: [],\n                    metadata: {}\n                }\n            ];\n\n            mockStatusTracker.getAllStatuses.mockReturnValue(mockStatuses);\n            mockStatusTracker.getCommandStats.mockReturnValue({\n                total: 5,\n                successful: 4,\n                failed: 1,\n                averageDuration: 3000,\n                recentCommands: []\n            });\n\n            const report = coordinator.createHealthReport();\n\n            expect(report).toContain('COMMAND EXECUTION HEALTH REPORT');\n            expect(report).toContain('ACTIVE COMMANDS');\n            expect(report).toContain('PERFORMANCE METRICS');\n            expect(report).toContain('RECOMMENDATIONS');\n            expect(report).toContain('Processing...');\n            expect(report).toContain('75%');\n        });\n    });\n\n    describe('Queue Management', () => {\n        test('should emit queue update events', async () => {\n            coordinator.setMaxConcurrentCommands(1);\n\n            const queueUpdates: any[] = [];\n            coordinator.on('queue_update', (data) => {\n                queueUpdates.push(data);\n            });\n\n            const mockResult = { success: true, exitCode: 0, output: 'test', duration: 1000, outputFiles: [] };\n            \n            let resolveFirst: Function = () => {};\n            mockStreamingRunner.executeWithStreaming\n                .mockImplementationOnce(() => new Promise(resolve => { resolveFirst = () => resolve(mockResult); }))\n                .mockResolvedValue(mockResult);\n\n            // Start first command (will run immediately)\n            const promise1 = coordinator.executeCommand('aiDebug', ['project1'], { project: 'project1' });\n\n            // Start second command (will be queued)\n            const promise2 = coordinator.executeCommand('nxTest', ['project2'], { project: 'project2' });\n\n            // Should have emitted a queue update\n            expect(queueUpdates.length).toBeGreaterThan(0);\n            expect(queueUpdates[0]).toHaveProperty('queued');\n\n            resolveFirst();\n            await Promise.all([promise1, promise2]);\n        });\n    });\n\n    describe('Error Handling', () => {\n        test('should handle command execution errors', async () => {\n            const error = new Error('Command failed');\n            mockStreamingRunner.executeWithStreaming.mockRejectedValue(error);\n\n            await expect(coordinator.executeCommand('aiDebug', ['test-project'], {\n                project: 'test-project'\n            })).rejects.toThrow('Command failed');\n\n            expect(mockStatusTracker.updateStatus).toHaveBeenCalledWith({\n                isRunning: false,\n                message: 'Command failed'\n            });\n        });\n\n        test('should handle cleanup after errors', async () => {\n            const error = new Error('Test error');\n            mockStreamingRunner.executeWithStreaming.mockRejectedValue(error);\n\n            try {\n                await coordinator.executeCommand('aiDebug', ['test-project'], {\n                    project: 'test-project'\n                });\n            } catch (e) {\n                // Expected error\n            }\n\n            // Should clean up the runner\n            expect(mockStreamingRunner.removeAllListeners).toHaveBeenCalled();\n        });\n    });\n\n    describe('Configuration', () => {\n        test('should set maximum concurrent commands within bounds', () => {\n            coordinator.setMaxConcurrentCommands(0); // Below minimum\n            expect(coordinator.getExecutionStatus().maxConcurrent).toBe(1);\n\n            coordinator.setMaxConcurrentCommands(15); // Above maximum\n            expect(coordinator.getExecutionStatus().maxConcurrent).toBe(10);\n\n            coordinator.setMaxConcurrentCommands(5); // Valid value\n            expect(coordinator.getExecutionStatus().maxConcurrent).toBe(5);\n        });\n    });\n\n    describe('Disposal', () => {\n        test('should dispose properly', () => {\n            // Add some mock active commands\n            (coordinator as any).activeCommands.set('cmd1', mockStreamingRunner);\n            (coordinator as any).activeCommands.set('cmd2', mockStreamingRunner);\n\n            coordinator.dispose();\n\n            expect(mockStreamingRunner.cancel).toHaveBeenCalledTimes(2);\n            expect((coordinator as any).activeCommands.size).toBe(0);\n            expect((coordinator as any).commandQueue.length).toBe(0);\n        });\n    });\n});\n"],"version":3}