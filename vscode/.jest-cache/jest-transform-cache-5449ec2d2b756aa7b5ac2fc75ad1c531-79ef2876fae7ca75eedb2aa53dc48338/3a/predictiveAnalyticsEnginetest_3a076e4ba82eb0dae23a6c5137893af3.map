{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/engines/__tests__/predictiveAnalyticsEngine.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/engines/__tests__/predictiveAnalyticsEngine.test.ts"],"sourcesContent":["import { PredictiveAnalyticsEngine } from '../predictiveAnalyticsEngine';\nimport { AnalyticsEvent, PredictiveConfig, PredictionResult, ForecastResult, AnomalyDetection } from '../../../../types';\n\ndescribe('PredictiveAnalyticsEngine', () => {\n    let engine: PredictiveAnalyticsEngine;\n    let mockEvents: AnalyticsEvent[];\n\n    beforeEach(() => {\n        const config: PredictiveConfig = {\n            enableAnomalyDetection: true,\n            enableTrendForecasting: true,\n            enableRiskAssessment: true,\n            modelUpdateInterval: 3600000,\n            anomalyThreshold: 2.0,\n            predictionHorizon: 24,\n            minTrainingDataSize: 10, // Lower for testing\n            confidenceThreshold: 0.5\n        };\n\n        engine = new PredictiveAnalyticsEngine(config);\n\n        // Create mock events for testing\n        mockEvents = [\n            {\n                id: 'event1',\n                type: 'command_executed',\n                timestamp: new Date('2024-01-01T10:00:00Z'),\n                userId: 'user1',\n                metadata: {\n                    success: true,\n                    duration: 1000,\n                    command: 'nxTest'\n                }\n            },\n            {\n                id: 'event2',\n                type: 'command_executed',\n                timestamp: new Date('2024-01-01T10:05:00Z'),\n                userId: 'user1',\n                metadata: {\n                    success: false,\n                    duration: 2000,\n                    command: 'nxTest'\n                }\n            },\n            {\n                id: 'event3',\n                type: 'performance_metric',\n                timestamp: new Date('2024-01-01T10:10:00Z'),\n                userId: 'user1',\n                metadata: {\n                    responseTime: 1500,\n                    value: 1500\n                }\n            },\n            {\n                id: 'event4',\n                type: 'performance_metric',\n                timestamp: new Date('2024-01-01T10:15:00Z'),\n                userId: 'user1',\n                metadata: {\n                    responseTime: 3000,\n                    value: 3000\n                }\n            },\n            {\n                id: 'event5',\n                type: 'resource_usage',\n                timestamp: new Date('2024-01-01T10:20:00Z'),\n                userId: 'user1',\n                metadata: {\n                    memoryUsage: 90,\n                    cpuUsage: 75\n                }\n            }\n        ];\n    });\n\n    afterEach(() => {\n        engine.dispose();\n    });\n\n    describe('initialization', () => {\n        it('should initialize with default models', () => {\n            const models = engine.getAvailableModels();\n            expect(models).toHaveLength(3);\n            expect(models.map(m => m.id)).toContain('command_failure');\n            expect(models.map(m => m.id)).toContain('performance_degradation');\n            expect(models.map(m => m.id)).toContain('resource_utilization');\n        });\n\n        it('should have correct model properties', () => {\n            const models = engine.getAvailableModels();\n            const commandFailureModel = models.find(m => m.id === 'command_failure');\n            \n            expect(commandFailureModel).toBeDefined();\n            expect(commandFailureModel!.name).toBe('Command Failure Prediction');\n            expect(commandFailureModel!.type).toBe('classification');\n            expect(commandFailureModel!.isActive).toBe(true);\n        });\n    });\n\n    describe('model training', () => {\n        it('should train models with sufficient data', async () => {\n            const events = Array.from({ length: 15 }, (_, i) => ({\n                id: `event${i}`,\n                type: 'command_executed',\n                timestamp: new Date(),\n                userId: 'user1',\n                metadata: { success: i % 2 === 0 }\n            }));\n\n            await expect(engine.trainModels(events)).resolves.not.toThrow();\n        });\n\n        it('should throw error with insufficient training data', async () => {\n            const events = Array.from({ length: 5 }, (_, i) => ({\n                id: `event${i}`,\n                type: 'command_executed',\n                timestamp: new Date(),\n                userId: 'user1',\n                metadata: { success: true }\n            }));\n\n            await expect(engine.trainModels(events)).rejects.toThrow('Insufficient training data');\n        });\n\n        it('should emit modelsTrained event', async () => {\n            const events = Array.from({ length: 15 }, (_, i) => ({\n                id: `event${i}`,\n                type: 'command_executed',\n                timestamp: new Date(),\n                userId: 'user1',\n                metadata: { success: true }\n            }));\n\n            let eventEmitted = false;\n            engine.on('modelsTrained', (data) => {\n                eventEmitted = true;\n                expect(data.modelCount).toBe(3);\n                expect(data.dataSize).toBe(15);\n            });\n\n            await engine.trainModels(events);\n            expect(eventEmitted).toBe(true);\n        });\n    });\n\n    describe('prediction generation', () => {\n        it('should generate predictions for high failure rate', async () => {\n            const commandEvents = Array.from({ length: 10 }, (_, i) => ({\n                id: `cmd${i}`,\n                type: 'command_executed',\n                timestamp: new Date(),\n                userId: 'user1',\n                metadata: { success: i < 3 } // 70% failure rate\n            }));\n\n            const predictions = await engine.generatePredictions(commandEvents);\n            \n            expect(predictions).toHaveLength(1);\n            expect(predictions[0].type).toBe('test-failure');\n            expect(predictions[0].probability).toBeGreaterThan(0);\n            expect(predictions[0].confidence).toBeGreaterThan(0);\n        });\n\n        it('should generate predictions for performance degradation', async () => {\n            const performanceEvents = Array.from({ length: 5 }, (_, i) => ({\n                id: `perf${i}`,\n                type: 'performance_metric',\n                timestamp: new Date(),\n                userId: 'user1',\n                metadata: { responseTime: 3000 + i * 100 } // High response times\n            }));\n\n            const predictions = await engine.generatePredictions(performanceEvents);\n            \n            expect(predictions).toHaveLength(1);\n            expect(predictions[0].type).toBe('performance-degradation');\n            expect(predictions[0].probability).toBeGreaterThan(0);\n        });\n\n        it('should generate predictions for resource utilization', async () => {\n            const resourceEvents = Array.from({ length: 5 }, (_, i) => ({\n                id: `res${i}`,\n                type: 'resource_usage',\n                timestamp: new Date(),\n                userId: 'user1',\n                metadata: { memoryUsage: 90 + i } // High memory usage\n            }));\n\n            const predictions = await engine.generatePredictions(resourceEvents);\n            \n            expect(predictions).toHaveLength(1);\n            expect(predictions[0].type).toBe('security-issue');\n            expect(predictions[0].probability).toBeGreaterThan(0);\n        });\n\n        it('should handle events without confidence property', async () => {\n            const events = [{\n                id: 'test1',\n                type: 'command_executed',\n                timestamp: new Date(),\n                userId: 'user1',\n                metadata: { success: false }\n            }];\n\n            // Should not throw error even if confidence is undefined\n            await expect(engine.generatePredictions(events)).resolves.not.toThrow();\n        });\n    });\n\n    describe('anomaly detection', () => {\n        it('should detect performance anomalies', async () => {\n            const events = [\n                {\n                    id: 'normal1',\n                    type: 'performance_metric',\n                    timestamp: new Date(),\n                    userId: 'user1',\n                    metadata: { value: 100 }\n                },\n                {\n                    id: 'normal2',\n                    type: 'performance_metric',\n                    timestamp: new Date(),\n                    userId: 'user1',\n                    metadata: { value: 110 }\n                },\n                {\n                    id: 'anomaly1',\n                    type: 'performance_metric',\n                    timestamp: new Date(),\n                    userId: 'user1',\n                    metadata: { value: 500 } // Significant deviation\n                }\n            ];\n\n            const anomalies = await engine.detectAnomalies(events);\n            \n            expect(anomalies).toHaveLength(1);\n            expect(anomalies[0].type).toBe('performance');\n            expect(anomalies[0].severity).toBe('high');\n        });\n\n        it('should return empty array when anomaly detection is disabled', async () => {\n            const config: PredictiveConfig = { enableAnomalyDetection: false };\n            const disabledEngine = new PredictiveAnalyticsEngine(config);\n            \n            const anomalies = await disabledEngine.detectAnomalies(mockEvents);\n            expect(anomalies).toHaveLength(0);\n            \n            disabledEngine.dispose();\n        });\n    });\n\n    describe('forecasting', () => {\n        it('should generate forecasts for metrics', async () => {\n            const events = [\n                {\n                    id: 'metric1',\n                    type: 'performance',\n                    timestamp: new Date(),\n                    userId: 'user1',\n                    metadata: { responseTime: 100 }\n                },\n                {\n                    id: 'metric2',\n                    type: 'performance',\n                    timestamp: new Date(),\n                    userId: 'user1',\n                    metadata: { responseTime: 110 }\n                },\n                {\n                    id: 'metric3',\n                    type: 'performance',\n                    timestamp: new Date(),\n                    userId: 'user1',\n                    metadata: { responseTime: 120 }\n                }\n            ];\n\n            const forecasts = await engine.generateForecasts(events, ['responseTime'], 24);\n            \n            expect(forecasts).toHaveLength(1);\n            expect(forecasts[0]).toHaveProperty('id');\n            expect(forecasts[0]).toHaveProperty('timeHorizon');\n            expect(forecasts[0]).toHaveProperty('dataPoints');\n            expect(forecasts[0].metric).toBe('responseTime');\n            expect(forecasts[0].horizon).toBe(24);\n            expect(forecasts[0].timeHorizon).toBe(24);\n            expect(forecasts[0].dataPoints).toBe(3);\n        });\n\n        it('should return empty array when forecasting is disabled', async () => {\n            const config: PredictiveConfig = { enableTrendForecasting: false };\n            const disabledEngine = new PredictiveAnalyticsEngine(config);\n            \n            const forecasts = await disabledEngine.generateForecasts(mockEvents, ['responseTime'], 24);\n            expect(forecasts).toHaveLength(0);\n            \n            disabledEngine.dispose();\n        });\n    });\n\n    describe('risk assessment', () => {\n        it('should perform comprehensive risk assessment', async () => {\n            const riskEvents = [\n                ...Array.from({ length: 5 }, (_, i) => ({\n                    id: `error${i}`,\n                    type: 'error',\n                    timestamp: new Date(),\n                    userId: 'user1',\n                    metadata: { message: 'Test error' }\n                })),\n                ...Array.from({ length: 5 }, (_, i) => ({\n                    id: `cmd${i}`,\n                    type: 'command_executed',\n                    timestamp: new Date(),\n                    userId: 'user1',\n                    metadata: { success: i < 2 } // 40% failure rate\n                }))\n            ];\n\n            const assessment = await engine.assessRisk(riskEvents);\n            \n            expect(assessment.overallRiskScore).toBeGreaterThan(0);\n            expect(assessment.riskLevel).toMatch(/^(low|medium|high)$/);\n            expect(assessment.recommendations).toBeInstanceOf(Array);\n            expect(assessment.assessedAt).toBeInstanceOf(Date);\n        });\n\n        it('should return low risk when risk assessment is disabled', async () => {\n            const config: PredictiveConfig = { enableRiskAssessment: false };\n            const disabledEngine = new PredictiveAnalyticsEngine(config);\n            \n            const assessment = await disabledEngine.assessRisk(mockEvents);\n            expect(assessment.riskLevel).toBe('low');\n            expect(assessment.overallRiskScore).toBe(0);\n            \n            disabledEngine.dispose();\n        });\n    });\n\n    describe('model management', () => {\n        it('should get model metrics', () => {\n            const metrics = engine.getModelMetrics('command_failure');\n            \n            expect(metrics).toHaveProperty('accuracy');\n            expect(metrics).toHaveProperty('precision');\n            expect(metrics).toHaveProperty('recall');\n            expect(metrics).toHaveProperty('f1Score');\n            expect(metrics).toHaveProperty('lastTrained');\n            expect(metrics).toHaveProperty('trainingDataSize');\n        });\n\n        it('should throw error for unknown model', () => {\n            expect(() => engine.getModelMetrics('unknown_model')).toThrow('Model not found: unknown_model');\n        });\n\n        it('should toggle model activation', () => {\n            let eventEmitted = false;\n            engine.on('modelToggled', (data) => {\n                eventEmitted = true;\n                expect(data.modelId).toBe('command_failure');\n                expect(data.isActive).toBe(false);\n            });\n\n            engine.toggleModel('command_failure', false);\n            \n            const models = engine.getAvailableModels();\n            const toggledModel = models.find(m => m.id === 'command_failure');\n            expect(toggledModel!.isActive).toBe(false);\n            expect(eventEmitted).toBe(true);\n        });\n    });\n\n    describe('disposal', () => {\n        it('should clean up resources on dispose', () => {\n            const models = engine.getAvailableModels();\n            expect(models).toHaveLength(3);\n\n            engine.dispose();\n\n            // After disposal, models should be cleared\n            const modelsAfterDispose = engine.getAvailableModels();\n            expect(modelsAfterDispose).toHaveLength(0);\n        });\n    });\n});\n"],"version":3}