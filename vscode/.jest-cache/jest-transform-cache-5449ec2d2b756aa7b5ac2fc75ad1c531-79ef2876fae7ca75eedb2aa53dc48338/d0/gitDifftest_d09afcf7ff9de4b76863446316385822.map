{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/gitDiff.test.ts","mappings":";;AAIA,kBAAkB;AAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;IACvB,SAAS,EAAE;QACP,gBAAgB,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,iBAAiB,EAAE,EAAE,CAAC;QAC1D,gBAAgB,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YAC7B,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,2CAA2C,CAAC;SAClE,CAAC,CAAC;KACN;IACD,MAAM,EAAE;QACJ,mBAAmB,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YAChC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;YACrB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;SAClB,CAAC,CAAC;KACN;CACJ,CAAC,CAAC,CAAC;AAEJ,mBAAmB;AACnB,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;AAGrC,qBAAqB;AACrB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;CACnB,CAAC,CAAC,CAAC;AA3BJ,wCAA4C;AAE5C,yDAAsD;AAoBtD,MAAM,iBAAiB,GAAG,yBAAmD,CAAC;AAO9E,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC5B,IAAI,cAA8B,CAAC;IACnC,IAAI,eAAyC,CAAC;IAC9C,IAAI,SAAmC,CAAC;IAExC,UAAU,CAAC,GAAG,EAAE;QACZ,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,yBAAyB;QACzB,eAAe,GAAG;YACd,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,gBAAgB,CAAC;YAC9D,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;YAChC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;YACrB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;YACpB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACtC,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,IAAI,IAAI,EAAE;gBACnB,QAAQ,EAAE,IAAI,IAAI,EAAE;gBACpB,QAAQ,EAAE,IAAI,IAAI,EAAE;aACvB,CAAC;SACE,CAAC;QAET,SAAS,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;QAE3C,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,CAAC;QAE5D,cAAc,GAAG,IAAI,wBAAc,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;QACjB,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACpE,UAAU;YACV,MAAM,OAAO,GAAmB,EAAE,CAAC;YACnC,MAAM,cAAc,GAAG;;;;;;;GAOhC,CAAC;YAEQ,6CAA6C;YAC7C,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,cAAqB,EAAE,mBAAmB,CAAC,CAAC;YAErF,qBAAqB;iBAChB,qBAAqB,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,6BAA6B;iBAC7G,qBAAqB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO;YAExG,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAErD,UAAU;YACV,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC3E,UAAU;YACV,MAAM,OAAO,GAAmB,EAAE,CAAC;YAEnC,6CAA6C;YAC7C,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,cAAqB,EAAE,mBAAmB,CAAC,CAAC;YAErF,qBAAqB;iBAChB,qBAAqB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,6BAA6B;iBAC5G,qBAAqB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,oCAAoC;iBACnH,qBAAqB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,0CAA0C;iBACzH,qBAAqB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,oBAAoB;YAEzG,MAAM;YACN,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAElC,SAAS;YACT,MAAM,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;YACxE,MAAM,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,CAAC,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,CAAC,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;YACxF,MAAM,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC;YAE7E,UAAU;YACV,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAChE,UAAU;YACV,MAAM,OAAO,GAAmB,EAAE,CAAC;YAEnC,6CAA6C;YAC7C,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,cAAqB,EAAE,mBAAmB,CAAC,CAAC;YAErF,qBAAqB;iBAChB,qBAAqB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,6BAA6B;iBAC5G,qBAAqB,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,qCAAqC;iBACrH,qBAAqB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB;YAEnH,MAAM;YACN,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAElC,SAAS;YACT,MAAM,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;YACxE,MAAM,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,CAAC,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;YAEzE,UAAU;YACV,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAC9C,UAAU;YACV,MAAM,OAAO,GAAmB,EAAE,CAAC;YAEnC,uDAAuD;YACvD,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,cAAqB,EAAE,mBAAmB,CAAC,CAAC;YACrF,qBAAqB,CAAC,qBAAqB,CAAC;gBACxC,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,CAAC;gBACX,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,eAAe;gBACtB,QAAQ,EAAE,CAAC;aACd,CAAC,CAAC;YAEH,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAE3C,UAAU;YACV,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YACzD,UAAU;YACV,MAAM,OAAO,GAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;YAEjD,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAChE,UAAU;YACV,MAAM,OAAO,GAAmB,EAAE,CAAC;YAEnC,6CAA6C;YAC7C,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,cAAqB,EAAE,mBAAmB,CAAC,CAAC;YAErF,qBAAqB;iBAChB,qBAAqB,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,6BAA6B;iBAC7G,qBAAqB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,sBAAsB;YAE3G,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAClD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAClB,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CACjD,CAAC;YAEF,UAAU;YACV,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACtD,UAAU;YACV,MAAM,UAAU,GAAG;;;;;;;;;;;;;;;;;sBAiBT,CAAC;YAEX,MAAM;YACN,MAAM,MAAM,GAAI,cAAsB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAEtE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;YAC3D,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;YACnE,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACvC,UAAU;YACV,MAAM,UAAU,GAAG,EAAE,CAAC;YAEtB,MAAM;YACN,MAAM,MAAM,GAAI,cAAsB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAEtE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAC9C,UAAU;YACV,MAAM,UAAU,GAAG;;;;;mCAKI,CAAC;YAExB,MAAM;YACN,MAAM,MAAM,GAAI,cAAsB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAEpE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACtD,UAAU;YACV,MAAM,UAAU,GAAG;;;uCAGQ,CAAC;YAE5B,MAAM;YACN,MAAM,MAAM,GAAI,cAAsB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAEpE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;YACnD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,+CAA+C,CAAC,CAAC;YAC1E,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,oCAAoC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACjD,UAAU;YACV,MAAM,UAAU,GAAG;;;;;;;;;;eAUhB,CAAC;YAEJ,MAAM;YACN,MAAM,MAAM,GAAI,cAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAErE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YACxD,UAAU;YACV,MAAM,MAAM,GAAG;;;;;kBAKT,CAAC;YAEP,MAAM;YACN,MAAM,MAAM,GAAI,cAAsB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAEjE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACvD,UAAU;YACV,MAAM,MAAM,GAAG,mCAAmC,CAAC;YAEnD,MAAM;YACN,MAAM,MAAM,GAAI,cAAsB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAEjE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACvD,MAAM;YACN,MAAM,MAAM,GAAI,cAAsB,CAAC,qBAAqB,EAAE,CAAC;YAE/D,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YAC/C,6CAA6C;YAC7C,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,cAAqB,EAAE,mBAAmB,CAAC,CAAC;YACrF,qBAAqB,CAAC,qBAAqB,CAAC;gBACxC,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,CAAC;gBACX,MAAM,EAAE,QAAQ;gBAChB,QAAQ,EAAE,CAAC;aACd,CAAC,CAAC;YAEH,MAAM;YACN,MAAM,MAAM,GAAG,MAAO,cAAsB,CAAC,gBAAgB,EAAE,CAAC;YAEhE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAE5B,UAAU;YACV,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC5D,uDAAuD;YACvD,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,cAAqB,EAAE,mBAAmB,CAAC,CAAC;YACrF,qBAAqB,CAAC,qBAAqB,CAAC;gBACxC,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,CAAC;gBACX,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,sBAAsB;gBAC7B,QAAQ,EAAE,CAAC;aACd,CAAC,CAAC;YAEH,MAAM;YACN,MAAM,MAAM,GAAG,MAAO,cAAsB,CAAC,gBAAgB,EAAE,CAAC;YAEhE,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAE/B,UAAU;YACV,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/gitDiff.test.ts"],"sourcesContent":["import { GitDiffCommand } from '../gitDiff';\nimport { CommandOptions } from '../../types';\nimport { FileManager } from '../../utils/fileManager';\n\n// Mock VSCode API\njest.mock('vscode', () => ({\n    workspace: {\n        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\n        getConfiguration: jest.fn(() => ({\n            get: jest.fn(() => '.github/instructions/ai_utilities_context')\n        }))\n    },\n    window: {\n        createOutputChannel: jest.fn(() => ({\n            appendLine: jest.fn(),\n            show: jest.fn()\n        }))\n    }\n}));\n\n// Mock FileManager\njest.mock('../../utils/fileManager');\nconst MockedFileManager = FileManager as jest.MockedClass<typeof FileManager>;\n\n// Mock child_process\njest.mock('child_process', () => ({\n    spawn: jest.fn()\n}));\n\ndescribe('GitDiffCommand', () => {\n    let gitDiffCommand: GitDiffCommand;\n    let mockFileManager: jest.Mocked<FileManager>;\n    let mockSpawn: jest.MockedFunction<any>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        // Setup FileManager mock\n        mockFileManager = {\n            getOutputFilePath: jest.fn().mockReturnValue('/test/diff.txt'),\n            ensureDirectoryExists: jest.fn(),\n            deleteFile: jest.fn(),\n            writeFile: jest.fn(),\n            getFileStats: jest.fn().mockResolvedValue({\n                size: 5120,\n                created: new Date(),\n                modified: new Date(),\n                accessed: new Date()\n            })\n        } as any;\n\n        mockSpawn = require('child_process').spawn;\n\n        MockedFileManager.mockImplementation(() => mockFileManager);\n        \n        gitDiffCommand = new GitDiffCommand();\n    });\n\n    describe('run', () => {\n        it('should execute git diff and create AI-optimized output', async () => {\n            // Arrange\n            const options: CommandOptions = {};\n            const mockDiffOutput = `diff --git a/file1.ts b/file1.ts\nindex 123..456 100644\n--- a/file1.ts\n+++ b/file1.ts\n@@ -1,3 +1,4 @@\n export class TestClass {\n+  newMethod() {}\n }`;\n\n            // Mock the executeGitCommand method directly\n            const mockExecuteGitCommand = jest.spyOn(gitDiffCommand as any, 'executeGitCommand');\n            \n            mockExecuteGitCommand\n                .mockResolvedValueOnce({ success: false, exitCode: 1, output: '', duration: 0 }) // diff --quiet (has changes)\n                .mockResolvedValueOnce({ success: true, exitCode: 0, output: mockDiffOutput, duration: 0 }); // diff\n\n            // Act\n            const result = await gitDiffCommand.run(options);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.exitCode).toBe(0);\n            expect(mockFileManager.writeFile).toHaveBeenCalled();\n            \n            // Cleanup\n            mockExecuteGitCommand.mockRestore();\n        }, 5000);\n\n        it('should detect smart diff when no changes in working directory', async () => {\n            // Arrange\n            const options: CommandOptions = {};\n\n            // Mock the executeGitCommand method directly\n            const mockExecuteGitCommand = jest.spyOn(gitDiffCommand as any, 'executeGitCommand');\n            \n            mockExecuteGitCommand\n                .mockResolvedValueOnce({ success: true, exitCode: 0, output: '', duration: 0 }) // diff --quiet (no unstaged)\n                .mockResolvedValueOnce({ success: true, exitCode: 0, output: '', duration: 0 }) // diff --cached --quiet (no staged)\n                .mockResolvedValueOnce({ success: true, exitCode: 0, output: '', duration: 0 }) // rev-parse --verify HEAD~1 (has commits)\n                .mockResolvedValueOnce({ success: true, exitCode: 0, output: '', duration: 0 }); // diff HEAD~1..HEAD\n\n            // Act\n            await gitDiffCommand.run(options);\n\n            // Assert\n            expect(mockExecuteGitCommand).toHaveBeenCalledWith(['diff', '--quiet']);\n            expect(mockExecuteGitCommand).toHaveBeenCalledWith(['diff', '--cached', '--quiet']);\n            expect(mockExecuteGitCommand).toHaveBeenCalledWith(['rev-parse', '--verify', 'HEAD~1']);\n            expect(mockExecuteGitCommand).toHaveBeenCalledWith(['diff', 'HEAD~1..HEAD']);\n            \n            // Cleanup\n            mockExecuteGitCommand.mockRestore();\n        });\n\n        it('should use staged changes when no unstaged changes', async () => {\n            // Arrange\n            const options: CommandOptions = {};\n\n            // Mock the executeGitCommand method directly\n            const mockExecuteGitCommand = jest.spyOn(gitDiffCommand as any, 'executeGitCommand');\n            \n            mockExecuteGitCommand\n                .mockResolvedValueOnce({ success: true, exitCode: 0, output: '', duration: 0 }) // diff --quiet (no unstaged)\n                .mockResolvedValueOnce({ success: false, exitCode: 1, output: '', duration: 0 }) // diff --cached --quiet (has staged)\n                .mockResolvedValueOnce({ success: true, exitCode: 0, output: 'staged changes', duration: 0 }); // diff --cached\n\n            // Act\n            await gitDiffCommand.run(options);\n\n            // Assert\n            expect(mockExecuteGitCommand).toHaveBeenCalledWith(['diff', '--quiet']);\n            expect(mockExecuteGitCommand).toHaveBeenCalledWith(['diff', '--cached', '--quiet']);\n            expect(mockExecuteGitCommand).toHaveBeenCalledWith(['diff', '--cached']);\n            \n            // Cleanup\n            mockExecuteGitCommand.mockRestore();\n        }, 5000);\n\n        it('should handle git command errors', async () => {\n            // Arrange\n            const options: CommandOptions = {};\n\n            // Mock the executeGitCommand method to return an error\n            const mockExecuteGitCommand = jest.spyOn(gitDiffCommand as any, 'executeGitCommand');\n            mockExecuteGitCommand.mockResolvedValueOnce({ \n                success: false, \n                exitCode: 1, \n                output: '', \n                error: 'Git not found',\n                duration: 0 \n            });\n\n            // Act\n            const result = await gitDiffCommand.run(options);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.error).toBe('Git not found');\n            \n            // Cleanup\n            mockExecuteGitCommand.mockRestore();\n        }, 5000);\n\n        it('should skip diff when noDiff option is true', async () => {\n            // Arrange\n            const options: CommandOptions = { noDiff: true };\n\n            // Act\n            const result = await gitDiffCommand.run(options);\n\n            // Assert\n            expect(mockSpawn).not.toHaveBeenCalled();\n        });\n\n        it('should create no changes output when diff is empty', async () => {\n            // Arrange\n            const options: CommandOptions = {};\n\n            // Mock the executeGitCommand method directly\n            const mockExecuteGitCommand = jest.spyOn(gitDiffCommand as any, 'executeGitCommand');\n            \n            mockExecuteGitCommand\n                .mockResolvedValueOnce({ success: false, exitCode: 1, output: '', duration: 0 }) // diff --quiet (has changes)\n                .mockResolvedValueOnce({ success: true, exitCode: 0, output: '', duration: 0 }); // diff (empty output)\n\n            // Act\n            const result = await gitDiffCommand.run(options);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(mockFileManager.writeFile).toHaveBeenCalledWith(\n                expect.any(String),\n                expect.stringContaining('No changes detected')\n            );\n            \n            // Cleanup\n            mockExecuteGitCommand.mockRestore();\n        });\n    });\n\n    describe('analyzeDiffChanges', () => {\n        it('should analyze different types of file changes', () => {\n            // Arrange\n            const diffOutput = `diff --git a/new-file.ts b/new-file.ts\nnew file mode 100644\nindex 000..123\n--- /dev/null\n+++ b/new-file.ts\ndiff --git a/modified-file.ts b/modified-file.ts\nindex 123..456 100644\n--- a/modified-file.ts\n+++ b/modified-file.ts\ndiff --git a/deleted-file.ts b/deleted-file.ts\ndeleted file mode 100644\nindex 123..000\n--- a/deleted-file.ts\n+++ /dev/null\ndiff --git a/old-name.ts b/new-name.ts\nsimilarity index 100%\nrename from old-name.ts\nrename to new-name.ts`;\n\n            // Act\n            const result = (gitDiffCommand as any).analyzeDiffChanges(diffOutput);\n\n            // Assert\n            expect(result.newFiles).toContain('new-file.ts');\n            expect(result.modifiedFiles).toContain('modified-file.ts');\n            expect(result.deletedFiles).toContain('deleted-file.ts');\n            expect(result.renamedFiles).toContain('old-name.ts → new-name.ts');\n            expect(result.totalChanges).toBe(4);\n        });\n\n        it('should handle empty diff output', () => {\n            // Arrange\n            const diffOutput = '';\n\n            // Act\n            const result = (gitDiffCommand as any).analyzeDiffChanges(diffOutput);\n\n            // Assert\n            expect(result.newFiles).toEqual([]);\n            expect(result.modifiedFiles).toEqual([]);\n            expect(result.deletedFiles).toEqual([]);\n            expect(result.renamedFiles).toEqual([]);\n            expect(result.totalChanges).toBe(0);\n        });\n    });\n\n    describe('analyzeFileTypes', () => {\n        it('should categorize different file types', () => {\n            // Arrange\n            const diffOutput = `diff --git a/component.ts b/component.ts\ndiff --git a/component.spec.ts b/component.spec.ts\ndiff --git a/template.html b/template.html\ndiff --git a/styles.css b/styles.css\ndiff --git a/config.json b/config.json\ndiff --git a/readme.md b/readme.md`;\n\n            // Act\n            const result = (gitDiffCommand as any).analyzeFileTypes(diffOutput);\n\n            // Assert\n            expect(result).toContain('TypeScript files: 1');\n            expect(result).toContain('Test files: 1');\n            expect(result).toContain('Templates: 1');\n            expect(result).toContain('Styles: 1');\n            expect(result).toContain('Config/JSON: 1');\n            expect(result).toContain('Other: 1');\n        });\n\n        it('should provide AI insights based on file types', () => {\n            // Arrange\n            const diffOutput = `diff --git a/component.spec.ts b/component.spec.ts\ndiff --git a/service.ts b/service.ts\ndiff --git a/other.ts b/other.ts\ndiff --git a/config.json b/config.json`;\n\n            // Act\n            const result = (gitDiffCommand as any).analyzeFileTypes(diffOutput);\n\n            // Assert\n            expect(result).toContain('🧪 Test files modified');\n            expect(result).toContain('⚠️  More source files than test files changed');\n            expect(result).toContain('⚙️  Configuration changes detected');\n        });\n    });\n\n    describe('addFileSeparators', () => {\n        it('should add file separators to diff output', () => {\n            // Arrange\n            const diffOutput = `diff --git a/file1.ts b/file1.ts\nindex 123..456\n--- a/file1.ts\n+++ b/file1.ts\n@@ -1 +1,2 @@\n line1\n+line2\ndiff --git a/file2.ts b/file2.ts\nindex 456..789\n--- a/file2.ts\n+++ b/file2.ts`;\n\n            // Act\n            const result = (gitDiffCommand as any).addFileSeparators(diffOutput);\n\n            // Assert\n            expect(result).toContain('📁 FILE: file1.ts');\n            expect(result).toContain('📁 FILE: file2.ts');\n            expect(result).toContain('─'.repeat(40));\n        });\n    });\n\n    describe('countChangedFiles', () => {\n        it('should count changed files from processed output', () => {\n            // Arrange\n            const output = `📁 FILE: file1.ts\nSome content\n📁 FILE: file2.ts\nMore content\n📁 FILE: file3.ts\nEven more content`;\n\n            // Act\n            const result = (gitDiffCommand as any).countChangedFiles(output);\n\n            // Assert\n            expect(result).toBe(3);\n        });\n\n        it('should return 0 for output without file markers', () => {\n            // Arrange\n            const output = 'Some content without file markers';\n\n            // Act\n            const result = (gitDiffCommand as any).countChangedFiles(output);\n\n            // Assert\n            expect(result).toBe(0);\n        });\n    });\n\n    describe('createNoChangesOutput', () => {\n        it('should create informative output for no changes', () => {\n            // Act\n            const result = (gitDiffCommand as any).createNoChangesOutput();\n\n            // Assert\n            expect(result).toContain('No changes detected');\n            expect(result).toContain('Working directory: Clean');\n            expect(result).toContain('Staged changes: None');\n            expect(result).toContain('AI ANALYSIS CONTEXT');\n        });\n    });\n\n    describe('getCurrentBranch', () => {\n        it('should return current branch name', async () => {\n            // Mock the executeGitCommand method directly\n            const mockExecuteGitCommand = jest.spyOn(gitDiffCommand as any, 'executeGitCommand');\n            mockExecuteGitCommand.mockResolvedValueOnce({ \n                success: true, \n                exitCode: 0, \n                output: 'main\\n',\n                duration: 0 \n            });\n\n            // Act\n            const result = await (gitDiffCommand as any).getCurrentBranch();\n\n            // Assert\n            expect(result).toBe('main');\n            \n            // Cleanup\n            mockExecuteGitCommand.mockRestore();\n        });\n\n        it('should return \"unknown\" when git command fails', async () => {\n            // Mock the executeGitCommand method to return an error\n            const mockExecuteGitCommand = jest.spyOn(gitDiffCommand as any, 'executeGitCommand');\n            mockExecuteGitCommand.mockResolvedValueOnce({ \n                success: false, \n                exitCode: 1, \n                output: '',\n                error: 'Not a git repository',\n                duration: 0 \n            });\n\n            // Act\n            const result = await (gitDiffCommand as any).getCurrentBranch();\n\n            // Assert\n            expect(result).toBe('unknown');\n            \n            // Cleanup\n            mockExecuteGitCommand.mockRestore();\n        });\n    });\n});\n"],"version":3}