f510fa4739343da36c53b49013318c45
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitDiffManager = void 0;
const vscode = __importStar(require("vscode"));
const child_process_1 = require("child_process");
class GitDiffManager {
    context;
    workspaceRoot;
    gitApi;
    repository;
    constructor(context) {
        this.context = context;
        this.workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
        this.initializeGitApi();
    }
    async initializeGitApi() {
        try {
            const gitExtension = vscode.extensions.getExtension('vscode.git');
            if (!gitExtension) {
                console.warn('Git extension not found');
                return;
            }
            const git = gitExtension.isActive ? gitExtension.exports : await gitExtension.activate();
            this.gitApi = git.getAPI(1);
            if (this.gitApi.repositories.length > 0) {
                this.repository = this.gitApi.repositories[0];
            }
        }
        catch (error) {
            console.error('Failed to initialize Git API:', error);
        }
    }
    async getCommitHistory(maxCount = 50) {
        try {
            const commits = await this.executeGitCommand([
                'log',
                '--oneline',
                '--max-count',
                maxCount.toString(),
                '--pretty=format:%H|%s|%an|%ad|%P',
                '--date=short'
            ]);
            return commits.map(line => this.parseCommitLine(line));
        }
        catch (error) {
            console.error('Failed to get commit history:', error);
            return [];
        }
    }
    parseCommitLine(line) {
        const parts = line.split('|');
        return {
            hash: parts[0] || '',
            message: parts[1] || '',
            author: parts[2] || '',
            date: parts[3] || '',
            parents: parts[4] ? parts[4].split(' ') : []
        };
    }
    async getBranches() {
        try {
            const localBranches = await this.executeGitCommand(['branch']);
            const remoteBranches = await this.executeGitCommand(['branch', '-r']);
            const branches = [];
            // Parse local branches
            localBranches.forEach(line => {
                const trimmed = line.trim();
                if (trimmed) {
                    const isHead = trimmed.startsWith('* ');
                    const name = isHead ? trimmed.substring(2) : trimmed;
                    branches.push({ name, isRemote: false, isHead });
                }
            });
            // Parse remote branches
            remoteBranches.forEach(line => {
                const trimmed = line.trim();
                if (trimmed && !trimmed.includes('HEAD')) {
                    const name = trimmed.replace(/^origin\//, '');
                    // Only add if not already exists as local branch
                    if (!branches.some(b => b.name === name)) {
                        branches.push({ name, isRemote: true, isHead: false });
                    }
                }
            });
            return branches;
        }
        catch (error) {
            console.error('Failed to get branches:', error);
            return [];
        }
    }
    async getCurrentBranch() {
        try {
            const result = await this.executeGitCommand(['rev-parse', '--abbrev-ref', 'HEAD']);
            return result[0] || 'main';
        }
        catch (error) {
            console.error('Failed to get current branch:', error);
            return 'main';
        }
    }
    async getBranchDiff(branch1, branch2) {
        try {
            const diffOutput = await this.executeGitCommand([
                'diff',
                '--name-status',
                `${branch1}...${branch2}`
            ]);
            const files = this.parseDiffOutput(diffOutput);
            // Get detailed diff stats
            const statsOutput = await this.executeGitCommand([
                'diff',
                '--stat',
                `${branch1}...${branch2}`
            ]);
            const stats = this.parseDiffStats(statsOutput);
            return {
                files,
                additions: stats.additions,
                deletions: stats.deletions,
                summary: `${files.length} files changed, ${stats.additions} insertions(+), ${stats.deletions} deletions(-)`
            };
        }
        catch (error) {
            console.error('Failed to get branch diff:', error);
            return { files: [], additions: 0, deletions: 0, summary: 'Failed to get diff' };
        }
    }
    async getCommitDiff(commit1, commit2) {
        try {
            const diffOutput = await this.executeGitCommand([
                'diff',
                '--name-status',
                commit1,
                commit2
            ]);
            const files = this.parseDiffOutput(diffOutput);
            // Get detailed diff stats
            const statsOutput = await this.executeGitCommand([
                'diff',
                '--stat',
                commit1,
                commit2
            ]);
            const stats = this.parseDiffStats(statsOutput);
            return {
                files,
                additions: stats.additions,
                deletions: stats.deletions,
                summary: `${files.length} files changed, ${stats.additions} insertions(+), ${stats.deletions} deletions(-)`
            };
        }
        catch (error) {
            console.error('Failed to get commit diff:', error);
            return { files: [], additions: 0, deletions: 0, summary: 'Failed to get diff' };
        }
    }
    async getInteractiveDiff(commit1, commit2) {
        try {
            const diffOutput = await this.executeGitCommandRaw([
                'diff',
                '--unified=3',
                '--color=never',
                commit1,
                commit2
            ]);
            return diffOutput;
        }
        catch (error) {
            console.error('Failed to get interactive diff:', error);
            return `Failed to get diff: ${error.message}`;
        }
    }
    async getFileDiff(commit1, commit2, filePath) {
        try {
            const diffOutput = await this.executeGitCommandRaw([
                'diff',
                '--unified=3',
                '--color=never',
                commit1,
                commit2,
                '--',
                filePath
            ]);
            return diffOutput;
        }
        catch (error) {
            console.error('Failed to get file diff:', error);
            return `Failed to get diff for ${filePath}: ${error.message}`;
        }
    }
    parseDiffOutput(diffOutput) {
        const files = [];
        diffOutput.forEach(line => {
            const trimmed = line.trim();
            if (trimmed) {
                const parts = trimmed.split('\t');
                if (parts.length >= 2) {
                    const status = this.mapGitStatus(parts[0]);
                    const path = parts[1];
                    files.push({ path, status });
                }
            }
        });
        return files;
    }
    mapGitStatus(status) {
        switch (status.charAt(0)) {
            case 'A': return 'added';
            case 'M': return 'modified';
            case 'D': return 'deleted';
            case 'R': return 'renamed';
            default: return 'modified';
        }
    }
    parseDiffStats(statsOutput) {
        let additions = 0;
        let deletions = 0;
        const summary = statsOutput[statsOutput.length - 1];
        if (summary) {
            const insertMatch = summary.match(/(\d+) insertions?\(\+\)/);
            const deleteMatch = summary.match(/(\d+) deletions?\(\-\)/);
            if (insertMatch) {
                additions = parseInt(insertMatch[1], 10);
            }
            if (deleteMatch) {
                deletions = parseInt(deleteMatch[1], 10);
            }
        }
        return { additions, deletions };
    }
    async executeGitCommand(args) {
        const output = await this.executeGitCommandRaw(args);
        return output.trim().split('\n').filter(line => line.length > 0);
    }
    async executeGitCommandRaw(args) {
        return new Promise((resolve, reject) => {
            const child = (0, child_process_1.spawn)('git', args, {
                cwd: this.workspaceRoot,
                stdio: 'pipe',
                shell: process.platform === 'win32'
            });
            let output = '';
            let errorOutput = '';
            child.stdout.on('data', (data) => {
                output += data.toString();
            });
            child.stderr.on('data', (data) => {
                errorOutput += data.toString();
            });
            child.on('close', (code) => {
                if (code === 0) {
                    resolve(output);
                }
                else {
                    reject(new Error(`Git command failed with code ${code}: ${errorOutput}`));
                }
            });
            child.on('error', (error) => {
                reject(new Error(`Failed to execute git command: ${error.message}`));
            });
            // Set timeout for long-running commands
            setTimeout(() => {
                child.kill();
                reject(new Error('Git command timeout'));
            }, 30000);
        });
    }
    async isGitRepository() {
        try {
            await this.executeGitCommand(['rev-parse', '--git-dir']);
            return true;
        }
        catch (error) {
            return false;
        }
    }
    dispose() {
        // Clean up any resources if needed
    }
}
exports.GitDiffManager = GitDiffManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,