c6354400fe35f4b217e112c0d015a7b0
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock VSCode completely for integration tests
jest.mock('vscode', () => ({
    StatusBarAlignment: {
        Left: 1,
        Right: 2
    },
    Uri: {
        joinPath: jest.fn(() => ({ toString: () => 'mock://uri' })),
        parse: jest.fn(() => ({ toString: () => 'mock://uri' }))
    },
    workspace: {
        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],
        getConfiguration: jest.fn(() => ({
            get: jest.fn(() => true)
        }))
    },
    window: {
        createStatusBarItem: jest.fn(() => ({
            show: jest.fn(),
            hide: jest.fn(),
            dispose: jest.fn(),
            text: '',
            tooltip: '',
            command: ''
        })),
        showInformationMessage: jest.fn(),
        showErrorMessage: jest.fn(),
        createOutputChannel: jest.fn(() => ({
            append: jest.fn(),
            appendLine: jest.fn(),
            show: jest.fn(),
            hide: jest.fn(),
            dispose: jest.fn()
        }))
    }
}));
const provider_1 = require("../webview/provider");
const statusTracker_1 = require("../utils/statusTracker");
const vscode = __importStar(require("vscode"));
describe('Integration Tests', () => {
    let provider;
    let mockProjectDetector;
    let mockCommandRunner;
    let mockFileManager;
    let mockWebviewView;
    let mockWebview;
    let receivedMessages = [];
    beforeEach(() => {
        jest.clearAllMocks();
        receivedMessages = [];
        // Setup mocked dependencies
        mockProjectDetector = {
            getProjects: jest.fn().mockResolvedValue([
                { name: 'test-app', root: 'apps/test-app', projectType: 'application' }
            ]),
            getCurrentProject: jest.fn().mockResolvedValue({ name: 'test-app', root: 'apps/test-app', projectType: 'application' })
        };
        mockCommandRunner = {
            runAiDebug: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'AI debug complete', duration: 2000 }),
            runNxTest: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'Tests passed', duration: 5000 }),
            runGitDiff: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'Diff complete', duration: 1000 }),
            runPrepareToPush: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'Prepared to push', duration: 3000 })
        };
        mockFileManager = {
            watchFiles: jest.fn(),
            getFileContent: jest.fn().mockResolvedValue('test file content'),
            openFile: jest.fn()
        };
        // Setup webview mocks that capture messages
        mockWebview = {
            asWebviewUri: jest.fn().mockReturnValue('mock://webview-uri'),
            postMessage: jest.fn((message) => {
                receivedMessages.push(message);
                return Promise.resolve(true);
            }),
            onDidReceiveMessage: jest.fn(),
            html: '',
            options: {}
        };
        mockWebviewView = {
            webview: mockWebview,
            show: jest.fn()
        };
        // Create provider
        const mockStatusTracker = new statusTracker_1.StatusTracker();
        provider = new provider_1.WebviewProvider(vscode.Uri.parse('test://extension'), mockProjectDetector, mockCommandRunner, mockFileManager, mockStatusTracker);
    });
    describe('webview integration', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should handle runCommand message for nxTest', async () => {
            // Arrange
            const message = {
                command: 'runCommand',
                data: {
                    action: 'nxTest',
                    project: 'test-app',
                    options: {}
                }
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(mockCommandRunner.runNxTest).toHaveBeenCalledWith('test-app', {});
            expect(receivedMessages.some(msg => msg.type === 'commandResult')).toBe(true);
            const resultMessage = receivedMessages.find(msg => msg.type === 'commandResult');
            expect(resultMessage.data.action).toBe('nxTest');
            expect(resultMessage.data.result.success).toBe(true);
        });
        it('should handle runCommand message for gitDiff', async () => {
            // Arrange
            const message = {
                command: 'runCommand',
                data: {
                    action: 'gitDiff',
                    options: {}
                }
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(mockCommandRunner.runGitDiff).toHaveBeenCalledWith({});
            expect(receivedMessages.some(msg => msg.type === 'commandResult')).toBe(true);
        });
        it('should handle runCommand message for aiDebug', async () => {
            // Arrange
            const message = {
                command: 'runCommand',
                data: {
                    action: 'aiDebug',
                    project: 'test-app',
                    options: {}
                }
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(mockCommandRunner.runAiDebug).toHaveBeenCalledWith('test-app', {});
            expect(receivedMessages.some(msg => msg.type === 'commandResult')).toBe(true);
        });
        it('should handle getProjects message', async () => {
            // Arrange
            const message = {
                command: 'getProjects',
                data: {}
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(mockProjectDetector.getProjects).toHaveBeenCalled();
            expect(receivedMessages.some(msg => msg.type === 'projects')).toBe(true);
            const projectsMessage = receivedMessages.find(msg => msg.type === 'projects');
            expect(projectsMessage.data.projects).toHaveLength(1);
            expect(projectsMessage.data.projects[0].name).toBe('test-app');
        });
        it('should handle openFile message', async () => {
            // Arrange
            const message = {
                command: 'openFile',
                data: {
                    filePath: '/test/file.ts'
                }
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(mockFileManager.openFile).toHaveBeenCalledWith('/test/file.ts');
        });
        it('should handle clearOutput message', async () => {
            // Arrange
            const message = {
                command: 'clearOutput',
                data: {}
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(receivedMessages.some(msg => msg.type === 'outputCleared')).toBe(true);
        });
        it('should handle unknown message command', async () => {
            // Arrange
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            const message = {
                command: 'unknownCommand',
                data: {}
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(consoleSpy).toHaveBeenCalledWith('Unknown message command:', 'unknownCommand');
            consoleSpy.mockRestore();
        });
        it('should handle command errors gracefully', async () => {
            // Arrange
            mockCommandRunner.runNxTest.mockRejectedValue(new Error('Command failed'));
            const message = {
                command: 'runCommand',
                data: {
                    action: 'nxTest',
                    project: 'test-app'
                }
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(receivedMessages.some(msg => msg.type === 'commandError')).toBe(true);
            const errorMessage = receivedMessages.find(msg => msg.type === 'commandError');
            expect(errorMessage.data.action).toBe('nxTest');
            expect(errorMessage.data.error).toBe('Command failed');
        });
        it('should handle project detection errors', async () => {
            // Arrange
            mockProjectDetector.getProjects.mockRejectedValue(new Error('Project detection failed'));
            const message = {
                command: 'getProjects',
                data: {}
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(receivedMessages.some(msg => msg.type === 'error')).toBe(true);
            const errorMessage = receivedMessages.find(msg => msg.type === 'error');
            expect(errorMessage.data.error).toBe('Project detection failed');
        });
        it('should handle file operation errors', async () => {
            // Arrange
            mockFileManager.openFile.mockRejectedValue(new Error('File not found'));
            const message = {
                command: 'openFile',
                data: {
                    filePath: '/non/existent/file.ts'
                }
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(receivedMessages.some(msg => msg.type === 'error')).toBe(true);
            const errorMessage = receivedMessages.find(msg => msg.type === 'error');
            expect(errorMessage.data.error).toBe('File not found');
        });
        it('should handle invalid action in runCommand', async () => {
            // Arrange
            vscode.window.showErrorMessage = jest.fn();
            const message = {
                command: 'runCommand',
                data: {
                    action: 'invalidAction',
                    project: 'test-app'
                }
            };
            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(receivedMessages.some(msg => msg.type === 'commandError')).toBe(true);
            const errorMessage = receivedMessages.find(msg => msg.type === 'commandError');
            expect(errorMessage.data.error).toContain('Unknown action: invalidAction');
        });
    });
    describe('webview setup', () => {
        it('should set up webview correctly', () => {
            // Act
            provider.resolveWebviewView(mockWebviewView, {}, {});
            // Assert
            expect(mockWebviewView.webview.options.enableScripts).toBe(true);
            expect(mockWebviewView.webview.options.localResourceRoots).toEqual([vscode.Uri.parse('test://extension')]);
            expect(mockWebviewView.webview.html).toContain('<!DOCTYPE html>');
            expect(mockWebviewView.webview.onDidReceiveMessage).toHaveBeenCalled();
            expect(mockFileManager.watchFiles).toHaveBeenCalled();
        });
        it('should set up file watcher', () => {
            // Arrange
            provider.resolveWebviewView(mockWebviewView, {}, {});
            // Get the file watcher callback
            const watchFilesCallback = mockFileManager.watchFiles.mock.calls[0][0];
            // Act
            watchFilesCallback('/test/file.ts', 'modified');
            // Assert
            expect(receivedMessages.some(msg => msg.type === 'fileChanged')).toBe(true);
            const fileChangedMessage = receivedMessages.find(msg => msg.type === 'fileChanged');
            expect(fileChangedMessage.data.filePath).toBe('/test/file.ts');
            expect(fileChangedMessage.data.eventType).toBe('modified');
        });
        it('should generate correct HTML for webview', () => {
            // Act
            provider.resolveWebviewView(mockWebviewView, {}, {});
            // Assert
            const html = mockWebviewView.webview.html;
            expect(html).toContain('<!DOCTYPE html>');
            expect(html).toContain('<title>AI Debug Utilities</title>');
            expect(html).toContain('<div id="root"></div>');
            expect(html).toContain('mock://webview-uri');
        });
    });
    describe('public methods', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should show webview when show() is called', () => {
            // Act
            provider.show();
            // Assert
            expect(mockWebviewView.show).toHaveBeenCalled();
        });
        it('should run command when runCommand() is called', async () => {
            // Act
            await provider.runCommand('nxTest', { project: 'test-app' });
            // Assert
            expect(mockCommandRunner.runNxTest).toHaveBeenCalledWith('test-app', undefined);
        });
        it('should dispose cleanly', () => {
            // Act
            provider.dispose();
            // Assert - should not throw
            expect(() => provider.dispose()).not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,