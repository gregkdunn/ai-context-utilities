{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/integration.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/integration.test.ts"],"sourcesContent":["import { AiDebugCommand } from '../aiDebug';\nimport { NxTestCommand } from '../nxTest';\nimport { GitDiffCommand } from '../gitDiff';\nimport { PrepareToPushCommand } from '../prepareToPush';\nimport { CommandRunner } from '../../utils/shellRunner';\nimport { FileManager } from '../../utils/fileManager';\n\n// Mock VSCode API\njest.mock('vscode', () => ({\n    workspace: {\n        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\n        getConfiguration: jest.fn(() => ({\n            get: jest.fn(() => '.github/instructions/ai_utilities_context')\n        }))\n    },\n    window: {\n        createOutputChannel: jest.fn(() => ({\n            appendLine: jest.fn(),\n            show: jest.fn()\n        }))\n    }\n}));\n\n// Mock child_process\njest.mock('child_process', () => ({\n    spawn: jest.fn()\n}));\n\n// Mock fs\njest.mock('fs', () => ({\n    promises: {\n        unlink: jest.fn(),\n        copyFile: jest.fn(),\n        readFile: jest.fn(),\n        writeFile: jest.fn()\n    },\n    existsSync: jest.fn(),\n    statSync: jest.fn(),\n    readFileSync: jest.fn(),\n    writeFileSync: jest.fn(),\n    mkdirSync: jest.fn(),\n    unlinkSync: jest.fn(),\n    createWriteStream: jest.fn()\n}));\n\ndescribe('Commands Integration Tests', () => {\n    let commandRunner: CommandRunner;\n    let mockSpawn: jest.MockedFunction<any>;\n    let mockFs: jest.Mocked<any>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        mockSpawn = require('child_process').spawn;\n        mockFs = require('fs');\n        \n        // Setup default file system behavior\n        mockFs.existsSync.mockReturnValue(true);\n        mockFs.statSync.mockReturnValue({ size: 1000, mtime: new Date() });\n        mockFs.readFileSync.mockReturnValue('test content');\n        mockFs.promises.readFile.mockResolvedValue('test content');\n        mockFs.promises.writeFile.mockResolvedValue(undefined);\n        mockFs.createWriteStream.mockReturnValue({\n            write: jest.fn(),\n            end: jest.fn()\n        });\n        \n        const mockOutputChannel = {\n            appendLine: jest.fn(),\n            show: jest.fn()\n        } as any;\n        commandRunner = new CommandRunner(mockOutputChannel);\n    });\n\n    describe('Full AI Debug Workflow', () => {\n        it('should run complete aiDebug workflow with passing tests', async () => {\n            // Arrange - Setup successful test execution\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10); // Success\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Simulate test output\n            mockProcess.stdout.on.mockImplementation((event, callback) => {\n                if (event === 'data') {\n                    setTimeout(() => callback(Buffer.from(`\nPASS src/app/component.spec.ts\n✓ should create (123 ms)\n✓ should initialize (45 ms)\n\nTest Suites: 1 passed, 1 total\nTests: 2 passed, 2 total\nTime: 2.345 s\n                    `)), 5);\n                }\n            });\n\n            const project = 'test-project';\n\n            // Act\n            const result = await commandRunner.runAiDebug(project, {\n                quick: false,\n                fullContext: false,\n                noDiff: false,\n                focus: 'tests'\n            });\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.exitCode).toBe(0);\n            expect(result.output).toContain('AI Debug completed');\n            \n            // Verify multiple commands were called (git diff, nx test, lint, prettier)\n            expect(mockSpawn).toHaveBeenCalledTimes(4);\n        });\n\n        it('should handle failing tests gracefully', async () => {\n            // Arrange - Setup failing test execution\n            let callCount = 0;\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        callCount++;\n                        // First call (git diff): success\n                        // Second call (nx test): failure\n                        const exitCode = callCount === 2 ? 1 : 0;\n                        setTimeout(() => callback(exitCode), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Simulate test failure output\n            mockProcess.stdout.on.mockImplementation((event, callback) => {\n                if (event === 'data') {\n                    const output = callCount === 1 ? 'diff output' : `\nFAIL src/app/component.spec.ts\n● Component › should work\n  expect(received).toBe(expected)\n  Expected: true\n  Received: false\n\nTest Suites: 1 failed, 1 total\nTests: 1 failed, 1 total\nTime: 1.234 s\n                    `;\n                    setTimeout(() => callback(Buffer.from(output)), 5);\n                }\n            });\n\n            const project = 'test-project';\n\n            // Act\n            const result = await commandRunner.runAiDebug(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            \n            // Should not run lint/prettier when tests fail\n            expect(mockSpawn).toHaveBeenCalledTimes(2); // Only git diff and nx test\n        });\n    });\n\n    describe('Command Interaction Tests', () => {\n        it('should run nxTest independently', async () => {\n            // Arrange\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await commandRunner.runNxTest('test-project', {\n                fullOutput: true\n            });\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(mockSpawn).toHaveBeenCalledWith(\n                'yarn',\n                ['nx', 'test', 'test-project', '--verbose'],\n                expect.any(Object)\n            );\n        });\n\n        it('should run gitDiff independently', async () => {\n            // Arrange\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await commandRunner.runGitDiff();\n\n            // Assert\n            expect(result.success).toBe(true);\n        });\n\n        it('should run prepareToPush independently', async () => {\n            // Arrange\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await commandRunner.runPrepareToPush('test-project');\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(mockSpawn).toHaveBeenCalledTimes(2); // lint + prettier\n        });\n    });\n\n    describe('Error Handling Integration', () => {\n        it('should handle file system errors gracefully', async () => {\n            // Arrange\n            mockFs.promises.writeFile.mockRejectedValue(new Error('Disk full'));\n\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await commandRunner.runNxTest('test-project');\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.error).toContain('Disk full');\n        });\n\n        it('should handle command not found errors', async () => {\n            // Arrange\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'error') {\n                        setTimeout(() => callback(new Error('Command not found: yarn')), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await commandRunner.runPrepareToPush('test-project');\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.error).toBe('Command not found: yarn');\n        });\n    });\n\n    describe('Output File Generation', () => {\n        it('should generate all expected output files for successful aiDebug', async () => {\n            // Arrange\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await commandRunner.runAiDebug('test-project');\n\n            // Assert\n            expect(result.success).toBe(true);\n            \n            // Verify file write operations\n            const writeFileCalls = mockFs.promises.writeFile.mock.calls;\n            const fileTypes = writeFileCalls.map((call: any) => {\n                const filePath = call[0];\n                if (filePath.includes('ai-debug-context')) {return 'context';}\n                if (filePath.includes('pr-description')) {return 'pr';}\n                if (filePath.includes('diff')) {return 'diff';}\n                if (filePath.includes('jest-output')) {return 'test';}\n                return 'other';\n            });\n\n            expect(fileTypes).toContain('context');\n            expect(fileTypes).toContain('pr');\n        });\n    });\n\n    describe('Performance Tests', () => {\n        it('should complete aiDebug workflow within reasonable time', async () => {\n            // Arrange\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 50); // 50ms delay per command\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            const startTime = Date.now();\n\n            // Act\n            const result = await commandRunner.runAiDebug('test-project');\n\n            // Assert\n            const duration = Date.now() - startTime;\n            expect(result.success).toBe(true);\n            expect(duration).toBeLessThan(5000); // Should complete within 5 seconds\n        });\n    });\n\n    describe('AI Context Generation', () => {\n        it('should generate different context for passing vs failing tests', async () => {\n            // This test verifies that the AI context generation adapts based on test results\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10); // Passing tests\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            await commandRunner.runAiDebug('test-project');\n\n            // Assert\n            const writeFileCalls = mockFs.promises.writeFile.mock.calls;\n            const contextCall = writeFileCalls.find((call: any) => \n                call[0].includes('ai-debug-context')\n            );\n            \n            expect(contextCall).toBeDefined();\n            expect(contextCall[1]).toContain('MOCK DATA VALIDATION (CRITICAL)');\n            expect(contextCall[1]).toContain('TEST COVERAGE ANALYSIS');\n        });\n    });\n\n    describe('Options Handling', () => {\n        it('should respect quick mode option', async () => {\n            // Arrange\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await commandRunner.runAiDebug('test-project', { quick: true });\n\n            // Assert\n            expect(result.success).toBe(true);\n            // Quick mode should still run all commands but with different context generation\n        });\n\n        it('should respect noDiff option', async () => {\n            // Arrange\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await commandRunner.runAiDebug('test-project', { noDiff: true });\n\n            // Assert\n            expect(result.success).toBe(true);\n            // Should skip git diff command\n            expect(mockSpawn).toHaveBeenCalledTimes(3); // Only nx test, lint, prettier\n        });\n\n        it('should respect useExpected option for nxTest', async () => {\n            // Arrange\n            mockFs.existsSync.mockReturnValue(true);\n\n            // Act\n            const result = await commandRunner.runNxTest('test-project', { useExpected: true });\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(mockFs.promises.copyFile).toHaveBeenCalled();\n            expect(mockSpawn).not.toHaveBeenCalled(); // Should not run actual tests\n        });\n    });\n});\n"],"version":3}