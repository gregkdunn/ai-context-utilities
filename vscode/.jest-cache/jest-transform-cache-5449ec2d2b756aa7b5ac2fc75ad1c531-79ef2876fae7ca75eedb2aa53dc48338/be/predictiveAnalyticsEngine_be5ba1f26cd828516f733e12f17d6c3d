f0a714f444a57f4708471ef55670eeee
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PredictiveAnalyticsEngine = void 0;
const events_1 = require("events");
class PredictiveAnalyticsEngine extends events_1.EventEmitter {
    config;
    models = new Map();
    trainingData = [];
    constructor(config) {
        super();
        this.config = {
            enableAnomalyDetection: true,
            enableTrendForecasting: true,
            enableRiskAssessment: true,
            modelUpdateInterval: 3600000, // 1 hour
            anomalyThreshold: 2.0,
            predictionHorizon: 24, // 24 hours
            minTrainingDataSize: 100,
            confidenceThreshold: 0.7,
            ...config
        };
        this.initializeModels();
    }
    initializeModels() {
        // Initialize default models
        const defaultModels = [
            {
                id: 'command_failure',
                name: 'Command Failure Prediction',
                type: 'classification',
                isActive: true,
                accuracy: 0.85,
                precision: 0.82,
                recall: 0.78,
                f1Score: 0.80,
                lastTrained: new Date(),
                trainingDataSize: 0
            },
            {
                id: 'performance_degradation',
                name: 'Performance Degradation Prediction',
                type: 'regression',
                isActive: true,
                accuracy: 0.75,
                precision: 0.73,
                recall: 0.77,
                f1Score: 0.75,
                lastTrained: new Date(),
                trainingDataSize: 0
            },
            {
                id: 'resource_utilization',
                name: 'Resource Utilization Prediction',
                type: 'regression',
                isActive: true,
                accuracy: 0.80,
                precision: 0.78,
                recall: 0.82,
                f1Score: 0.80,
                lastTrained: new Date(),
                trainingDataSize: 0
            }
        ];
        defaultModels.forEach(model => this.models.set(model.id, model));
    }
    getAvailableModels() {
        return Array.from(this.models.values());
    }
    async trainModels(events) {
        if (events.length < this.config.minTrainingDataSize) {
            throw new Error(`Insufficient training data. Required: ${this.config.minTrainingDataSize}, provided: ${events.length}`);
        }
        this.trainingData = events;
        // Update model training metrics
        this.models.forEach(model => {
            model.lastTrained = new Date();
            model.trainingDataSize = events.length;
            // In a real implementation, this would update actual model accuracy
            model.accuracy = Math.min(model.accuracy + 0.01, 0.95); // Simulate improvement
        });
        this.emit('modelsTrained', { modelCount: this.models.size, dataSize: events.length });
    }
    async generatePredictions(events) {
        const predictions = [];
        // Command failure prediction
        const commandFailurePrediction = this.predictCommandFailure(events);
        if (commandFailurePrediction && (commandFailurePrediction.confidence ?? 0) >= this.config.confidenceThreshold) {
            predictions.push(commandFailurePrediction);
        }
        // Performance degradation prediction
        const performancePrediction = this.predictPerformanceDegradation(events);
        if (performancePrediction && (performancePrediction.confidence ?? 0) >= this.config.confidenceThreshold) {
            predictions.push(performancePrediction);
        }
        // Resource utilization prediction
        const resourcePrediction = this.predictResourceUtilization(events);
        if (resourcePrediction && (resourcePrediction.confidence ?? 0) >= this.config.confidenceThreshold) {
            predictions.push(resourcePrediction);
        }
        return predictions;
    }
    async detectAnomalies(events) {
        if (!this.config.enableAnomalyDetection) {
            return [];
        }
        const anomalies = [];
        // Performance anomaly detection
        const performanceEvents = events.filter(e => e.type === 'performance_metric');
        if (performanceEvents.length > 0) {
            const avgValue = performanceEvents.reduce((sum, e) => sum + (e.metadata.value || 0), 0) / performanceEvents.length;
            performanceEvents.forEach(event => {
                const value = event.metadata.value || 0;
                const deviation = Math.abs(value - avgValue) / avgValue;
                if (deviation > 2.0) { // 200% deviation threshold
                    anomalies.push({
                        id: `anomaly_${event.id}`,
                        type: 'performance',
                        severity: deviation > 3.0 ? 'high' : 'medium',
                        detectedAt: new Date(),
                        event: event,
                        description: `Performance value ${value} deviates significantly from average ${avgValue.toFixed(2)}`,
                        confidence: Math.min(deviation / 2, 1),
                        affectedMetrics: ['performance'],
                        recommendation: 'Investigate system performance and resource usage'
                    });
                }
            });
        }
        return anomalies;
    }
    async generateForecasts(events, metrics, horizonHours) {
        if (!this.config.enableTrendForecasting) {
            return [];
        }
        const forecasts = [];
        metrics.forEach(metric => {
            const relevantEvents = events.filter(e => e.metadata[metric] !== undefined);
            if (relevantEvents.length > 0) {
                const values = relevantEvents.map(e => e.metadata[metric]);
                const currentValue = values[values.length - 1];
                // Simple trend analysis
                const trend = this.calculateTrend(values);
                const forecastValue = currentValue + (trend * horizonHours);
                forecasts.push({
                    id: `forecast_${metric}_${Date.now()}`,
                    metric,
                    currentValue,
                    forecastValue,
                    confidence: Math.max(0.5, 1 - (Math.abs(trend) / currentValue)),
                    horizon: horizonHours,
                    timeHorizon: horizonHours,
                    trend: trend > 0 ? 'increasing' : trend < 0 ? 'decreasing' : 'stable',
                    generatedAt: new Date(),
                    dataPoints: relevantEvents.length
                });
            }
        });
        return forecasts;
    }
    async assessRisk(events) {
        if (!this.config.enableRiskAssessment) {
            return {
                overallRiskScore: 0,
                riskLevel: 'low',
                criticalFactors: [],
                recommendations: [],
                predictions: [],
                anomalies: [],
                assessedAt: new Date()
            };
        }
        const predictions = await this.generatePredictions(events);
        const anomalies = await this.detectAnomalies(events);
        // Calculate risk factors
        const errorRate = events.filter(e => e.type === 'error').length / events.length;
        const failureRate = events.filter(e => e.type === 'command_executed' && !e.metadata.success).length / events.length;
        const highAnomaly = anomalies.filter(a => a.severity === 'high').length;
        const riskFactors = [
            { factor: 'Error Rate', weight: 0.3, value: errorRate },
            { factor: 'Failure Rate', weight: 0.4, value: failureRate },
            { factor: 'High Anomalies', weight: 0.3, value: highAnomaly / 10 } // Normalize
        ];
        const overallRiskScore = riskFactors.reduce((sum, factor) => sum + (factor.weight * factor.value), 0);
        const riskLevel = overallRiskScore > 0.7 ? 'high' :
            overallRiskScore > 0.4 ? 'medium' : 'low';
        const criticalFactors = riskFactors
            .filter(factor => factor.value > 0.5)
            .map(factor => factor.factor);
        const recommendations = this.generateRiskRecommendations(riskLevel, criticalFactors);
        return {
            overallRiskScore,
            riskLevel,
            criticalFactors,
            recommendations,
            predictions,
            anomalies,
            assessedAt: new Date()
        };
    }
    getModelMetrics(modelId) {
        const model = this.models.get(modelId);
        if (!model) {
            throw new Error(`Model not found: ${modelId}`);
        }
        return {
            accuracy: model.accuracy,
            precision: model.precision,
            recall: model.recall,
            f1Score: model.f1Score,
            lastTrained: model.lastTrained,
            trainingDataSize: model.trainingDataSize
        };
    }
    toggleModel(modelId, isActive) {
        const model = this.models.get(modelId);
        if (model) {
            model.isActive = isActive;
            this.emit('modelToggled', { modelId, isActive });
        }
    }
    predictCommandFailure(events) {
        const commandEvents = events.filter(e => e.type === 'command_executed');
        if (commandEvents.length === 0)
            return null;
        const failureRate = commandEvents.filter(e => !e.metadata.success).length / commandEvents.length;
        if (failureRate > 0.25) { // 25% failure rate threshold
            return {
                type: 'test-failure',
                probability: Math.min(failureRate * 2, 1),
                confidence: Math.min(failureRate * 2, 1),
                description: `High command failure rate detected: ${(failureRate * 100).toFixed(1)}%`,
                affectedFiles: this.extractAffectedFiles(commandEvents),
                prevention: [
                    {
                        id: 'review-code-changes',
                        title: 'Review recent code changes',
                        description: 'Check recent commits for potential issues',
                        action: { type: 'command', data: { command: 'git log --oneline -10' } },
                        estimatedImpact: 'medium',
                        estimatedEffort: 'minutes'
                    },
                    {
                        id: 'check-test-config',
                        title: 'Check test configurations',
                        description: 'Verify test setup and configuration files',
                        action: { type: 'file-edit', data: { file: 'jest.config.js' } },
                        estimatedImpact: 'medium',
                        estimatedEffort: 'minutes'
                    },
                    {
                        id: 'verify-dependencies',
                        title: 'Verify dependencies are up to date',
                        description: 'Check package.json and update dependencies',
                        action: { type: 'command', data: { command: 'npm audit' } },
                        estimatedImpact: 'high',
                        estimatedEffort: 'minutes'
                    }
                ],
                timeline: '1-2 hours',
                prediction: 'Command failures likely to continue',
                impact: 'high'
            };
        }
        return null;
    }
    predictPerformanceDegradation(events) {
        const performanceEvents = events.filter(e => e.type === 'performance_metric');
        if (performanceEvents.length === 0)
            return null;
        const avgResponseTime = performanceEvents.reduce((sum, e) => sum + (e.metadata.responseTime || 0), 0) / performanceEvents.length;
        if (avgResponseTime > 2000) { // 2 second threshold
            return {
                type: 'performance-degradation',
                probability: Math.min(avgResponseTime / 3000, 1),
                confidence: Math.min(avgResponseTime / 3000, 1),
                description: `Performance degradation detected: ${avgResponseTime.toFixed(0)}ms average response time`,
                affectedFiles: [],
                prevention: [
                    {
                        id: 'optimize-queries',
                        title: 'Optimize database queries',
                        description: 'Review and optimize slow database queries',
                        action: { type: 'command', data: { command: 'npm run analyze-queries' } },
                        estimatedImpact: 'high',
                        estimatedEffort: 'hours'
                    },
                    {
                        id: 'review-resources',
                        title: 'Review resource allocation',
                        description: 'Check system resource usage and allocation',
                        action: { type: 'command', data: { command: 'top' } },
                        estimatedImpact: 'medium',
                        estimatedEffort: 'minutes'
                    },
                    {
                        id: 'check-memory-leaks',
                        title: 'Check for memory leaks',
                        description: 'Run memory profiler to detect leaks',
                        action: { type: 'command', data: { command: 'npm run profile' } },
                        estimatedImpact: 'high',
                        estimatedEffort: 'hours'
                    }
                ],
                timeline: '30-60 minutes',
                prediction: 'Performance will continue to degrade',
                impact: 'medium'
            };
        }
        return null;
    }
    predictResourceUtilization(events) {
        const resourceEvents = events.filter(e => e.type === 'resource_usage');
        if (resourceEvents.length === 0)
            return null;
        const avgMemory = resourceEvents.reduce((sum, e) => sum + (e.metadata.memoryUsage || 0), 0) / resourceEvents.length;
        if (avgMemory > 85) { // 85% memory usage threshold
            return {
                type: 'security-issue',
                probability: Math.min(avgMemory / 100, 1),
                confidence: Math.min(avgMemory / 100, 1),
                description: `High memory usage detected: ${avgMemory.toFixed(1)}%`,
                affectedFiles: [],
                prevention: [
                    {
                        id: 'review-memory-patterns',
                        title: 'Review memory usage patterns',
                        description: 'Analyze memory usage patterns and optimize',
                        action: { type: 'command', data: { command: 'npm run memory-analysis' } },
                        estimatedImpact: 'high',
                        estimatedEffort: 'hours'
                    },
                    {
                        id: 'optimize-data-structures',
                        title: 'Optimize data structures',
                        description: 'Review and optimize data structures for memory efficiency',
                        action: { type: 'file-edit', data: { pattern: '**/*.ts' } },
                        estimatedImpact: 'medium',
                        estimatedEffort: 'hours'
                    },
                    {
                        id: 'check-resource-leaks',
                        title: 'Check for resource leaks',
                        description: 'Scan for resource leaks and memory retention issues',
                        action: { type: 'command', data: { command: 'npm run leak-detection' } },
                        estimatedImpact: 'high',
                        estimatedEffort: 'hours'
                    }
                ],
                timeline: '15-30 minutes',
                prediction: 'Memory usage will continue to increase',
                impact: 'high'
            };
        }
        return null;
    }
    calculateTrend(values) {
        if (values.length < 2)
            return 0;
        const n = values.length;
        const sumX = (n * (n - 1)) / 2;
        const sumY = values.reduce((sum, val) => sum + val, 0);
        const sumXY = values.reduce((sum, val, i) => sum + (i * val), 0);
        const sumXX = (n * (n - 1) * (2 * n - 1)) / 6;
        return (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    }
    extractAffectedFiles(events) {
        const files = new Set();
        events.forEach(event => {
            if (event.metadata.filePath) {
                files.add(event.metadata.filePath);
            }
        });
        return Array.from(files);
    }
    generateRiskRecommendations(riskLevel, criticalFactors) {
        const recommendations = [];
        if (riskLevel === 'high') {
            recommendations.push('Immediate attention required');
            recommendations.push('Review system stability');
            recommendations.push('Consider rollback if recent changes');
        }
        if (criticalFactors.includes('Error Rate')) {
            recommendations.push('Investigate error patterns');
            recommendations.push('Review error logs');
        }
        if (criticalFactors.includes('Failure Rate')) {
            recommendations.push('Review test configurations');
            recommendations.push('Check dependency versions');
        }
        if (criticalFactors.includes('High Anomalies')) {
            recommendations.push('Investigate performance anomalies');
            recommendations.push('Monitor system resources');
        }
        return recommendations;
    }
    dispose() {
        this.models.clear();
        this.trainingData = [];
        this.removeAllListeners();
    }
}
exports.PredictiveAnalyticsEngine = PredictiveAnalyticsEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2dyZWdkdW5uL3NyYy90ZXN0L2FpX2RlYnVnX2NvbnRleHQvdnNjb2RlL3NyYy9zZXJ2aWNlcy9hbmFseXRpY3MvZW5naW5lcy9wcmVkaWN0aXZlQW5hbHl0aWNzRW5naW5lLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFzQztBQVl0QyxNQUFhLHlCQUEwQixTQUFRLHFCQUFZO0lBQy9DLE1BQU0sQ0FBNkI7SUFDbkMsTUFBTSxHQUFpQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2pELFlBQVksR0FBcUIsRUFBRSxDQUFDO0lBRTVDLFlBQVksTUFBd0I7UUFDaEMsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1Ysc0JBQXNCLEVBQUUsSUFBSTtZQUM1QixzQkFBc0IsRUFBRSxJQUFJO1lBQzVCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLFNBQVM7WUFDdkMsZ0JBQWdCLEVBQUUsR0FBRztZQUNyQixpQkFBaUIsRUFBRSxFQUFFLEVBQUUsV0FBVztZQUNsQyxtQkFBbUIsRUFBRSxHQUFHO1lBQ3hCLG1CQUFtQixFQUFFLEdBQUc7WUFDeEIsR0FBRyxNQUFNO1NBQ1osQ0FBQztRQUNGLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFTyxnQkFBZ0I7UUFDcEIsNEJBQTRCO1FBQzVCLE1BQU0sYUFBYSxHQUFzQjtZQUNyQztnQkFDSSxFQUFFLEVBQUUsaUJBQWlCO2dCQUNyQixJQUFJLEVBQUUsNEJBQTRCO2dCQUNsQyxJQUFJLEVBQUUsZ0JBQWdCO2dCQUN0QixRQUFRLEVBQUUsSUFBSTtnQkFDZCxRQUFRLEVBQUUsSUFBSTtnQkFDZCxTQUFTLEVBQUUsSUFBSTtnQkFDZixNQUFNLEVBQUUsSUFBSTtnQkFDWixPQUFPLEVBQUUsSUFBSTtnQkFDYixXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUU7Z0JBQ3ZCLGdCQUFnQixFQUFFLENBQUM7YUFDdEI7WUFDRDtnQkFDSSxFQUFFLEVB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QUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7WUFDM0MsZUFBZSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1lBQ25ELGVBQWUsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUN0RCxDQUFDO1FBRUQsSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztZQUM3QyxlQUFlLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7WUFDMUQsZUFBZSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFFRCxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDO0lBRU0sT0FBTztRQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBM2NELDhEQTJjQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZ3JlZ2R1bm4vc3JjL3Rlc3QvYWlfZGVidWdfY29udGV4dC92c2NvZGUvc3JjL3NlcnZpY2VzL2FuYWx5dGljcy9lbmdpbmVzL3ByZWRpY3RpdmVBbmFseXRpY3NFbmdpbmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IFxuICAgIEFuYWx5dGljc0V2ZW50LCBcbiAgICBQcmVkaWN0aXZlQ29uZmlnLCBcbiAgICBQcmVkaWN0aW9uUmVzdWx0LCBcbiAgICBNb2RlbE1ldHJpY3MsIFxuICAgIFJpc2tBc3Nlc3NtZW50LFxuICAgIEFub21hbHlEZXRlY3Rpb24sXG4gICAgRm9yZWNhc3RSZXN1bHQsXG4gICAgUHJlZGljdGl2ZU1vZGVsXG59IGZyb20gJy4uLy4uLy4uL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIFByZWRpY3RpdmVBbmFseXRpY3NFbmdpbmUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIHByaXZhdGUgY29uZmlnOiBSZXF1aXJlZDxQcmVkaWN0aXZlQ29uZmlnPjtcbiAgICBwcml2YXRlIG1vZGVsczogTWFwPHN0cmluZywgUHJlZGljdGl2ZU1vZGVsPiA9IG5ldyBNYXAoKTtcbiAgICBwcml2YXRlIHRyYWluaW5nRGF0YTogQW5hbHl0aWNzRXZlbnRbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBQcmVkaWN0aXZlQ29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAgICAgZW5hYmxlQW5vbWFseURldGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIGVuYWJsZVRyZW5kRm9yZWNhc3Rpbmc6IHRydWUsXG4gICAgICAgICAgICBlbmFibGVSaXNrQXNzZXNzbWVudDogdHJ1ZSxcbiAgICAgICAgICAgIG1vZGVsVXBkYXRlSW50ZXJ2YWw6IDM2MDAwMDAsIC8vIDEgaG91clxuICAgICAgICAgICAgYW5vbWFseVRocmVzaG9sZDogMi4wLFxuICAgICAgICAgICAgcHJlZGljdGlvbkhvcml6b246IDI0LCAvLyAyNCBob3Vyc1xuICAgICAgICAgICAgbWluVHJhaW5pbmdEYXRhU2l6ZTogMTAwLFxuICAgICAgICAgICAgY29uZmlkZW5jZVRocmVzaG9sZDogMC43LFxuICAgICAgICAgICAgLi4uY29uZmlnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU1vZGVscygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZU1vZGVscygpOiB2b2lkIHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBkZWZhdWx0IG1vZGVsc1xuICAgICAgICBjb25zdCBkZWZhdWx0TW9kZWxzOiBQcmVkaWN0aXZlTW9kZWxbXSA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ2NvbW1hbmRfZmFpbHVyZScsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0NvbW1hbmQgRmFpbHVyZSBQcmVkaWN0aW9uJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2xhc3NpZmljYXRpb24nLFxuICAgICAgICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFjY3VyYWN5OiAwLjg1LFxuICAgICAgICAgICAgICAgIHByZWNpc2lvbjogMC44MixcbiAgICAgICAgICAgICAgICByZWNhbGw6IDAuNzgsXG4gICAgICAgICAgICAgICAgZjFTY29yZTogMC44MCxcbiAgICAgICAgICAgICAgICBsYXN0VHJhaW5lZDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICB0cmFpbmluZ0RhdGFTaXplOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiAncGVyZm9ybWFuY2VfZGVncmFkYXRpb24nLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdQZXJmb3JtYW5jZSBEZWdyYWRhdGlvbiBQcmVkaWN0aW9uJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVncmVzc2lvbicsXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWNjdXJhY3k6IDAuNzUsXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uOiAwLjczLFxuICAgICAgICAgICAgICAgIHJlY2FsbDogMC43NyxcbiAgICAgICAgICAgICAgICBmMVNjb3JlOiAwLjc1LFxuICAgICAgICAgICAgICAgIGxhc3RUcmFpbmVkOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHRyYWluaW5nRGF0YVNpemU6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdyZXNvdXJjZV91dGlsaXphdGlvbicsXG4gICAgICAgICAgICAgICAgbmFtZTogJ1Jlc291cmNlIFV0aWxpemF0aW9uIFByZWRpY3Rpb24nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdyZWdyZXNzaW9uJyxcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhY2N1cmFjeTogMC44MCxcbiAgICAgICAgICAgICAgICBwcmVjaXNpb246IDAuNzgsXG4gICAgICAgICAgICAgICAgcmVjYWxsOiAwLjgyLFxuICAgICAgICAgICAgICAgIGYxU2NvcmU6IDAuODAsXG4gICAgICAgICAgICAgICAgbGFzdFRyYWluZWQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgdHJhaW5pbmdEYXRhU2l6ZTogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIGRlZmF1bHRNb2RlbHMuZm9yRWFjaChtb2RlbCA9PiB0aGlzLm1vZGVscy5zZXQobW9kZWwuaWQsIG1vZGVsKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEF2YWlsYWJsZU1vZGVscygpOiBQcmVkaWN0aXZlTW9kZWxbXSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubW9kZWxzLnZhbHVlcygpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdHJhaW5Nb2RlbHMoZXZlbnRzOiBBbmFseXRpY3NFdmVudFtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChldmVudHMubGVuZ3RoIDwgdGhpcy5jb25maWcubWluVHJhaW5pbmdEYXRhU2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnN1ZmZpY2llbnQgdHJhaW5pbmcgZGF0YS4gUmVxdWlyZWQ6ICR7dGhpcy5jb25maWcubWluVHJhaW5pbmdEYXRhU2l6ZX0sIHByb3ZpZGVkOiAke2V2ZW50cy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyYWluaW5nRGF0YSA9IGV2ZW50cztcbiAgICAgICAgXG4gICAgICAgIC8vIFVwZGF0ZSBtb2RlbCB0cmFpbmluZyBtZXRyaWNzXG4gICAgICAgIHRoaXMubW9kZWxzLmZvckVhY2gobW9kZWwgPT4ge1xuICAgICAgICAgICAgbW9kZWwubGFzdFRyYWluZWQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgbW9kZWwudHJhaW5pbmdEYXRhU2l6ZSA9IGV2ZW50cy5sZW5ndGg7XG4gICAgICAgICAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgdXBkYXRlIGFjdHVhbCBtb2RlbCBhY2N1cmFjeVxuICAgICAgICAgICAgbW9kZWwuYWNjdXJhY3kgPSBNYXRoLm1pbihtb2RlbC5hY2N1cmFjeSArIDAuMDEsIDAuOTUpOyAvLyBTaW11bGF0ZSBpbXByb3ZlbWVudFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmVtaXQoJ21vZGVsc1RyYWluZWQnLCB7IG1vZGVsQ291bnQ6IHRoaXMubW9kZWxzLnNpemUsIGRhdGFTaXplOiBldmVudHMubGVuZ3RoIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZW5lcmF0ZVByZWRpY3Rpb25zKGV2ZW50czogQW5hbHl0aWNzRXZlbnRbXSk6IFByb21pc2U8UHJlZGljdGlvblJlc3VsdFtdPiB7XG4gICAgICAgIGNvbnN0IHByZWRpY3Rpb25zOiBQcmVkaWN0aW9uUmVzdWx0W10gPSBbXTtcblxuICAgICAgICAvLyBDb21tYW5kIGZhaWx1cmUgcHJlZGljdGlvblxuICAgICAgICBjb25zdCBjb21tYW5kRmFpbHVyZVByZWRpY3Rpb24gPSB0aGlzLnByZWRpY3RDb21tYW5kRmFpbHVyZShldmVudHMpO1xuICAgICAgICBpZiAoY29tbWFuZEZhaWx1cmVQcmVkaWN0aW9uICYmIChjb21tYW5kRmFpbHVyZVByZWRpY3Rpb24uY29uZmlkZW5jZSA/PyAwKSA+PSB0aGlzLmNvbmZpZy5jb25maWRlbmNlVGhyZXNob2xkKSB7XG4gICAgICAgICAgICBwcmVkaWN0aW9ucy5wdXNoKGNvbW1hbmRGYWlsdXJlUHJlZGljdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQZXJmb3JtYW5jZSBkZWdyYWRhdGlvbiBwcmVkaWN0aW9uXG4gICAgICAgIGNvbnN0IHBlcmZvcm1hbmNlUHJlZGljdGlvbiA9IHRoaXMucHJlZGljdFBlcmZvcm1hbmNlRGVncmFkYXRpb24oZXZlbnRzKTtcbiAgICAgICAgaWYgKHBlcmZvcm1hbmNlUHJlZGljdGlvbiAmJiAocGVyZm9ybWFuY2VQcmVkaWN0aW9uLmNvbmZpZGVuY2UgPz8gMCkgPj0gdGhpcy5jb25maWcuY29uZmlkZW5jZVRocmVzaG9sZCkge1xuICAgICAgICAgICAgcHJlZGljdGlvbnMucHVzaChwZXJmb3JtYW5jZVByZWRpY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzb3VyY2UgdXRpbGl6YXRpb24gcHJlZGljdGlvblxuICAgICAgICBjb25zdCByZXNvdXJjZVByZWRpY3Rpb24gPSB0aGlzLnByZWRpY3RSZXNvdXJjZVV0aWxpemF0aW9uKGV2ZW50cyk7XG4gICAgICAgIGlmIChyZXNvdXJjZVByZWRpY3Rpb24gJiYgKHJlc291cmNlUHJlZGljdGlvbi5jb25maWRlbmNlID8/IDApID49IHRoaXMuY29uZmlnLmNvbmZpZGVuY2VUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIHByZWRpY3Rpb25zLnB1c2gocmVzb3VyY2VQcmVkaWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcmVkaWN0aW9ucztcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZGV0ZWN0QW5vbWFsaWVzKGV2ZW50czogQW5hbHl0aWNzRXZlbnRbXSk6IFByb21pc2U8QW5vbWFseURldGVjdGlvbltdPiB7XG4gICAgICAgIGlmICghdGhpcy5jb25maWcuZW5hYmxlQW5vbWFseURldGVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYW5vbWFsaWVzOiBBbm9tYWx5RGV0ZWN0aW9uW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIC8vIFBlcmZvcm1hbmNlIGFub21hbHkgZGV0ZWN0aW9uXG4gICAgICAgIGNvbnN0IHBlcmZvcm1hbmNlRXZlbnRzID0gZXZlbnRzLmZpbHRlcihlID0+IGUudHlwZSA9PT0gJ3BlcmZvcm1hbmNlX21ldHJpYycpO1xuICAgICAgICBpZiAocGVyZm9ybWFuY2VFdmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgYXZnVmFsdWUgPSBwZXJmb3JtYW5jZUV2ZW50cy5yZWR1Y2UoKHN1bSwgZSkgPT4gc3VtICsgKGUubWV0YWRhdGEudmFsdWUgfHwgMCksIDApIC8gcGVyZm9ybWFuY2VFdmVudHMubGVuZ3RoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwZXJmb3JtYW5jZUV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGV2ZW50Lm1ldGFkYXRhLnZhbHVlIHx8IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgZGV2aWF0aW9uID0gTWF0aC5hYnModmFsdWUgLSBhdmdWYWx1ZSkgLyBhdmdWYWx1ZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoZGV2aWF0aW9uID4gMi4wKSB7IC8vIDIwMCUgZGV2aWF0aW9uIHRocmVzaG9sZFxuICAgICAgICAgICAgICAgICAgICBhbm9tYWxpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogYGFub21hbHlfJHtldmVudC5pZH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3BlcmZvcm1hbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldmVyaXR5OiBkZXZpYXRpb24gPiAzLjAgPyAnaGlnaCcgOiAnbWVkaXVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYFBlcmZvcm1hbmNlIHZhbHVlICR7dmFsdWV9IGRldmlhdGVzIHNpZ25pZmljYW50bHkgZnJvbSBhdmVyYWdlICR7YXZnVmFsdWUudG9GaXhlZCgyKX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlkZW5jZTogTWF0aC5taW4oZGV2aWF0aW9uIC8gMiwgMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZE1ldHJpY3M6IFsncGVyZm9ybWFuY2UnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uOiAnSW52ZXN0aWdhdGUgc3lzdGVtIHBlcmZvcm1hbmNlIGFuZCByZXNvdXJjZSB1c2FnZSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYW5vbWFsaWVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZW5lcmF0ZUZvcmVjYXN0cyhcbiAgICAgICAgZXZlbnRzOiBBbmFseXRpY3NFdmVudFtdLCBcbiAgICAgICAgbWV0cmljczogc3RyaW5nW10sIFxuICAgICAgICBob3Jpem9uSG91cnM6IG51bWJlclxuICAgICk6IFByb21pc2U8Rm9yZWNhc3RSZXN1bHRbXT4ge1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLmVuYWJsZVRyZW5kRm9yZWNhc3RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvcmVjYXN0czogRm9yZWNhc3RSZXN1bHRbXSA9IFtdO1xuXG4gICAgICAgIG1ldHJpY3MuZm9yRWFjaChtZXRyaWMgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVsZXZhbnRFdmVudHMgPSBldmVudHMuZmlsdGVyKGUgPT4gZS5tZXRhZGF0YVttZXRyaWNdICE9PSB1bmRlZmluZWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocmVsZXZhbnRFdmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHJlbGV2YW50RXZlbnRzLm1hcChlID0+IGUubWV0YWRhdGFbbWV0cmljXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTaW1wbGUgdHJlbmQgYW5hbHlzaXNcbiAgICAgICAgICAgICAgICBjb25zdCB0cmVuZCA9IHRoaXMuY2FsY3VsYXRlVHJlbmQodmFsdWVzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JlY2FzdFZhbHVlID0gY3VycmVudFZhbHVlICsgKHRyZW5kICogaG9yaXpvbkhvdXJzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBmb3JlY2FzdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBgZm9yZWNhc3RfJHttZXRyaWN9XyR7RGF0ZS5ub3coKX1gLFxuICAgICAgICAgICAgICAgICAgICBtZXRyaWMsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9yZWNhc3RWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlkZW5jZTogTWF0aC5tYXgoMC41LCAxIC0gKE1hdGguYWJzKHRyZW5kKSAvIGN1cnJlbnRWYWx1ZSkpLFxuICAgICAgICAgICAgICAgICAgICBob3Jpem9uOiBob3Jpem9uSG91cnMsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVIb3Jpem9uOiBob3Jpem9uSG91cnMsXG4gICAgICAgICAgICAgICAgICAgIHRyZW5kOiB0cmVuZCA+IDAgPyAnaW5jcmVhc2luZycgOiB0cmVuZCA8IDAgPyAnZGVjcmVhc2luZycgOiAnc3RhYmxlJyxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIGRhdGFQb2ludHM6IHJlbGV2YW50RXZlbnRzLmxlbmd0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZm9yZWNhc3RzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBhc3Nlc3NSaXNrKGV2ZW50czogQW5hbHl0aWNzRXZlbnRbXSk6IFByb21pc2U8Umlza0Fzc2Vzc21lbnQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5lbmFibGVSaXNrQXNzZXNzbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvdmVyYWxsUmlza1Njb3JlOiAwLFxuICAgICAgICAgICAgICAgIHJpc2tMZXZlbDogJ2xvdycsXG4gICAgICAgICAgICAgICAgY3JpdGljYWxGYWN0b3JzOiBbXSxcbiAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgICAgICAgICAgICAgIHByZWRpY3Rpb25zOiBbXSxcbiAgICAgICAgICAgICAgICBhbm9tYWxpZXM6IFtdLFxuICAgICAgICAgICAgICAgIGFzc2Vzc2VkQXQ6IG5ldyBEYXRlKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcmVkaWN0aW9ucyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVQcmVkaWN0aW9ucyhldmVudHMpO1xuICAgICAgICBjb25zdCBhbm9tYWxpZXMgPSBhd2FpdCB0aGlzLmRldGVjdEFub21hbGllcyhldmVudHMpO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSByaXNrIGZhY3RvcnNcbiAgICAgICAgY29uc3QgZXJyb3JSYXRlID0gZXZlbnRzLmZpbHRlcihlID0+IGUudHlwZSA9PT0gJ2Vycm9yJykubGVuZ3RoIC8gZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZmFpbHVyZVJhdGUgPSBldmVudHMuZmlsdGVyKGUgPT4gZS50eXBlID09PSAnY29tbWFuZF9leGVjdXRlZCcgJiYgIWUubWV0YWRhdGEuc3VjY2VzcykubGVuZ3RoIC8gZXZlbnRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgaGlnaEFub21hbHkgPSBhbm9tYWxpZXMuZmlsdGVyKGEgPT4gYS5zZXZlcml0eSA9PT0gJ2hpZ2gnKS5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICBjb25zdCByaXNrRmFjdG9ycyA9IFtcbiAgICAgICAgICAgIHsgZmFjdG9yOiAnRXJyb3IgUmF0ZScsIHdlaWdodDogMC4zLCB2YWx1ZTogZXJyb3JSYXRlIH0sXG4gICAgICAgICAgICB7IGZhY3RvcjogJ0ZhaWx1cmUgUmF0ZScsIHdlaWdodDogMC40LCB2YWx1ZTogZmFpbHVyZVJhdGUgfSxcbiAgICAgICAgICAgIHsgZmFjdG9yOiAnSGlnaCBBbm9tYWxpZXMnLCB3ZWlnaHQ6IDAuMywgdmFsdWU6IGhpZ2hBbm9tYWx5IC8gMTAgfSAvLyBOb3JtYWxpemVcbiAgICAgICAgXTtcblxuICAgICAgICBjb25zdCBvdmVyYWxsUmlza1Njb3JlID0gcmlza0ZhY3RvcnMucmVkdWNlKChzdW0sIGZhY3RvcikgPT4gXG4gICAgICAgICAgICBzdW0gKyAoZmFjdG9yLndlaWdodCAqIGZhY3Rvci52YWx1ZSksIDBcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCByaXNrTGV2ZWwgPSBvdmVyYWxsUmlza1Njb3JlID4gMC43ID8gJ2hpZ2gnIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmFsbFJpc2tTY29yZSA+IDAuNCA/ICdtZWRpdW0nIDogJ2xvdyc7XG5cbiAgICAgICAgY29uc3QgY3JpdGljYWxGYWN0b3JzID0gcmlza0ZhY3RvcnNcbiAgICAgICAgICAgIC5maWx0ZXIoZmFjdG9yID0+IGZhY3Rvci52YWx1ZSA+IDAuNSlcbiAgICAgICAgICAgIC5tYXAoZmFjdG9yID0+IGZhY3Rvci5mYWN0b3IpO1xuXG4gICAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHRoaXMuZ2VuZXJhdGVSaXNrUmVjb21tZW5kYXRpb25zKHJpc2tMZXZlbCwgY3JpdGljYWxGYWN0b3JzKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3ZlcmFsbFJpc2tTY29yZSxcbiAgICAgICAgICAgIHJpc2tMZXZlbCxcbiAgICAgICAgICAgIGNyaXRpY2FsRmFjdG9ycyxcbiAgICAgICAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgICAgICAgIHByZWRpY3Rpb25zLFxuICAgICAgICAgICAgYW5vbWFsaWVzLFxuICAgICAgICAgICAgYXNzZXNzZWRBdDogbmV3IERhdGUoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNb2RlbE1ldHJpY3MobW9kZWxJZDogc3RyaW5nKTogTW9kZWxNZXRyaWNzIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLm1vZGVscy5nZXQobW9kZWxJZCk7XG4gICAgICAgIGlmICghbW9kZWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTW9kZWwgbm90IGZvdW5kOiAke21vZGVsSWR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNjdXJhY3k6IG1vZGVsLmFjY3VyYWN5LFxuICAgICAgICAgICAgcHJlY2lzaW9uOiBtb2RlbC5wcmVjaXNpb24sXG4gICAgICAgICAgICByZWNhbGw6IG1vZGVsLnJlY2FsbCxcbiAgICAgICAgICAgIGYxU2NvcmU6IG1vZGVsLmYxU2NvcmUsXG4gICAgICAgICAgICBsYXN0VHJhaW5lZDogbW9kZWwubGFzdFRyYWluZWQsXG4gICAgICAgICAgICB0cmFpbmluZ0RhdGFTaXplOiBtb2RlbC50cmFpbmluZ0RhdGFTaXplXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHRvZ2dsZU1vZGVsKG1vZGVsSWQ6IHN0cmluZywgaXNBY3RpdmU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLm1vZGVscy5nZXQobW9kZWxJZCk7XG4gICAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICAgICAgbW9kZWwuaXNBY3RpdmUgPSBpc0FjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnbW9kZWxUb2dnbGVkJywgeyBtb2RlbElkLCBpc0FjdGl2ZSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcHJlZGljdENvbW1hbmRGYWlsdXJlKGV2ZW50czogQW5hbHl0aWNzRXZlbnRbXSk6IFByZWRpY3Rpb25SZXN1bHQgfCBudWxsIHtcbiAgICAgICAgY29uc3QgY29tbWFuZEV2ZW50cyA9IGV2ZW50cy5maWx0ZXIoZSA9PiBlLnR5cGUgPT09ICdjb21tYW5kX2V4ZWN1dGVkJyk7XG4gICAgICAgIGlmIChjb21tYW5kRXZlbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgZmFpbHVyZVJhdGUgPSBjb21tYW5kRXZlbnRzLmZpbHRlcihlID0+ICFlLm1ldGFkYXRhLnN1Y2Nlc3MpLmxlbmd0aCAvIGNvbW1hbmRFdmVudHMubGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgaWYgKGZhaWx1cmVSYXRlID4gMC4yNSkgeyAvLyAyNSUgZmFpbHVyZSByYXRlIHRocmVzaG9sZFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAndGVzdC1mYWlsdXJlJyxcbiAgICAgICAgICAgICAgICBwcm9iYWJpbGl0eTogTWF0aC5taW4oZmFpbHVyZVJhdGUgKiAyLCAxKSxcbiAgICAgICAgICAgICAgICBjb25maWRlbmNlOiBNYXRoLm1pbihmYWlsdXJlUmF0ZSAqIDIsIDEpLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgSGlnaCBjb21tYW5kIGZhaWx1cmUgcmF0ZSBkZXRlY3RlZDogJHsoZmFpbHVyZVJhdGUgKiAxMDApLnRvRml4ZWQoMSl9JWAsXG4gICAgICAgICAgICAgICAgYWZmZWN0ZWRGaWxlczogdGhpcy5leHRyYWN0QWZmZWN0ZWRGaWxlcyhjb21tYW5kRXZlbnRzKSxcbiAgICAgICAgICAgICAgICBwcmV2ZW50aW9uOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAncmV2aWV3LWNvZGUtY2hhbmdlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1JldmlldyByZWNlbnQgY29kZSBjaGFuZ2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ2hlY2sgcmVjZW50IGNvbW1pdHMgZm9yIHBvdGVudGlhbCBpc3N1ZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiB7IHR5cGU6ICdjb21tYW5kJywgZGF0YTogeyBjb21tYW5kOiAnZ2l0IGxvZyAtLW9uZWxpbmUgLTEwJyB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRJbXBhY3Q6ICdtZWRpdW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkRWZmb3J0OiAnbWludXRlcydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdjaGVjay10ZXN0LWNvbmZpZycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NoZWNrIHRlc3QgY29uZmlndXJhdGlvbnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdWZXJpZnkgdGVzdCBzZXR1cCBhbmQgY29uZmlndXJhdGlvbiBmaWxlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHsgdHlwZTogJ2ZpbGUtZWRpdCcsIGRhdGE6IHsgZmlsZTogJ2plc3QuY29uZmlnLmpzJyB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRJbXBhY3Q6ICdtZWRpdW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkRWZmb3J0OiAnbWludXRlcydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICd2ZXJpZnktZGVwZW5kZW5jaWVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnVmVyaWZ5IGRlcGVuZGVuY2llcyBhcmUgdXAgdG8gZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0NoZWNrIHBhY2thZ2UuanNvbiBhbmQgdXBkYXRlIGRlcGVuZGVuY2llcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHsgdHlwZTogJ2NvbW1hbmQnLCBkYXRhOiB7IGNvbW1hbmQ6ICducG0gYXVkaXQnIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEltcGFjdDogJ2hpZ2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkRWZmb3J0OiAnbWludXRlcydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgdGltZWxpbmU6ICcxLTIgaG91cnMnLFxuICAgICAgICAgICAgICAgIHByZWRpY3Rpb246ICdDb21tYW5kIGZhaWx1cmVzIGxpa2VseSB0byBjb250aW51ZScsXG4gICAgICAgICAgICAgICAgaW1wYWN0OiAnaGlnaCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByZWRpY3RQZXJmb3JtYW5jZURlZ3JhZGF0aW9uKGV2ZW50czogQW5hbHl0aWNzRXZlbnRbXSk6IFByZWRpY3Rpb25SZXN1bHQgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcGVyZm9ybWFuY2VFdmVudHMgPSBldmVudHMuZmlsdGVyKGUgPT4gZS50eXBlID09PSAncGVyZm9ybWFuY2VfbWV0cmljJyk7XG4gICAgICAgIGlmIChwZXJmb3JtYW5jZUV2ZW50cy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGF2Z1Jlc3BvbnNlVGltZSA9IHBlcmZvcm1hbmNlRXZlbnRzLnJlZHVjZSgoc3VtLCBlKSA9PiBzdW0gKyAoZS5tZXRhZGF0YS5yZXNwb25zZVRpbWUgfHwgMCksIDApIC8gcGVyZm9ybWFuY2VFdmVudHMubGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgaWYgKGF2Z1Jlc3BvbnNlVGltZSA+IDIwMDApIHsgLy8gMiBzZWNvbmQgdGhyZXNob2xkXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdwZXJmb3JtYW5jZS1kZWdyYWRhdGlvbicsXG4gICAgICAgICAgICAgICAgcHJvYmFiaWxpdHk6IE1hdGgubWluKGF2Z1Jlc3BvbnNlVGltZSAvIDMwMDAsIDEpLFxuICAgICAgICAgICAgICAgIGNvbmZpZGVuY2U6IE1hdGgubWluKGF2Z1Jlc3BvbnNlVGltZSAvIDMwMDAsIDEpLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgUGVyZm9ybWFuY2UgZGVncmFkYXRpb24gZGV0ZWN0ZWQ6ICR7YXZnUmVzcG9uc2VUaW1lLnRvRml4ZWQoMCl9bXMgYXZlcmFnZSByZXNwb25zZSB0aW1lYCxcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEZpbGVzOiBbXSxcbiAgICAgICAgICAgICAgICBwcmV2ZW50aW9uOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnb3B0aW1pemUtcXVlcmllcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ09wdGltaXplIGRhdGFiYXNlIHF1ZXJpZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdSZXZpZXcgYW5kIG9wdGltaXplIHNsb3cgZGF0YWJhc2UgcXVlcmllcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHsgdHlwZTogJ2NvbW1hbmQnLCBkYXRhOiB7IGNvbW1hbmQ6ICducG0gcnVuIGFuYWx5emUtcXVlcmllcycgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkSW1wYWN0OiAnaGlnaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRFZmZvcnQ6ICdob3VycydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdyZXZpZXctcmVzb3VyY2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmV2aWV3IHJlc291cmNlIGFsbG9jYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDaGVjayBzeXN0ZW0gcmVzb3VyY2UgdXNhZ2UgYW5kIGFsbG9jYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiB7IHR5cGU6ICdjb21tYW5kJywgZGF0YTogeyBjb21tYW5kOiAndG9wJyB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRJbXBhY3Q6ICdtZWRpdW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkRWZmb3J0OiAnbWludXRlcydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdjaGVjay1tZW1vcnktbGVha3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDaGVjayBmb3IgbWVtb3J5IGxlYWtzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUnVuIG1lbW9yeSBwcm9maWxlciB0byBkZXRlY3QgbGVha3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiB7IHR5cGU6ICdjb21tYW5kJywgZGF0YTogeyBjb21tYW5kOiAnbnBtIHJ1biBwcm9maWxlJyB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWRJbXBhY3Q6ICdoaWdoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEVmZm9ydDogJ2hvdXJzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB0aW1lbGluZTogJzMwLTYwIG1pbnV0ZXMnLFxuICAgICAgICAgICAgICAgIHByZWRpY3Rpb246ICdQZXJmb3JtYW5jZSB3aWxsIGNvbnRpbnVlIHRvIGRlZ3JhZGUnLFxuICAgICAgICAgICAgICAgIGltcGFjdDogJ21lZGl1bSdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByZWRpY3RSZXNvdXJjZVV0aWxpemF0aW9uKGV2ZW50czogQW5hbHl0aWNzRXZlbnRbXSk6IFByZWRpY3Rpb25SZXN1bHQgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcmVzb3VyY2VFdmVudHMgPSBldmVudHMuZmlsdGVyKGUgPT4gZS50eXBlID09PSAncmVzb3VyY2VfdXNhZ2UnKTtcbiAgICAgICAgaWYgKHJlc291cmNlRXZlbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgYXZnTWVtb3J5ID0gcmVzb3VyY2VFdmVudHMucmVkdWNlKChzdW0sIGUpID0+IHN1bSArIChlLm1ldGFkYXRhLm1lbW9yeVVzYWdlIHx8IDApLCAwKSAvIHJlc291cmNlRXZlbnRzLmxlbmd0aDtcbiAgICAgICAgXG4gICAgICAgIGlmIChhdmdNZW1vcnkgPiA4NSkgeyAvLyA4NSUgbWVtb3J5IHVzYWdlIHRocmVzaG9sZFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VjdXJpdHktaXNzdWUnLFxuICAgICAgICAgICAgICAgIHByb2JhYmlsaXR5OiBNYXRoLm1pbihhdmdNZW1vcnkgLyAxMDAsIDEpLFxuICAgICAgICAgICAgICAgIGNvbmZpZGVuY2U6IE1hdGgubWluKGF2Z01lbW9yeSAvIDEwMCwgMSksXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGBIaWdoIG1lbW9yeSB1c2FnZSBkZXRlY3RlZDogJHthdmdNZW1vcnkudG9GaXhlZCgxKX0lYCxcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEZpbGVzOiBbXSxcbiAgICAgICAgICAgICAgICBwcmV2ZW50aW9uOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAncmV2aWV3LW1lbW9yeS1wYXR0ZXJucycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1JldmlldyBtZW1vcnkgdXNhZ2UgcGF0dGVybnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBbmFseXplIG1lbW9yeSB1c2FnZSBwYXR0ZXJucyBhbmQgb3B0aW1pemUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiB7IHR5cGU6ICdjb21tYW5kJywgZGF0YTogeyBjb21tYW5kOiAnbnBtIHJ1biBtZW1vcnktYW5hbHlzaXMnIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEltcGFjdDogJ2hpZ2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkRWZmb3J0OiAnaG91cnMnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnb3B0aW1pemUtZGF0YS1zdHJ1Y3R1cmVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT3B0aW1pemUgZGF0YSBzdHJ1Y3R1cmVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUmV2aWV3IGFuZCBvcHRpbWl6ZSBkYXRhIHN0cnVjdHVyZXMgZm9yIG1lbW9yeSBlZmZpY2llbmN5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogeyB0eXBlOiAnZmlsZS1lZGl0JywgZGF0YTogeyBwYXR0ZXJuOiAnKiovKi50cycgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkSW1wYWN0OiAnbWVkaXVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEVmZm9ydDogJ2hvdXJzJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJ2NoZWNrLXJlc291cmNlLWxlYWtzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQ2hlY2sgZm9yIHJlc291cmNlIGxlYWtzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnU2NhbiBmb3IgcmVzb3VyY2UgbGVha3MgYW5kIG1lbW9yeSByZXRlbnRpb24gaXNzdWVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogeyB0eXBlOiAnY29tbWFuZCcsIGRhdGE6IHsgY29tbWFuZDogJ25wbSBydW4gbGVhay1kZXRlY3Rpb24nIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZEltcGFjdDogJ2hpZ2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXN0aW1hdGVkRWZmb3J0OiAnaG91cnMnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHRpbWVsaW5lOiAnMTUtMzAgbWludXRlcycsXG4gICAgICAgICAgICAgICAgcHJlZGljdGlvbjogJ01lbW9yeSB1c2FnZSB3aWxsIGNvbnRpbnVlIHRvIGluY3JlYXNlJyxcbiAgICAgICAgICAgICAgICBpbXBhY3Q6ICdoaWdoJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY3VsYXRlVHJlbmQodmFsdWVzOiBudW1iZXJbXSk6IG51bWJlciB7XG4gICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoIDwgMikgcmV0dXJuIDA7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBuID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc3VtWCA9IChuICogKG4gLSAxKSkgLyAyO1xuICAgICAgICBjb25zdCBzdW1ZID0gdmFsdWVzLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCk7XG4gICAgICAgIGNvbnN0IHN1bVhZID0gdmFsdWVzLnJlZHVjZSgoc3VtLCB2YWwsIGkpID0+IHN1bSArIChpICogdmFsKSwgMCk7XG4gICAgICAgIGNvbnN0IHN1bVhYID0gKG4gKiAobiAtIDEpICogKDIgKiBuIC0gMSkpIC8gNjtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAobiAqIHN1bVhZIC0gc3VtWCAqIHN1bVkpIC8gKG4gKiBzdW1YWCAtIHN1bVggKiBzdW1YKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGV4dHJhY3RBZmZlY3RlZEZpbGVzKGV2ZW50czogQW5hbHl0aWNzRXZlbnRbXSk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICAgICAgZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50Lm1ldGFkYXRhLmZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgZmlsZXMuYWRkKGV2ZW50Lm1ldGFkYXRhLmZpbGVQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlUmlza1JlY29tbWVuZGF0aW9ucyhyaXNrTGV2ZWw6IHN0cmluZywgY3JpdGljYWxGYWN0b3JzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgIGlmIChyaXNrTGV2ZWwgPT09ICdoaWdoJykge1xuICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0ltbWVkaWF0ZSBhdHRlbnRpb24gcmVxdWlyZWQnKTtcbiAgICAgICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdSZXZpZXcgc3lzdGVtIHN0YWJpbGl0eScpO1xuICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0NvbnNpZGVyIHJvbGxiYWNrIGlmIHJlY2VudCBjaGFuZ2VzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JpdGljYWxGYWN0b3JzLmluY2x1ZGVzKCdFcnJvciBSYXRlJykpIHtcbiAgICAgICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdJbnZlc3RpZ2F0ZSBlcnJvciBwYXR0ZXJucycpO1xuICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ1JldmlldyBlcnJvciBsb2dzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JpdGljYWxGYWN0b3JzLmluY2x1ZGVzKCdGYWlsdXJlIFJhdGUnKSkge1xuICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ1JldmlldyB0ZXN0IGNvbmZpZ3VyYXRpb25zJyk7XG4gICAgICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnQ2hlY2sgZGVwZW5kZW5jeSB2ZXJzaW9ucycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyaXRpY2FsRmFjdG9ycy5pbmNsdWRlcygnSGlnaCBBbm9tYWxpZXMnKSkge1xuICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0ludmVzdGlnYXRlIHBlcmZvcm1hbmNlIGFub21hbGllcycpO1xuICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ01vbml0b3Igc3lzdGVtIHJlc291cmNlcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgICB9XG5cbiAgICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tb2RlbHMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy50cmFpbmluZ0RhdGEgPSBbXTtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=