{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/fileManager.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/fileManager.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as vscode from 'vscode';\nimport { OutputType } from '../types';\n\nexport interface FileOperationResult {\n  success: boolean;\n  filePath?: string;\n  error?: string;\n  content?: string;\n}\n\nexport interface FileStats {\n  size: number;\n  created: Date;\n  modified: Date;\n  accessed: Date;\n}\n\nexport class FileManager {\n  private outputChannel: vscode.OutputChannel;\n  private workspacePath: string;\n  private outputDirectory: string;\n  private watchers: fs.FSWatcher[] = [];\n\n  constructor(outputChannel: vscode.OutputChannel) {\n    this.outputChannel = outputChannel;\n    this.workspacePath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\n    this.outputDirectory = path.join(this.workspacePath, '.ai-debug-output');\n    this.ensureOutputDirectory();\n  }\n\n  // Output directory management\n  public getOutputDirectory(): string {\n    return this.outputDirectory;\n  }\n\n  public ensureOutputDirectory(): void {\n    if (!fs.existsSync(this.outputDirectory)) {\n      fs.mkdirSync(this.outputDirectory, { recursive: true });\n    }\n  }\n\n  // Initialize output files\n  public async initializeOutputFiles(types: string[]): Promise<Record<string, string>> {\n    const outputFiles: Record<string, string> = {};\n    \n    for (const type of types) {\n      const filePath = this.getOutputFilePath(type);\n      outputFiles[type] = filePath;\n      \n      // Create empty file if it doesn't exist\n      if (!fs.existsSync(filePath)) {\n        await fs.promises.writeFile(filePath, '', 'utf8');\n      }\n    }\n    \n    return outputFiles;\n  }\n\n  // Get output file path\n  public getOutputFilePath(fileName: string): string {\n    if (!fileName.endsWith('.txt')) {\n      fileName += '.txt';\n    }\n    return path.join(this.outputDirectory, fileName);\n  }\n\n  // Save output to file\n  public async saveOutput(type: OutputType, content: string): Promise<string> {\n    try {\n      const filePath = this.getOutputFilePath(type);\n      await fs.promises.writeFile(filePath, content, 'utf8');\n      this.outputChannel.appendLine(`Saved ${type} output to: ${filePath}`);\n      return filePath;\n    } catch (error) {\n      const message = `Failed to save ${type} output: ${error}`;\n      this.outputChannel.appendLine(message);\n      throw new Error(message);\n    }\n  }\n\n  // Get file content\n  public async getFileContent(type: OutputType): Promise<string> {\n    try {\n      const filePath = this.getOutputFilePath(type);\n      \n      if (!fs.existsSync(filePath)) {\n        return '';\n      }\n      \n      return await fs.promises.readFile(filePath, 'utf8');\n    } catch (error) {\n      this.outputChannel.appendLine(`Error reading ${type} file: ${error}`);\n      return '';\n    }\n  }\n\n  // Get file path\n  public getFilePath(type: OutputType): string {\n    return this.getOutputFilePath(type);\n  }\n\n  // Get file modification time\n  public getFileModTime(type: OutputType): Date | null {\n    try {\n      const filePath = this.getOutputFilePath(type);\n      if (!fs.existsSync(filePath)) {\n        return null;\n      }\n      \n      const stats = fs.statSync(filePath);\n      return stats.mtime;\n    } catch (error) {\n      this.outputChannel.appendLine(`Error getting mod time for ${type}: ${error}`);\n      return null;\n    }\n  }\n\n  // Get file stats\n  public async getFileStats(filePath: string): Promise<FileStats | null> {\n    try {\n      const stats = await fs.promises.stat(filePath);\n      return {\n        size: stats.size,\n        created: stats.birthtime,\n        modified: stats.mtime,\n        accessed: stats.atime\n      };\n    } catch (error) {\n      this.outputChannel.appendLine(`Error getting file stats for ${filePath}: ${error}`);\n      return null;\n    }\n  }\n\n  // Get all output files\n  public getAllOutputFiles(): Record<string, string> {\n    const files: Record<string, string> = {};\n    \n    try {\n      const outputFiles = fs.readdirSync(this.outputDirectory);\n      \n      for (const file of outputFiles) {\n        if (file.endsWith('.txt')) {\n          const name = file.replace('.txt', '');\n          files[name] = path.join(this.outputDirectory, file);\n        }\n      }\n    } catch (error) {\n      this.outputChannel.appendLine(`Error reading output directory: ${error}`);\n    }\n    \n    return files;\n  }\n\n  // Cleanup old files\n  public async cleanupOldFiles(maxAge: number = 7 * 24 * 60 * 60 * 1000): Promise<void> {\n    try {\n      const files = fs.readdirSync(this.outputDirectory);\n      const now = Date.now();\n      \n      for (const file of files) {\n        const filePath = path.join(this.outputDirectory, file);\n        const stats = fs.statSync(filePath);\n        \n        if (now - stats.mtime.getTime() > maxAge) {\n          await fs.promises.unlink(filePath);\n          this.outputChannel.appendLine(`Cleaned up old file: ${file}`);\n        }\n      }\n    } catch (error) {\n      this.outputChannel.appendLine(`Error cleaning up old files: ${error}`);\n    }\n  }\n\n  // Copy to clipboard\n  public async copyToClipboard(type: OutputType): Promise<void> {\n    try {\n      const content = await this.getFileContent(type);\n      await vscode.env.clipboard.writeText(content);\n      vscode.window.showInformationMessage(`${type} content copied to clipboard`);\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to copy ${type} to clipboard: ${error}`);\n    }\n  }\n\n  // Open file in editor\n  public async openFile(filePath: string): Promise<void> {\n    try {\n      const document = await vscode.workspace.openTextDocument(filePath);\n      await vscode.window.showTextDocument(document);\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to open file: ${error}`);\n    }\n  }\n\n  // Watch files for changes\n  public watchFiles(callback: (filePath: string, eventType: string) => void): vscode.Disposable {\n    const watcher = fs.watch(this.outputDirectory, (eventType, filename) => {\n      if (filename) {\n        const filePath = path.join(this.outputDirectory, filename);\n        callback(filePath, eventType);\n      }\n    });\n    \n    this.watchers.push(watcher);\n    \n    return {\n      dispose: () => {\n        const index = this.watchers.indexOf(watcher);\n        if (index > -1) {\n          this.watchers.splice(index, 1);\n        }\n        watcher.close();\n      }\n    };\n  }\n\n  // Basic file operations\n  public async readFile(filePath: string): Promise<FileOperationResult> {\n    try {\n      const fullPath = path.resolve(this.workspacePath, filePath);\n      const content = await fs.promises.readFile(fullPath, 'utf8');\n      return {\n        success: true,\n        filePath: fullPath,\n        content\n      };\n    } catch (error) {\n      return {\n        success: false,\n        filePath,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  public async writeFile(filePath: string, content: string): Promise<FileOperationResult> {\n    try {\n      const fullPath = path.resolve(this.workspacePath, filePath);\n      await fs.promises.mkdir(path.dirname(fullPath), { recursive: true });\n      await fs.promises.writeFile(fullPath, content, 'utf8');\n      \n      this.outputChannel.appendLine(`File written: ${fullPath}`);\n      \n      return {\n        success: true,\n        filePath: fullPath\n      };\n    } catch (error) {\n      return {\n        success: false,\n        filePath,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  public async ensureDirectoryExists(dirPath: string): Promise<void> {\n    const fullPath = path.resolve(this.workspacePath, dirPath);\n    await fs.promises.mkdir(fullPath, { recursive: true });\n  }\n\n  public async fileExists(filePath: string): Promise<boolean> {\n    try {\n      const fullPath = path.resolve(this.workspacePath, filePath);\n      await fs.promises.access(fullPath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  public async deleteFile(filePath: string): Promise<FileOperationResult> {\n    try {\n      const fullPath = path.resolve(this.workspacePath, filePath);\n      await fs.promises.unlink(fullPath);\n      return {\n        success: true,\n        filePath: fullPath\n      };\n    } catch (error) {\n      return {\n        success: false,\n        filePath,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  public async copyFile(sourcePath: string, destPath: string): Promise<FileOperationResult> {\n    try {\n      const fullSourcePath = path.resolve(this.workspacePath, sourcePath);\n      const fullDestPath = path.resolve(this.workspacePath, destPath);\n      \n      await fs.promises.mkdir(path.dirname(fullDestPath), { recursive: true });\n      await fs.promises.copyFile(fullSourcePath, fullDestPath);\n      \n      return {\n        success: true,\n        filePath: fullDestPath\n      };\n    } catch (error) {\n      return {\n        success: false,\n        filePath: destPath,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  public async listFiles(dirPath: string): Promise<string[]> {\n    try {\n      const fullPath = path.resolve(this.workspacePath, dirPath);\n      const files = await fs.promises.readdir(fullPath);\n      return files.map(file => path.join(dirPath, file));\n    } catch (error) {\n      this.outputChannel.appendLine(`Error listing files in ${dirPath}: ${error}`);\n      return [];\n    }\n  }\n\n  public getWorkspacePath(): string {\n    return this.workspacePath;\n  }\n\n  public getRelativePath(absolutePath: string): string {\n    return path.relative(this.workspacePath, absolutePath);\n  }\n\n  public getAbsolutePath(relativePath: string): string {\n    return path.resolve(this.workspacePath, relativePath);\n  }\n\n  public dispose(): void {\n    this.watchers.forEach(watcher => watcher.close());\n    this.watchers = [];\n  }\n}"],"version":3}