{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/engines/predictiveAnalyticsEngine.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/engines/predictiveAnalyticsEngine.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { \n    AnalyticsEvent, \n    PredictiveConfig, \n    PredictionResult, \n    ModelMetrics, \n    RiskAssessment,\n    AnomalyDetection,\n    ForecastResult,\n    PredictiveModel\n} from '../../../types';\n\nexport class PredictiveAnalyticsEngine extends EventEmitter {\n    private config: Required<PredictiveConfig>;\n    private models: Map<string, PredictiveModel> = new Map();\n    private trainingData: AnalyticsEvent[] = [];\n\n    constructor(config: PredictiveConfig) {\n        super();\n        this.config = {\n            enableAnomalyDetection: true,\n            enableTrendForecasting: true,\n            enableRiskAssessment: true,\n            modelUpdateInterval: 3600000, // 1 hour\n            anomalyThreshold: 2.0,\n            predictionHorizon: 24, // 24 hours\n            minTrainingDataSize: 100,\n            confidenceThreshold: 0.7,\n            ...config\n        };\n        this.initializeModels();\n    }\n\n    private initializeModels(): void {\n        // Initialize default models\n        const defaultModels: PredictiveModel[] = [\n            {\n                id: 'command_failure',\n                name: 'Command Failure Prediction',\n                type: 'classification',\n                isActive: true,\n                accuracy: 0.85,\n                precision: 0.82,\n                recall: 0.78,\n                f1Score: 0.80,\n                lastTrained: new Date(),\n                trainingDataSize: 0\n            },\n            {\n                id: 'performance_degradation',\n                name: 'Performance Degradation Prediction',\n                type: 'regression',\n                isActive: true,\n                accuracy: 0.75,\n                precision: 0.73,\n                recall: 0.77,\n                f1Score: 0.75,\n                lastTrained: new Date(),\n                trainingDataSize: 0\n            },\n            {\n                id: 'resource_utilization',\n                name: 'Resource Utilization Prediction',\n                type: 'regression',\n                isActive: true,\n                accuracy: 0.80,\n                precision: 0.78,\n                recall: 0.82,\n                f1Score: 0.80,\n                lastTrained: new Date(),\n                trainingDataSize: 0\n            }\n        ];\n\n        defaultModels.forEach(model => this.models.set(model.id, model));\n    }\n\n    public getAvailableModels(): PredictiveModel[] {\n        return Array.from(this.models.values());\n    }\n\n    public async trainModels(events: AnalyticsEvent[]): Promise<void> {\n        if (events.length < this.config.minTrainingDataSize) {\n            throw new Error(`Insufficient training data. Required: ${this.config.minTrainingDataSize}, provided: ${events.length}`);\n        }\n\n        this.trainingData = events;\n        \n        // Update model training metrics\n        this.models.forEach(model => {\n            model.lastTrained = new Date();\n            model.trainingDataSize = events.length;\n            // In a real implementation, this would update actual model accuracy\n            model.accuracy = Math.min(model.accuracy + 0.01, 0.95); // Simulate improvement\n        });\n\n        this.emit('modelsTrained', { modelCount: this.models.size, dataSize: events.length });\n    }\n\n    public async generatePredictions(events: AnalyticsEvent[]): Promise<PredictionResult[]> {\n        const predictions: PredictionResult[] = [];\n\n        // Command failure prediction\n        const commandFailurePrediction = this.predictCommandFailure(events);\n        if (commandFailurePrediction && (commandFailurePrediction.confidence ?? 0) >= this.config.confidenceThreshold) {\n            predictions.push(commandFailurePrediction);\n        }\n\n        // Performance degradation prediction\n        const performancePrediction = this.predictPerformanceDegradation(events);\n        if (performancePrediction && (performancePrediction.confidence ?? 0) >= this.config.confidenceThreshold) {\n            predictions.push(performancePrediction);\n        }\n\n        // Resource utilization prediction\n        const resourcePrediction = this.predictResourceUtilization(events);\n        if (resourcePrediction && (resourcePrediction.confidence ?? 0) >= this.config.confidenceThreshold) {\n            predictions.push(resourcePrediction);\n        }\n\n        return predictions;\n    }\n\n    public async detectAnomalies(events: AnalyticsEvent[]): Promise<AnomalyDetection[]> {\n        if (!this.config.enableAnomalyDetection) {\n            return [];\n        }\n\n        const anomalies: AnomalyDetection[] = [];\n        \n        // Performance anomaly detection\n        const performanceEvents = events.filter(e => e.type === 'performance_metric');\n        if (performanceEvents.length > 0) {\n            const avgValue = performanceEvents.reduce((sum, e) => sum + (e.metadata.value || 0), 0) / performanceEvents.length;\n            \n            performanceEvents.forEach(event => {\n                const value = event.metadata.value || 0;\n                const deviation = Math.abs(value - avgValue) / avgValue;\n                \n                if (deviation > 2.0) { // 200% deviation threshold\n                    anomalies.push({\n                        id: `anomaly_${event.id}`,\n                        type: 'performance',\n                        severity: deviation > 3.0 ? 'high' : 'medium',\n                        detectedAt: new Date(),\n                        event: event,\n                        description: `Performance value ${value} deviates significantly from average ${avgValue.toFixed(2)}`,\n                        confidence: Math.min(deviation / 2, 1),\n                        affectedMetrics: ['performance'],\n                        recommendation: 'Investigate system performance and resource usage'\n                    });\n                }\n            });\n        }\n\n        return anomalies;\n    }\n\n    public async generateForecasts(\n        events: AnalyticsEvent[], \n        metrics: string[], \n        horizonHours: number\n    ): Promise<ForecastResult[]> {\n        if (!this.config.enableTrendForecasting) {\n            return [];\n        }\n\n        const forecasts: ForecastResult[] = [];\n\n        metrics.forEach(metric => {\n            const relevantEvents = events.filter(e => e.metadata[metric] !== undefined);\n            \n            if (relevantEvents.length > 0) {\n                const values = relevantEvents.map(e => e.metadata[metric]);\n                const currentValue = values[values.length - 1];\n                \n                // Simple trend analysis\n                const trend = this.calculateTrend(values);\n                const forecastValue = currentValue + (trend * horizonHours);\n                \n                forecasts.push({\n                    id: `forecast_${metric}_${Date.now()}`,\n                    metric,\n                    currentValue,\n                    forecastValue,\n                    confidence: Math.max(0.5, 1 - (Math.abs(trend) / currentValue)),\n                    horizon: horizonHours,\n                    timeHorizon: horizonHours,\n                    trend: trend > 0 ? 'increasing' : trend < 0 ? 'decreasing' : 'stable',\n                    generatedAt: new Date(),\n                    dataPoints: relevantEvents.length\n                });\n            }\n        });\n\n        return forecasts;\n    }\n\n    public async assessRisk(events: AnalyticsEvent[]): Promise<RiskAssessment> {\n        if (!this.config.enableRiskAssessment) {\n            return {\n                overallRiskScore: 0,\n                riskLevel: 'low',\n                criticalFactors: [],\n                recommendations: [],\n                predictions: [],\n                anomalies: [],\n                assessedAt: new Date()\n            };\n        }\n\n        const predictions = await this.generatePredictions(events);\n        const anomalies = await this.detectAnomalies(events);\n\n        // Calculate risk factors\n        const errorRate = events.filter(e => e.type === 'error').length / events.length;\n        const failureRate = events.filter(e => e.type === 'command_executed' && !e.metadata.success).length / events.length;\n        const highAnomaly = anomalies.filter(a => a.severity === 'high').length;\n        \n        const riskFactors = [\n            { factor: 'Error Rate', weight: 0.3, value: errorRate },\n            { factor: 'Failure Rate', weight: 0.4, value: failureRate },\n            { factor: 'High Anomalies', weight: 0.3, value: highAnomaly / 10 } // Normalize\n        ];\n\n        const overallRiskScore = riskFactors.reduce((sum, factor) => \n            sum + (factor.weight * factor.value), 0\n        );\n\n        const riskLevel = overallRiskScore > 0.7 ? 'high' : \n                         overallRiskScore > 0.4 ? 'medium' : 'low';\n\n        const criticalFactors = riskFactors\n            .filter(factor => factor.value > 0.5)\n            .map(factor => factor.factor);\n\n        const recommendations = this.generateRiskRecommendations(riskLevel, criticalFactors);\n\n        return {\n            overallRiskScore,\n            riskLevel,\n            criticalFactors,\n            recommendations,\n            predictions,\n            anomalies,\n            assessedAt: new Date()\n        };\n    }\n\n    public getModelMetrics(modelId: string): ModelMetrics {\n        const model = this.models.get(modelId);\n        if (!model) {\n            throw new Error(`Model not found: ${modelId}`);\n        }\n\n        return {\n            accuracy: model.accuracy,\n            precision: model.precision,\n            recall: model.recall,\n            f1Score: model.f1Score,\n            lastTrained: model.lastTrained,\n            trainingDataSize: model.trainingDataSize\n        };\n    }\n\n    public toggleModel(modelId: string, isActive: boolean): void {\n        const model = this.models.get(modelId);\n        if (model) {\n            model.isActive = isActive;\n            this.emit('modelToggled', { modelId, isActive });\n        }\n    }\n\n    private predictCommandFailure(events: AnalyticsEvent[]): PredictionResult | null {\n        const commandEvents = events.filter(e => e.type === 'command_executed');\n        if (commandEvents.length === 0) {return null;}\n\n        const failureRate = commandEvents.filter(e => !e.metadata.success).length / commandEvents.length;\n        \n        if (failureRate > 0.25) { // 25% failure rate threshold\n            return {\n                type: 'test-failure',\n                probability: Math.min(failureRate * 2, 1),\n                confidence: Math.min(failureRate * 2, 1),\n                description: `High command failure rate detected: ${(failureRate * 100).toFixed(1)}%`,\n                affectedFiles: this.extractAffectedFiles(commandEvents),\n                prevention: [\n                    {\n                        id: 'review-code-changes',\n                        title: 'Review recent code changes',\n                        description: 'Check recent commits for potential issues',\n                        action: { type: 'command', data: { command: 'git log --oneline -10' } },\n                        estimatedImpact: 'medium',\n                        estimatedEffort: 'minutes'\n                    },\n                    {\n                        id: 'check-test-config',\n                        title: 'Check test configurations',\n                        description: 'Verify test setup and configuration files',\n                        action: { type: 'file-edit', data: { file: 'jest.config.js' } },\n                        estimatedImpact: 'medium',\n                        estimatedEffort: 'minutes'\n                    },\n                    {\n                        id: 'verify-dependencies',\n                        title: 'Verify dependencies are up to date',\n                        description: 'Check package.json and update dependencies',\n                        action: { type: 'command', data: { command: 'npm audit' } },\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'minutes'\n                    }\n                ],\n                timeline: '1-2 hours',\n                prediction: 'Command failures likely to continue',\n                impact: 'high'\n            };\n        }\n\n        return null;\n    }\n\n    private predictPerformanceDegradation(events: AnalyticsEvent[]): PredictionResult | null {\n        const performanceEvents = events.filter(e => e.type === 'performance_metric');\n        if (performanceEvents.length === 0) {return null;}\n\n        const avgResponseTime = performanceEvents.reduce((sum, e) => sum + (e.metadata.responseTime || 0), 0) / performanceEvents.length;\n        \n        if (avgResponseTime > 2000) { // 2 second threshold\n            return {\n                type: 'performance-degradation',\n                probability: Math.min(avgResponseTime / 3000, 1),\n                confidence: Math.min(avgResponseTime / 3000, 1),\n                description: `Performance degradation detected: ${avgResponseTime.toFixed(0)}ms average response time`,\n                affectedFiles: [],\n                prevention: [\n                    {\n                        id: 'optimize-queries',\n                        title: 'Optimize database queries',\n                        description: 'Review and optimize slow database queries',\n                        action: { type: 'command', data: { command: 'npm run analyze-queries' } },\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'hours'\n                    },\n                    {\n                        id: 'review-resources',\n                        title: 'Review resource allocation',\n                        description: 'Check system resource usage and allocation',\n                        action: { type: 'command', data: { command: 'top' } },\n                        estimatedImpact: 'medium',\n                        estimatedEffort: 'minutes'\n                    },\n                    {\n                        id: 'check-memory-leaks',\n                        title: 'Check for memory leaks',\n                        description: 'Run memory profiler to detect leaks',\n                        action: { type: 'command', data: { command: 'npm run profile' } },\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'hours'\n                    }\n                ],\n                timeline: '30-60 minutes',\n                prediction: 'Performance will continue to degrade',\n                impact: 'medium'\n            };\n        }\n\n        return null;\n    }\n\n    private predictResourceUtilization(events: AnalyticsEvent[]): PredictionResult | null {\n        const resourceEvents = events.filter(e => e.type === 'resource_usage');\n        if (resourceEvents.length === 0) {return null;}\n\n        const avgMemory = resourceEvents.reduce((sum, e) => sum + (e.metadata.memoryUsage || 0), 0) / resourceEvents.length;\n        \n        if (avgMemory > 85) { // 85% memory usage threshold\n            return {\n                type: 'security-issue',\n                probability: Math.min(avgMemory / 100, 1),\n                confidence: Math.min(avgMemory / 100, 1),\n                description: `High memory usage detected: ${avgMemory.toFixed(1)}%`,\n                affectedFiles: [],\n                prevention: [\n                    {\n                        id: 'review-memory-patterns',\n                        title: 'Review memory usage patterns',\n                        description: 'Analyze memory usage patterns and optimize',\n                        action: { type: 'command', data: { command: 'npm run memory-analysis' } },\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'hours'\n                    },\n                    {\n                        id: 'optimize-data-structures',\n                        title: 'Optimize data structures',\n                        description: 'Review and optimize data structures for memory efficiency',\n                        action: { type: 'file-edit', data: { pattern: '**/*.ts' } },\n                        estimatedImpact: 'medium',\n                        estimatedEffort: 'hours'\n                    },\n                    {\n                        id: 'check-resource-leaks',\n                        title: 'Check for resource leaks',\n                        description: 'Scan for resource leaks and memory retention issues',\n                        action: { type: 'command', data: { command: 'npm run leak-detection' } },\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'hours'\n                    }\n                ],\n                timeline: '15-30 minutes',\n                prediction: 'Memory usage will continue to increase',\n                impact: 'high'\n            };\n        }\n\n        return null;\n    }\n\n    private calculateTrend(values: number[]): number {\n        if (values.length < 2) {return 0;}\n        \n        const n = values.length;\n        const sumX = (n * (n - 1)) / 2;\n        const sumY = values.reduce((sum, val) => sum + val, 0);\n        const sumXY = values.reduce((sum, val, i) => sum + (i * val), 0);\n        const sumXX = (n * (n - 1) * (2 * n - 1)) / 6;\n        \n        return (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    }\n\n    private extractAffectedFiles(events: AnalyticsEvent[]): string[] {\n        const files = new Set<string>();\n        events.forEach(event => {\n            if (event.metadata.filePath) {\n                files.add(event.metadata.filePath);\n            }\n        });\n        return Array.from(files);\n    }\n\n    private generateRiskRecommendations(riskLevel: string, criticalFactors: string[]): string[] {\n        const recommendations: string[] = [];\n\n        if (riskLevel === 'high') {\n            recommendations.push('Immediate attention required');\n            recommendations.push('Review system stability');\n            recommendations.push('Consider rollback if recent changes');\n        }\n\n        if (criticalFactors.includes('Error Rate')) {\n            recommendations.push('Investigate error patterns');\n            recommendations.push('Review error logs');\n        }\n\n        if (criticalFactors.includes('Failure Rate')) {\n            recommendations.push('Review test configurations');\n            recommendations.push('Check dependency versions');\n        }\n\n        if (criticalFactors.includes('High Anomalies')) {\n            recommendations.push('Investigate performance anomalies');\n            recommendations.push('Monitor system resources');\n        }\n\n        return recommendations;\n    }\n\n    public dispose(): void {\n        this.models.clear();\n        this.trainingData = [];\n        this.removeAllListeners();\n    }\n}\n"],"version":3}