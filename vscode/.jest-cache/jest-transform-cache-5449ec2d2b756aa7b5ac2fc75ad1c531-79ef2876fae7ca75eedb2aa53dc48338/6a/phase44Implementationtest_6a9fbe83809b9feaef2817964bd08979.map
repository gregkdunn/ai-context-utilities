{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/__tests__/phase44Implementation.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/__tests__/phase44Implementation.test.ts"],"sourcesContent":["import { AnalyticsEngine } from '../analyticsEngine';\nimport { PredictiveAnalyticsEngine } from '../engines/predictiveAnalyticsEngine';\nimport { MetricsCollectionEngine } from '../engines/metricsCollectionEngine';\nimport { InteractiveDashboardEngine } from '../engines/interactiveDashboardEngine';\nimport { \n  AnalyticsEvent, \n  TimeRange, \n  DashboardConfig, \n  PredictiveConfig,\n  MetricsCollectionConfig \n} from '../../../types';\n\ndescribe('Phase 4.4 - Advanced Analytics System', () => {\n  let analyticsEngine: AnalyticsEngine;\n  let predictiveEngine: PredictiveAnalyticsEngine;\n  let metricsEngine: MetricsCollectionEngine;\n  let dashboardEngine: InteractiveDashboardEngine;\n\n  beforeEach(() => {\n    analyticsEngine = new AnalyticsEngine({\n      bufferSize: 100,\n      flushInterval: 1000,\n      enablePredictiveAnalytics: true,\n      enableRealTimeMonitoring: true\n    });\n\n    predictiveEngine = new PredictiveAnalyticsEngine({\n      enableAnomalyDetection: true,\n      enableTrendForecasting: true,\n      enableRiskAssessment: true,\n      minTrainingDataSize: 10,\n      confidenceThreshold: 0.5\n    });\n\n    metricsEngine = new MetricsCollectionEngine({\n      bufferSize: 100,\n      flushInterval: 1000,\n      enableSystemMetrics: true,\n      enableCustomMetrics: true\n    });\n\n    dashboardEngine = new InteractiveDashboardEngine();\n  });\n\n  afterEach(() => {\n    analyticsEngine.dispose();\n    predictiveEngine = null as any;\n    metricsEngine.dispose();\n    dashboardEngine.dispose();\n  });\n\n  describe('AnalyticsEngine', () => {\n    it('should initialize with default configuration', () => {\n      expect(analyticsEngine).toBeDefined();\n      expect(analyticsEngine.listDashboards()).toEqual([]);\n    });\n\n    it('should start and stop collection', () => {\n      const startSpy = jest.fn();\n      const stopSpy = jest.fn();\n      \n      analyticsEngine.on('collectionStarted', startSpy);\n      analyticsEngine.on('collectionStopped', stopSpy);\n      \n      analyticsEngine.startCollection();\n      expect(startSpy).toHaveBeenCalled();\n      \n      analyticsEngine.stopCollection();\n      expect(stopSpy).toHaveBeenCalled();\n    });\n\n    it('should track events and validate them', async () => {\n      const validEvent: AnalyticsEvent = {\n        id: 'test-event-1',\n        type: 'command_executed',\n        timestamp: new Date(),\n        userId: 'user123',\n        metadata: {\n          command: 'npm test',\n          success: true,\n          executionTime: 1500\n        }\n      };\n\n      analyticsEngine.startCollection();\n      \n      await expect(analyticsEngine.trackEvent(validEvent)).resolves.toBeUndefined();\n      \n      // Test invalid event\n      const invalidEvent = {\n        type: 'invalid_event',\n        // Missing required fields\n      } as AnalyticsEvent;\n      \n      await expect(analyticsEngine.trackEvent(invalidEvent)).rejects.toThrow('Invalid event structure');\n    });\n\n    it('should generate comprehensive metrics', async () => {\n      const timeRange: TimeRange = {\n        start: new Date(Date.now() - 3600000), // 1 hour ago\n        end: new Date()\n      };\n\n      const events: AnalyticsEvent[] = [\n        {\n          id: 'event1',\n          type: 'command_executed',\n          timestamp: new Date(Date.now() - 1800000),\n          userId: 'user1',\n          metadata: { command: 'npm test', success: true, executionTime: 1200 }\n        },\n        {\n          id: 'event2',\n          type: 'error',\n          timestamp: new Date(Date.now() - 1200000),\n          userId: 'user1',\n          metadata: { errorType: 'runtime', component: 'api' }\n        }\n      ];\n\n      analyticsEngine.startCollection();\n      \n      for (const event of events) {\n        await analyticsEngine.trackEvent(event);\n      }\n\n      const metrics = await analyticsEngine.generateMetrics(timeRange);\n      \n      expect(metrics).toHaveProperty('timeRange');\n      expect(metrics).toHaveProperty('commandExecutions');\n      expect(metrics).toHaveProperty('performance');\n      expect(metrics).toHaveProperty('errors');\n      expect(metrics).toHaveProperty('usage');\n      expect(metrics).toHaveProperty('trends');\n      expect(metrics.commandExecutions.total).toBe(1);\n      expect(metrics.errors.total).toBe(1);\n    });\n\n    it('should create and manage dashboards', async () => {\n      const dashboardConfig: DashboardConfig = {\n        name: 'Test Dashboard',\n        description: 'A test dashboard for analytics',\n        layout: { type: 'grid', columns: 12, rows: 'auto', gap: '1rem', padding: '1rem' },\n        widgets: [\n          {\n            type: 'line-chart',\n            title: 'Performance Metrics',\n            position: { x: 0, y: 0, width: 6, height: 4 },\n            configuration: { chartType: 'line' }\n          }\n        ]\n      };\n\n      const dashboard = await analyticsEngine.createDashboard(dashboardConfig);\n      \n      expect(dashboard).toHaveProperty('id');\n      expect(dashboard.name).toBe('Test Dashboard');\n      expect(dashboard.widgets).toHaveLength(1);\n\n      const retrieved = analyticsEngine.getDashboard(dashboard.id);\n      expect(retrieved).toEqual(dashboard);\n\n      const deleted = analyticsEngine.deleteDashboard(dashboard.id);\n      expect(deleted).toBe(true);\n      \n      expect(analyticsEngine.getDashboard(dashboard.id)).toBeUndefined();\n    });\n\n    it('should export reports in different formats', async () => {\n      const timeRange: TimeRange = {\n        start: new Date(Date.now() - 3600000),\n        end: new Date()\n      };\n\n      const events: AnalyticsEvent[] = [\n        {\n          id: 'event1',\n          type: 'command_executed',\n          timestamp: new Date(),\n          userId: 'user1',\n          metadata: { command: 'npm test', success: true }\n        }\n      ];\n\n      analyticsEngine.startCollection();\n      \n      for (const event of events) {\n        await analyticsEngine.trackEvent(event);\n      }\n\n      const jsonReport = await analyticsEngine.exportReport('json', timeRange);\n      expect(jsonReport).toBeInstanceOf(Buffer);\n      \n      const csvReport = await analyticsEngine.exportReport('csv', timeRange);\n      expect(csvReport).toBeInstanceOf(Buffer);\n    });\n\n    it('should generate predictive insights', async () => {\n      const events: AnalyticsEvent[] = [\n        {\n          id: 'event1',\n          type: 'command_executed',\n          timestamp: new Date(),\n          userId: 'user1',\n          metadata: { command: 'npm test', success: false, executionTime: 1200 }\n        },\n        {\n          id: 'event2',\n          type: 'command_executed',\n          timestamp: new Date(),\n          userId: 'user1',\n          metadata: { command: 'npm test', success: false, executionTime: 1500 }\n        }\n      ];\n\n      analyticsEngine.startCollection();\n      \n      for (const event of events) {\n        await analyticsEngine.trackEvent(event);\n      }\n\n      const predictions = await analyticsEngine.generatePredictions(events);\n      \n      expect(Array.isArray(predictions)).toBe(true);\n      // Should predict command failures due to high failure rate\n      expect(predictions.some(p => p.type === 'test-failure')).toBe(true);\n    });\n  });\n\n  describe('PredictiveAnalyticsEngine', () => {\n    it('should initialize with default models', () => {\n      const models = predictiveEngine.getAvailableModels();\n      expect(models.length).toBeGreaterThan(0);\n      expect(models.some(m => m.id === 'command_failure')).toBe(true);\n      expect(models.some(m => m.id === 'performance_degradation')).toBe(true);\n    });\n\n    it('should train models with sufficient data', async () => {\n      const events: AnalyticsEvent[] = Array.from({ length: 20 }, (_, i) => ({\n        id: `event${i}`,\n        type: 'command_executed',\n        timestamp: new Date(Date.now() - i * 60000),\n        userId: 'user1',\n        metadata: {\n          command: 'npm test',\n          success: Math.random() > 0.3,\n          executionTime: Math.random() * 2000 + 500\n        }\n      }));\n\n      await expect(predictiveEngine.trainModels(events)).resolves.toBeUndefined();\n    });\n\n    it('should reject training with insufficient data', async () => {\n      const events: AnalyticsEvent[] = Array.from({ length: 5 }, (_, i) => ({\n        id: `event${i}`,\n        type: 'command_executed',\n        timestamp: new Date(),\n        userId: 'user1',\n        metadata: { command: 'npm test', success: true }\n      }));\n\n      await expect(predictiveEngine.trainModels(events)).rejects.toThrow('Insufficient training data');\n    });\n\n    it('should generate predictions with confidence thresholds', async () => {\n      const events: AnalyticsEvent[] = Array.from({ length: 15 }, (_, i) => ({\n        id: `event${i}`,\n        type: 'command_executed',\n        timestamp: new Date(Date.now() - i * 60000),\n        userId: 'user1',\n        metadata: {\n          command: 'npm test',\n          success: i % 3 !== 0, // 33% failure rate\n          executionTime: Math.random() * 2000 + 500\n        }\n      }));\n\n      const predictions = await predictiveEngine.generatePredictions(events);\n      \n      expect(Array.isArray(predictions)).toBe(true);\n      predictions.forEach(prediction => {\n        expect(prediction.confidence || prediction.probability).toBeGreaterThanOrEqual(0.5);\n        expect(prediction).toHaveProperty('type');\n        expect(prediction).toHaveProperty('prediction');\n        expect(prediction).toHaveProperty('recommendation');\n      });\n    });\n\n    it('should detect anomalies in event patterns', async () => {\n      const baselineEvents: AnalyticsEvent[] = Array.from({ length: 10 }, (_, i) => ({\n        id: `baseline${i}`,\n        type: 'performance_metric',\n        timestamp: new Date(Date.now() - i * 60000),\n        userId: 'user1',\n        metadata: { value: 100 + Math.random() * 20 } // Normal range: 100-120\n      }));\n\n      const anomalousEvents: AnalyticsEvent[] = [\n        {\n          id: 'anomaly1',\n          type: 'performance_metric',\n          timestamp: new Date(),\n          userId: 'user1',\n          metadata: { value: 500 } // Anomalous value\n        }\n      ];\n\n      // First, establish baseline\n      await predictiveEngine.trainModels(baselineEvents);\n      \n      // Then detect anomalies\n      const anomalies = await predictiveEngine.detectAnomalies([...baselineEvents, ...anomalousEvents]);\n      \n      expect(Array.isArray(anomalies)).toBe(true);\n      // Should detect the anomalous value\n      expect(anomalies.length).toBeGreaterThan(0);\n    });\n\n    it('should generate forecasts for metrics', async () => {\n      const events: AnalyticsEvent[] = Array.from({ length: 15 }, (_, i) => ({\n        id: `event${i}`,\n        type: 'resource_usage',\n        timestamp: new Date(Date.now() - i * 60000),\n        userId: 'user1',\n        metadata: { \n          memoryUsage: 500 + i * 10, // Trending upward\n          responseTime: Math.random() * 1000 + 200 \n        }\n      }));\n\n      const forecasts = await predictiveEngine.generateForecasts(events, ['memoryUsage', 'responseTime'], 12);\n      \n      expect(Array.isArray(forecasts)).toBe(true);\n      forecasts.forEach(forecast => {\n        expect(forecast).toHaveProperty('metric');\n        expect(forecast).toHaveProperty('currentValue');\n        expect(forecast).toHaveProperty('forecastValue');\n        expect(forecast).toHaveProperty('confidence');\n      });\n    });\n\n    it('should assess overall risk levels', async () => {\n      const events: AnalyticsEvent[] = [\n        {\n          id: 'event1',\n          type: 'command_executed',\n          timestamp: new Date(),\n          userId: 'user1',\n          metadata: { command: 'npm test', success: false }\n        },\n        {\n          id: 'event2',\n          type: 'resource_usage',\n          timestamp: new Date(),\n          userId: 'user1',\n          metadata: { memoryUsage: 90, cpuUsage: 85 }\n        }\n      ];\n\n      const riskAssessment = await predictiveEngine.assessRisk(events);\n      \n      expect(riskAssessment).toHaveProperty('overallRiskScore');\n      expect(riskAssessment).toHaveProperty('riskLevel');\n      expect(riskAssessment).toHaveProperty('criticalFactors');\n      expect(riskAssessment).toHaveProperty('recommendations');\n      expect(riskAssessment).toHaveProperty('predictions');\n      expect(riskAssessment).toHaveProperty('anomalies');\n      expect(riskAssessment.riskLevel).toMatch(/^(low|medium|high)$/);\n    });\n\n    it('should provide model performance metrics', () => {\n      const modelId = 'command_failure';\n      const metrics = predictiveEngine.getModelMetrics(modelId);\n      \n      expect(metrics).toHaveProperty('accuracy');\n      expect(metrics).toHaveProperty('precision');\n      expect(metrics).toHaveProperty('recall');\n      expect(metrics).toHaveProperty('f1Score');\n      expect(metrics).toHaveProperty('lastTrained');\n      expect(metrics.accuracy).toBeGreaterThan(0);\n      expect(metrics.accuracy).toBeLessThanOrEqual(1);\n    });\n\n    it('should toggle model activation', () => {\n      const modelId = 'command_failure';\n      \n      predictiveEngine.toggleModel(modelId, false);\n      let model = predictiveEngine.getAvailableModels().find(m => m.id === modelId);\n      expect(model?.isActive).toBe(false);\n      \n      predictiveEngine.toggleModel(modelId, true);\n      model = predictiveEngine.getAvailableModels().find(m => m.id === modelId);\n      expect(model?.isActive).toBe(true);\n    });\n  });\n\n  describe('MetricsCollectionEngine', () => {\n    it('should initialize with default metrics', () => {\n      const definitions = metricsEngine.getMetricDefinitions();\n      expect(definitions.length).toBeGreaterThan(0);\n      expect(definitions.some(d => d.name === 'command.execution.time')).toBe(true);\n      expect(definitions.some(d => d.name === 'command.execution.count')).toBe(true);\n    });\n\n    it('should define and collect custom metrics', () => {\n      const metricDefinition = {\n        name: 'custom.metric',\n        type: 'gauge' as const,\n        unit: 'count',\n        description: 'A custom metric for testing',\n        tags: ['test']\n      };\n\n      metricsEngine.defineMetric(metricDefinition);\n      metricsEngine.startCollection();\n      \n      expect(() => {\n        metricsEngine.collectMetric('custom.metric', 42, { environment: 'test' });\n      }).not.toThrow();\n    });\n\n    it('should validate metric definitions', () => {\n      const invalidDefinition = {\n        name: '',\n        type: 'invalid' as any,\n        unit: 'count',\n        description: 'Invalid metric',\n        tags: []\n      };\n\n      expect(() => {\n        metricsEngine.defineMetric(invalidDefinition);\n      }).toThrow('Invalid metric definition');\n    });\n\n    it('should apply collection rules', () => {\n      const rule = {\n        id: 'test_rule',\n        name: 'Test Rule',\n        condition: 'metric.name === \"test.metric\"',\n        action: 'filter' as const,\n        parameters: {},\n        isActive: true\n      };\n\n      const metricDefinition = {\n        name: 'test.metric',\n        type: 'counter' as const,\n        unit: 'count',\n        description: 'Test metric',\n        tags: []\n      };\n\n      metricsEngine.defineMetric(metricDefinition);\n      metricsEngine.createCollectionRule(rule);\n      metricsEngine.startCollection();\n\n      const collectedSpy = jest.fn();\n      metricsEngine.on('metricCollected', collectedSpy);\n\n      // This should be filtered out by the rule\n      metricsEngine.collectMetric('test.metric', 1);\n      \n      expect(collectedSpy).not.toHaveBeenCalled();\n    });\n\n    it('should generate aggregated metrics', () => {\n      const metricDefinition = {\n        name: 'aggregation.test',\n        type: 'histogram' as const,\n        unit: 'milliseconds',\n        description: 'Aggregation test metric',\n        tags: []\n      };\n\n      metricsEngine.defineMetric(metricDefinition);\n      metricsEngine.startCollection();\n\n      // Collect some sample data\n      for (let i = 0; i < 10; i++) {\n        metricsEngine.collectMetric('aggregation.test', i * 10);\n      }\n\n      const aggregation = metricsEngine.getAggregatedMetrics('aggregation.test', '1m');\n      \n      expect(aggregation).toHaveProperty('count');\n      expect(aggregation).toHaveProperty('sum');\n      expect(aggregation).toHaveProperty('avg');\n      expect(aggregation).toHaveProperty('min');\n      expect(aggregation).toHaveProperty('max');\n      expect(aggregation!.count).toBe(10);\n      expect(aggregation!.sum).toBe(450); // 0+10+20+...+90\n    });\n\n    it('should collect system metrics automatically', (done) => {\n      const metricCollectedSpy = jest.fn();\n      metricsEngine.on('metricCollected', metricCollectedSpy);\n      \n      metricsEngine.startCollection();\n      \n      // Wait for system metrics to be collected\n      setTimeout(() => {\n        try {\n          expect(metricCollectedSpy).toHaveBeenCalled();\n          \n          // Check if system metrics were collected\n          const calls = metricCollectedSpy.mock.calls;\n          const systemMetricsCalls = calls.filter(call => \n            call[0].name.startsWith('system.')\n          );\n          \n          expect(systemMetricsCalls.length).toBeGreaterThan(0);\n          done();\n        } catch (error) {\n          done(error);\n        }\n      }, 1200); // Wait longer than system metrics interval\n    }, 15000); // Increase timeout to 15 seconds\n\n    it('should export metrics in different formats', () => {\n      const metricDefinition = {\n        name: 'export.test',\n        type: 'gauge' as const,\n        unit: 'count',\n        description: 'Export test metric',\n        tags: []\n      };\n\n      metricsEngine.defineMetric(metricDefinition);\n      metricsEngine.startCollection();\n      metricsEngine.collectMetric('export.test', 100);\n\n      const jsonExport = metricsEngine.exportMetrics('json');\n      expect(typeof jsonExport).toBe('string');\n      expect(() => JSON.parse(jsonExport)).not.toThrow();\n\n      const csvExport = metricsEngine.exportMetrics('csv');\n      expect(typeof csvExport).toBe('string');\n      expect(csvExport).toContain('Metric,Value,Timestamp,Tags');\n\n      const prometheusExport = metricsEngine.exportMetrics('prometheus');\n      expect(typeof prometheusExport).toBe('string');\n    });\n\n    it('should provide buffer status information', () => {\n      const metricDefinition = {\n        name: 'buffer.test',\n        type: 'counter' as const,\n        unit: 'count',\n        description: 'Buffer test metric',\n        tags: []\n      };\n\n      metricsEngine.defineMetric(metricDefinition);\n      metricsEngine.startCollection();\n      metricsEngine.collectMetric('buffer.test', 1);\n\n      const bufferStatus = metricsEngine.getBufferStatus();\n      \n      expect(bufferStatus).toBeInstanceOf(Map);\n      expect(bufferStatus.has('buffer.test')).toBe(true);\n      \n      const status = bufferStatus.get('buffer.test');\n      expect(status).toHaveProperty('size');\n      expect(status).toHaveProperty('lastUpdated');\n      expect(status!.size).toBe(1);\n    });\n\n    it('should clear metrics data', () => {\n      const metricDefinition = {\n        name: 'clear.test',\n        type: 'gauge' as const,\n        unit: 'count',\n        description: 'Clear test metric',\n        tags: []\n      };\n\n      metricsEngine.defineMetric(metricDefinition);\n      metricsEngine.startCollection();\n      metricsEngine.collectMetric('clear.test', 1);\n\n      let bufferStatus = metricsEngine.getBufferStatus();\n      expect(bufferStatus.has('clear.test')).toBe(true);\n\n      metricsEngine.clearMetrics();\n      \n      bufferStatus = metricsEngine.getBufferStatus();\n      expect(bufferStatus.has('clear.test')).toBe(false);\n    });\n  });\n\n  describe('InteractiveDashboardEngine', () => {\n    it('should create dashboards with widgets', async () => {\n      const config: DashboardConfig = {\n        name: 'Analytics Dashboard',\n        description: 'Main analytics dashboard',\n        widgets: [\n          {\n            type: 'line-chart',\n            title: 'Performance Chart',\n            position: { x: 0, y: 0, width: 6, height: 4 },\n            configuration: { chartType: 'line' }\n          },\n          {\n            type: 'metric-card',\n            title: 'Success Rate',\n            position: { x: 6, y: 0, width: 3, height: 2 },\n            configuration: { metric: 'success_rate' }\n          }\n        ]\n      };\n\n      const dashboard = await dashboardEngine.createDashboard(config);\n      \n      expect(dashboard).toHaveProperty('id');\n      expect(dashboard.name).toBe('Analytics Dashboard');\n      expect(dashboard.widgets).toHaveLength(2);\n      expect(dashboard.widgets[0].type).toBe('line-chart');\n      expect(dashboard.widgets[1].type).toBe('metric-card');\n    });\n\n    it('should update dashboard configurations', async () => {\n      const config: DashboardConfig = {\n        name: 'Test Dashboard',\n        description: 'Initial description'\n      };\n\n      const dashboard = await dashboardEngine.createDashboard(config);\n      \n      // Wait a bit to ensure different timestamps\n      await new Promise(resolve => setTimeout(resolve, 10));\n      \n      const updated = await dashboardEngine.updateDashboard(dashboard.id, {\n        name: 'Updated Dashboard',\n        description: 'Updated description'\n      });\n      \n      expect(updated.name).toBe('Updated Dashboard');\n      expect(updated.description).toBe('Updated description');\n      expect(updated.updatedAt.getTime()).toBeGreaterThan(dashboard.updatedAt.getTime());\n    });\n\n    it('should create and manage individual widgets', async () => {\n      const widgetConfig = {\n        type: 'bar-chart' as const,\n        title: 'Command Usage',\n        position: { x: 0, y: 0, width: 4, height: 3 },\n        configuration: { \n          chartType: 'bar',\n          dataSource: { type: 'analytics', query: 'command_usage' }\n        }\n      };\n\n      const widget = await dashboardEngine.createWidget(widgetConfig);\n      \n      expect(widget).toHaveProperty('id');\n      expect(widget.type).toBe('bar-chart');\n      expect(widget.title).toBe('Command Usage');\n    });\n\n    it('should refresh widget data', async () => {\n      const widgetConfig = {\n        type: 'gauge' as const,\n        title: 'System Health',\n        position: { x: 0, y: 0, width: 2, height: 2 },\n        configuration: { min: 0, max: 100 }\n      };\n\n      const widget = await dashboardEngine.createWidget(widgetConfig);\n      const data = await dashboardEngine.refreshWidgetData(widget.id);\n      \n      expect(data).toHaveProperty('id');\n      expect(data).toHaveProperty('type');\n      expect(data).toHaveProperty('data');\n      expect(data).toHaveProperty('metadata');\n      expect(data.id).toBe(widget.id);\n    });\n\n    it('should apply filters to dashboards', async () => {\n      const config: DashboardConfig = {\n        name: 'Filtered Dashboard',\n        description: 'Dashboard with filters'\n      };\n\n      const dashboard = await dashboardEngine.createDashboard(config);\n      \n      const filters = [\n        {\n          id: 'time_range',\n          type: 'date-range' as const,\n          label: 'Time Range',\n          value: { start: new Date(Date.now() - 3600000), end: new Date() }\n        },\n        {\n          id: 'user_filter',\n          type: 'select' as const,\n          label: 'User',\n          value: 'user123',\n          options: ['user123', 'user456']\n        }\n      ];\n\n      const appliedSpy = jest.fn();\n      dashboardEngine.on('filtersApplied', appliedSpy);\n\n      dashboardEngine.applyFilters(dashboard.id, filters);\n      \n      expect(appliedSpy).toHaveBeenCalledWith({\n        dashboardId: dashboard.id,\n        filters\n      });\n    });\n\n    it('should export dashboards', async () => {\n      const config: DashboardConfig = {\n        name: 'Export Test Dashboard',\n        description: 'Dashboard for export testing'\n      };\n\n      const dashboard = await dashboardEngine.createDashboard(config);\n      const exportData = await dashboardEngine.exportDashboard(dashboard.id, 'json');\n      \n      expect(exportData).toHaveProperty('dashboard');\n      expect(exportData).toHaveProperty('format');\n      expect(exportData).toHaveProperty('exportedAt');\n      expect(exportData).toHaveProperty('data');\n      expect(exportData.format).toBe('json');\n    });\n\n    it('should clone dashboards', async () => {\n      const config: DashboardConfig = {\n        name: 'Original Dashboard',\n        description: 'Original dashboard for cloning',\n        widgets: [\n          {\n            type: 'line-chart',\n            title: 'Original Chart',\n            position: { x: 0, y: 0, width: 4, height: 3 }\n          }\n        ]\n      };\n\n      const original = await dashboardEngine.createDashboard(config);\n      const cloned = await dashboardEngine.cloneDashboard(original.id, 'Cloned Dashboard', 'user123');\n      \n      expect(cloned.name).toBe('Cloned Dashboard');\n      expect(cloned.description).toContain('Clone of');\n      expect(cloned.widgets).toHaveLength(original.widgets.length);\n      expect(cloned.id).not.toBe(original.id);\n    });\n\n    it('should provide dashboard analytics', async () => {\n      const config: DashboardConfig = {\n        name: 'Analytics Test Dashboard',\n        description: 'Dashboard for analytics testing'\n      };\n\n      const dashboard = await dashboardEngine.createDashboard(config);\n      const analytics = dashboardEngine.getDashboardAnalytics(dashboard.id);\n      \n      expect(analytics).toHaveProperty('views');\n      expect(analytics).toHaveProperty('interactions');\n      expect(analytics).toHaveProperty('performance');\n      expect(analytics).toHaveProperty('widgets');\n      expect(typeof analytics.views).toBe('number');\n      expect(typeof analytics.interactions).toBe('number');\n    });\n\n    it('should manage dashboard themes', () => {\n      const customTheme = {\n        id: 'custom-theme',\n        name: 'Custom Theme',\n        colors: {\n          primary: '#FF6B6B',\n          secondary: '#4ECDC4',\n          success: '#45B7D1',\n          warning: '#FFA07A',\n          error: '#FF6B6B',\n          background: '#F8F9FA',\n          surface: '#FFFFFF',\n          text: '#333333'\n        },\n        fonts: {\n          body: 'Arial, sans-serif',\n          heading: 'Helvetica, sans-serif',\n          monospace: 'Courier New, monospace'\n        },\n        spacing: {\n          small: '4px',\n          medium: '8px',\n          large: '16px'\n        }\n      };\n\n      const themeCreatedSpy = jest.fn();\n      dashboardEngine.on('themeCreated', themeCreatedSpy);\n\n      dashboardEngine.createTheme(customTheme);\n      \n      expect(themeCreatedSpy).toHaveBeenCalledWith(customTheme);\n      \n      const themes = dashboardEngine.getThemes();\n      expect(themes.some(t => t.id === 'custom-theme')).toBe(true);\n    });\n\n    it('should list available widget types', () => {\n      const widgetTypes = dashboardEngine.getWidgetTypes();\n      \n      expect(Array.isArray(widgetTypes)).toBe(true);\n      expect(widgetTypes.length).toBeGreaterThan(0);\n      expect(widgetTypes.some(t => t.id === 'line-chart')).toBe(true);\n      expect(widgetTypes.some(t => t.id === 'bar-chart')).toBe(true);\n      expect(widgetTypes.some(t => t.id === 'pie-chart')).toBe(true);\n    });\n\n    it('should delete dashboards and clean up resources', async () => {\n      const config: DashboardConfig = {\n        name: 'Temporary Dashboard',\n        description: 'Dashboard to be deleted'\n      };\n\n      const dashboard = await dashboardEngine.createDashboard(config);\n      expect(dashboardEngine.getDashboard(dashboard.id)).toBeDefined();\n\n      const deletedSpy = jest.fn();\n      dashboardEngine.on('dashboardDeleted', deletedSpy);\n\n      const deleted = dashboardEngine.deleteDashboard(dashboard.id);\n      \n      expect(deleted).toBe(true);\n      expect(deletedSpy).toHaveBeenCalledWith(dashboard.id);\n      expect(dashboardEngine.getDashboard(dashboard.id)).toBeUndefined();\n    });\n  });\n\n  describe('Integration Tests', () => {\n    it('should integrate analytics engine with predictive engine', async () => {\n      const events: AnalyticsEvent[] = Array.from({ length: 15 }, (_, i) => ({\n        id: `integration-event-${i}`,\n        type: 'command_executed',\n        timestamp: new Date(Date.now() - i * 60000),\n        userId: 'integration-user',\n        metadata: {\n          command: 'npm test',\n          success: i % 4 !== 0, // 25% failure rate\n          executionTime: Math.random() * 1000 + 500\n        }\n      }));\n\n      analyticsEngine.startCollection();\n      \n      for (const event of events) {\n        await analyticsEngine.trackEvent(event);\n      }\n\n      const timeRange: TimeRange = {\n        start: new Date(Date.now() - 3600000),\n        end: new Date()\n      };\n\n      const metrics = await analyticsEngine.generateMetrics(timeRange);\n      expect(metrics.predictions).toBeDefined();\n      expect(Array.isArray(metrics.predictions)).toBe(true);\n    });\n\n    it('should integrate metrics engine with dashboard engine', async () => {\n      const metricDefinition = {\n        name: 'integration.test.metric',\n        type: 'gauge' as const,\n        unit: 'count',\n        description: 'Integration test metric',\n        tags: []\n      };\n\n      metricsEngine.defineMetric(metricDefinition);\n      metricsEngine.startCollection();\n      \n      // Collect some metrics\n      for (let i = 0; i < 10; i++) {\n        metricsEngine.collectMetric('integration.test.metric', i * 10);\n      }\n\n      const dashboardConfig: DashboardConfig = {\n        name: 'Metrics Integration Dashboard',\n        description: 'Dashboard showing metrics integration',\n        widgets: [\n          {\n            type: 'metric-card',\n            title: 'Integration Metric',\n            position: { x: 0, y: 0, width: 3, height: 2 },\n            configuration: { metric: 'integration.test.metric' }\n          }\n        ]\n      };\n\n      const dashboard = await dashboardEngine.createDashboard(dashboardConfig);\n      \n      expect(dashboard.widgets).toHaveLength(1);\n      expect(dashboard.widgets[0].title).toBe('Integration Metric');\n    });\n\n    it('should handle concurrent operations across all engines', async () => {\n      const promises: Promise<any>[] = [];\n      \n      // Start concurrent operations\n      promises.push(analyticsEngine.trackEvent({\n        id: 'concurrent-1',\n        type: 'command_executed',\n        timestamp: new Date(),\n        userId: 'concurrent-user',\n        metadata: { command: 'npm test', success: true }\n      }));\n\n      metricsEngine.collectMetric('command.execution.count', 1);\n      \n      promises.push(dashboardEngine.createDashboard({\n        name: 'Concurrent Dashboard',\n        description: 'Created during concurrent test'\n      }));\n\n      const events = Array.from({ length: 5 }, (_, i) => ({\n        id: `concurrent-${i}`,\n        type: 'command_executed',\n        timestamp: new Date(),\n        userId: 'concurrent-user',\n        metadata: { command: 'npm test', success: true }\n      }));\n\n      promises.push(predictiveEngine.generatePredictions(events));\n\n      // All operations should complete successfully\n      await expect(Promise.all(promises)).resolves.toBeDefined();\n    });\n  });\n});\n"],"version":3}