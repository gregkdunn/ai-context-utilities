13521688189c364cd387805cd43c8c3b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsEngine = void 0;
const events_1 = require("events");
/**
 * Advanced Analytics Engine for Phase 4.4
 *
 * Provides comprehensive analytics capabilities including:
 * - Advanced metrics collection and processing
 * - Interactive dashboard generation
 * - Predictive analytics and insights
 * - Custom report generation with export
 * - Real-time performance monitoring
 */
class AnalyticsEngine extends events_1.EventEmitter {
    metricsHistory = [];
    eventBuffer = [];
    dashboards = new Map();
    config;
    isCollecting = false;
    bufferFlushInterval;
    performanceMonitor;
    constructor(config = {}) {
        super();
        this.config = {
            bufferSize: 1000,
            flushInterval: 5000, // 5 seconds
            retentionDays: 30,
            enablePredictiveAnalytics: true,
            enableRealTimeMonitoring: true,
            ...config
        };
        this.initializeEngine();
    }
    /**
     * Initialize the analytics engine
     */
    initializeEngine() {
        this.startEventBuffering();
        if (this.config.enableRealTimeMonitoring) {
            this.startPerformanceMonitoring();
        }
        this.emit('engineInitialized');
    }
    /**
     * Start collecting analytics events
     */
    startCollection() {
        if (this.isCollecting) {
            return;
        }
        this.isCollecting = true;
        this.emit('collectionStarted');
    }
    /**
     * Stop collecting analytics events
     */
    stopCollection() {
        if (!this.isCollecting) {
            return;
        }
        this.isCollecting = false;
        this.flushEventBuffer();
        this.emit('collectionStopped');
    }
    /**
     * Track an analytics event
     */
    async trackEvent(event) {
        if (!this.isCollecting) {
            return;
        }
        // Validate event structure
        if (!this.validateEvent(event)) {
            throw new Error('Invalid event structure');
        }
        // Add to buffer
        this.eventBuffer.push({
            ...event,
            timestamp: event.timestamp || new Date(),
            id: event.id || this.generateEventId()
        });
        // Check if buffer needs flushing
        if (this.eventBuffer.length >= (this.config.bufferSize || 1000)) {
            this.flushEventBuffer();
        }
        this.emit('eventTracked', event);
    }
    /**
     * Generate comprehensive metrics for a time range
     */
    async generateMetrics(timeRange) {
        const events = this.getEventsInRange(timeRange);
        const metrics = {
            timeRange,
            commandExecutions: this.analyzeCommandExecutions(events),
            performance: this.analyzePerformance(events),
            errors: this.analyzeErrors(events),
            usage: this.analyzeUsage(events),
            trends: this.analyzeTrends(events),
            predictions: this.config.enablePredictiveAnalytics ?
                await this.generatePredictions(events) : undefined
        };
        // Store metrics snapshot
        this.metricsHistory.push({
            id: this.generateSnapshotId(),
            metrics: metrics,
            timestamp: new Date(),
            systemMetrics: {
                timestamp: new Date(),
                cpu: {
                    usage: 0,
                    cores: 1,
                    loadAverage: [0, 0, 0]
                },
                memory: {
                    total: 0,
                    used: 0,
                    free: 0,
                    percentage: 0
                },
                disk: {
                    total: 0,
                    used: 0,
                    free: 0,
                    percentage: 0
                },
                network: {
                    rx: 0,
                    tx: 0,
                    rxPackets: 0,
                    txPackets: 0
                },
                processes: 0,
                uptime: 0
            },
            collectionStats: {},
            bufferStats: {}
        });
        // Cleanup old metrics
        this.cleanupOldMetrics();
        this.emit('metricsGenerated', metrics);
        return metrics;
    }
    /**
     * Create an interactive dashboard
     */
    async createDashboard(config) {
        const dashboard = {
            id: config.id || this.generateDashboardId(),
            name: config.name,
            description: config.description,
            layout: config.layout || { type: 'grid', columns: 12, rows: 'auto', gap: '1rem', padding: '1rem' },
            widgets: await this.createDashboardWidgets(config),
            filters: config.filters || [],
            refreshInterval: config.refreshInterval || 30000,
            createdAt: new Date(),
            updatedAt: new Date(),
            isRealTime: config.isRealTime || false
        };
        this.dashboards.set(dashboard.id, dashboard);
        if (dashboard.isRealTime) {
            this.startDashboardUpdates(dashboard.id);
        }
        this.emit('dashboardCreated', dashboard);
        return dashboard;
    }
    /**
     * Export analytics data in specified format
     */
    async exportReport(format, timeRange, config) {
        const metrics = await this.generateMetrics(timeRange);
        const exportData = {
            metrics,
            events: this.getEventsInRange(timeRange),
            dashboards: Array.from(this.dashboards.values()),
            exportedAt: new Date(),
            timeRange,
            format
        };
        switch (format) {
            case 'json':
                return this.exportAsJson(exportData);
            case 'csv':
                return this.exportAsCsv(exportData);
            case 'pdf':
                return this.exportAsPdf(exportData, config);
            default:
                throw new Error(`Unsupported export format: ${format}`);
        }
    }
    /**
     * Generate predictive analytics insights
     */
    async generatePredictions(events) {
        if (!this.config.enablePredictiveAnalytics) {
            return [];
        }
        const analysisEvents = events || this.eventBuffer;
        const predictions = [];
        // Command failure prediction
        const failurePrediction = this.predictCommandFailures(analysisEvents);
        if (failurePrediction) {
            predictions.push(failurePrediction);
        }
        // Performance degradation prediction
        const performancePrediction = this.predictPerformanceDegradation(analysisEvents);
        if (performancePrediction) {
            predictions.push(performancePrediction);
        }
        // Resource utilization prediction
        const resourcePrediction = this.predictResourceUtilization(analysisEvents);
        if (resourcePrediction) {
            predictions.push(resourcePrediction);
        }
        return predictions;
    }
    /**
     * Get real-time performance metrics
     */
    getRealtimeMetrics() {
        const recentEvents = this.eventBuffer.slice(-100); // Last 100 events
        return this.analyzePerformance(recentEvents);
    }
    /**
     * Update dashboard configuration
     */
    async updateDashboard(id, config) {
        const dashboard = this.dashboards.get(id);
        if (!dashboard) {
            throw new Error(`Dashboard not found: ${id}`);
        }
        const updatedDashboard = {
            ...dashboard,
            ...config,
            updatedAt: new Date()
        };
        this.dashboards.set(id, updatedDashboard);
        this.emit('dashboardUpdated', updatedDashboard);
        return updatedDashboard;
    }
    /**
     * Get dashboard by ID
     */
    getDashboard(id) {
        return this.dashboards.get(id);
    }
    /**
     * List all dashboards
     */
    listDashboards() {
        return Array.from(this.dashboards.values());
    }
    /**
     * Delete a dashboard
     */
    deleteDashboard(id) {
        const deleted = this.dashboards.delete(id);
        if (deleted) {
            this.emit('dashboardDeleted', id);
        }
        return deleted;
    }
    /**
     * Get historical metrics
     */
    getMetricsHistory(limit) {
        return limit ? this.metricsHistory.slice(-limit) : this.metricsHistory;
    }
    /**
     * Clear all analytics data
     */
    clearData() {
        this.eventBuffer = [];
        this.metricsHistory = [];
        this.dashboards.clear();
        this.emit('dataCleared');
    }
    /**
     * Dispose of the analytics engine
     */
    dispose() {
        this.stopCollection();
        if (this.bufferFlushInterval) {
            clearInterval(this.bufferFlushInterval);
        }
        if (this.performanceMonitor) {
            clearInterval(this.performanceMonitor);
        }
        this.removeAllListeners();
    }
    // Private helper methods
    validateEvent(event) {
        return !!(event.type && event.timestamp && event.userId);
    }
    generateEventId() {
        return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    generateSnapshotId() {
        return `snapshot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    generateDashboardId() {
        return `dashboard_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    startEventBuffering() {
        this.bufferFlushInterval = setInterval(() => {
            if (this.eventBuffer.length > 0) {
                this.flushEventBuffer();
            }
        }, this.config.flushInterval);
    }
    flushEventBuffer() {
        if (this.eventBuffer.length === 0) {
            return;
        }
        const eventsToFlush = [...this.eventBuffer];
        this.eventBuffer = [];
        this.emit('bufferFlushed', eventsToFlush);
    }
    startPerformanceMonitoring() {
        this.performanceMonitor = setInterval(() => {
            const metrics = this.getRealtimeMetrics();
            this.emit('performanceUpdate', metrics);
        }, 1000); // Update every second
    }
    getEventsInRange(timeRange) {
        return this.eventBuffer.filter(event => event.timestamp >= timeRange.start &&
            event.timestamp <= timeRange.end);
    }
    analyzeCommandExecutions(events) {
        const commandEvents = events.filter(e => e.type === 'command_executed');
        const successEvents = commandEvents.filter(e => e.metadata.success);
        const failureEvents = commandEvents.filter(e => !e.metadata.success);
        return {
            total: commandEvents.length,
            successful: successEvents.length,
            failed: failureEvents.length,
            successRate: commandEvents.length > 0 ? successEvents.length / commandEvents.length : 0,
            averageExecutionTime: this.calculateAverageExecutionTime(commandEvents),
            mostUsedCommands: this.getMostUsedCommands(commandEvents),
            failurePatterns: this.analyzeFailurePatterns(failureEvents)
        };
    }
    analyzePerformance(events) {
        const performanceEvents = events.filter(e => e.type === 'performance_metric');
        return {
            averageResponseTime: this.calculateAverageResponseTime(performanceEvents),
            throughput: this.calculateThroughput(performanceEvents),
            errorRate: this.calculateErrorRate(events),
            memoryUsage: this.calculateMemoryUsage(performanceEvents),
            cpuUsage: this.calculateCpuUsage(performanceEvents),
            slowestOperations: this.findSlowestOperations(performanceEvents)
        };
    }
    analyzeErrors(events) {
        const errorEvents = events.filter(e => e.type === 'error');
        return {
            total: errorEvents.length,
            byType: this.groupErrorsByType(errorEvents),
            byComponent: this.groupErrorsByComponent(errorEvents),
            topErrors: this.getTopErrors(errorEvents),
            resolutionRate: this.calculateResolutionRate(errorEvents)
        };
    }
    analyzeUsage(events) {
        const userEvents = events.filter(e => e.userId);
        const uniqueUsers = new Set(userEvents.map(e => e.userId));
        return {
            activeUsers: uniqueUsers.size,
            totalSessions: this.countSessions(userEvents),
            averageSessionDuration: this.calculateAverageSessionDuration(userEvents),
            featureUsage: this.analyzeFeatureUsage(userEvents),
            userJourney: this.analyzeUserJourney(userEvents)
        };
    }
    analyzeTrends(events) {
        return {
            usage: this.calculateUsageTrend(events),
            performance: this.calculatePerformanceTrend(events),
            errors: this.calculateErrorTrend(events),
            predictions: this.generateTrendPredictions(events)
        };
    }
    predictCommandFailures(events) {
        const commandEvents = events.filter(e => e.type === 'command_executed');
        const failureRate = this.calculateFailureRate(commandEvents);
        if (failureRate > 0.3) { // 30% failure rate threshold
            return {
                type: 'test-failure',
                probability: Math.min(failureRate * 2, 1), // Cap at 100%
                confidence: Math.min(failureRate * 2, 1), // Cap at 100%
                description: 'High probability of command failures',
                affectedFiles: [],
                prevention: [],
                timeline: '1-2 hours',
                prediction: 'High probability of command failures',
                impact: 'high'
            };
        }
        return null;
    }
    predictPerformanceDegradation(events) {
        const performanceEvents = events.filter(e => e.type === 'performance_metric');
        const trend = this.calculatePerformanceTrend(performanceEvents);
        if (trend.direction === 'declining' && trend.severity > 0.7) {
            return {
                type: 'performance-degradation',
                probability: trend.severity,
                confidence: trend.severity,
                description: 'Performance degradation detected',
                affectedFiles: [],
                prevention: [],
                timeline: '30-60 minutes',
                prediction: 'Performance degradation detected',
                impact: 'medium'
            };
        }
        return null;
    }
    predictResourceUtilization(events) {
        const resourceEvents = events.filter(e => e.type === 'resource_usage');
        const memoryTrend = this.calculateMemoryTrend(resourceEvents);
        if (memoryTrend.utilizationRate > 0.8) {
            return {
                type: 'security-issue',
                probability: memoryTrend.utilizationRate,
                confidence: memoryTrend.utilizationRate,
                description: 'High resource utilization predicted',
                affectedFiles: [],
                prevention: [],
                timeline: '15-30 minutes',
                prediction: 'High resource utilization predicted',
                impact: 'high'
            };
        }
        return null;
    }
    async createDashboardWidgets(config) {
        // This would create actual dashboard widgets based on the configuration
        // For now, return a mock structure
        return [
            {
                id: 'performance_chart',
                type: 'chart',
                title: 'Performance Metrics',
                config: { chartType: 'line', metrics: ['responseTime', 'throughput'] }
            },
            {
                id: 'error_summary',
                type: 'summary',
                title: 'Error Overview',
                config: { metrics: ['errorRate', 'totalErrors'] }
            }
        ];
    }
    startDashboardUpdates(dashboardId) {
        const dashboard = this.dashboards.get(dashboardId);
        // Implementation for real-time dashboard updates
        setInterval(() => {
            const currentDashboard = this.dashboards.get(dashboardId);
            if (currentDashboard) {
                this.emit('dashboardUpdate', currentDashboard);
            }
        }, dashboard?.refreshInterval || 30000);
    }
    exportAsJson(data) {
        return Buffer.from(JSON.stringify(data, null, 2));
    }
    exportAsCsv(data) {
        // Simple CSV export implementation
        const csv = this.convertToCSV(data);
        return Buffer.from(csv);
    }
    exportAsPdf(data, config) {
        // PDF export would require a PDF library
        // For now, return a mock buffer
        return Buffer.from('PDF Report Content');
    }
    convertToCSV(data) {
        // Basic CSV conversion
        const lines = ['Type,Timestamp,User ID,Data'];
        data.events.forEach(event => {
            lines.push(`${event.type},${event.timestamp},${event.userId},${JSON.stringify(event.metadata)}`);
        });
        return lines.join('\n');
    }
    cleanupOldMetrics() {
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - (this.config.retentionDays || 30));
        this.metricsHistory = this.metricsHistory.filter(snapshot => snapshot.timestamp > cutoffDate);
    }
    // Additional helper methods for calculations
    calculateAverageExecutionTime(events) {
        const times = events.map(e => e.metadata.executionTime).filter(t => t);
        return times.length > 0 ? times.reduce((a, b) => a + b, 0) / times.length : 0;
    }
    calculateAverageResponseTime(events) {
        const times = events.map(e => e.metadata.responseTime).filter(t => t);
        return times.length > 0 ? times.reduce((a, b) => a + b, 0) / times.length : 0;
    }
    calculateThroughput(events) {
        return events.length / ((this.config.flushInterval || 5000) / 1000); // Events per second
    }
    calculateErrorRate(events) {
        const errorEvents = events.filter(e => e.type === 'error');
        return events.length > 0 ? errorEvents.length / events.length : 0;
    }
    calculateMemoryUsage(events) {
        const memoryEvents = events.filter(e => e.metadata.memoryUsage);
        if (memoryEvents.length === 0) {
            return 0;
        }
        const totalMemory = memoryEvents.reduce((sum, e) => sum + e.metadata.memoryUsage, 0);
        return totalMemory / memoryEvents.length;
    }
    calculateCpuUsage(events) {
        const cpuEvents = events.filter(e => e.metadata.cpuUsage);
        if (cpuEvents.length === 0) {
            return 0;
        }
        const totalCpu = cpuEvents.reduce((sum, e) => sum + e.metadata.cpuUsage, 0);
        return totalCpu / cpuEvents.length;
    }
    findSlowestOperations(events) {
        return events
            .filter(e => e.metadata.operationTime)
            .sort((a, b) => b.metadata.operationTime - a.metadata.operationTime)
            .slice(0, 10);
    }
    getMostUsedCommands(events) {
        const commandCounts = new Map();
        events.forEach(e => {
            const command = e.metadata.command;
            if (command) {
                commandCounts.set(command, (commandCounts.get(command) || 0) + 1);
            }
        });
        return Array.from(commandCounts.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10)
            .map(([command, count]) => ({ command, count }));
    }
    analyzeFailurePatterns(events) {
        const patterns = new Map();
        events.forEach(e => {
            const pattern = e.metadata.errorPattern || 'unknown';
            patterns.set(pattern, (patterns.get(pattern) || 0) + 1);
        });
        return Array.from(patterns.entries())
            .sort((a, b) => b[1] - a[1])
            .map(([pattern, count]) => ({ pattern, count }));
    }
    groupErrorsByType(events) {
        const types = new Map();
        events.forEach(e => {
            const type = e.metadata.errorType || 'unknown';
            types.set(type, (types.get(type) || 0) + 1);
        });
        return types;
    }
    groupErrorsByComponent(events) {
        const components = new Map();
        events.forEach(e => {
            const component = e.metadata.component || 'unknown';
            components.set(component, (components.get(component) || 0) + 1);
        });
        return components;
    }
    getTopErrors(events) {
        const errorCounts = new Map();
        events.forEach(e => {
            const error = e.metadata.errorMessage || 'unknown';
            errorCounts.set(error, (errorCounts.get(error) || 0) + 1);
        });
        return Array.from(errorCounts.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10)
            .map(([error, count]) => ({ error, count }));
    }
    calculateResolutionRate(events) {
        const resolvedEvents = events.filter(e => e.metadata.resolved);
        return events.length > 0 ? resolvedEvents.length / events.length : 0;
    }
    countSessions(events) {
        const sessions = new Set(events.map(e => e.sessionId).filter(s => s));
        return sessions.size;
    }
    calculateAverageSessionDuration(events) {
        const sessions = new Map();
        events.forEach(e => {
            if (e.sessionId) {
                if (!sessions.has(e.sessionId)) {
                    sessions.set(e.sessionId, { start: e.timestamp, end: e.timestamp });
                }
                else {
                    const session = sessions.get(e.sessionId);
                    if (e.timestamp < session.start) {
                        session.start = e.timestamp;
                    }
                    if (e.timestamp > session.end) {
                        session.end = e.timestamp;
                    }
                }
            }
        });
        const durations = Array.from(sessions.values())
            .map(s => s.end.getTime() - s.start.getTime());
        return durations.length > 0 ? durations.reduce((a, b) => a + b, 0) / durations.length : 0;
    }
    analyzeFeatureUsage(events) {
        const features = new Map();
        events.forEach(e => {
            const feature = e.metadata.feature;
            if (feature) {
                features.set(feature, (features.get(feature) || 0) + 1);
            }
        });
        return features;
    }
    analyzeUserJourney(events) {
        // Simplified user journey analysis
        const journeys = new Map();
        events.forEach(e => {
            if (e.userId && e.metadata.action) {
                if (!journeys.has(e.userId)) {
                    journeys.set(e.userId, []);
                }
                journeys.get(e.userId).push(e.metadata.action);
            }
        });
        return Array.from(journeys.entries()).map(([userId, actions]) => ({ userId, actions }));
    }
    calculateUsageTrend(events) {
        // Simplified trend calculation
        const hourlyUsage = new Map();
        events.forEach(e => {
            const hour = e.timestamp.getHours();
            hourlyUsage.set(hour, (hourlyUsage.get(hour) || 0) + 1);
        });
        return {
            direction: 'stable',
            data: Array.from(hourlyUsage.entries())
        };
    }
    calculatePerformanceTrend(events) {
        const performanceEvents = events.filter(e => e.type === 'performance_metric');
        if (performanceEvents.length === 0) {
            return { direction: 'stable', severity: 0 };
        }
        const avgResponseTime = this.calculateAverageResponseTime(performanceEvents);
        const severity = Math.min(avgResponseTime / 1000, 1); // Normalize to 0-1
        return {
            direction: severity > 0.7 ? 'declining' : 'stable',
            severity
        };
    }
    calculateErrorTrend(events) {
        const errorEvents = events.filter(e => e.type === 'error');
        const errorRate = this.calculateErrorRate(events);
        return {
            direction: errorRate > 0.1 ? 'increasing' : 'stable',
            rate: errorRate
        };
    }
    generateTrendPredictions(events) {
        return [
            {
                metric: 'usage',
                prediction: 'stable',
                confidence: 0.8
            },
            {
                metric: 'performance',
                prediction: 'improving',
                confidence: 0.6
            }
        ];
    }
    calculateFailureRate(events) {
        const failedEvents = events.filter(e => !e.metadata.success);
        return events.length > 0 ? failedEvents.length / events.length : 0;
    }
    calculateMemoryTrend(events) {
        const memoryEvents = events.filter(e => e.metadata.memoryUsage);
        if (memoryEvents.length === 0) {
            return { utilizationRate: 0 };
        }
        const avgMemory = this.calculateMemoryUsage(memoryEvents);
        const utilizationRate = Math.min(avgMemory / (1024 * 1024 * 1024), 1); // GB to ratio
        return { utilizationRate };
    }
}
exports.AnalyticsEngine = AnalyticsEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,