5a07bd7efe8b5f22e54b9f271b5c126b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileBatchManager = void 0;
const enhancedFileManager_1 = require("./enhancedFileManager");
const vscode = __importStar(require("vscode"));
class FileBatchManager {
    fileManager;
    activeBatches = new Map();
    constructor() {
        this.fileManager = new enhancedFileManager_1.EnhancedFileManager();
    }
    /**
     * Execute a batch file operation for a command
     */
    async executeBatch(command, files, options = {}) {
        const startTime = Date.now();
        const batchId = `${command}-${Date.now()}`;
        const errors = [];
        const outputPaths = {};
        let filesProcessed = 0;
        try {
            // Create backup if requested
            if (options.createBackup) {
                try {
                    await this.fileManager.createBackup(`${command}-auto`);
                }
                catch (error) {
                    errors.push(`Backup failed: ${error}`);
                }
            }
            // Process each file
            for (const file of files) {
                let retries = options.maxRetries || 0;
                let fileSuccess = false;
                while (!fileSuccess && retries >= 0) {
                    try {
                        if (options.validateContent) {
                            const filePath = await this.fileManager.saveOutputWithVersioning(file.type, file.content, { validate: true });
                            outputPaths[file.type] = filePath;
                        }
                        else {
                            const filePath = await this.fileManager.saveOutput(file.type, file.content);
                            outputPaths[file.type] = filePath;
                        }
                        filesProcessed++;
                        fileSuccess = true;
                    }
                    catch (error) {
                        retries--;
                        if (retries < 0) {
                            errors.push(`Failed to save ${file.type}: ${error}`);
                        }
                        else {
                            // Wait before retry
                            await new Promise(resolve => setTimeout(resolve, 100));
                        }
                    }
                }
            }
            // Create file batch record if tracking enabled
            if (options.trackHistory) {
                const batch = await this.fileManager.createFileBatch(command, files.map(f => f.type), errors.length === 0);
                this.activeBatches.set(batchId, batch);
            }
            // Notify user if requested
            if (options.notifyUser && errors.length === 0) {
                vscode.window.showInformationMessage(`${command}: Successfully processed ${filesProcessed} files`);
            }
            else if (options.notifyUser && errors.length > 0) {
                vscode.window.showWarningMessage(`${command}: Processed ${filesProcessed} files with ${errors.length} errors`);
            }
            const duration = Date.now() - startTime;
            return {
                success: errors.length === 0,
                batchId,
                filesProcessed,
                errors,
                duration,
                outputPaths
            };
        }
        catch (error) {
            const duration = Date.now() - startTime;
            return {
                success: false,
                batchId,
                filesProcessed,
                errors: [...errors, `Batch operation failed: ${error}`],
                duration,
                outputPaths
            };
        }
    }
    /**
     * Prepare output files for a command workflow
     */
    async prepareCommandOutputs(command, types) {
        const outputPaths = {};
        // Ensure output directory exists
        this.fileManager.ensureOutputDirectory();
        // Get file paths for each type
        for (const type of types) {
            outputPaths[type] = this.fileManager.getFilePath(type);
        }
        return outputPaths;
    }
    /**
     * Validate command outputs after execution
     */
    async validateCommandOutputs(command, expectedTypes) {
        const valid = [];
        const missing = [];
        const corrupt = [];
        for (const type of expectedTypes) {
            if (!this.fileManager.fileExists(type)) {
                missing.push(type);
                continue;
            }
            try {
                const content = await this.fileManager.getFileContent(type);
                if (!content || content.trim().length === 0) {
                    corrupt.push(type);
                }
                else if (this.isContentValid(type, content)) {
                    valid.push(type);
                }
                else {
                    corrupt.push(type);
                }
            }
            catch (error) {
                corrupt.push(type);
            }
        }
        return { valid, missing, corrupt };
    }
    /**
     * Create a summary report of file operations
     */
    async createOperationSummary(command, result, additionalContext) {
        const timestamp = new Date().toISOString();
        const fileStats = await Promise.all(Object.entries(result.outputPaths).map(async ([type, path]) => {
            const stats = await this.fileManager.getFileStats(path);
            return `${type}: ${stats.size} (${stats.lines} lines)`;
        }));
        let summary = `
=================================================================
📊 FILE OPERATION SUMMARY - ${command.toUpperCase()}
=================================================================

🕐 Timestamp: ${timestamp}
⏱️  Duration: ${result.duration}ms
📁 Batch ID: ${result.batchId}
✅ Success: ${result.success ? 'Yes' : 'No'}
📄 Files Processed: ${result.filesProcessed}
❌ Errors: ${result.errors.length}

=================================================================
📋 FILE DETAILS
=================================================================

${fileStats.join('\n')}

`;
        if (result.errors.length > 0) {
            summary += `
=================================================================
⚠️  ERRORS ENCOUNTERED
=================================================================

${result.errors.map((error, i) => `${i + 1}. ${error}`).join('\n')}

`;
        }
        if (additionalContext) {
            summary += `
=================================================================
📝 ADDITIONAL CONTEXT
=================================================================

${Object.entries(additionalContext)
                .map(([key, value]) => `${key}: ${JSON.stringify(value, null, 2)}`)
                .join('\n')}

`;
        }
        summary += `
=================================================================
🎯 RECOMMENDATIONS
=================================================================

`;
        if (result.success) {
            summary += `✅ All files processed successfully
• Files are ready for AI analysis
• Consider creating a backup before major changes
• Review file content for accuracy
`;
        }
        else {
            summary += `⚠️  Some operations failed
• Review error messages above
• Check file permissions and disk space
• Consider retrying failed operations
• Verify output directory accessibility
`;
        }
        return summary;
    }
    /**
     * Get file manager instance for direct access
     */
    getFileManager() {
        return this.fileManager;
    }
    /**
     * Monitor file changes for active batches
     */
    monitorBatchFiles(batchId, callback) {
        const batch = this.activeBatches.get(batchId);
        if (!batch) {
            throw new Error(`Batch ${batchId} not found`);
        }
        return this.fileManager.watchOutputFiles((event) => {
            // Only notify about files in this batch
            const batchTypes = batch.files.map(f => f.type);
            if (batchTypes.includes(event.file)) {
                callback(event.file, event.path, event.type);
            }
        });
    }
    /**
     * Get status of all active batches
     */
    getActiveBatches() {
        return new Map(this.activeBatches);
    }
    /**
     * Get specific batch by ID
     */
    getBatch(batchId) {
        return this.activeBatches.get(batchId);
    }
    /**
     * Clean up completed batches
     */
    cleanupCompletedBatches(maxAge = 60 * 60 * 1000) {
        const now = Date.now();
        for (const [batchId, batch] of this.activeBatches) {
            const age = now - batch.timestamp.getTime();
            if (age > maxAge) {
                this.activeBatches.delete(batchId);
            }
        }
    }
    /**
     * Validate content based on file type
     */
    isContentValid(type, content) {
        switch (type) {
            case 'jest-output':
                return content.includes('Test') || content.includes('PASS') ||
                    content.includes('FAIL') || content.includes('SKIP');
            case 'diff':
                return content.trim() === '' || content.includes('diff --git') ||
                    content.includes('@@') || content.includes('No changes detected');
            case 'ai-debug-context':
                return content.includes('AI DEBUG CONTEXT') || content.length > 100;
            case 'pr-description':
                return content.includes('PR DESCRIPTION') || content.includes('Problem') ||
                    content.includes('Solution');
            default:
                return content.length > 0;
        }
    }
}
exports.FileBatchManager = FileBatchManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,