b397252330477b736863e3bbeae348f5
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock fs module
jest.mock('fs');
jest.mock('path');
jest.mock('vscode', () => mockVscode);
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
// Mock vscode module
const mockVscode = {
    workspace: {
        workspaceFolders: [
            { uri: { fsPath: '/test/workspace' } }
        ]
    },
    window: {
        activeTextEditor: null
    }
};
// Import after mocking
const projectDetector_1 = require("../projectDetector");
const mockedFs = jest.mocked(fs);
const mockedPath = jest.mocked(path);
describe('ProjectDetector', () => {
    let projectDetector;
    beforeEach(() => {
        jest.clearAllMocks();
        projectDetector = new projectDetector_1.ProjectDetector('/test/workspace');
        // Setup path mocks
        mockedPath.join.mockImplementation((...segments) => segments.join('/'));
        mockedPath.basename.mockImplementation((p) => p.split('/').pop() || '');
        mockedPath.relative.mockImplementation((from, to) => to.replace(from, '').replace(/^\//, ''));
    });
    describe('findNxWorkspace', () => {
        it('should find nx.json workspace', async () => {
            mockedFs.existsSync.mockImplementation((filePath) => {
                return filePath === '/test/workspace/nx.json';
            });
            const result = await projectDetector.findNxWorkspace();
            expect(result).toBe('/test/workspace/nx.json');
        });
        it('should find angular.json workspace', async () => {
            mockedFs.existsSync.mockImplementation((filePath) => {
                return filePath === '/test/workspace/angular.json';
            });
            const result = await projectDetector.findNxWorkspace();
            expect(result).toBe('/test/workspace/angular.json');
        });
        it('should return null if no workspace config found', async () => {
            mockedFs.existsSync.mockReturnValue(false);
            const result = await projectDetector.findNxWorkspace();
            expect(result).toBeNull();
        });
        it('should handle errors gracefully', async () => {
            mockedFs.existsSync.mockImplementation(() => {
                throw new Error('File system error');
            });
            const result = await projectDetector.findNxWorkspace();
            expect(result).toBeNull();
        });
    });
    describe('getProjects', () => {
        it('should parse NX workspace with project.json files', async () => {
            // Mock file system to simulate empty project detection
            mockedFs.existsSync.mockReturnValue(false);
            Object.defineProperty(mockedFs, 'readdirSync', {
                value: jest.fn().mockReturnValue([]),
                writable: true,
                configurable: true
            });
            mockedFs.statSync = jest.fn();
            const projects = await projectDetector.getProjects();
            // Should return empty array when no projects are found
            expect(projects).toHaveLength(0);
        });
        it('should parse Angular workspace format', async () => {
            const angularConfig = {
                projects: {
                    'my-app': {
                        root: 'projects/my-app',
                        projectType: 'application',
                        architect: {
                            build: {},
                            test: {}
                        }
                    }
                }
            };
            mockedFs.existsSync.mockImplementation((filePath) => {
                return filePath === '/test/workspace/angular.json';
            });
            mockedFs.readFileSync.mockReturnValue(JSON.stringify(angularConfig));
            Object.defineProperty(mockedFs, 'readdirSync', {
                value: jest.fn().mockReturnValue([]),
                writable: true,
                configurable: true
            });
            mockedFs.statSync = jest.fn();
            const projects = await projectDetector.getProjects();
            expect(projects).toHaveLength(1);
            expect(projects[0]).toMatchObject({
                name: 'my-app',
                type: 'angular',
                projectType: 'application',
                targets: { build: {}, test: {} }
            });
        });
        it('should handle inline project configurations', async () => {
            const nxConfig = {
                projects: {
                    'inline-project': {
                        root: 'apps/inline',
                        projectType: 'application',
                        targets: { build: {} }
                    }
                }
            };
            mockedFs.existsSync.mockImplementation((filePath) => {
                return filePath === '/test/workspace/nx.json';
            });
            mockedFs.readFileSync.mockReturnValue(JSON.stringify(nxConfig));
            Object.defineProperty(mockedFs, 'readdirSync', {
                value: jest.fn().mockReturnValue([]),
                writable: true,
                configurable: true
            });
            mockedFs.statSync = jest.fn();
            const projects = await projectDetector.getProjects();
            expect(projects).toHaveLength(1);
            expect(projects[0]).toMatchObject({
                name: 'inline-project',
                type: 'nx',
                projectType: 'application'
            });
        });
        it('should return empty array when no config found', async () => {
            mockedFs.existsSync.mockReturnValue(false);
            Object.defineProperty(mockedFs, 'readdirSync', {
                value: jest.fn().mockReturnValue([]),
                writable: true,
                configurable: true
            });
            mockedFs.statSync = jest.fn();
            const projects = await projectDetector.getProjects();
            expect(projects).toEqual([]);
        });
        it('should handle JSON parsing errors', async () => {
            mockedFs.existsSync.mockReturnValue(true);
            mockedFs.readFileSync.mockReturnValue('invalid json');
            jest.spyOn(projectDetector, 'findNxWorkspace').mockResolvedValue('/test/workspace/nx.json');
            const projects = await projectDetector.getProjects();
            expect(projects).toEqual([]);
        });
    });
    describe('detectCurrentProject', () => {
        it('should detect project from active file path', async () => {
            const mockProjects = [
                { name: 'my-app', root: 'apps/my-app', projectType: 'application', type: 'nx', packageJsonPath: 'apps/my-app/package.json' },
                { name: 'my-lib', root: 'libs/my-lib', projectType: 'library', type: 'nx', packageJsonPath: 'libs/my-lib/package.json' }
            ];
            jest.spyOn(projectDetector, 'getProjects').mockResolvedValue(mockProjects);
            // Mock vscode window.activeTextEditor
            mockVscode.window.activeTextEditor = {
                document: {
                    uri: {
                        fsPath: '/test/workspace/apps/my-app/src/main.ts'
                    }
                }
            };
            mockedPath.relative.mockReturnValue('apps/my-app/src/main.ts');
            const currentProject = await projectDetector.detectCurrentProject();
            expect(currentProject).toBe('my-app');
        });
        it('should return null when no active editor', async () => {
            mockVscode.window.activeTextEditor = null;
            const currentProject = await projectDetector.detectCurrentProject();
            expect(currentProject).toBeNull();
        });
        it('should return null when file is not in any project', async () => {
            const mockProjects = [
                { name: 'my-app', root: 'apps/my-app', projectType: 'application', type: 'nx', packageJsonPath: 'apps/my-app/package.json' }
            ];
            jest.spyOn(projectDetector, 'getProjects').mockResolvedValue(mockProjects);
            mockVscode.window.activeTextEditor = {
                document: {
                    uri: {
                        fsPath: '/test/workspace/other/file.ts'
                    }
                }
            };
            mockedPath.relative.mockReturnValue('other/file.ts');
            const currentProject = await projectDetector.detectCurrentProject();
            expect(currentProject).toBeNull();
        });
    });
    describe('getProject', () => {
        it('should return project by name', async () => {
            const mockProjects = [
                { name: 'my-app', root: 'apps/my-app', projectType: 'application', type: 'nx', packageJsonPath: 'apps/my-app/package.json' },
                { name: 'my-lib', root: 'libs/my-lib', projectType: 'library', type: 'nx', packageJsonPath: 'libs/my-lib/package.json' }
            ];
            jest.spyOn(projectDetector, 'getProjects').mockResolvedValue(mockProjects);
            const project = await projectDetector.getProject('my-lib');
            expect(project).toEqual(mockProjects[1]);
        });
        it('should return null for non-existent project', async () => {
            jest.spyOn(projectDetector, 'getProjects').mockResolvedValue([]);
            const project = await projectDetector.getProject('non-existent');
            expect(project).toBeNull();
        });
    });
    describe('hasTarget', () => {
        it('should return true when project has target', async () => {
            const mockProject = {
                name: 'my-app',
                root: 'apps/my-app',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: 'apps/my-app/package.json',
                targets: { build: {}, test: {} }
            };
            jest.spyOn(projectDetector, 'getProject').mockResolvedValue(mockProject);
            const hasTarget = await projectDetector.hasTarget('my-app', 'build');
            expect(hasTarget).toBe(true);
        });
        it('should return false when project does not have target', async () => {
            const mockProject = {
                name: 'my-app',
                root: 'apps/my-app',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: 'apps/my-app/package.json',
                targets: { build: {} }
            };
            jest.spyOn(projectDetector, 'getProject').mockResolvedValue(mockProject);
            const hasTarget = await projectDetector.hasTarget('my-app', 'test');
            expect(hasTarget).toBe(false);
        });
        it('should return false when project not found', async () => {
            jest.spyOn(projectDetector, 'getProject').mockResolvedValue(null);
            const hasTarget = await projectDetector.hasTarget('non-existent', 'build');
            expect(hasTarget).toBe(false);
        });
        it('should return false when project has no targets', async () => {
            const mockProject = {
                name: 'my-app',
                root: 'apps/my-app',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: 'apps/my-app/package.json'
            };
            jest.spyOn(projectDetector, 'getProject').mockResolvedValue(mockProject);
            const hasTarget = await projectDetector.hasTarget('my-app', 'build');
            expect(hasTarget).toBe(false);
        });
    });
    describe('getWorkspaceRoot', () => {
        it('should return workspace root directory', () => {
            const root = projectDetector.getWorkspaceRoot();
            expect(root).toBe('/test/workspace');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,