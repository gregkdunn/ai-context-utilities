1e592bf30333929c342da6d1c0f44a17
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock VSCode API
jest.mock('vscode', () => ({
    Uri: {
        joinPath: jest.fn(() => ({ toString: () => 'mock://uri' })),
        parse: jest.fn(() => ({ toString: () => 'mock://uri' }))
    },
    workspace: {
        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],
        getConfiguration: jest.fn().mockReturnValue({
            get: jest.fn(() => true)
        })
    },
    window: {
        showInformationMessage: jest.fn(),
        showErrorMessage: jest.fn(),
        createOutputChannel: jest.fn(() => ({
            appendLine: jest.fn(),
            show: jest.fn()
        }))
    }
}));
// Mock dependencies
jest.mock('../../utils/projectDetector');
jest.mock('../../utils/shellRunner');
jest.mock('../../utils/fileManager');
jest.mock('../../utils/statusTracker');
const provider_1 = require("../provider");
const projectDetector_1 = require("../../utils/projectDetector");
const shellRunner_1 = require("../../utils/shellRunner");
const fileManager_1 = require("../../utils/fileManager");
const statusTracker_1 = require("../../utils/statusTracker");
const vscode = __importStar(require("vscode"));
const MockedProjectDetector = projectDetector_1.ProjectDetector;
const MockedCommandRunner = shellRunner_1.CommandRunner;
const MockedFileManager = fileManager_1.FileManager;
const MockedStatusTracker = statusTracker_1.StatusTracker;
describe('WebviewProvider', () => {
    let provider;
    let mockProjectDetector;
    let mockCommandRunner;
    let mockFileManager;
    let mockStatusTracker;
    let mockWebviewView;
    let mockWebview;
    beforeEach(() => {
        jest.clearAllMocks();
        // Setup mocks
        mockProjectDetector = {
            getProjects: jest.fn().mockResolvedValue([
                { name: 'project1', root: 'apps/project1', projectType: 'application' },
                { name: 'project2', root: 'libs/project2', projectType: 'library' }
            ]),
            getCurrentProject: jest.fn().mockResolvedValue({ name: 'project1', root: 'apps/project1' })
        };
        mockCommandRunner = {
            runAiDebug: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'test', duration: 1000 }),
            runNxTest: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'test', duration: 1000 }),
            runGitDiff: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'test', duration: 1000 }),
            runPrepareToPush: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'test', duration: 1000 })
        };
        mockFileManager = {
            watchFiles: jest.fn(),
            getFileContent: jest.fn().mockResolvedValue('test content'),
            openFile: jest.fn()
        };
        mockStatusTracker = {
            clearHistory: jest.fn(),
            updateStatus: jest.fn(),
            setRunning: jest.fn(),
            setComplete: jest.fn()
        };
        // Setup webview mocks
        mockWebview = {
            asWebviewUri: jest.fn().mockReturnValue('mock://webview-uri'),
            postMessage: jest.fn(),
            onDidReceiveMessage: jest.fn(),
            options: {},
            html: ''
        };
        mockWebviewView = {
            webview: mockWebview,
            show: jest.fn()
        };
        // Mock constructors
        MockedProjectDetector.mockImplementation(() => mockProjectDetector);
        MockedCommandRunner.mockImplementation(() => mockCommandRunner);
        MockedFileManager.mockImplementation(() => mockFileManager);
        MockedStatusTracker.mockImplementation(() => mockStatusTracker);
        // Create provider with correct constructor signature
        provider = new provider_1.WebviewProvider(vscode.Uri.parse('test://extension'), mockProjectDetector, mockCommandRunner, mockFileManager, mockStatusTracker);
    });
    describe('initialization', () => {
        it('should initialize with correct dependencies', () => {
            expect(provider).toBeInstanceOf(provider_1.WebviewProvider);
        });
        it('should setup file watching', () => {
            // Arrange
            provider.resolveWebviewView(mockWebviewView, {}, {});
            // Assert
            expect(mockFileManager.watchFiles).toHaveBeenCalledWith(expect.any(Function));
        });
    });
    describe('resolveWebviewView', () => {
        it('should setup webview correctly', () => {
            // Act
            provider.resolveWebviewView(mockWebviewView, {}, {});
            // Assert
            expect(mockWebviewView.webview.options.enableScripts).toBe(true);
            expect(mockWebviewView.webview.options.localResourceRoots).toHaveLength(1);
            expect(mockWebview.onDidReceiveMessage).toHaveBeenCalled();
        });
        it('should generate HTML', () => {
            // Act
            provider.resolveWebviewView(mockWebviewView, {}, {});
            // Assert
            expect(mockWebviewView.webview.html).toBeTruthy();
        });
    });
    describe('runCommand', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should run aiDebug command', async () => {
            // Act
            await provider.runCommand('aiDebug', { project: 'project1' });
            // Assert
            expect(mockCommandRunner.runAiDebug).toHaveBeenCalledWith('project1', undefined);
        });
        it('should run nxTest command', async () => {
            // Act
            await provider.runCommand('nxTest', { project: 'project1' });
            // Assert
            expect(mockCommandRunner.runNxTest).toHaveBeenCalledWith('project1', undefined);
        });
        it('should run gitDiff command', async () => {
            // Act
            await provider.runCommand('gitDiff', {});
            // Assert
            expect(mockCommandRunner.runGitDiff).toHaveBeenCalledWith(undefined);
        });
        it('should run prepareToPush command', async () => {
            // Act
            await provider.runCommand('prepareToPush', { project: 'project1' });
            // Assert
            expect(mockCommandRunner.runPrepareToPush).toHaveBeenCalledWith('project1', undefined);
        });
        it('should handle command errors', async () => {
            // Arrange
            mockCommandRunner.runNxTest.mockRejectedValue(new Error('Test error'));
            // Act
            await provider.runCommand('nxTest', { project: 'project1' });
            // Assert - Should not throw, error should be handled internally
            expect(mockCommandRunner.runNxTest).toHaveBeenCalled();
        });
    });
    describe('handleMessage', () => {
        beforeEach(() => {
            provider.resolveWebviewView(mockWebviewView, {}, {});
        });
        it('should handle runCommand message', async () => {
            // Arrange
            const message = {
                command: 'runCommand',
                data: {
                    action: 'nxTest',
                    project: 'project1'
                }
            };
            const onDidReceiveMessageCalls = mockWebview.onDidReceiveMessage.mock.calls;
            expect(onDidReceiveMessageCalls.length).toBeGreaterThan(0);
            const messageHandler = onDidReceiveMessageCalls[0][0];
            // Act
            if (messageHandler) {
                await messageHandler(message);
            }
            // Assert
            expect(mockCommandRunner.runNxTest).toHaveBeenCalled();
        });
        it('should handle getProjects message', async () => {
            // Arrange
            const message = {
                command: 'getProjects',
                data: {}
            };
            const onDidReceiveMessageCalls = mockWebview.onDidReceiveMessage.mock.calls;
            expect(onDidReceiveMessageCalls.length).toBeGreaterThan(0);
            const messageHandler = onDidReceiveMessageCalls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(mockProjectDetector.getProjects).toHaveBeenCalled();
        });
        it('should handle openFile message', async () => {
            // Arrange
            const message = {
                command: 'openFile',
                data: {
                    filePath: 'test.txt'
                }
            };
            const onDidReceiveMessageCalls = mockWebview.onDidReceiveMessage.mock.calls;
            expect(onDidReceiveMessageCalls.length).toBeGreaterThan(0);
            const messageHandler = onDidReceiveMessageCalls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(mockFileManager.openFile).toHaveBeenCalledWith('test.txt');
        });
        it('should handle clearOutput message', async () => {
            // Arrange
            const message = {
                command: 'clearOutput',
                data: {}
            };
            const onDidReceiveMessageCalls = mockWebview.onDidReceiveMessage.mock.calls;
            expect(onDidReceiveMessageCalls.length).toBeGreaterThan(0);
            const messageHandler = onDidReceiveMessageCalls[0][0];
            // Act
            await messageHandler(message);
            // Assert
            expect(mockStatusTracker.clearHistory).toHaveBeenCalled();
        });
    });
    describe('show', () => {
        it('should show webview when available', () => {
            // Arrange
            provider.resolveWebviewView(mockWebviewView, {}, {});
            // Act
            provider.show();
            // Assert
            expect(mockWebviewView.show).toHaveBeenCalled();
        });
        it('should not crash when webview not available', () => {
            // Act & Assert - should not throw
            expect(() => provider.show()).not.toThrow();
        });
    });
    describe('error handling', () => {
        it('should handle project detection errors gracefully', async () => {
            // Arrange
            mockProjectDetector.getProjects.mockRejectedValue(new Error('Project detection failed'));
            provider.resolveWebviewView(mockWebviewView, {}, {});
            const message = {
                command: 'getProjects',
                data: {}
            };
            const onDidReceiveMessageCalls = mockWebview.onDidReceiveMessage.mock.calls;
            expect(onDidReceiveMessageCalls.length).toBeGreaterThan(0);
            const messageHandler = onDidReceiveMessageCalls[0][0];
            // Act & Assert - should not throw
            await expect(messageHandler(message)).resolves.not.toThrow();
        });
        it('should handle file operation errors gracefully', async () => {
            // Arrange
            mockFileManager.openFile.mockRejectedValue(new Error('File read failed'));
            provider.resolveWebviewView(mockWebviewView, {}, {});
            const message = {
                command: 'openFile',
                data: { filePath: 'test.txt' }
            };
            const onDidReceiveMessageCalls = mockWebview.onDidReceiveMessage.mock.calls;
            expect(onDidReceiveMessageCalls.length).toBeGreaterThan(0);
            const messageHandler = onDidReceiveMessageCalls[0][0];
            // Act & Assert - should not throw
            await expect(messageHandler(message)).resolves.not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,