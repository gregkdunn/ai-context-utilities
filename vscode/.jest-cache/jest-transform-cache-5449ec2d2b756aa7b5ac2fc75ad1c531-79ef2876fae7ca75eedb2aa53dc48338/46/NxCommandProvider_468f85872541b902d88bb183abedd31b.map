{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/nx/NxCommandProvider.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/nx/NxCommandProvider.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { NxAffectedManager, AffectedCommandResult } from './NxAffectedManager';\n\nexport class NxCommandProvider {\n    constructor(private nxManager: NxAffectedManager) {}\n\n    register(): vscode.Disposable[] {\n        return [\n            vscode.commands.registerCommand('nx.runAffected', this.runAffected.bind(this)),\n            vscode.commands.registerCommand('nx.testAffected', this.testAffected.bind(this)),\n            vscode.commands.registerCommand('nx.lintAffected', this.lintAffected.bind(this)),\n            vscode.commands.registerCommand('nx.buildAffected', this.buildAffected.bind(this)),\n            vscode.commands.registerCommand('nx.showAffectedProjects', this.showAffectedProjects.bind(this)),\n            vscode.commands.registerCommand('nx.selectBaseBranch', this.selectBaseBranch.bind(this))\n        ];\n    }\n\n    private async runAffected(target?: string): Promise<void> {\n        try {\n            const selectedTarget = target || await this.selectTarget();\n            if (!selectedTarget) {\n                return;\n            }\n\n            const baseBranch = await this.getBaseBranch();\n            const projects = await this.nxManager.getAffectedProjects(baseBranch);\n\n            if (projects.length === 0) {\n                vscode.window.showInformationMessage('No affected projects found');\n                return;\n            }\n\n            const proceed = await vscode.window.showInformationMessage(\n                `Found ${projects.length} affected projects. Run ${selectedTarget}?`,\n                { modal: true },\n                'Yes',\n                'Show Projects First'\n            );\n\n            if (proceed === 'Show Projects First') {\n                await this.showAffectedProjects();\n                const runNow = await vscode.window.showInformationMessage(\n                    `Run ${selectedTarget} on these projects?`,\n                    'Yes',\n                    'No'\n                );\n                if (runNow !== 'Yes') {\n                    return;\n                }\n            } else if (proceed !== 'Yes') {\n                return;\n            }\n\n            await vscode.window.withProgress({\n                location: vscode.ProgressLocation.Notification,\n                title: `Running ${selectedTarget} on ${projects.length} affected projects`,\n                cancellable: true\n            }, async (progress, token) => {\n                const result = await this.nxManager.runAffectedCommand(selectedTarget, baseBranch);\n                \n                if (result.success) {\n                    vscode.window.showInformationMessage(\n                        `Successfully ran ${selectedTarget} on ${result.projects.length} projects`\n                    );\n                } else {\n                    vscode.window.showErrorMessage(\n                        `Failed to run ${selectedTarget}: ${result.errors?.join(', ')}`\n                    );\n                }\n\n                this.showCommandOutput(result, selectedTarget);\n            });\n\n        } catch (error) {\n            vscode.window.showErrorMessage(`Failed to run affected ${target || 'command'}: ${(error as Error).message}`);\n        }\n    }\n\n    private async testAffected(): Promise<void> {\n        await this.runAffected('test');\n    }\n\n    private async lintAffected(): Promise<void> {\n        await this.runAffected('lint');\n    }\n\n    private async buildAffected(): Promise<void> {\n        await this.runAffected('build');\n    }\n\n    private async showAffectedProjects(): Promise<void> {\n        try {\n            const baseBranch = await this.getBaseBranch();\n            const projects = await this.nxManager.getAffectedProjects(baseBranch);\n\n            if (projects.length === 0) {\n                vscode.window.showInformationMessage('No affected projects found');\n                return;\n            }\n\n            const quickPick = vscode.window.createQuickPick();\n            quickPick.items = projects.map(project => ({\n                label: project,\n                description: 'Affected project'\n            }));\n            quickPick.title = `Affected Projects (${projects.length}) - Base: ${baseBranch}`;\n            quickPick.placeholder = 'Select a project to view details';\n            quickPick.canSelectMany = false;\n            \n            quickPick.onDidAccept(async () => {\n                const selectedItem = quickPick.selectedItems[0];\n                if (selectedItem) {\n                    await this.showProjectDetails(selectedItem.label);\n                }\n                quickPick.dispose();\n            });\n\n            quickPick.show();\n        } catch (error) {\n            vscode.window.showErrorMessage(`Failed to show affected projects: ${(error as Error).message}`);\n        }\n    }\n\n    private async showProjectDetails(projectName: string): Promise<void> {\n        try {\n            const projectConfig = await this.nxManager.getProjectConfiguration(projectName);\n            const targets = Object.keys(projectConfig.targets).join(', ');\n            \n            const details = `# ${projectName}\\n\\n` +\n                `**Type:** ${projectConfig.type}\\n` +\n                `**Root:** ${projectConfig.root}\\n` +\n                `**Available Targets:** ${targets}\\n\\n` +\n                `**Configuration:**\\n` +\n                `\\`\\`\\`json\\n${JSON.stringify(projectConfig.targets, null, 2)}\\n\\`\\`\\``;\n\n            const doc = await vscode.workspace.openTextDocument({\n                content: details,\n                language: 'markdown'\n            });\n            await vscode.window.showTextDocument(doc);\n        } catch (error) {\n            vscode.window.showErrorMessage(`Failed to show project details: ${(error as Error).message}`);\n        }\n    }\n\n    private async selectTarget(): Promise<string | undefined> {\n        const targets = ['test', 'lint', 'build', 'serve', 'e2e'];\n        const selected = await vscode.window.showQuickPick(targets, {\n            placeHolder: 'Select a target to run on affected projects'\n        });\n        return selected;\n    }\n\n    private async selectBaseBranch(): Promise<void> {\n        const branches = await this.getAvailableBranches();\n        const selected = await vscode.window.showQuickPick(branches, {\n            placeHolder: 'Select base branch for affected calculation'\n        });\n\n        if (selected) {\n            const config = vscode.workspace.getConfiguration('nxAngular');\n            await config.update('defaultBase', selected, vscode.ConfigurationTarget.Workspace);\n            vscode.window.showInformationMessage(`Base branch set to: ${selected}`);\n        }\n    }\n\n    private async getBaseBranch(): Promise<string> {\n        const config = vscode.workspace.getConfiguration('nxAngular');\n        return config.get('defaultBase', 'main');\n    }\n\n    private async getAvailableBranches(): Promise<string[]> {\n        return new Promise((resolve) => {\n            const { spawn } = require('child_process');\n            const child = spawn('git', ['branch', '-r'], {\n                cwd: vscode.workspace.workspaceFolders?.[0]?.uri.fsPath,\n                stdio: 'pipe'\n            });\n\n            let output = '';\n            child.stdout.on('data', (data: any) => {\n                output += data.toString();\n            });\n\n            child.on('close', () => {\n                const branches = output\n                    .split('\\n')\n                    .map(line => line.trim())\n                    .filter(line => line && !line.includes('HEAD'))\n                    .map(line => line.replace(/^origin\\//, ''));\n                resolve(['main', 'master', 'develop', ...branches]);\n            });\n\n            child.on('error', () => {\n                resolve(['main', 'master', 'develop']);\n            });\n        });\n    }\n\n    private showCommandOutput(result: AffectedCommandResult, command: string): void {\n        const outputChannel = vscode.window.createOutputChannel(`NX ${command} Output`);\n        outputChannel.appendLine(`=== NX ${command} Results ===`);\n        outputChannel.appendLine(`Projects: ${result.projects.join(', ')}`);\n        outputChannel.appendLine(`Success: ${result.success}`);\n        outputChannel.appendLine('');\n        outputChannel.appendLine('=== Command Output ===');\n        outputChannel.appendLine(result.output);\n        \n        if (result.errors && result.errors.length > 0) {\n            outputChannel.appendLine('');\n            outputChannel.appendLine('=== Errors ===');\n            result.errors.forEach(error => outputChannel.appendLine(error));\n        }\n        \n        outputChannel.show();\n    }\n}\n"],"version":3}