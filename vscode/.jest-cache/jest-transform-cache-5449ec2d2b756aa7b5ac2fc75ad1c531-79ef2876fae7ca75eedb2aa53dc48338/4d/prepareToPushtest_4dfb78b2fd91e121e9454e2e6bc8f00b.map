{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/prepareToPush.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/prepareToPush.test.ts"],"sourcesContent":["import { PrepareToPushCommand } from '../prepareToPush';\nimport { CommandOptions } from '../../types';\n\n// Mock VSCode API\njest.mock('vscode', () => ({\n    workspace: {\n        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\n        getConfiguration: jest.fn(() => ({\n            get: jest.fn(() => '.github/instructions/ai_utilities_context')\n        }))\n    },\n    window: {\n        createOutputChannel: jest.fn(() => ({\n            appendLine: jest.fn(),\n            show: jest.fn()\n        }))\n    }\n}));\n\n// Mock child_process\njest.mock('child_process', () => ({\n    spawn: jest.fn()\n}));\n\ndescribe('PrepareToPushCommand', () => {\n    let prepareToPushCommand: PrepareToPushCommand;\n    let mockSpawn: jest.MockedFunction<any>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        mockSpawn = require('child_process').spawn;\n        \n        prepareToPushCommand = new PrepareToPushCommand();\n    });\n\n    describe('run', () => {\n        it('should run lint and prettier successfully', async () => {\n            // Arrange\n            const project = 'test-project';\n            const options: CommandOptions = {};\n\n            let callCount = 0;\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        callCount++;\n                        setTimeout(() => callback(0), 10); // Success for both lint and prettier\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await prepareToPushCommand.run(project, options);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.exitCode).toBe(0);\n            expect(mockSpawn).toHaveBeenCalledTimes(2);\n            expect(mockSpawn).toHaveBeenNthCalledWith(1, 'yarn', ['nx', 'lint', project], expect.any(Object));\n            expect(mockSpawn).toHaveBeenNthCalledWith(2, 'yarn', ['nx', 'prettier', project, '--write'], expect.any(Object));\n        });\n\n        it('should fail when lint fails', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            let callCount = 0;\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        callCount++;\n                        if (callCount === 1) {\n                            // Lint fails\n                            setTimeout(() => callback(1), 10);\n                        }\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await prepareToPushCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(mockSpawn).toHaveBeenCalledTimes(1); // Only lint should be called\n            expect(mockSpawn).toHaveBeenCalledWith('yarn', ['nx', 'lint', project], expect.any(Object));\n        });\n\n        it('should fail when prettier fails after lint succeeds', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            let callCount = 0;\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        callCount++;\n                        if (callCount === 1) {\n                            // Lint succeeds\n                            setTimeout(() => callback(0), 10);\n                        } else if (callCount === 2) {\n                            // Prettier fails\n                            setTimeout(() => callback(1), 10);\n                        }\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await prepareToPushCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(mockSpawn).toHaveBeenCalledTimes(2);\n            expect(mockSpawn).toHaveBeenNthCalledWith(1, 'yarn', ['nx', 'lint', project], expect.any(Object));\n            expect(mockSpawn).toHaveBeenNthCalledWith(2, 'yarn', ['nx', 'prettier', project, '--write'], expect.any(Object));\n        });\n\n        it('should throw error when project name is not provided', async () => {\n            // Arrange\n            const project = '';\n\n            // Act\n            const result = await prepareToPushCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(result.error).toBe('Project name is required');\n            expect(mockSpawn).not.toHaveBeenCalled();\n        });\n\n        it('should handle process errors during lint', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'error') {\n                        setTimeout(() => callback(new Error('Command not found')), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await prepareToPushCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(result.error).toBe('Command not found');\n        });\n\n        it('should capture stdout and stderr output during lint', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Simulate stdout and stderr data\n            mockProcess.stdout.on.mockImplementation((event, callback) => {\n                if (event === 'data') {\n                    setTimeout(() => callback('Lint output'), 5);\n                }\n            });\n\n            mockProcess.stderr.on.mockImplementation((event, callback) => {\n                if (event === 'data') {\n                    setTimeout(() => callback('Lint warnings'), 5);\n                }\n            });\n\n            // Act\n            const result = await prepareToPushCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.output).toContain('Lint output');\n        });\n\n        it('should capture prettier output after successful lint', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            let callCount = 0;\n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        callCount++;\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Simulate different output for each call\n            mockProcess.stdout.on.mockImplementation((event, callback) => {\n                if (event === 'data') {\n                    const output = callCount === 0 ? 'Lint output' : 'Prettier output';\n                    setTimeout(() => callback(output), 5);\n                }\n            });\n\n            // Act\n            const result = await prepareToPushCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(mockSpawn).toHaveBeenCalledTimes(2);\n        });\n    });\n\n    describe('executeLint', () => {\n        it('should execute lint command with correct arguments', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await (prepareToPushCommand as any).executeLint(project);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.exitCode).toBe(0);\n            expect(mockSpawn).toHaveBeenCalledWith(\n                'yarn',\n                ['nx', 'lint', project],\n                expect.objectContaining({\n                    cwd: '/test/workspace',\n                    shell: true\n                })\n            );\n        });\n\n        it('should return error when lint command fails', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(1), 10); // Failure\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Simulate error output\n            mockProcess.stderr.on.mockImplementation((event, callback) => {\n                if (event === 'data') {\n                    setTimeout(() => callback('Linting errors found'), 5);\n                }\n            });\n\n            // Act\n            const result = await (prepareToPushCommand as any).executeLint(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(result.error).toBe('Linting errors found');\n        });\n    });\n\n    describe('executePrettier', () => {\n        it('should execute prettier command with correct arguments', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(0), 10);\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Act\n            const result = await (prepareToPushCommand as any).executePrettier(project);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.exitCode).toBe(0);\n            expect(mockSpawn).toHaveBeenCalledWith(\n                'yarn',\n                ['nx', 'prettier', project, '--write'],\n                expect.objectContaining({\n                    cwd: '/test/workspace',\n                    shell: true\n                })\n            );\n        });\n\n        it('should return error when prettier command fails', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            const mockProcess = {\n                stdout: { on: jest.fn() },\n                stderr: { on: jest.fn() },\n                on: jest.fn((event, callback) => {\n                    if (event === 'close') {\n                        setTimeout(() => callback(1), 10); // Failure\n                    }\n                })\n            };\n\n            mockSpawn.mockReturnValue(mockProcess);\n\n            // Simulate error output\n            mockProcess.stderr.on.mockImplementation((event, callback) => {\n                if (event === 'data') {\n                    setTimeout(() => callback('Prettier formatting errors'), 5);\n                }\n            });\n\n            // Act\n            const result = await (prepareToPushCommand as any).executePrettier(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(result.error).toBe('Prettier formatting errors');\n        });\n    });\n\n    describe('getWorkspaceRoot', () => {\n        it('should return workspace root path', () => {\n            // Act\n            const result = (prepareToPushCommand as any).getWorkspaceRoot();\n\n            // Assert\n            expect(result).toBe('/test/workspace');\n        });\n    });\n});\n"],"version":3}