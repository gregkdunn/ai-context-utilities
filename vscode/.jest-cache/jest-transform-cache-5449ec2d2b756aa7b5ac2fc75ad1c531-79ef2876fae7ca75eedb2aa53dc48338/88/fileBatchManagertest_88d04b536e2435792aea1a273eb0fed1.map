{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/fileBatchManager.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/fileBatchManager.test.ts"],"sourcesContent":["import { FileBatchManager, BatchOperationResult } from '../fileBatchManager';\nimport { OutputType } from '../../types';\nimport { EnhancedFileManager } from '../enhancedFileManager';\n\n// Mock the EnhancedFileManager\njest.mock('../enhancedFileManager');\n\n// Mock vscode module\njest.mock('vscode', () => ({\n    window: {\n        showInformationMessage: jest.fn(),\n        showWarningMessage: jest.fn()\n    },\n    workspace: {\n        getConfiguration: jest.fn(() => ({\n            get: jest.fn()\n        }))\n    }\n}));\n\ndescribe('FileBatchManager', () => {\n    let batchManager: FileBatchManager;\n    let mockFileManager: jest.Mocked<EnhancedFileManager>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        // Create a properly mocked EnhancedFileManager\n        mockFileManager = {\n            ensureOutputDirectory: jest.fn(),\n            saveOutput: jest.fn(),\n            saveOutputWithVersioning: jest.fn(),\n            getFilePath: jest.fn(),\n            fileExists: jest.fn(),\n            getFileContent: jest.fn(),\n            getFileStats: jest.fn(),\n            createBackup: jest.fn(),\n            getAllFileMetadata: jest.fn(),\n            getFileHistory: jest.fn(),\n            createFileBatch: jest.fn(),\n            watchOutputFiles: jest.fn(),\n            getOutputDirectory: jest.fn()\n        } as any;\n\n        batchManager = new FileBatchManager();\n        \n        // Replace the internal file manager with our mock\n        (batchManager as any).fileManager = mockFileManager;\n    });\n\n    describe('executeBatch', () => {\n        it('should successfully process all files', async () => {\n            const files = [\n                { type: 'jest-output' as OutputType, content: 'test output' },\n                { type: 'diff' as OutputType, content: 'diff content' }\n            ];\n\n            mockFileManager.saveOutput.mockResolvedValue('/test/path/jest-output.txt');\n            mockFileManager.createFileBatch.mockResolvedValue({\n                id: 'test-batch-123',\n                timestamp: new Date(),\n                files: [],\n                command: 'test',\n                success: true\n            });\n\n            const result = await batchManager.executeBatch('testCommand', files, {\n                notifyUser: true,\n                trackHistory: true\n            });\n\n            expect(result.success).toBe(true);\n            expect(result.filesProcessed).toBe(2);\n            expect(result.errors).toHaveLength(0);\n            expect(mockFileManager.saveOutput).toHaveBeenCalledTimes(2);\n        });\n\n        it('should create backup when requested', async () => {\n            const files = [\n                { type: 'jest-output' as OutputType, content: 'test output' }\n            ];\n\n            mockFileManager.createBackup.mockResolvedValue('/backup/path');\n            mockFileManager.saveOutput.mockResolvedValue('/test/path/jest-output.txt');\n\n            await batchManager.executeBatch('testCommand', files, {\n                createBackup: true\n            });\n\n            expect(mockFileManager.createBackup).toHaveBeenCalledWith('testCommand-auto');\n        });\n\n        it('should validate content when requested', async () => {\n            const files = [\n                { type: 'jest-output' as OutputType, content: 'PASS test content' }\n            ];\n\n            mockFileManager.saveOutputWithVersioning.mockResolvedValue('/test/path/jest-output.txt');\n\n            await batchManager.executeBatch('testCommand', files, {\n                validateContent: true\n            });\n\n            expect(mockFileManager.saveOutputWithVersioning).toHaveBeenCalledWith(\n                'jest-output',\n                'PASS test content',\n                { validate: true }\n            );\n        });\n\n        it('should retry failed operations', async () => {\n            const files = [\n                { type: 'jest-output' as OutputType, content: 'test output' }\n            ];\n\n            mockFileManager.saveOutput\n                .mockRejectedValueOnce(new Error('First attempt failed'))\n                .mockResolvedValueOnce('/test/path/jest-output.txt');\n\n            const result = await batchManager.executeBatch('testCommand', files, {\n                maxRetries: 1\n            });\n\n            expect(result.success).toBe(true);\n            expect(result.filesProcessed).toBe(1);\n            expect(mockFileManager.saveOutput).toHaveBeenCalledTimes(2);\n        });\n\n        it('should handle permanent failures after retries', async () => {\n            const files = [\n                { type: 'jest-output' as OutputType, content: 'test output' }\n            ];\n\n            mockFileManager.saveOutput.mockRejectedValue(new Error('Persistent failure'));\n\n            const result = await batchManager.executeBatch('testCommand', files, {\n                maxRetries: 2\n            });\n\n            expect(result.success).toBe(false);\n            expect(result.filesProcessed).toBe(0);\n            expect(result.errors).toHaveLength(1);\n            expect(result.errors[0]).toContain('Failed to save jest-output');\n            expect(mockFileManager.saveOutput).toHaveBeenCalledTimes(3); // Initial + 2 retries\n        });\n\n        it('should show user notifications when requested', async () => {\n            const vscode = require('vscode');\n            const files = [\n                { type: 'jest-output' as OutputType, content: 'test output' }\n            ];\n\n            mockFileManager.saveOutput.mockResolvedValue('/test/path/jest-output.txt');\n\n            await batchManager.executeBatch('testCommand', files, {\n                notifyUser: true\n            });\n\n            expect(vscode.window.showInformationMessage).toHaveBeenCalledWith(\n                'testCommand: Successfully processed 1 files'\n            );\n        });\n\n        it('should show warning for partial failures', async () => {\n            const vscode = require('vscode');\n            const files = [\n                { type: 'jest-output' as OutputType, content: 'test output' },\n                { type: 'diff' as OutputType, content: 'diff content' }\n            ];\n\n            mockFileManager.saveOutput\n                .mockResolvedValueOnce('/test/path/jest-output.txt')\n                .mockRejectedValueOnce(new Error('Save failed'));\n\n            await batchManager.executeBatch('testCommand', files, {\n                notifyUser: true,\n                maxRetries: 0\n            });\n\n            expect(vscode.window.showWarningMessage).toHaveBeenCalledWith(\n                'testCommand: Processed 1 files with 1 errors'\n            );\n        });\n    });\n\n    describe('prepareCommandOutputs', () => {\n        it('should prepare output paths for all types', async () => {\n            const types: OutputType[] = ['jest-output', 'diff'];\n            \n            mockFileManager.ensureOutputDirectory.mockImplementation(() => {});\n            mockFileManager.getFilePath.mockImplementation((type) => `/test/path/${type}.txt`);\n\n            const result = await batchManager.prepareCommandOutputs('testCommand', types);\n\n            expect(result).toEqual({\n                'jest-output': '/test/path/jest-output.txt',\n                'diff': '/test/path/diff.txt'\n            });\n            expect(mockFileManager.ensureOutputDirectory).toHaveBeenCalled();\n        });\n    });\n\n    describe('validateCommandOutputs', () => {\n        it('should validate all files correctly', async () => {\n            const types: OutputType[] = ['jest-output', 'diff', 'ai-debug-context'];\n\n            mockFileManager.fileExists.mockImplementation((type) => type !== 'diff');\n            mockFileManager.getFileContent.mockImplementation(async (type) => {\n                switch (type) {\n                    case 'jest-output':\n                        return 'PASS test content';\n                    case 'ai-debug-context':\n                        return 'short'; // Too short for valid AI context\n                    default:\n                        return null;\n                }\n            });\n\n            const result = await batchManager.validateCommandOutputs('testCommand', types);\n\n            expect(result.valid).toEqual(['jest-output']);\n            expect(result.missing).toEqual(['diff']);\n            expect(result.corrupt).toEqual(['ai-debug-context']);\n        });\n\n        it('should handle file read errors', async () => {\n            const types: OutputType[] = ['jest-output'];\n\n            mockFileManager.fileExists.mockReturnValue(true);\n            mockFileManager.getFileContent.mockRejectedValue(new Error('Read error'));\n\n            const result = await batchManager.validateCommandOutputs('testCommand', types);\n\n            expect(result.corrupt).toEqual(['jest-output']);\n        });\n    });\n\n    describe('createOperationSummary', () => {\n        it('should create comprehensive operation summary', async () => {\n            const batchResult: BatchOperationResult = {\n                success: true,\n                batchId: 'test-batch-123',\n                filesProcessed: 2,\n                errors: [],\n                duration: 1500,\n                outputPaths: {\n                    'jest-output': '/test/jest-output.txt',\n                    'diff': '/test/diff.txt'\n                } as Record<OutputType, string>\n            };\n\n            mockFileManager.getFileStats.mockResolvedValue({\n                size: '5KB',\n                lines: 100\n            });\n\n            const summary = await batchManager.createOperationSummary(\n                'testCommand',\n                batchResult,\n                { project: 'test-project' }\n            );\n\n            expect(summary).toContain('FILE OPERATION SUMMARY - TESTCOMMAND');\n            expect(summary).toContain('Duration: 1500ms');\n            expect(summary).toContain('Success: Yes');\n            expect(summary).toContain('Files Processed: 2');\n            expect(summary).toContain('jest-output: 5KB (100 lines)');\n            expect(summary).toContain('project: \"test-project\"');\n            expect(summary).toContain('All files processed successfully');\n        });\n\n        it('should include error details in summary', async () => {\n            const batchResult: BatchOperationResult = {\n                success: false,\n                batchId: 'test-batch-123',\n                filesProcessed: 1,\n                errors: ['Failed to save file', 'Permission denied'],\n                duration: 500,\n                outputPaths: {} as Record<OutputType, string>\n            };\n\n            const summary = await batchManager.createOperationSummary('testCommand', batchResult);\n\n            expect(summary).toContain('Success: No');\n            expect(summary).toContain('Errors: 2');\n            expect(summary).toContain('ERRORS ENCOUNTERED');\n            expect(summary).toContain('1. Failed to save file');\n            expect(summary).toContain('2. Permission denied');\n            expect(summary).toContain('Some operations failed');\n        });\n    });\n\n    describe('monitorBatchFiles', () => {\n        it('should monitor files for specific batch', () => {\n            const mockBatch = {\n                id: 'test-batch-123',\n                timestamp: new Date(),\n                files: [\n                    { type: 'jest-output' as OutputType, path: '/test/jest.txt', exists: true }\n                ],\n                command: 'test',\n                success: true\n            };\n\n            // Set up active batch\n            const activeBatches = (batchManager as any).activeBatches;\n            activeBatches.set('test-batch-123', mockBatch);\n\n            const callback = jest.fn();\n            const mockDisposable = { dispose: jest.fn() };\n            \n            mockFileManager.watchOutputFiles.mockImplementation((eventCallback) => {\n                // Simulate file event\n                eventCallback({\n                    type: 'modified',\n                    file: 'jest-output',\n                    path: '/test/jest.txt',\n                    timestamp: new Date()\n                });\n                return mockDisposable;\n            });\n\n            const disposable = batchManager.monitorBatchFiles('test-batch-123', callback);\n\n            expect(callback).toHaveBeenCalledWith('jest-output', '/test/jest.txt', 'modified');\n            expect(disposable).toBe(mockDisposable);\n        });\n\n        it('should throw error for non-existent batch', () => {\n            expect(() => {\n                batchManager.monitorBatchFiles('non-existent', jest.fn());\n            }).toThrow('Batch non-existent not found');\n        });\n    });\n\n    describe('batch management', () => {\n        it('should track active batches', async () => {\n            const mockBatch = {\n                id: 'test-batch-123',\n                timestamp: new Date(),\n                files: [],\n                command: 'test',\n                success: true\n            };\n\n            mockFileManager.createFileBatch.mockResolvedValue(mockBatch);\n            mockFileManager.saveOutput.mockResolvedValue('/test/path.txt');\n\n            await batchManager.executeBatch('testCommand', [\n                { type: 'jest-output', content: 'test' }\n            ], { trackHistory: true });\n\n            const activeBatches = batchManager.getActiveBatches();\n            expect(activeBatches.size).toBe(1);\n            \n            const batch = batchManager.getBatch('test-batch-123');\n            expect(batch).toEqual(mockBatch);\n        });\n\n        it('should cleanup completed batches', () => {\n            const oldBatch = {\n                id: 'old-batch',\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n                files: [],\n                command: 'old',\n                success: true\n            };\n\n            const recentBatch = {\n                id: 'recent-batch',\n                timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\n                files: [],\n                command: 'recent',\n                success: true\n            };\n\n            // Set up batches\n            const activeBatches = (batchManager as any).activeBatches;\n            activeBatches.set('old-batch', oldBatch);\n            activeBatches.set('recent-batch', recentBatch);\n\n            // Cleanup batches older than 1 hour\n            batchManager.cleanupCompletedBatches(60 * 60 * 1000);\n\n            expect(batchManager.getBatch('old-batch')).toBeUndefined();\n            expect(batchManager.getBatch('recent-batch')).toEqual(recentBatch);\n        });\n    });\n\n    describe('content validation', () => {\n        it('should validate jest output content', () => {\n            const isContentValid = (batchManager as any).isContentValid;\n\n            expect(isContentValid('jest-output', 'PASS test case')).toBe(true);\n            expect(isContentValid('jest-output', 'FAIL test case')).toBe(true);\n            expect(isContentValid('jest-output', 'Test Suites: 1 passed')).toBe(true);\n            expect(isContentValid('jest-output', 'SKIP test case')).toBe(true);\n            expect(isContentValid('jest-output', 'invalid content')).toBe(false);\n        });\n\n        it('should validate diff content', () => {\n            const isContentValid = (batchManager as any).isContentValid;\n\n            expect(isContentValid('diff', 'diff --git a/file.js b/file.js')).toBe(true);\n            expect(isContentValid('diff', '@@ -1,3 +1,4 @@')).toBe(true);\n            expect(isContentValid('diff', 'No changes detected')).toBe(true);\n            expect(isContentValid('diff', '')).toBe(true); // Empty diff is valid\n            expect(isContentValid('diff', 'invalid diff content')).toBe(false);\n        });\n\n        it('should validate AI debug context', () => {\n            const isContentValid = (batchManager as any).isContentValid;\n\n            expect(isContentValid('ai-debug-context', 'AI DEBUG CONTEXT content here')).toBe(true);\n            expect(isContentValid('ai-debug-context', 'A'.repeat(150))).toBe(true); // Long enough\n            expect(isContentValid('ai-debug-context', 'short')).toBe(false); // Too short\n        });\n\n        it('should validate PR description content', () => {\n            const isContentValid = (batchManager as any).isContentValid;\n\n            expect(isContentValid('pr-description', 'PR DESCRIPTION content')).toBe(true);\n            expect(isContentValid('pr-description', 'Problem: issue here')).toBe(true);\n            expect(isContentValid('pr-description', 'Solution: fix here')).toBe(true);\n            expect(isContentValid('pr-description', 'invalid content')).toBe(false);\n        });\n\n        it('should validate unknown types by checking non-empty content', () => {\n            const isContentValid = (batchManager as any).isContentValid;\n\n            expect(isContentValid('unknown-type' as OutputType, 'some content')).toBe(true);\n            expect(isContentValid('unknown-type' as OutputType, '')).toBe(false);\n        });\n    });\n\n    describe('getFileManager', () => {\n        it('should return the file manager instance', () => {\n            const fileManager = batchManager.getFileManager();\n            expect(fileManager).toBe(mockFileManager);\n        });\n    });\n});"],"version":3}