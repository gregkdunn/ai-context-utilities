{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/projectDetector.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/projectDetector.test.ts"],"sourcesContent":["import { ProjectDetector } from '../projectDetector';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Mock fs module\njest.mock('fs');\njest.mock('path');\n\n// Mock vscode module\nconst mockVscode = {\n  workspace: {\n    workspaceFolders: [\n      { uri: { fsPath: '/test/workspace' } }\n    ]\n  },\n  window: {\n    activeTextEditor: null\n  }\n};\n\njest.mock('vscode', () => mockVscode);\n\nconst mockedFs = jest.mocked(fs);\nconst mockedPath = jest.mocked(path);\n\ndescribe('ProjectDetector', () => {\n  let projectDetector: ProjectDetector;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    projectDetector = new ProjectDetector('/test/workspace');\n    \n    // Setup path mocks\n    mockedPath.join.mockImplementation((...segments) => segments.join('/'));\n    mockedPath.basename.mockImplementation((p) => p.split('/').pop() || '');\n    mockedPath.relative.mockImplementation((from, to) => to.replace(from, '').replace(/^\\//, ''));\n  });\n\n  describe('findNxWorkspace', () => {\n    it('should find nx.json workspace', async () => {\n      mockedFs.existsSync.mockImplementation((filePath) => {\n        return filePath === '/test/workspace/nx.json';\n      });\n\n      const result = await projectDetector.findNxWorkspace();\n      expect(result).toBe('/test/workspace/nx.json');\n    });\n\n    it('should find angular.json workspace', async () => {\n      mockedFs.existsSync.mockImplementation((filePath) => {\n        return filePath === '/test/workspace/angular.json';\n      });\n\n      const result = await projectDetector.findNxWorkspace();\n      expect(result).toBe('/test/workspace/angular.json');\n    });\n\n    it('should return null if no workspace config found', async () => {\n      mockedFs.existsSync.mockReturnValue(false);\n\n      const result = await projectDetector.findNxWorkspace();\n      expect(result).toBeNull();\n    });\n\n    it('should handle errors gracefully', async () => {\n      mockedFs.existsSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      const result = await projectDetector.findNxWorkspace();\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getProjects', () => {\n    it('should parse NX workspace with project.json files', async () => {\n      // Mock file system to simulate empty project detection\n      mockedFs.existsSync.mockReturnValue(false);\n      mockedFs.readdirSync = jest.fn().mockReturnValue([]);\n      mockedFs.statSync = jest.fn() as any;\n\n      const projects = await projectDetector.getProjects();\n\n      // Should return empty array when no projects are found\n      expect(projects).toHaveLength(0);\n    });\n\n    it('should parse Angular workspace format', async () => {\n      const angularConfig = {\n        projects: {\n          'my-app': {\n            root: 'projects/my-app',\n            projectType: 'application',\n            architect: {\n              build: {},\n              test: {}\n            }\n          }\n        }\n      };\n\n      mockedFs.existsSync.mockImplementation((filePath) => {\n        return filePath === '/test/workspace/angular.json';\n      });\n      mockedFs.readFileSync.mockReturnValue(JSON.stringify(angularConfig));\n      mockedFs.readdirSync = jest.fn().mockReturnValue([]);\n      mockedFs.statSync = jest.fn() as any;\n\n      const projects = await projectDetector.getProjects();\n\n      expect(projects).toHaveLength(1);\n      expect(projects[0]).toMatchObject({\n        name: 'my-app',\n        type: 'angular',\n        projectType: 'application',\n        targets: { build: {}, test: {} }\n      });\n    });\n\n    it('should handle inline project configurations', async () => {\n      const nxConfig = {\n        projects: {\n          'inline-project': {\n            root: 'apps/inline',\n            projectType: 'application',\n            targets: { build: {} }\n          }\n        }\n      };\n\n      mockedFs.existsSync.mockImplementation((filePath) => {\n        return filePath === '/test/workspace/nx.json';\n      });\n      mockedFs.readFileSync.mockReturnValue(JSON.stringify(nxConfig));\n      mockedFs.readdirSync = jest.fn().mockReturnValue([]);\n      mockedFs.statSync = jest.fn() as any;\n\n      const projects = await projectDetector.getProjects();\n\n      expect(projects).toHaveLength(1);\n      expect(projects[0]).toMatchObject({\n        name: 'inline-project',\n        type: 'nx',\n        projectType: 'application'\n      });\n    });\n\n    it('should return empty array when no config found', async () => {\n      mockedFs.existsSync.mockReturnValue(false);\n      mockedFs.readdirSync = jest.fn().mockReturnValue([]);\n      mockedFs.statSync = jest.fn() as any;\n\n      const projects = await projectDetector.getProjects();\n      expect(projects).toEqual([]);\n    });\n\n    it('should handle JSON parsing errors', async () => {\n      mockedFs.existsSync.mockReturnValue(true);\n      mockedFs.readFileSync.mockReturnValue('invalid json');\n\n      jest.spyOn(projectDetector, 'findNxWorkspace').mockResolvedValue('/test/workspace/nx.json');\n\n      const projects = await projectDetector.getProjects();\n      expect(projects).toEqual([]);\n    });\n  });\n\n  describe('detectCurrentProject', () => {\n    it('should detect project from active file path', async () => {\n      const mockProjects = [\n      { name: 'my-app', root: 'apps/my-app', projectType: 'application' as const, type: 'nx' as const, packageJsonPath: 'apps/my-app/package.json' },\n      { name: 'my-lib', root: 'libs/my-lib', projectType: 'library' as const, type: 'nx' as const, packageJsonPath: 'libs/my-lib/package.json' }\n      ];\n\n      jest.spyOn(projectDetector, 'getProjects').mockResolvedValue(mockProjects);\n\n      // Mock vscode window.activeTextEditor\n      mockVscode.window.activeTextEditor = {\n        document: {\n          uri: {\n            fsPath: '/test/workspace/apps/my-app/src/main.ts'\n          }\n        }\n      } as any;\n\n      mockedPath.relative.mockReturnValue('apps/my-app/src/main.ts');\n\n      const currentProject = await projectDetector.detectCurrentProject();\n      expect(currentProject).toBe('my-app');\n    });\n\n    it('should return null when no active editor', async () => {\n      mockVscode.window.activeTextEditor = null;\n\n      const currentProject = await projectDetector.detectCurrentProject();\n      expect(currentProject).toBeNull();\n    });\n\n    it('should return null when file is not in any project', async () => {\n      const mockProjects = [\n        { name: 'my-app', root: 'apps/my-app', projectType: 'application' as const, type: 'nx' as const, packageJsonPath: 'apps/my-app/package.json' }\n      ];\n\n      jest.spyOn(projectDetector, 'getProjects').mockResolvedValue(mockProjects);\n\n      mockVscode.window.activeTextEditor = {\n        document: {\n          uri: {\n            fsPath: '/test/workspace/other/file.ts'\n          }\n        }\n      } as any;\n\n      mockedPath.relative.mockReturnValue('other/file.ts');\n\n      const currentProject = await projectDetector.detectCurrentProject();\n      expect(currentProject).toBeNull();\n    });\n  });\n\n  describe('getProject', () => {\n    it('should return project by name', async () => {\n      const mockProjects = [\n        { name: 'my-app', root: 'apps/my-app', projectType: 'application' as const, type: 'nx' as const, packageJsonPath: 'apps/my-app/package.json' },\n        { name: 'my-lib', root: 'libs/my-lib', projectType: 'library' as const, type: 'nx' as const, packageJsonPath: 'libs/my-lib/package.json' }\n      ];\n\n      jest.spyOn(projectDetector, 'getProjects').mockResolvedValue(mockProjects);\n\n      const project = await projectDetector.getProject('my-lib');\n      expect(project).toEqual(mockProjects[1]);\n    });\n\n    it('should return null for non-existent project', async () => {\n      jest.spyOn(projectDetector, 'getProjects').mockResolvedValue([]);\n\n      const project = await projectDetector.getProject('non-existent');\n      expect(project).toBeNull();\n    });\n  });\n\n  describe('hasTarget', () => {\n    it('should return true when project has target', async () => {\n      const mockProject = {\n        name: 'my-app',\n        root: 'apps/my-app',\n        projectType: 'application' as const,\n        type: 'nx' as const,\n        packageJsonPath: 'apps/my-app/package.json',\n        targets: { build: {}, test: {} }\n      };\n\n      jest.spyOn(projectDetector, 'getProject').mockResolvedValue(mockProject);\n\n      const hasTarget = await projectDetector.hasTarget('my-app', 'build');\n      expect(hasTarget).toBe(true);\n    });\n\n    it('should return false when project does not have target', async () => {\n      const mockProject = {\n        name: 'my-app',\n        root: 'apps/my-app',\n        projectType: 'application' as const,\n        type: 'nx' as const,\n        packageJsonPath: 'apps/my-app/package.json',\n        targets: { build: {} }\n      };\n\n      jest.spyOn(projectDetector, 'getProject').mockResolvedValue(mockProject);\n\n      const hasTarget = await projectDetector.hasTarget('my-app', 'test');\n      expect(hasTarget).toBe(false);\n    });\n\n    it('should return false when project not found', async () => {\n      jest.spyOn(projectDetector, 'getProject').mockResolvedValue(null);\n\n      const hasTarget = await projectDetector.hasTarget('non-existent', 'build');\n      expect(hasTarget).toBe(false);\n    });\n\n    it('should return false when project has no targets', async () => {\n      const mockProject = {\n        name: 'my-app',\n        root: 'apps/my-app',\n        projectType: 'application' as const,\n        type: 'nx' as const,\n        packageJsonPath: 'apps/my-app/package.json'\n      };\n\n      jest.spyOn(projectDetector, 'getProject').mockResolvedValue(mockProject);\n\n      const hasTarget = await projectDetector.hasTarget('my-app', 'build');\n      expect(hasTarget).toBe(false);\n    });\n  });\n\n  describe('getWorkspaceRoot', () => {\n    it('should return workspace root directory', () => {\n      const root = projectDetector.getWorkspaceRoot();\n      expect(root).toBe('/test/workspace');\n    });\n  });\n});\n"],"version":3}