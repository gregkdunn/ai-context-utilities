a9b782c1dc9ea519fbee9bea31be4b54
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
describe('Types Module - Interface Definitions', () => {
    describe('NxProject Interface', () => {
        it('should have required properties with correct types', () => {
            const mockProject = {
                name: 'test-project',
                root: './apps/test-project',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: './apps/test-project/package.json'
            };
            expect(mockProject.name).toBe('test-project');
            expect(mockProject.root).toBe('./apps/test-project');
            expect(mockProject.projectType).toBe('application');
        });
        it('should accept valid projectType values', () => {
            const appProject = {
                name: 'app',
                root: './apps/app',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: './apps/app/package.json'
            };
            const libProject = {
                name: 'lib',
                root: './libs/lib',
                projectType: 'library',
                type: 'nx',
                packageJsonPath: './libs/lib/package.json'
            };
            expect(appProject.projectType).toBe('application');
            expect(libProject.projectType).toBe('library');
        });
        it('should allow optional targets property', () => {
            const projectWithTargets = {
                name: 'test',
                root: './test',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: './test/package.json',
                targets: {
                    build: { executor: '@nx/webpack:webpack' },
                    test: { executor: '@nx/jest:jest' }
                }
            };
            const projectWithoutTargets = {
                name: 'test',
                root: './test',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: './test/package.json'
            };
            expect(projectWithTargets.targets).toBeDefined();
            expect(projectWithoutTargets.targets).toBeUndefined();
        });
    });
    describe('CommandOptions Interface', () => {
        it('should have all optional properties with correct types', () => {
            const options = {
                project: 'my-project',
                quick: true,
                fullContext: false,
                noDiff: true,
                focus: 'tests',
                useExpected: false,
                fullOutput: true
            };
            expect(typeof options.project).toBe('string');
            expect(typeof options.quick).toBe('boolean');
            expect(typeof options.fullContext).toBe('boolean');
            expect(typeof options.noDiff).toBe('boolean');
            expect(options.focus).toBe('tests');
            expect(typeof options.useExpected).toBe('boolean');
            expect(typeof options.fullOutput).toBe('boolean');
        });
        it('should accept valid focus values', () => {
            const testsFocus = { focus: 'tests' };
            const typesFocus = { focus: 'types' };
            const perfFocus = { focus: 'performance' };
            expect(testsFocus.focus).toBe('tests');
            expect(typesFocus.focus).toBe('types');
            expect(perfFocus.focus).toBe('performance');
        });
        it('should work with empty options', () => {
            const emptyOptions = {};
            expect(emptyOptions.project).toBeUndefined();
            expect(emptyOptions.quick).toBeUndefined();
            expect(emptyOptions.fullContext).toBeUndefined();
        });
    });
    describe('CommandResult Interface', () => {
        it('should have required properties with correct types', () => {
            const result = {
                success: true,
                exitCode: 0,
                output: 'Command executed successfully',
                duration: 1500
            };
            expect(typeof result.success).toBe('boolean');
            expect(typeof result.exitCode).toBe('number');
            expect(typeof result.output).toBe('string');
            expect(typeof result.duration).toBe('number');
        });
        it('should allow optional error and outputFiles properties', () => {
            const resultWithError = {
                success: false,
                exitCode: 1,
                output: 'Command failed',
                error: 'Error details',
                duration: 800
            };
            const resultWithOutputFiles = {
                success: true,
                exitCode: 0,
                output: 'Success',
                outputFiles: ['test-results.json', 'coverage.html'],
                duration: 2000
            };
            expect(resultWithError.error).toBe('Error details');
            expect(resultWithOutputFiles.outputFiles).toEqual(['test-results.json', 'coverage.html']);
        });
    });
    describe('ActionButton Interface', () => {
        it('should have required properties with correct types', () => {
            const button = {
                id: 'aiDebug',
                label: 'AI Debug',
                icon: 'debug',
                status: 'idle',
                enabled: true
            };
            expect(button.id).toBe('aiDebug');
            expect(typeof button.label).toBe('string');
            expect(typeof button.icon).toBe('string');
            expect(button.status).toBe('idle');
            expect(typeof button.enabled).toBe('boolean');
        });
        it('should accept valid id values', () => {
            const aiDebugButton = {
                id: 'aiDebug',
                label: 'AI Debug',
                icon: 'debug',
                status: 'idle',
                enabled: true
            };
            const nxTestButton = {
                id: 'nxTest',
                label: 'Run Tests',
                icon: 'test',
                status: 'running',
                enabled: true
            };
            const gitDiffButton = {
                id: 'gitDiff',
                label: 'Git Diff',
                icon: 'diff',
                status: 'success',
                enabled: true
            };
            const prepareToPushButton = {
                id: 'prepareToPush',
                label: 'Prepare to Push',
                icon: 'push',
                status: 'error',
                enabled: false
            };
            expect(aiDebugButton.id).toBe('aiDebug');
            expect(nxTestButton.id).toBe('nxTest');
            expect(gitDiffButton.id).toBe('gitDiff');
            expect(prepareToPushButton.id).toBe('prepareToPush');
        });
        it('should accept valid status values', () => {
            const statuses = ['idle', 'running', 'success', 'error'];
            statuses.forEach(status => {
                const button = {
                    id: 'aiDebug',
                    label: 'Test',
                    icon: 'test',
                    status: status,
                    enabled: true
                };
                expect(button.status).toBe(status);
            });
        });
        it('should allow optional lastRun property', () => {
            const buttonWithLastRun = {
                id: 'aiDebug',
                label: 'AI Debug',
                icon: 'debug',
                status: 'success',
                lastRun: new Date('2024-01-01T12:00:00Z'),
                enabled: true
            };
            expect(buttonWithLastRun.lastRun).toBeInstanceOf(Date);
        });
    });
    describe('WebviewMessage Interface', () => {
        it('should have required properties with correct types', () => {
            const message = {
                command: 'runCommand',
                data: {
                    action: 'aiDebug',
                    project: 'test-project'
                }
            };
            expect(message.command).toBe('runCommand');
            expect(typeof message.data).toBe('object');
        });
        it('should accept valid command values', () => {
            const commands = [
                'runCommand', 'getStatus', 'openFile', 'getProjects', 'setProject'
            ];
            commands.forEach(command => {
                const message = {
                    command: command,
                    data: {}
                };
                expect(message.command).toBe(command);
            });
        });
        it('should allow optional data properties', () => {
            const messageWithAllData = {
                command: 'runCommand',
                data: {
                    action: 'nxTest',
                    project: 'my-project',
                    options: { quick: true },
                    filePath: './src/test.ts'
                }
            };
            expect(messageWithAllData.data.action).toBe('nxTest');
            expect(messageWithAllData.data.project).toBe('my-project');
            expect(messageWithAllData.data.options).toEqual({ quick: true });
            expect(messageWithAllData.data.filePath).toBe('./src/test.ts');
        });
    });
    describe('WebviewState Interface', () => {
        it('should have required properties with correct types', () => {
            const state = {
                projects: [
                    { name: 'project1', root: './apps/project1', projectType: 'application', type: 'nx', packageJsonPath: './apps/project1/package.json' }
                ],
                actions: {
                    'aiDebug': {
                        id: 'aiDebug',
                        label: 'AI Debug',
                        icon: 'debug',
                        status: 'idle',
                        enabled: true
                    }
                },
                outputFiles: {
                    'test-results': 'test output content'
                },
                isStreaming: false,
                currentOutput: ''
            };
            expect(Array.isArray(state.projects)).toBe(true);
            expect(typeof state.actions).toBe('object');
            expect(typeof state.outputFiles).toBe('object');
        });
        it('should allow optional properties', () => {
            const stateWithOptionals = {
                currentProject: 'selected-project',
                projects: [],
                actions: {},
                outputFiles: {},
                lastRun: {
                    action: 'aiDebug',
                    timestamp: new Date(),
                    success: true
                },
                isStreaming: false,
                currentOutput: ''
            };
            expect(stateWithOptionals.currentProject).toBe('selected-project');
            expect(stateWithOptionals.lastRun).toBeDefined();
            expect(stateWithOptionals.lastRun.action).toBe('aiDebug');
            expect(stateWithOptionals.lastRun.timestamp).toBeInstanceOf(Date);
            expect(stateWithOptionals.lastRun.success).toBe(true);
        });
    });
    describe('OutputType Type', () => {
        it('should accept valid output type values', () => {
            const outputTypes = [
                'ai-debug-context',
                'jest-output',
                'diff',
                'pr-description'
            ];
            outputTypes.forEach(outputType => {
                const type = outputType;
                expect(type).toBe(outputType);
            });
        });
    });
    describe('DebugContext Interface', () => {
        it('should have required properties with correct types', () => {
            const context = {
                testStatus: 'passing',
                hasFailures: false,
                changedFiles: ['src/app.ts', 'src/utils.ts'],
                lintStatus: 'passed',
                formatStatus: 'passed'
            };
            expect(context.testStatus).toBe('passing');
            expect(typeof context.hasFailures).toBe('boolean');
            expect(Array.isArray(context.changedFiles)).toBe(true);
            expect(context.lintStatus).toBe('passed');
            expect(context.formatStatus).toBe('passed');
        });
        it('should accept valid status values', () => {
            const testStatuses = ['passing', 'failing', 'unknown'];
            const lintStatuses = ['passed', 'failed', 'unknown'];
            const formatStatuses = ['passed', 'failed', 'unknown'];
            testStatuses.forEach(status => {
                const context = {
                    testStatus: status,
                    hasFailures: false,
                    changedFiles: [],
                    lintStatus: 'passed',
                    formatStatus: 'passed'
                };
                expect(context.testStatus).toBe(status);
            });
            lintStatuses.forEach(status => {
                const context = {
                    testStatus: 'passing',
                    hasFailures: false,
                    changedFiles: [],
                    lintStatus: status,
                    formatStatus: 'passed'
                };
                expect(context.lintStatus).toBe(status);
            });
            formatStatuses.forEach(status => {
                const context = {
                    testStatus: 'passing',
                    hasFailures: false,
                    changedFiles: [],
                    lintStatus: 'passed',
                    formatStatus: status
                };
                expect(context.formatStatus).toBe(status);
            });
        });
    });
    describe('PRContext Interface', () => {
        it('should have required properties with correct types', () => {
            const context = {
                testsPassing: true,
                lintPassing: true,
                formatApplied: true,
                changedFiles: ['src/feature.ts'],
                projectName: 'my-project'
            };
            expect(typeof context.testsPassing).toBe('boolean');
            expect(typeof context.lintPassing).toBe('boolean');
            expect(typeof context.formatApplied).toBe('boolean');
            expect(Array.isArray(context.changedFiles)).toBe(true);
            expect(typeof context.projectName).toBe('string');
        });
        it('should work with different boolean combinations', () => {
            const allPassingContext = {
                testsPassing: true,
                lintPassing: true,
                formatApplied: true,
                changedFiles: [],
                projectName: 'test'
            };
            const mixedContext = {
                testsPassing: false,
                lintPassing: true,
                formatApplied: false,
                changedFiles: ['file1.ts', 'file2.ts'],
                projectName: 'test'
            };
            expect(allPassingContext.testsPassing).toBe(true);
            expect(mixedContext.testsPassing).toBe(false);
            expect(mixedContext.changedFiles).toHaveLength(2);
        });
    });
    describe('Type Compatibility and Integration', () => {
        it('should work together in realistic scenarios', () => {
            // Simulate a complete workflow
            const project = {
                name: 'my-app',
                root: './apps/my-app',
                projectType: 'application',
                type: 'nx',
                packageJsonPath: './apps/my-app/package.json',
                targets: {
                    build: { executor: '@nx/webpack:webpack' },
                    test: { executor: '@nx/jest:jest' }
                }
            };
            const options = {
                project: project.name,
                quick: false,
                fullContext: true,
                focus: 'tests'
            };
            const result = {
                success: true,
                exitCode: 0,
                output: 'Tests passed',
                outputFiles: ['test-results.json'],
                duration: 5000
            };
            const button = {
                id: 'nxTest',
                label: 'Run Tests',
                icon: 'test',
                status: 'success',
                lastRun: new Date(),
                enabled: true
            };
            const message = {
                command: 'runCommand',
                data: {
                    action: 'nxTest',
                    project: project.name,
                    options: options
                }
            };
            const state = {
                currentProject: project.name,
                projects: [project],
                actions: { [button.id]: button },
                outputFiles: { 'test-results': result.output },
                lastRun: {
                    action: button.id,
                    timestamp: new Date(),
                    success: result.success
                },
                isStreaming: false,
                currentOutput: ''
            };
            // Verify the integration works
            expect(state.currentProject).toBe(project.name);
            expect(state.projects[0].name).toBe(project.name);
            expect(state.actions[button.id].status).toBe('success');
            expect(message.data.project).toBe(project.name);
            expect(message.data.options).toEqual(options);
        });
        it('should handle error scenarios properly', () => {
            const failedResult = {
                success: false,
                exitCode: 1,
                output: 'Test failed',
                error: 'Test suite failed with 3 errors',
                duration: 3000
            };
            const errorButton = {
                id: 'nxTest',
                label: 'Run Tests',
                icon: 'test',
                status: 'error',
                lastRun: new Date(),
                enabled: true
            };
            const debugContext = {
                testStatus: 'failing',
                hasFailures: true,
                changedFiles: ['src/broken.ts'],
                lintStatus: 'failed',
                formatStatus: 'unknown'
            };
            const prContext = {
                testsPassing: false,
                lintPassing: false,
                formatApplied: false,
                changedFiles: debugContext.changedFiles,
                projectName: 'failing-project'
            };
            expect(failedResult.success).toBe(false);
            expect(errorButton.status).toBe('error');
            expect(debugContext.hasFailures).toBe(true);
            expect(prContext.testsPassing).toBe(false);
        });
    });
    describe('Type Safety and Edge Cases', () => {
        it('should prevent invalid enum values at compile time', () => {
            // These should compile successfully
            const validProjectType = 'application';
            const validStatus = 'running';
            const validCommand = 'getProjects';
            const validOutputType = 'diff';
            expect(validProjectType).toBe('application');
            expect(validStatus).toBe('running');
            expect(validCommand).toBe('getProjects');
            expect(validOutputType).toBe('diff');
        });
        it('should handle optional properties correctly', () => {
            // Interface with only required properties
            const minimalProject = {
                name: 'minimal',
                root: './minimal',
                projectType: 'library',
                type: 'nx',
                packageJsonPath: './minimal/package.json'
            };
            const minimalOptions = {};
            const minimalState = {
                projects: [],
                actions: {},
                outputFiles: {},
                isStreaming: false,
                currentOutput: ''
            };
            expect(minimalProject.targets).toBeUndefined();
            expect(Object.keys(minimalOptions)).toHaveLength(0);
            expect(minimalState.currentProject).toBeUndefined();
        });
        it('should handle complex nested structures', () => {
            const complexState = {
                currentProject: 'main-app',
                projects: [
                    {
                        name: 'main-app',
                        root: './apps/main-app',
                        projectType: 'application',
                        type: 'nx',
                        packageJsonPath: './apps/main-app/package.json',
                        targets: {
                            build: { executor: '@nx/webpack:webpack' },
                            test: { executor: '@nx/jest:jest' },
                            lint: { executor: '@nx/linter:eslint' }
                        }
                    },
                    {
                        name: 'shared-lib',
                        root: './libs/shared-lib',
                        projectType: 'library',
                        type: 'nx',
                        packageJsonPath: './libs/shared-lib/package.json'
                    }
                ],
                actions: {
                    aiDebug: { id: 'aiDebug', label: 'AI Debug', icon: 'debug', status: 'idle', enabled: true },
                    nxTest: { id: 'nxTest', label: 'Test', icon: 'test', status: 'success', enabled: true },
                    gitDiff: { id: 'gitDiff', label: 'Diff', icon: 'diff', status: 'idle', enabled: true },
                    prepareToPush: { id: 'prepareToPush', label: 'Push', icon: 'push', status: 'error', enabled: false }
                },
                outputFiles: {
                    'test-results': 'All tests passed',
                    'lint-results': 'No linting errors',
                    'build-log': 'Build completed successfully'
                },
                lastRun: {
                    action: 'nxTest',
                    timestamp: new Date('2024-01-01T10:00:00Z'),
                    success: true
                },
                isStreaming: false,
                currentOutput: ''
            };
            expect(complexState.projects).toHaveLength(2);
            expect(Object.keys(complexState.actions)).toHaveLength(4);
            expect(complexState.projects[0].targets).toBeDefined();
            expect(complexState.projects[1].targets).toBeUndefined();
            expect(complexState.actions.prepareToPush.enabled).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,