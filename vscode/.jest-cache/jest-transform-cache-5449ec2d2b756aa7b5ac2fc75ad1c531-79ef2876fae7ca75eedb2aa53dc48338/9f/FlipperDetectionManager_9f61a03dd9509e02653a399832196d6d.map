{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/flipper/FlipperDetectionManager.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/flipper/FlipperDetectionManager.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { \n    FlipperBroadPattern, \n    FlipperDetection, \n    FlipperFileResult, \n    FlipperGitDiffResult, \n    GitFileChange, \n    ParsedGitDiff, \n    FlipperDetectionResult \n} from './FlipperTypes';\n\nexport class FlipperDetectionManager {\n    private broadPatterns: FlipperBroadPattern[] = [];\n    private cache = new Map<string, FlipperDetectionResult>();\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.initializeBroadPatterns();\n        this.setupFileWatcher();\n    }\n\n    private initializeBroadPatterns(): void {\n        this.broadPatterns = [\n            // 1. FlipperService imports and dependencies\n            {\n                type: 'import',\n                pattern: /import\\s+.*FlipperService.*from\\s+['\"]@callrail\\/looky\\/core['\"]/g,\n                description: 'FlipperService import',\n                extractFlag: false\n            },\n            {\n                type: 'import',\n                pattern: /import\\s+.*FlipperFlags.*from.*flipper-flags/g,\n                description: 'FlipperFlags type import',\n                extractFlag: false\n            },\n            {\n                type: 'injection',\n                pattern: /constructor\\([^)]*FlipperService[^)]*\\)/g,\n                description: 'FlipperService dependency injection',\n                extractFlag: false\n            },\n            \n            // 2. Direct method calls with flag extraction\n            {\n                type: 'method_call',\n                pattern: /\\.flipperEnabled\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]\\s*\\)/g,\n                description: 'flipperEnabled() method call',\n                extractFlag: true\n            },\n            {\n                type: 'method_call',\n                pattern: /\\.eagerlyEnabled\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]\\s*\\)/g,\n                description: 'eagerlyEnabled() method call',\n                extractFlag: true\n            },\n            \n            // 3. Observable patterns from FlipperService\n            {\n                type: 'observable',\n                pattern: /(\\w+)\\$:\\s*Observable<boolean>\\s*=\\s*this\\.flipper\\$\\.pipe\\(/g,\n                description: 'Flipper observable declaration',\n                extractFlag: true,\n                flagIndex: 1\n            },\n            {\n                type: 'observable',\n                pattern: /\\.pipe\\(\\s*map\\(\\s*\\([^)]*\\)\\s*=>\\s*[^.]*\\.isEnabled\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]\\s*\\)\\s*\\)/g,\n                description: 'Feature flag check in observable pipe',\n                extractFlag: true\n            },\n            \n            // 4. Specific pre-defined observables from actual FlipperService\n            {\n                type: 'predefined_observable',\n                pattern: /(zuoraMaintenance|reportingNoop|acceleratedCallLog|otherHomepage|fullstory|cursorPaginateAcceleratedCallLog)\\$/g,\n                description: 'Pre-defined flipper observable usage',\n                extractFlag: true,\n                flagMapping: {\n                    'zuoraMaintenance': 'zuora_maintenance',\n                    'reportingNoop': 'reporting_noop',\n                    'acceleratedCallLog': 'accelerated_call_log',\n                    'otherHomepage': 'other_homepage',\n                    'fullstory': 'allow_fullstory_tracking',\n                    'cursorPaginateAcceleratedCallLog': 'cursor_paginate_accelerated_call_log'\n                }\n            },\n            \n            // 5. Configuration and setup patterns\n            {\n                type: 'configuration',\n                pattern: /loadFlippers\\s*\\([^)]*\\)/g,\n                description: 'Flipper configuration loading',\n                extractFlag: false\n            },\n            {\n                type: 'configuration',\n                pattern: /enabledFlippers\\s*\\([^)]*\\)/g,\n                description: 'Flipper enablement configuration',\n                extractFlag: false\n            },\n            \n            // 6. Feature flag string literals (comprehensive list)\n            {\n                type: 'flag_literal',\n                pattern: /['\"`](zuora_maintenance|pendo_resource_center|support_chat|show_cc_link_to_pending|show_call_tracking_migration_alert|ci_forms_incentive|reporting_noop|internal_calling|add_remove_lc_agents_ux|zuora_qa|account_billing_usage|use_inti|use_inti_for_bulk_google_adword|use_inti_for_my_case|use_inti_for_unbounce|apple_business_connect|use_inti_for_triggers|use_inti_for_hub_spot|use_inti_for_slack|use_inti_for_ms_teams|other_homepage|accelerated_call_log|homey_enabled|limit_client_view|rollout_anubis|allow_fullstory_tracking|new_numbers_page|cursor_paginate_accelerated_call_log|homepage_onboarding|ai_alpha_action_items|pre_ten_dlc_in_app_messaging|ai_alpha_new_or_existing_customer|ai_alpha_appointment_scheduled|ai_alpha_ai_coach|override_days_to_renewal|ai_alpha_questions_asked|ai_alpha_caller_details|ai_alpha_follow_up_email|ai_alpha_lead_qualification|ai_alpha_led_to_sale|pendo_segmentation|product_tier|prosperstack_flow|ai_alphas_white_label|kyc_registration_live|accelerated_reports|ai_alpha_lead_score|inbound_call_recording|year_end_metrics|click_to_contact_dynamic|account_deletion_ui|sa_update_plans_looky|automation_rule_new_criterias|business_profile_page|smart-follow-up-message-new-tag|voice_assist_workflow_page|native_10dlc_registration|hubspot_e164|voice_assist_select|voice_assist_test_call|automation_rules_templates)['\"`]/g,\n                description: 'Feature flag string literal',\n                extractFlag: true\n            },\n            \n            // 7. Conditional patterns\n            {\n                type: 'conditional',\n                pattern: /if\\s*\\([^)]*\\.(?:flipperEnabled|eagerlyEnabled|isEnabled)\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]\\s*\\)[^)]*\\)/g,\n                description: 'Conditional flipper check',\n                extractFlag: true\n            },\n            \n            // 8. Template/HTML patterns\n            {\n                type: 'template',\n                pattern: /\\*ngIf\\s*=\\s*['\"`][^'\"`]*(?:flipperEnabled|eagerlyEnabled)\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]\\s*\\)[^'\"`]*['\"`]/g,\n                description: 'Angular template flipper conditional',\n                extractFlag: true\n            }\n        ];\n    }\n\n    private setupFileWatcher(): void {\n        const watcher = vscode.workspace.createFileSystemWatcher('**/*');\n        watcher.onDidChange(() => this.cache.clear());\n        watcher.onDidCreate(() => this.cache.clear());\n        watcher.onDidDelete(() => this.cache.clear());\n        this.context.subscriptions.push(watcher);\n    }\n\n    // Main method to integrate with Git Diff analysis\n    async analyzeGitDiffForFlippers(diffContent: string): Promise<FlipperGitDiffResult> {\n        const parsedDiff = this.parseGitDiff(diffContent);\n        const flipperResults: FlipperFileResult[] = [];\n        const detectedFlags = new Set<string>();\n\n        for (const file of parsedDiff.files) {\n            if (this.shouldAnalyzeFile(file.path)) {\n                const fileResult = await this.analyzeFileForFlippers(file);\n                if (fileResult.detections.length > 0) {\n                    flipperResults.push(fileResult);\n                    fileResult.detections.forEach(d => {\n                        if (d.flagName) {detectedFlags.add(d.flagName);}\n                    });\n                }\n            }\n        }\n\n        const prSections = this.generatePRSection(Array.from(detectedFlags));\n\n        return {\n            files: flipperResults,\n            detectedFlags: Array.from(detectedFlags),\n            summary: this.generateFlipperSummary(flipperResults),\n            qaSection: prSections.qaSection,\n            detailsSection: prSections.detailsSection\n        };\n    }\n\n    async analyzeCode(content: string): Promise<FlipperDetectionResult> {\n        const cacheKey = this.generateCacheKey(content);\n        \n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey)!;\n        }\n\n        const detections: FlipperDetection[] = [];\n\n        for (const pattern of this.broadPatterns) {\n            let match;\n            const regex = new RegExp(pattern.pattern.source, pattern.pattern.flags);\n\n            while ((match = regex.exec(content)) !== null) {\n                const flagName = this.extractFlagName(match, pattern);\n\n                const detection: FlipperDetection = {\n                    type: pattern.type,\n                    pattern: pattern.description,\n                    line: this.getLineNumber(content, match.index),\n                    column: this.getColumnNumber(content, match.index),\n                    match: match[0],\n                    flagName: flagName,\n                    context: this.getContext(content, match.index, 50)\n                };\n\n                detections.push(detection);\n            }\n        }\n\n        const result: FlipperDetectionResult = {\n            detections,\n            summary: this.generateDetectionSummary(detections)\n        };\n\n        this.cache.set(cacheKey, result);\n        return result;\n    }\n\n    private async analyzeFileForFlippers(file: GitFileChange): Promise<FlipperFileResult> {\n        const detections: FlipperDetection[] = [];\n        let content = file.content || '';\n\n        // If content is not provided, try to read from file system\n        if (!content && file.status !== 'deleted') {\n            try {\n                const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n                if (workspaceRoot) {\n                    const filePath = path.join(workspaceRoot, file.path);\n                    if (fs.existsSync(filePath)) {\n                        content = fs.readFileSync(filePath, 'utf-8');\n                    }\n                }\n            } catch (error) {\n                console.warn(`Failed to read file ${file.path}:`, error);\n            }\n        }\n\n        if (content) {\n            const result = await this.analyzeCode(content);\n            detections.push(...result.detections);\n        }\n\n        return {\n            path: file.path,\n            detections,\n            changeType: file.status\n        };\n    }\n\n    private extractFlagName(match: RegExpExecArray, pattern: FlipperBroadPattern): string | undefined {\n        if (!pattern.extractFlag) {return undefined;}\n\n        // Handle flag mapping for predefined observables\n        if (pattern.flagMapping && match[1]) {\n            return pattern.flagMapping[match[1]] || match[1];\n        }\n\n        // Extract flag from specified index or default to index 1\n        const flagIndex = pattern.flagIndex || 1;\n        return match[flagIndex];\n    }\n\n    private generatePRSection(detectedFlags: string[]): { qaSection: string, detailsSection: string } {\n        if (detectedFlags.length === 0) {return { qaSection: '', detailsSection: '' };}\n\n        const flagList = detectedFlags.map(flag => `- \\`${flag}\\``).join('\\n');\n\n        const qaSection = `## 🔄 Feature Flags / Flipper Changes\n\n**⚠️ This work is being hidden behind Feature Flags (Flippers)**\n\n### Detected Flipper Changes:\n${flagList}\n\n### 📋 QA Checklist - Flipper Setup Required:\n- [ ] Test functionality with flipper(s) **DISABLED** (fallback behavior)\n- [ ] Test functionality with flipper(s) **ENABLED** (new behavior)\n- [ ] Verify flipper(s) can be toggled without requiring deployment\n\n### 🧹 Post-Release Cleanup:\n- [ ] Remove flipper conditional logic from codebase\n- [ ] **IMPORTANT**: Schedule flipper removal after 100% rollout\n- [ ] Clean up unused flipper definitions\n- [ ] Update documentation to reflect permanent changes`;\n\n        const detailsSection = `## 🔧 Environment Setup Details - Flipper Configuration\n\n### Staging Environment Setup:\n1. **Flipper Dashboard Configuration:**\n   - Access Staging Flipper dashboard\n   - Verify the following flipper(s) are configured:\n     ${flagList}\n   - Ensure flipper(s) are initially set to **DISABLED**\n\n2. **Testing Protocol:**\n   - Deploy to staging with flipper(s) disabled\n   - Verify fallback behavior works correctly\n   - Enable flipper(s) and test new functionality\n   - Confirm flipper(s) can be toggled without redeployment\n\n### Production Environment Setup:\n1. **Pre-Deployment:**\n   - Ensure flipper(s) are configured in Production Flipper dashboard\n   - Set flipper(s) to **DISABLED** initially\n   - Document rollback procedure\n\n2. **Rollout Strategy:**\n   - Plan gradual rollout (percentage-based or user-based)\n   - Monitor metrics and error rates during rollout\n   - Have rollback plan ready in case of issues\n\n### 🔗 Resources:\n- [Flipper Documentation](https://callrail.atlassian.net/l/c/u7fFhHPM)\n- [Flipper Cloud Dashboard](https://www.flippercloud.io/docs/ui)\n\n### 📞 Coordination Required:\n- **PR Developer**: Responsible for flipper configuration across environments\n- **QA Team**: For testing both enabled/disabled states\n- **Product Team**: For rollout strategy and success metrics\n\n> **⚠️ Important**: This feature requires environment setup before deployment. Coordinate with DevOps team early in the development cycle.`;\n\n        return { qaSection, detailsSection };\n    }\n\n    private parseGitDiff(diffContent: string): ParsedGitDiff {\n        const lines = diffContent.split('\\n');\n        const files: GitFileChange[] = [];\n        let currentFile: GitFileChange | null = null;\n        let currentContent = '';\n\n        for (const line of lines) {\n            if (line.startsWith('diff --git')) {\n                // Save previous file if exists\n                if (currentFile) {\n                    currentFile.content = currentContent;\n                    files.push(currentFile);\n                }\n                \n                // Start new file\n                const match = line.match(/diff --git a\\/(.+) b\\/(.+)/);\n                if (match) {\n                    currentFile = {\n                        path: match[2],\n                        status: 'modified',\n                        content: ''\n                    };\n                    currentContent = '';\n                }\n            } else if (line.startsWith('new file mode')) {\n                if (currentFile) {currentFile.status = 'added';}\n            } else if (line.startsWith('deleted file mode')) {\n                if (currentFile) {currentFile.status = 'deleted';}\n            } else if (line.startsWith('rename from')) {\n                if (currentFile) {currentFile.status = 'renamed';}\n            } else if (line.startsWith('+') && !line.startsWith('+++')) {\n                currentContent += line.substring(1) + '\\n';\n            } else if (line.startsWith(' ')) {\n                currentContent += line.substring(1) + '\\n';\n            }\n        }\n\n        // Save last file\n        if (currentFile) {\n            currentFile.content = currentContent;\n            files.push(currentFile);\n        }\n\n        return {\n            files,\n            summary: `${files.length} files changed`\n        };\n    }\n\n    private shouldAnalyzeFile(filePath: string): boolean {\n        const extensions = ['.ts', '.js', '.html', '.component.ts', '.service.ts'];\n        return extensions.some(ext => filePath.endsWith(ext));\n    }\n\n    private generateFlipperSummary(results: FlipperFileResult[]): string {\n        const totalDetections = results.reduce((sum, result) => sum + result.detections.length, 0);\n        const flagCount = new Set(results.flatMap(r => r.detections.map(d => d.flagName).filter(Boolean))).size;\n        \n        return `Found ${totalDetections} flipper references across ${results.length} files, affecting ${flagCount} feature flags`;\n    }\n\n    private generateDetectionSummary(detections: FlipperDetection[]): string {\n        const flagCount = new Set(detections.map(d => d.flagName).filter(Boolean)).size;\n        return `Found ${detections.length} flipper references affecting ${flagCount} feature flags`;\n    }\n\n    private getLineNumber(content: string, index: number): number {\n        const beforeMatch = content.substring(0, index);\n        return beforeMatch.split('\\n').length;\n    }\n\n    private getColumnNumber(content: string, index: number): number {\n        const beforeMatch = content.substring(0, index);\n        const lines = beforeMatch.split('\\n');\n        return lines[lines.length - 1].length;\n    }\n\n    private getContext(content: string, index: number, contextSize: number): string {\n        const start = Math.max(0, index - contextSize);\n        const end = Math.min(content.length, index + contextSize);\n        return content.substring(start, end);\n    }\n\n    private generateCacheKey(content: string): string {\n        // Simple hash function for cache key\n        let hash = 0;\n        for (let i = 0; i < content.length; i++) {\n            const char = content.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return hash.toString();\n    }\n\n    dispose(): void {\n        this.cache.clear();\n    }\n}\n"],"version":3}