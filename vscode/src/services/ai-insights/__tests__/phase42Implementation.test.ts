import { describe, test, expect, beforeEach, jest } from '@jest/globals';\nimport * as vscode from 'vscode';\nimport { IntelligentSuggestionsEngine } from '../engines/intelligentSuggestionsEngine';\nimport { AutomatedInsightsEngine } from '../engines/automatedInsightsEngine';\nimport { NaturalLanguageQueryEngine } from '../engines/naturalLanguageQueryEngine';\nimport { AIInsightsEngine } from '../aiInsightsEngine';\nimport {\n    ExecutionContext,\n    AnalysisData,\n    CommandExecution,\n    TestResult,\n    ErrorPattern,\n    PerformanceMetric,\n    GitCommit\n} from '../../../types';\n\n// Mock VSCode\njest.mock('vscode', () => ({\n    ExtensionContext: jest.fn(),\n    Disposable: jest.fn()\n}));\n\ndescribe('Phase 4.2 AI Insights Implementation', () => {\n    let mockContext: vscode.ExtensionContext;\n    let aiInsightsEngine: AIInsightsEngine;\n    let intelligentSuggestionsEngine: IntelligentSuggestionsEngine;\n    let automatedInsightsEngine: AutomatedInsightsEngine;\n    let naturalLanguageQueryEngine: NaturalLanguageQueryEngine;\n\n    const createMockExecutionContext = (): ExecutionContext => ({\n        project: 'test-project',\n        currentFiles: ['src/app.ts', 'src/utils.ts'],\n        recentCommands: [],\n        gitStatus: {\n            branch: 'main',\n            hasUncommittedChanges: true,\n            changedFiles: ['src/app.ts'],\n            commitsBehind: 0,\n            commitsAhead: 1,\n            lastCommit: {\n                hash: 'abc123',\n                message: 'Test commit',\n                author: 'Test User',\n                date: new Date(),\n                files: ['src/app.ts'],\n                stats: { additions: 10, deletions: 2 }\n            }\n        },\n        testStatus: {\n            passing: 15,\n            failing: 3,\n            skipped: 1,\n            coverage: 85,\n            lastRun: new Date(),\n            failingTests: [\n                {\n                    suite: 'app.spec.ts',\n                    test: 'should handle errors',\n                    status: 'failed',\n                    duration: 100,\n                    error: 'Assertion failed',\n                    timestamp: new Date()\n                }\n            ]\n        },\n        timestamp: new Date()\n    });\n\n    const createMockAnalysisData = (): AnalysisData => ({\n        commandHistory: [\n            {\n                id: 'cmd1',\n                action: 'nxTest',\n                project: 'test-project',\n                status: 'completed',\n                startTime: new Date(Date.now() - 60000),\n                endTime: new Date(),\n                progress: 100,\n                output: ['Test passed'],\n                initiator: {\n                    id: 'user1',\n                    name: 'Test User',\n                    role: 'owner',\n                    joinedAt: new Date(),\n                    isOnline: true\n                },\n                sharedWith: []\n            }\n        ],\n        projectFiles: ['src/app.ts', 'src/utils.ts', 'src/types.ts'],\n        gitHistory: [\n            {\n                hash: 'abc123',\n                message: 'Add new feature',\n                author: 'Test User',\n                date: new Date(),\n                files: ['src/app.ts'],\n                stats: { additions: 25, deletions: 5 }\n            }\n        ],\n        testResults: [\n            {\n                suite: 'app.spec.ts',\n                test: 'should work correctly',\n                status: 'passed',\n                duration: 50,\n                timestamp: new Date()\n            },\n            {\n                suite: 'utils.spec.ts',\n                test: 'should handle edge case',\n                status: 'failed',\n                duration: 120,\n                error: 'Expected true but got false',\n                timestamp: new Date()\n            }\n        ],\n        performanceMetrics: [\n            {\n                metric: 'test-execution-time',\n                value: 45000,\n                unit: 'ms',\n                timestamp: new Date(),\n                context: { project: 'test-project' }\n            }\n        ],\n        errorPatterns: [\n            {\n                pattern: 'TypeError: Cannot read property',\n                frequency: 5,\n                lastSeen: new Date(),\n                affectedFiles: ['src/app.ts', 'src/utils.ts'],\n                suggestedFix: 'Add null check before property access'\n            }\n        ]\n    });\n\n    beforeEach(() => {\n        mockContext = {\n            globalState: {\n                get: jest.fn().mockReturnValue(undefined),\n                update: jest.fn().mockResolvedValue(undefined)\n            }\n        } as any;\n\n        aiInsightsEngine = new AIInsightsEngine(mockContext);\n        intelligentSuggestionsEngine = new IntelligentSuggestionsEngine(mockContext);\n        automatedInsightsEngine = new AutomatedInsightsEngine(mockContext);\n        naturalLanguageQueryEngine = new NaturalLanguageQueryEngine(mockContext);\n    });\n\n    describe('IntelligentSuggestionsEngine', () => {\n        test('should generate intelligent command suggestions', async () => {\n            const context = createMockExecutionContext();\n            const suggestions = await intelligentSuggestionsEngine.generateIntelligentSuggestions(context);\n\n            expect(suggestions).toBeDefined();\n            expect(Array.isArray(suggestions)).toBe(true);\n            expect(suggestions.length).toBeGreaterThan(0);\n            \n            // Should suggest running tests due to failing tests\n            const testSuggestion = suggestions.find(s => s.command === 'nxTest');\n            expect(testSuggestion).toBeDefined();\n            expect(testSuggestion?.confidence).toBeGreaterThan(0.8);\n        });\n\n        test('should analyze execution patterns', async () => {\n            const executions: CommandExecution[] = [\n                {\n                    id: 'cmd1',\n                    action: 'nxTest',\n                    project: 'test-project',\n                    status: 'completed',\n                    startTime: new Date(Date.now() - 60000),\n                    endTime: new Date(),\n                    progress: 100,\n                    output: ['Tests passed'],\n                    initiator: {\n                        id: 'user1',\n                        name: 'Test User',\n                        role: 'owner',\n                        joinedAt: new Date(),\n                        isOnline: true\n                    },\n                    sharedWith: []\n                }\n            ];\n\n            const patterns = await intelligentSuggestionsEngine.analyzeExecutionPatterns(executions);\n            expect(patterns).toBeDefined();\n            expect(Array.isArray(patterns)).toBe(true);\n        });\n\n        test('should predict command success', async () => {\n            const context = createMockExecutionContext();\n            const predictions = await intelligentSuggestionsEngine.predictCommandSuccess(context);\n\n            expect(predictions).toBeDefined();\n            expect(predictions instanceof Map).toBe(true);\n            expect(predictions.size).toBeGreaterThan(0);\n        });\n    });\n\n    describe('AutomatedInsightsEngine', () => {\n        test('should generate automated insights', async () => {\n            const data = createMockAnalysisData();\n            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);\n\n            expect(insights).toBeDefined();\n            expect(Array.isArray(insights)).toBe(true);\n            expect(insights.length).toBeGreaterThan(0);\n\n            // Should detect test failures\n            const testInsight = insights.find(i => i.category === 'testing');\n            expect(testInsight).toBeDefined();\n        });\n\n        test('should prioritize insights correctly', async () => {\n            const data = createMockAnalysisData();\n            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);\n\n            // Insights should be sorted by priority and confidence\n            for (let i = 0; i < insights.length - 1; i++) {\n                const current = insights[i];\n                const next = insights[i + 1];\n                \n                const priorityScore = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };\n                const currentScore = priorityScore[current.priority] * current.confidence;\n                const nextScore = priorityScore[next.priority] * next.confidence;\n                \n                expect(currentScore).toBeGreaterThanOrEqual(nextScore);\n            }\n        });\n\n        test('should generate actionable suggestions', async () => {\n            const data = createMockAnalysisData();\n            const insights = await automatedInsightsEngine.generateAutomatedInsights(data);\n\n            const actionableInsights = insights.filter(i => i.actionable);\n            expect(actionableInsights.length).toBeGreaterThan(0);\n\n            actionableInsights.forEach(insight => {\n                expect(insight.suggestions).toBeDefined();\n                expect(insight.suggestions.length).toBeGreaterThan(0);\n                \n                insight.suggestions.forEach(suggestion => {\n                    expect(suggestion.title).toBeDefined();\n                    expect(suggestion.description).toBeDefined();\n                    expect(suggestion.action).toBeDefined();\n                    expect(suggestion.estimatedImpact).toMatch(/^(low|medium|high)$/);\n                    expect(suggestion.estimatedEffort).toMatch(/^(minutes|hours|days)$/);\n                });\n            });\n        });\n    });\n\n    describe('NaturalLanguageQueryEngine', () => {\n        test('should process test-related queries', async () => {\n            const query = \"Show me failing tests from this week\";\n            const context = createMockAnalysisData();\n            const result = await naturalLanguageQueryEngine.processQuery(query, context);\n\n            expect(result).toBeDefined();\n            expect(result.intent).toBe('test-query');\n            expect(result.confidence).toBeGreaterThan(0.5);\n            expect(result.response).toContain('test');\n            expect(result.suggestedActions.length).toBeGreaterThan(0);\n        });\n\n        test('should process error-related queries', async () => {\n            const query = \"What are the most common errors?\";\n            const context = createMockAnalysisData();\n            const result = await naturalLanguageQueryEngine.processQuery(query, context);\n\n            expect(result).toBeDefined();\n            expect(result.intent).toBe('error-query');\n            expect(result.confidence).toBeGreaterThan(0.5);\n            expect(result.response).toContain('error');\n        });\n\n        test('should generate contextual query suggestions', async () => {\n            const context = createMockAnalysisData();\n            const suggestions = await naturalLanguageQueryEngine.getQuerySuggestions(context);\n\n            expect(suggestions).toBeDefined();\n            expect(Array.isArray(suggestions)).toBe(true);\n            expect(suggestions.length).toBeGreaterThan(0);\n            expect(suggestions.length).toBeLessThanOrEqual(8);\n\n            // Should include test-related suggestions due to failing tests\n            const testSuggestion = suggestions.find(s => s.toLowerCase().includes('test'));\n            expect(testSuggestion).toBeDefined();\n        });\n    });\n\n    describe('AIInsightsEngine Integration', () => {\n        test('should integrate Phase 4.2 engines', async () => {\n            const data = createMockAnalysisData();\n            const context = createMockExecutionContext();\n\n            // Test enhanced pattern analysis\n            const insights = await aiInsightsEngine.analyzePattern(data);\n            expect(insights).toBeDefined();\n            expect(insights.length).toBeGreaterThan(0);\n\n            // Test enhanced command suggestions\n            const suggestions = await aiInsightsEngine.suggestCommand(context);\n            expect(suggestions).toBeDefined();\n            expect(suggestions.length).toBeGreaterThan(0);\n            expect(suggestions.length).toBeLessThanOrEqual(8);\n\n            // Test enhanced natural language processing\n            const query = \"Show me failing tests\";\n            const queryResult = await aiInsightsEngine.processNaturalLanguageQuery(query, data);\n            expect(queryResult).toBeDefined();\n            expect(queryResult.confidence).toBeGreaterThan(0);\n        });\n\n        test('should provide Phase 4.2 specific methods', async () => {\n            const data = createMockAnalysisData();\n            const context = createMockExecutionContext();\n\n            // Test query suggestions\n            const querySuggestions = await aiInsightsEngine.getQuerySuggestions(data);\n            expect(querySuggestions).toBeDefined();\n            expect(Array.isArray(querySuggestions)).toBe(true);\n\n            // Test execution pattern analysis\n            await aiInsightsEngine.analyzeExecutionPatterns(data.commandHistory);\n            // Should not throw\n\n            // Test command success prediction\n            const predictions = await aiInsightsEngine.predictCommandSuccess(context);\n            expect(predictions).toBeDefined();\n            expect(predictions instanceof Map).toBe(true);\n\n            // Test query analytics\n            const analytics = await aiInsightsEngine.getQueryAnalytics();\n            expect(analytics).toBeDefined();\n            expect(analytics).toHaveProperty('patterns');\n        });\n\n        test('should save and dispose engine states properly', async () => {\n            await aiInsightsEngine.saveEngineStates();\n            // Should not throw\n\n            aiInsightsEngine.dispose();\n            // Should not throw\n        });\n    });\n});\n