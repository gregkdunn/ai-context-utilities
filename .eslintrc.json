{
  "root": true,
  "ignorePatterns": ["dist/**", "node_modules/**"],
  "extends": ["eslint:recommended"],
  "plugins": ["@typescript-eslint", "@angular-eslint"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": ["tsconfig.json"],
        "tsconfigRootDir": "./",
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended"
      ],
      "rules": {
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/consistent-type-imports": ["error", { "prefer": "type-imports" }],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "custom": {
              "regex": "^I[A-Z]",
              "match": false
            }
          },
          {
            "selector": "class",
            "format": ["PascalCase"]
          },
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE"]
          }
        ],
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/prefer-nullish-coalescing": "warn",
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/strict-boolean-expressions": "warn",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/array-type": ["error", { "default": "array" }],
        "@typescript-eslint/no-inferrable-types": "warn",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Object": "Use object instead",
              "Function": "Use a specific function type",
              "Boolean": "Use boolean instead",
              "Number": "Use number instead",
              "String": "Use string instead"
            }
          }
        ],
        
        "@angular-eslint/prefer-on-push-component-change-detection": "warn",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-track-by-function": "warn",
        "@angular-eslint/no-empty-lifecycle-method": "error",
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-output-rename": "error",
        
        "prefer-const": "error",
        "no-var": "error",
        "eqeqeq": ["error", "smart"],
        "no-console": "warn",
        "no-debugger": "error",
        "no-eval": "error",
        "no-throw-literal": "error",
        "object-shorthand": "error",
        "prefer-template": "warn",
        "prefer-arrow-callback": "warn",
        "no-duplicate-imports": "error",
        "sort-imports": ["error", { "ignoreDeclarationSort": true }]
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {
        "@angular-eslint/template/no-negated-async": "error",
        "@angular-eslint/template/eqeqeq": "error"
      }
    }
  ]
}