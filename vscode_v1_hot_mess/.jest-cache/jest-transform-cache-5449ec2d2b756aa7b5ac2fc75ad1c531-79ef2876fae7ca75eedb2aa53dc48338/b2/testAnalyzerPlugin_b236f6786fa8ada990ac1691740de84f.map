{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/builtin/testAnalyzerPlugin.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/builtin/testAnalyzerPlugin.ts"],"sourcesContent":["import { \n  Plugin, \n  PluginMetadata, \n  PluginAPI, \n  PluginContext, \n  PluginAnalyzer, \n  AnalysisResult,\n  Issue,\n  PluginCommand,\n  PluginFormatter\n} from '../../../types/plugin';\nimport * as vscode from 'vscode';\nimport * as path from 'path';\n\nexport class TestAnalyzerPlugin implements Plugin {\n  metadata: PluginMetadata = {\n    id: 'builtin-test-analyzer',\n    name: 'Test Analyzer',\n    version: '1.0.0',\n    description: 'Advanced test analysis with coverage insights and quality recommendations',\n    author: 'AI Debug Team',\n    license: 'MIT',\n    enabled: true,\n    capabilities: [\n      {\n        type: 'analyzer',\n        name: 'test-analyzer',\n        description: 'Analyze test files and results',\n        permissions: ['file-system:test-files:Analyze test files and coverage reports']\n      },\n      {\n        type: 'formatter',\n        name: 'test-formatter',\n        description: 'Format test results for better readability'\n      },\n      {\n        type: 'command',\n        name: 'test-insights',\n        description: 'Generate test insights and recommendations'\n      }\n    ]\n  };\n\n  private api?: PluginAPI;\n  \n  get analyzers(): PluginAnalyzer[] {\n    return [\n      {\n        id: 'test-file-analyzer',\n        name: 'Test File Analyzer',\n        description: 'Analyze individual test files for quality and coverage',\n        filePatterns: ['**/*.test.ts', '**/*.test.js', '**/*.spec.ts', '**/*.spec.js'],\n        \n        analyze: async (content: string, filePath: string, context: PluginContext): Promise<AnalysisResult> => {\n          const issues: Issue[] = [];\n          const metrics: Record<string, number> = {};\n          const suggestions: string[] = [];\n          \n          try {\n            // Analyze test structure\n            const structureAnalysis = await this.analyzeTestStructure(content, filePath);\n            issues.push(...structureAnalysis.issues);\n            Object.assign(metrics, structureAnalysis.metrics);\n            suggestions.push(...structureAnalysis.suggestions);\n            \n            // Analyze test coverage\n            const coverageAnalysis = await this.analyzeCoverage(content, filePath, context);\n            issues.push(...coverageAnalysis.issues);\n            Object.assign(metrics, coverageAnalysis.metrics);\n            suggestions.push(...coverageAnalysis.suggestions);\n            \n            // Analyze test patterns\n            const patternAnalysis = await this.analyzeTestPatterns(content, filePath);\n            issues.push(...patternAnalysis.issues);\n            Object.assign(metrics, patternAnalysis.metrics);\n            suggestions.push(...patternAnalysis.suggestions);\n            \n          } catch (error) {\n            issues.push({\n              id: 'test-analysis-error',\n              type: 'error',\n              message: `Test analysis failed: ${(error as Error).message}`,\n              severity: 'medium',\n              fixable: false\n            });\n          }\n          \n          return {\n            id: 'test-file-analysis',\n            summary: 'Test file analysis completed',\n            issues,\n            metrics,\n            suggestions,\n            confidence: 0.88\n          };\n        }\n      }\n    ];\n  }\n\n  get formatters(): PluginFormatter[] {\n    return [\n      {\n        id: 'test-result-formatter',\n        name: 'Test Result Formatter',\n        description: 'Format test results for better readability',\n        filePatterns: ['**/*.test.json', '**/test-results.json'],\n        \n        format: async (content: string, filePath?: string, context?: PluginContext): Promise<string> => {\n          try {\n            const testResults = JSON.parse(content);\n            return this.formatTestResults(testResults);\n          } catch (error) {\n            return content; // Return original if parsing fails\n          }\n        }\n      }\n    ];\n  }\n\n  get commands(): PluginCommand[] {\n    return [\n      {\n        id: 'test-coverage-report',\n        title: 'Generate Test Coverage Report',\n        description: 'Generate comprehensive test coverage report',\n        category: 'Testing',\n        icon: 'graph',\n        \n        execute: async (context: PluginContext, args?: any[]): Promise<any> => {\n          const coverageReport = await this.generateCoverageReport(context);\n          \n          // Show results in a new document\n          const doc = await vscode.workspace.openTextDocument({\n            content: this.formatCoverageReport(coverageReport),\n            language: 'markdown'\n          });\n          \n          await vscode.window.showTextDocument(doc);\n          \n          return coverageReport;\n        }\n      },\n      {\n        id: 'test-quality-analysis',\n        title: 'Test Quality Analysis',\n        description: 'Analyze test quality and suggest improvements',\n        category: 'Testing',\n        icon: 'checklist',\n        \n        execute: async (context: PluginContext, args?: any[]): Promise<any> => {\n          const qualityAnalysis = await this.analyzeTestQuality(context);\n          \n          // Show quality insights\n          const items = qualityAnalysis.suggestions.map((suggestion: any) => ({\n            label: suggestion.title,\n            description: suggestion.description,\n            detail: `Impact: ${suggestion.impact} | Effort: ${suggestion.effort}`\n          }));\n          \n          const selected = await vscode.window.showQuickPick(items, {\n            placeHolder: 'Select improvement to apply',\n            canPickMany: false\n          });\n          \n          if (selected) {\n            const suggestion = qualityAnalysis.suggestions.find((s: any) => s.title === (selected as any)?.label);\n            if (suggestion) {\n              await this.applySuggestion(suggestion, context);\n            }\n          }\n          \n          return qualityAnalysis;\n        }\n      },\n      {\n        id: 'test-performance-analysis',\n        title: 'Test Performance Analysis',\n        description: 'Analyze test performance and identify slow tests',\n        category: 'Testing',\n        icon: 'pulse',\n        \n        execute: async (context: PluginContext, args?: any[]): Promise<any> => {\n          const performanceAnalysis = await this.analyzeTestPerformance(context);\n          \n          // Show performance insights\n          const report = this.formatPerformanceReport(performanceAnalysis);\n          \n          const doc = await vscode.workspace.openTextDocument({\n            content: report,\n            language: 'markdown'\n          });\n          \n          await vscode.window.showTextDocument(doc);\n          \n          return performanceAnalysis;\n        }\n      }\n    ];\n  }\n\n  async activate(api: PluginAPI, context: PluginContext): Promise<void> {\n    this.api = api;\n    \n    // Register analyzers\n    for (const analyzer of this.analyzers) {\n      api.registerAnalyzer?.(analyzer);\n    }\n    \n    // Register formatters\n    for (const formatter of this.formatters) {\n      api.registerFormatter?.(formatter);\n    }\n    \n    // Register commands\n    for (const command of this.commands) {\n      api.registerCommand(command.id, command.execute);\n    }\n    \n    // Listen for test events\n    api.on?.('test:run', (data) => this.onTestRun(data, context));\n    api.on?.('test:complete', (data) => this.onTestComplete(data, context));\n    \n    console.log('Test Analyzer Plugin activated');\n  }\n\n  async deactivate(api: PluginAPI, context: PluginContext): Promise<void> {\n    // Cleanup\n    api.off?.('test:run');\n    api.off?.('test:complete');\n    \n    console.log('Test Analyzer Plugin deactivated');\n  }\n\n  private async analyzeTestStructure(content: string, filePath: string): Promise<AnalysisResult> {\n    const issues: Issue[] = [];\n    const metrics: Record<string, number> = {};\n    const suggestions: string[] = [];\n    \n    // Count test blocks\n    const describeBlocks = (content.match(/describe\\s*\\(/g) || []).length;\n    const testBlocks = (content.match(/(?:it|test)\\s*\\(/g) || []).length;\n    const beforeBlocks = (content.match(/before(?:Each|All)?\\s*\\(/g) || []).length;\n    const afterBlocks = (content.match(/after(?:Each|All)?\\s*\\(/g) || []).length;\n    \n    metrics['describe-blocks'] = describeBlocks;\n    metrics['test-blocks'] = testBlocks;\n    metrics['before-blocks'] = beforeBlocks;\n    metrics['after-blocks'] = afterBlocks;\n    \n    // Analyze test structure\n    if (describeBlocks === 0 && testBlocks > 0) {\n      issues.push({\n        id: 'missing-describe-blocks',\n        type: 'warning',\n        message: 'Tests should be organized in describe blocks',\n        severity: 'medium',\n        fixable: true,\n        suggestedFix: 'Wrap tests in describe blocks for better organization'\n      });\n      \n      suggestions.push('Group related tests using describe blocks');\n    }\n    \n    if (testBlocks === 0) {\n      issues.push({\n        id: 'no-tests',\n        type: 'error',\n        message: 'No tests found in file',\n        severity: 'high',\n        fixable: true,\n        suggestedFix: 'Add test cases to verify functionality'\n      });\n    }\n    \n    // Check for test naming conventions\n    const testNames = content.match(/(?:it|test)\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/g) || [];\n    const poorTestNames = testNames.filter(name => {\n      const testName = name.match(/['\"`]([^'\"`]+)['\"`]/)?.[1] || '';\n      return testName.length < 10 || !testName.includes('should');\n    });\n    \n    if (poorTestNames.length > 0) {\n      issues.push({\n        id: 'poor-test-names',\n        type: 'info',\n        message: `${poorTestNames.length} test(s) have unclear names`,\n        severity: 'low',\n        fixable: true,\n        suggestedFix: 'Use descriptive test names that explain the expected behavior'\n      });\n      \n      suggestions.push('Use \"should\" in test names to describe expected behavior');\n    }\n    \n    return {\n      id: 'test-structure-analysis',\n      summary: 'Test structure analysis completed',\n      issues,\n      metrics,\n      suggestions,\n      confidence: 0.9\n    };\n  }\n\n  private async analyzeCoverage(content: string, filePath: string, context: PluginContext): Promise<AnalysisResult> {\n    const issues: Issue[] = [];\n    const metrics: Record<string, number> = {};\n    const suggestions: string[] = [];\n    \n    // Simulate coverage analysis\n    const sourceFile = this.getSourceFileForTest(filePath);\n    const coverage = await this.getCoverageForFile(sourceFile, context);\n    \n    metrics['line-coverage'] = coverage.lines;\n    metrics['branch-coverage'] = coverage.branches;\n    metrics['function-coverage'] = coverage.functions;\n    \n    if (coverage.lines < 0.8) {\n      issues.push({\n        id: 'low-line-coverage',\n        type: 'warning',\n        message: `Line coverage is ${Math.round(coverage.lines * 100)}% (target: 80%)`,\n        severity: 'medium',\n        fixable: true,\n        suggestedFix: 'Add more test cases to increase line coverage'\n      });\n      \n      suggestions.push('Add tests for uncovered code paths');\n    }\n    \n    if (coverage.branches < 0.7) {\n      issues.push({\n        id: 'low-branch-coverage',\n        type: 'warning',\n        message: `Branch coverage is ${Math.round(coverage.branches * 100)}% (target: 70%)`,\n        severity: 'medium',\n        fixable: true,\n        suggestedFix: 'Add tests for different code branches and conditions'\n      });\n      \n      suggestions.push('Test both true and false conditions in your code');\n    }\n    \n    if (coverage.functions < 0.9) {\n      issues.push({\n        id: 'low-function-coverage',\n        type: 'info',\n        message: `Function coverage is ${Math.round(coverage.functions * 100)}% (target: 90%)`,\n        severity: 'low',\n        fixable: true,\n        suggestedFix: 'Add tests for uncovered functions'\n      });\n    }\n    \n    return {\n      id: 'test-coverage-analysis',\n      summary: 'Test coverage analysis completed',\n      issues,\n      metrics,\n      suggestions,\n      confidence: 0.85\n    };\n  }\n\n  private async analyzeTestPatterns(content: string, filePath: string): Promise<AnalysisResult> {\n    const issues: Issue[] = [];\n    const metrics: Record<string, number> = {};\n    const suggestions: string[] = [];\n    \n    // Check for anti-patterns\n    const hasOnlyTests = content.includes('.only(');\n    const hasSkippedTests = content.includes('.skip(') || content.includes('x.it(') || content.includes('x.test(');\n    const hasConsoleLog = content.includes('console.log');\n    const hasHardcodedValues = (content.match(/(?:expect|toBe|toEqual)\\s*\\([^)]*(?:\\d{4}|\\d{2}\\/\\d{2}\\/\\d{4})/g) || []).length;\n    \n    if (hasOnlyTests) {\n      issues.push({\n        id: 'only-tests',\n        type: 'error',\n        message: 'Test file contains .only() which will skip other tests',\n        severity: 'high',\n        fixable: true,\n        suggestedFix: 'Remove .only() to run all tests'\n      });\n    }\n    \n    if (hasSkippedTests) {\n      issues.push({\n        id: 'skipped-tests',\n        type: 'warning',\n        message: 'Test file contains skipped tests',\n        severity: 'medium',\n        fixable: true,\n        suggestedFix: 'Fix or remove skipped tests'\n      });\n    }\n    \n    if (hasConsoleLog) {\n      issues.push({\n        id: 'console-log-in-tests',\n        type: 'info',\n        message: 'Test file contains console.log statements',\n        severity: 'low',\n        fixable: true,\n        suggestedFix: 'Remove console.log statements from tests'\n      });\n    }\n    \n    if (hasHardcodedValues > 0) {\n      issues.push({\n        id: 'hardcoded-values',\n        type: 'info',\n        message: `${hasHardcodedValues} hardcoded value(s) found in assertions`,\n        severity: 'low',\n        fixable: true,\n        suggestedFix: 'Use variables or constants instead of hardcoded values'\n      });\n      \n      suggestions.push('Extract hardcoded values into variables for better maintainability');\n    }\n    \n    // Check for good patterns\n    const hasSetup = content.includes('beforeEach') || content.includes('beforeAll');\n    const hasCleanup = content.includes('afterEach') || content.includes('afterAll');\n    const hasMocks = content.includes('jest.mock') || content.includes('jest.fn');\n    \n    metrics['has-setup'] = hasSetup ? 1 : 0;\n    metrics['has-cleanup'] = hasCleanup ? 1 : 0;\n    metrics['has-mocks'] = hasMocks ? 1 : 0;\n    \n    if (!hasSetup && metrics['test-blocks'] > 1) {\n      suggestions.push('Consider using beforeEach/beforeAll for test setup');\n    }\n    \n    if (!hasCleanup && hasMocks) {\n      suggestions.push('Consider using afterEach/afterAll for cleanup');\n    }\n    \n    return {\n      id: 'test-pattern-analysis',\n      summary: 'Test pattern analysis completed',\n      issues,\n      metrics,\n      suggestions,\n      confidence: 0.8\n    };\n  }\n\n  private async generateCoverageReport(context: PluginContext): Promise<any> {\n    // Simulate coverage report generation\n    const testFiles = await this.getTestFiles(context);\n    const coverage = {\n      overall: {\n        lines: 0.82,\n        branches: 0.75,\n        functions: 0.88,\n        statements: 0.80\n      },\n      files: testFiles.map(file => ({\n        path: file,\n        lines: Math.random() * 0.4 + 0.6,\n        branches: Math.random() * 0.4 + 0.5,\n        functions: Math.random() * 0.3 + 0.7,\n        statements: Math.random() * 0.4 + 0.6\n      })),\n      trends: {\n        lastWeek: 0.78,\n        lastMonth: 0.75,\n        improvement: 0.04\n      }\n    };\n    \n    return coverage;\n  }\n\n  private async analyzeTestQuality(context: PluginContext): Promise<any> {\n    const quality = {\n      score: 0.78,\n      categories: {\n        structure: 0.85,\n        coverage: 0.72,\n        patterns: 0.80,\n        performance: 0.75\n      },\n      suggestions: [\n        {\n          title: 'Improve Branch Coverage',\n          description: 'Add tests for missing code branches',\n          impact: 'High',\n          effort: 'Medium',\n          category: 'coverage'\n        },\n        {\n          title: 'Optimize Test Performance',\n          description: 'Reduce test execution time by optimizing slow tests',\n          impact: 'Medium',\n          effort: 'High',\n          category: 'performance'\n        },\n        {\n          title: 'Enhance Test Organization',\n          description: 'Better organize tests with describe blocks',\n          impact: 'Low',\n          effort: 'Low',\n          category: 'structure'\n        }\n      ]\n    };\n    \n    return quality;\n  }\n\n  private async analyzeTestPerformance(context: PluginContext): Promise<any> {\n    const performance = {\n      totalTime: 2.5,\n      averageTime: 0.12,\n      slowTests: [\n        { name: 'complex integration test', time: 0.8, file: 'integration.test.ts' },\n        { name: 'database operations', time: 0.6, file: 'database.test.ts' },\n        { name: 'api endpoint tests', time: 0.4, file: 'api.test.ts' }\n      ],\n      recommendations: [\n        'Mock external dependencies to improve test speed',\n        'Use beforeAll for expensive setup operations',\n        'Consider splitting large test files',\n        'Use test.concurrent for independent tests'\n      ]\n    };\n    \n    return performance;\n  }\n\n  private formatTestResults(testResults: any): string {\n    const { stats, tests } = testResults;\n    \n    let formatted = `# Test Results\\n\\n`;\n    formatted += `**Total Tests:** ${stats.total}\\n`;\n    formatted += `**Passed:** ${stats.passed}\\n`;\n    formatted += `**Failed:** ${stats.failed}\\n`;\n    formatted += `**Skipped:** ${stats.skipped}\\n\\n`;\n    \n    if (stats.failed > 0) {\n      formatted += `## Failed Tests\\n\\n`;\n      const failedTests = tests.filter((t: any) => t.status === 'failed');\n      for (const test of failedTests) {\n        formatted += `### ${test.name}\\n`;\n        formatted += `**File:** ${test.file}\\n`;\n        formatted += `**Error:** ${test.error}\\n\\n`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private formatCoverageReport(coverage: any): string {\n    let report = `# Test Coverage Report\\n\\n`;\n    \n    report += `## Overall Coverage\\n`;\n    report += `- **Lines:** ${Math.round(coverage.overall.lines * 100)}%\\n`;\n    report += `- **Branches:** ${Math.round(coverage.overall.branches * 100)}%\\n`;\n    report += `- **Functions:** ${Math.round(coverage.overall.functions * 100)}%\\n`;\n    report += `- **Statements:** ${Math.round(coverage.overall.statements * 100)}%\\n\\n`;\n    \n    report += `## File Coverage\\n`;\n    for (const file of coverage.files) {\n      report += `### ${file.path}\\n`;\n      report += `- Lines: ${Math.round(file.lines * 100)}%\\n`;\n      report += `- Branches: ${Math.round(file.branches * 100)}%\\n`;\n      report += `- Functions: ${Math.round(file.functions * 100)}%\\n\\n`;\n    }\n    \n    report += `## Trends\\n`;\n    report += `- Last Week: ${Math.round(coverage.trends.lastWeek * 100)}%\\n`;\n    report += `- Last Month: ${Math.round(coverage.trends.lastMonth * 100)}%\\n`;\n    report += `- Improvement: +${Math.round(coverage.trends.improvement * 100)}%\\n\\n`;\n    \n    return report;\n  }\n\n  private formatPerformanceReport(performance: any): string {\n    let report = `# Test Performance Report\\n\\n`;\n    \n    report += `## Overall Performance\\n`;\n    report += `- **Total Time:** ${performance.totalTime}s\\n`;\n    report += `- **Average Time:** ${performance.averageTime}s\\n\\n`;\n    \n    report += `## Slowest Tests\\n`;\n    for (const test of performance.slowTests) {\n      report += `- **${test.name}** (${test.time}s) - ${test.file}\\n`;\n    }\n    \n    report += `\\n## Recommendations\\n`;\n    for (const rec of performance.recommendations) {\n      report += `- ${rec}\\n`;\n    }\n    \n    return report;\n  }\n\n  private getSourceFileForTest(testFilePath: string): string {\n    // Convert test file path to source file path\n    return testFilePath\n      .replace(/\\.test\\.(ts|js)$/, '.$1')\n      .replace(/\\.spec\\.(ts|js)$/, '.$1')\n      .replace(/\\/test\\//, '/src/')\n      .replace(/\\/tests\\//, '/src/');\n  }\n\n  private async getCoverageForFile(filePath: string, context: PluginContext): Promise<any> {\n    // Simulate coverage data\n    return {\n      lines: Math.random() * 0.4 + 0.6,\n      branches: Math.random() * 0.4 + 0.5,\n      functions: Math.random() * 0.3 + 0.7\n    };\n  }\n\n  private async getTestFiles(context: PluginContext): Promise<string[]> {\n    // Simulate test file discovery\n    return [\n      'src/components/Button.test.ts',\n      'src/services/ApiService.test.ts',\n      'src/utils/helpers.test.ts',\n      'src/hooks/useAuth.test.ts'\n    ];\n  }\n\n  private async applySuggestion(suggestion: any, context: PluginContext): Promise<void> {\n    // Implementation for applying suggestions\n    this.api?.showNotification?.(`Applied suggestion: ${suggestion.title}`, 'info');\n  }\n\n  private async onTestRun(data: any, context: PluginContext): Promise<void> {\n    // Handle test run events\n    console.log('Test run started:', data);\n  }\n\n  private async onTestComplete(data: any, context: PluginContext): Promise<void> {\n    // Handle test completion events\n    console.log('Test run completed:', data);\n  }\n}\n"],"version":3}