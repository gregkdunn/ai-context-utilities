{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/engines/interactiveDashboardEngine.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/engines/interactiveDashboardEngine.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { \n  Dashboard, \n  DashboardConfig, \n  DashboardWidget, \n  WidgetConfig, \n  ChartConfiguration, \n  DashboardFilter, \n  DashboardLayout,\n  WidgetData,\n  DashboardTheme,\n  RealTimeUpdate,\n  DashboardExport,\n  WidgetType,\n  DashboardPermission\n} from '../../../types';\n\n/**\n * Interactive Dashboard Engine for Phase 4.4\n * \n * Advanced dashboard creation and management system with:\n * - Dynamic widget creation and configuration\n * - Real-time data updates and visualization\n * - Interactive filtering and drill-down capabilities\n * - Custom themes and responsive layouts\n * - Export and sharing functionality\n * - Performance optimization for large datasets\n */\nexport class InteractiveDashboardEngine extends EventEmitter {\n  private dashboards: Map<string, Dashboard> = new Map();\n  private widgets: Map<string, DashboardWidget> = new Map();\n  private themes: Map<string, DashboardTheme> = new Map();\n  private updateIntervals: Map<string, NodeJS.Timeout> = new Map();\n  private widgetDataCache: Map<string, WidgetData> = new Map();\n  private permissions: Map<string, DashboardPermission> = new Map();\n\n  constructor() {\n    super();\n    this.initializeEngine();\n  }\n\n  /**\n   * Initialize the dashboard engine\n   */\n  private initializeEngine(): void {\n    this.setupDefaultThemes();\n    this.setupDefaultWidgetTypes();\n    this.emit('engineInitialized');\n  }\n\n  /**\n   * Create a new dashboard\n   */\n  public async createDashboard(config: DashboardConfig): Promise<Dashboard> {\n    const dashboard: Dashboard = {\n      id: config.id || this.generateDashboardId(),\n      name: config.name,\n      description: config.description,\n      layout: config.layout || this.createDefaultLayout(),\n      widgets: [],\n      filters: config.filters || [],\n      theme: config.theme || 'default',\n      refreshInterval: config.refreshInterval || 30000,\n      isRealTime: config.isRealTime || false,\n      permissions: config.permissions || { read: ['*'], write: ['admin'] },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      createdBy: config.createdBy || 'system',\n      tags: config.tags || [],\n      isPublic: config.isPublic || false\n    };\n\n    // Create widgets if provided\n    if (config.widgets) {\n      for (const widgetConfig of config.widgets) {\n        const widget = await this.createWidget(widgetConfig);\n        dashboard.widgets.push(widget);\n      }\n    }\n\n    this.dashboards.set(dashboard.id, dashboard);\n    \n    // Set up real-time updates if enabled\n    if (dashboard.isRealTime) {\n      this.setupRealTimeUpdates(dashboard.id);\n    }\n\n    this.emit('dashboardCreated', dashboard);\n    return dashboard;\n  }\n\n  /**\n   * Update an existing dashboard\n   */\n  public async updateDashboard(\n    dashboardId: string, \n    updates: Partial<DashboardConfig>\n  ): Promise<Dashboard> {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) {\n      throw new Error(`Dashboard not found: ${dashboardId}`);\n    }\n\n    // Apply updates\n    Object.assign(dashboard, updates, { updatedAt: new Date() });\n\n    // Update real-time settings if changed\n    if (updates.isRealTime !== undefined) {\n      if (updates.isRealTime) {\n        this.setupRealTimeUpdates(dashboardId);\n      } else {\n        this.stopRealTimeUpdates(dashboardId);\n      }\n    }\n\n    this.dashboards.set(dashboardId, dashboard);\n    this.emit('dashboardUpdated', dashboard);\n    return dashboard;\n  }\n\n  /**\n   * Delete a dashboard\n   */\n  public deleteDashboard(dashboardId: string): boolean {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) {\n      return false;\n    }\n\n    // Clean up widgets\n    dashboard.widgets.forEach((widget: any) => {\n      this.widgets.delete(widget.id);\n      this.widgetDataCache.delete(widget.id);\n    });\n\n    // Stop real-time updates\n    this.stopRealTimeUpdates(dashboardId);\n\n    this.dashboards.delete(dashboardId);\n    this.emit('dashboardDeleted', dashboardId);\n    return true;\n  }\n\n  /**\n   * Get a dashboard by ID\n   */\n  public getDashboard(dashboardId: string): Dashboard | undefined {\n    return this.dashboards.get(dashboardId);\n  }\n\n  /**\n   * List all dashboards\n   */\n  public listDashboards(userId?: string): Dashboard[] {\n    const dashboards = Array.from(this.dashboards.values());\n    \n    if (userId) {\n      return dashboards.filter(d => this.hasPermission(d, userId, 'read'));\n    }\n    \n    return dashboards;\n  }\n\n  /**\n   * Create a new widget\n   */\n  public async createWidget(config: WidgetConfig): Promise<DashboardWidget> {\n    const widget: DashboardWidget = {\n      id: config.id || this.generateWidgetId(),\n      type: config.type,\n      title: config.title,\n      description: config.description,\n      position: config.position || { x: 0, y: 0, width: 4, height: 4 },\n      configuration: config.configuration || {},\n      dataSource: config.dataSource,\n      filters: config.filters || [],\n      refreshInterval: config.refreshInterval || 30000,\n      isVisible: config.isVisible !== false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      style: config.style || {},\n      interactions: config.interactions || {}\n    };\n\n    this.widgets.set(widget.id, widget);\n    \n    // Initialize widget data\n    await this.refreshWidgetData(widget.id);\n    \n    this.emit('widgetCreated', widget);\n    return widget;\n  }\n\n  /**\n   * Update a widget\n   */\n  public async updateWidget(\n    widgetId: string, \n    updates: Partial<WidgetConfig>\n  ): Promise<DashboardWidget> {\n    const widget = this.widgets.get(widgetId);\n    if (!widget) {\n      throw new Error(`Widget not found: ${widgetId}`);\n    }\n\n    Object.assign(widget, updates, { updatedAt: new Date() });\n    \n    // Refresh data if configuration changed\n    if (updates.configuration || updates.dataSource || updates.filters) {\n      await this.refreshWidgetData(widgetId);\n    }\n\n    this.widgets.set(widgetId, widget);\n    this.emit('widgetUpdated', widget);\n    return widget;\n  }\n\n  /**\n   * Delete a widget\n   */\n  public deleteWidget(widgetId: string): boolean {\n    const widget = this.widgets.get(widgetId);\n    if (!widget) {\n      return false;\n    }\n\n    this.widgets.delete(widgetId);\n    this.widgetDataCache.delete(widgetId);\n    this.emit('widgetDeleted', widgetId);\n    return true;\n  }\n\n  /**\n   * Get widget data\n   */\n  public getWidgetData(widgetId: string): WidgetData | undefined {\n    return this.widgetDataCache.get(widgetId);\n  }\n\n  /**\n   * Refresh widget data\n   */\n  public async refreshWidgetData(widgetId: string): Promise<WidgetData> {\n    const widget = this.widgets.get(widgetId);\n    if (!widget) {\n      throw new Error(`Widget not found: ${widgetId}`);\n    }\n\n    const data = await this.fetchWidgetData(widget);\n    this.widgetDataCache.set(widgetId, data);\n    \n    this.emit('widgetDataRefreshed', { widgetId, data });\n    return data;\n  }\n\n  /**\n   * Apply filters to a dashboard\n   */\n  public applyFilters(dashboardId: string, filters: DashboardFilter[]): void {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) {\n      throw new Error(`Dashboard not found: ${dashboardId}`);\n    }\n\n    dashboard.filters = filters;\n    dashboard.updatedAt = new Date();\n\n    // Refresh all widgets with new filters\n    dashboard.widgets.forEach((widget: any) => {\n      this.refreshWidgetData(widget.id);\n    });\n\n    this.emit('filtersApplied', { dashboardId, filters });\n  }\n\n  /**\n   * Export dashboard\n   */\n  public async exportDashboard(\n    dashboardId: string, \n    format: 'json' | 'pdf' | 'png' | 'svg' = 'json'\n  ): Promise<DashboardExport> {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) {\n      throw new Error(`Dashboard not found: ${dashboardId}`);\n    }\n\n    const exportData: DashboardExport = {\n      dashboard,\n      format,\n      exportedAt: new Date(),\n      data: await this.prepareExportData(dashboard, format)\n    };\n\n    this.emit('dashboardExported', exportData);\n    return exportData;\n  }\n\n  /**\n   * Clone a dashboard\n   */\n  public async cloneDashboard(\n    dashboardId: string, \n    newName: string, \n    userId?: string\n  ): Promise<Dashboard> {\n    const original = this.dashboards.get(dashboardId);\n    if (!original) {\n      throw new Error(`Dashboard not found: ${dashboardId}`);\n    }\n\n    const cloneConfig: DashboardConfig = {\n      name: newName,\n      description: `Clone of ${original.name}`,\n      layout: { ...original.layout },\n      widgets: original.widgets.map((w: any) => ({ ...w })),\n      filters: [...original.filters],\n      theme: original.theme,\n      refreshInterval: original.refreshInterval,\n      isRealTime: original.isRealTime,\n      createdBy: userId || 'system',\n      tags: [...(original.tags || []), 'clone']\n    };\n\n    return this.createDashboard(cloneConfig);\n  }\n\n  /**\n   * Get dashboard themes\n   */\n  public getThemes(): DashboardTheme[] {\n    return Array.from(this.themes.values());\n  }\n\n  /**\n   * Create a custom theme\n   */\n  public createTheme(theme: DashboardTheme): void {\n    this.themes.set(theme.id, theme);\n    this.emit('themeCreated', theme);\n  }\n\n  /**\n   * Get widget types\n   */\n  public getWidgetTypes(): WidgetType[] {\n    return [\n      { id: 'line-chart', name: 'Line Chart', category: 'charts' },\n      { id: 'bar-chart', name: 'Bar Chart', category: 'charts' },\n      { id: 'pie-chart', name: 'Pie Chart', category: 'charts' },\n      { id: 'scatter-plot', name: 'Scatter Plot', category: 'charts' },\n      { id: 'heatmap', name: 'Heatmap', category: 'charts' },\n      { id: 'metric-card', name: 'Metric Card', category: 'metrics' },\n      { id: 'gauge', name: 'Gauge', category: 'metrics' },\n      { id: 'table', name: 'Table', category: 'data' },\n      { id: 'list', name: 'List', category: 'data' },\n      { id: 'text', name: 'Text', category: 'content' },\n      { id: 'image', name: 'Image', category: 'content' },\n      { id: 'iframe', name: 'iFrame', category: 'content' }\n    ];\n  }\n\n  /**\n   * Get dashboard analytics\n   */\n  public getDashboardAnalytics(dashboardId: string): any {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) {\n      throw new Error(`Dashboard not found: ${dashboardId}`);\n    }\n\n    return {\n      views: this.getDashboardViews(dashboardId),\n      interactions: this.getDashboardInteractions(dashboardId),\n      performance: this.getDashboardPerformance(dashboardId),\n      widgets: dashboard.widgets.map((w: any) => ({\n        id: w.id,\n        type: w.type,\n        interactions: this.getWidgetInteractions(w.id),\n        loadTime: this.getWidgetLoadTime(w.id)\n      }))\n    };\n  }\n\n  /**\n   * Dispose of the dashboard engine\n   */\n  public dispose(): void {\n    // Stop all real-time updates\n    for (const [dashboardId] of this.updateIntervals) {\n      this.stopRealTimeUpdates(dashboardId);\n    }\n\n    // Clear all data\n    this.dashboards.clear();\n    this.widgets.clear();\n    this.widgetDataCache.clear();\n    this.themes.clear();\n    this.permissions.clear();\n\n    this.removeAllListeners();\n  }\n\n  // Private helper methods\n\n  private setupDefaultThemes(): void {\n    const themes: DashboardTheme[] = [\n      {\n        id: 'default',\n        name: 'Default',\n        colors: {\n          primary: '#007acc',\n          secondary: '#6c757d',\n          success: '#28a745',\n          warning: '#ffc107',\n          error: '#dc3545',\n          background: '#ffffff',\n          surface: '#f8f9fa',\n          text: '#212529'\n        },\n        fonts: {\n          body: 'system-ui, -apple-system, sans-serif',\n          heading: 'system-ui, -apple-system, sans-serif',\n          monospace: 'Consolas, Monaco, monospace'\n        },\n        spacing: {\n          small: '8px',\n          medium: '16px',\n          large: '24px'\n        }\n      },\n      {\n        id: 'dark',\n        name: 'Dark',\n        colors: {\n          primary: '#0d7377',\n          secondary: '#6c757d',\n          success: '#20c997',\n          warning: '#ffc107',\n          error: '#dc3545',\n          background: '#1a1a1a',\n          surface: '#2d2d2d',\n          text: '#ffffff'\n        },\n        fonts: {\n          body: 'system-ui, -apple-system, sans-serif',\n          heading: 'system-ui, -apple-system, sans-serif',\n          monospace: 'Consolas, Monaco, monospace'\n        },\n        spacing: {\n          small: '8px',\n          medium: '16px',\n          large: '24px'\n        }\n      }\n    ];\n\n    themes.forEach(theme => this.themes.set(theme.id, theme));\n  }\n\n  private setupDefaultWidgetTypes(): void {\n    // Widget types are defined in getWidgetTypes() method\n    this.emit('widgetTypesInitialized');\n  }\n\n  private createDefaultLayout(): DashboardLayout {\n    return {\n      type: 'grid',\n      columns: 12,\n      rows: 'auto',\n      gap: '16px',\n      padding: '16px'\n    };\n  }\n\n  private setupRealTimeUpdates(dashboardId: string): void {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) {return;}\n\n    // Stop existing interval if any\n    this.stopRealTimeUpdates(dashboardId);\n\n    // Start new interval\n    const interval = setInterval(() => {\n      this.updateDashboardData(dashboardId);\n    }, dashboard.refreshInterval);\n\n    this.updateIntervals.set(dashboardId, interval);\n  }\n\n  private stopRealTimeUpdates(dashboardId: string): void {\n    const interval = this.updateIntervals.get(dashboardId);\n    if (interval) {\n      clearInterval(interval);\n      this.updateIntervals.delete(dashboardId);\n    }\n  }\n\n  private async updateDashboardData(dashboardId: string): Promise<void> {\n    const dashboard = this.dashboards.get(dashboardId);\n    if (!dashboard) {return;}\n\n    const updates: RealTimeUpdate[] = [];\n\n    for (const widget of dashboard.widgets) {\n      try {\n        const data = await this.refreshWidgetData(widget.id);\n        updates.push({\n          widgetId: widget.id,\n          data,\n          timestamp: new Date()\n        });\n      } catch (error) {\n        console.error(`Error updating widget ${widget.id}:`, error);\n      }\n    }\n\n    this.emit('dashboardDataUpdated', { dashboardId, updates });\n  }\n\n  private async fetchWidgetData(widget: DashboardWidget): Promise<WidgetData> {\n    // Simulate data fetching based on widget type and configuration\n    const data: WidgetData = {\n      id: widget.id,\n      type: widget.type,\n      data: await this.generateMockData(widget),\n      metadata: {\n        lastUpdated: new Date(),\n        dataPoints: 0,\n        source: widget.dataSource?.type || 'mock',\n        filters: widget.filters\n      }\n    };\n\n    return data;\n  }\n\n  private async generateMockData(widget: DashboardWidget): Promise<any> {\n    // Generate mock data based on widget type\n    switch (widget.type) {\n      case 'line-chart':\n        return this.generateLineChartData();\n      case 'bar-chart':\n        return this.generateBarChartData();\n      case 'pie-chart':\n        return this.generatePieChartData();\n      case 'metric-card':\n        return this.generateMetricData();\n      case 'table':\n        return this.generateTableData();\n      case 'gauge':\n        return this.generateGaugeData();\n      default:\n        return {};\n    }\n  }\n\n  private generateLineChartData(): any {\n    const data = [];\n    const now = new Date();\n    \n    for (let i = 23; i >= 0; i--) {\n      const timestamp = new Date(now.getTime() - i * 60 * 60 * 1000);\n      data.push({\n        x: timestamp.toISOString(),\n        y: Math.floor(Math.random() * 100) + 50\n      });\n    }\n    \n    return {\n      datasets: [{\n        label: 'Sample Data',\n        data,\n        borderColor: '#007acc',\n        backgroundColor: 'rgba(0, 122, 204, 0.1)'\n      }]\n    };\n  }\n\n  private generateBarChartData(): any {\n    return {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n      datasets: [{\n        label: 'Sample Data',\n        data: Array.from({ length: 6 }, () => Math.floor(Math.random() * 100)),\n        backgroundColor: '#007acc'\n      }]\n    };\n  }\n\n  private generatePieChartData(): any {\n    return {\n      labels: ['Category A', 'Category B', 'Category C', 'Category D'],\n      datasets: [{\n        data: [30, 25, 25, 20],\n        backgroundColor: ['#007acc', '#28a745', '#ffc107', '#dc3545']\n      }]\n    };\n  }\n\n  private generateMetricData(): any {\n    return {\n      value: Math.floor(Math.random() * 1000) + 100,\n      change: (Math.random() - 0.5) * 20,\n      unit: 'count',\n      trend: Math.random() > 0.5 ? 'up' : 'down'\n    };\n  }\n\n  private generateTableData(): any {\n    const columns = ['ID', 'Name', 'Status', 'Value'];\n    const rows = [];\n    \n    for (let i = 0; i < 10; i++) {\n      rows.push([\n        i + 1,\n        `Item ${i + 1}`,\n        Math.random() > 0.5 ? 'Active' : 'Inactive',\n        Math.floor(Math.random() * 100)\n      ]);\n    }\n    \n    return { columns, rows };\n  }\n\n  private generateGaugeData(): any {\n    return {\n      value: Math.floor(Math.random() * 100),\n      min: 0,\n      max: 100,\n      thresholds: [\n        { value: 30, color: '#28a745' },\n        { value: 70, color: '#ffc107' },\n        { value: 90, color: '#dc3545' }\n      ]\n    };\n  }\n\n  private hasPermission(dashboard: Dashboard, userId: string, action: 'read' | 'write'): boolean {\n    if (dashboard.isPublic && action === 'read') {\n      return true;\n    }\n    \n    const permissions = dashboard.permissions?.[action];\n    return permissions ? (permissions.includes('*') || permissions.includes(userId)) : false;\n  }\n\n  private async prepareExportData(dashboard: Dashboard, format: string): Promise<any> {\n    switch (format) {\n      case 'json':\n        return {\n          dashboard,\n          widgets: dashboard.widgets.map((w: any) => ({\n            ...w,\n            data: this.widgetDataCache.get(w.id)\n          }))\n        };\n      case 'pdf':\n        return { content: 'PDF export not implemented' };\n      case 'png':\n        return { content: 'PNG export not implemented' };\n      case 'svg':\n        return { content: 'SVG export not implemented' };\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n  }\n\n  private getDashboardViews(dashboardId: string): number {\n    // Mock implementation\n    return Math.floor(Math.random() * 1000) + 10;\n  }\n\n  private getDashboardInteractions(dashboardId: string): number {\n    // Mock implementation\n    return Math.floor(Math.random() * 100) + 5;\n  }\n\n  private getDashboardPerformance(dashboardId: string): any {\n    return {\n      loadTime: Math.random() * 2000 + 500,\n      renderTime: Math.random() * 500 + 100,\n      dataFetchTime: Math.random() * 1000 + 200\n    };\n  }\n\n  private getWidgetInteractions(widgetId: string): number {\n    // Mock implementation\n    return Math.floor(Math.random() * 50) + 1;\n  }\n\n  private getWidgetLoadTime(widgetId: string): number {\n    // Mock implementation\n    return Math.random() * 1000 + 100;\n  }\n\n  private generateDashboardId(): string {\n    return `dashboard_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateWidgetId(): string {\n    return `widget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n"],"version":3}