{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/ai-insights/engines/automatedInsightsEngine.ts","mappings":";;;AA6BA,MAAa,uBAAuB;IACxB,OAAO,CAA0B;IACjC,iBAAiB,CAAmE;IAE5F,YAAY,OAAgC;QACxC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAEM,KAAK,CAAC,yBAAyB,CAAC,IAAkB;QACrD,MAAM,QAAQ,GAAuB,EAAE,CAAC;QAExC,6BAA6B;QAC7B,KAAK,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzD,IAAI,CAAC;gBACD,MAAM,gBAAgB,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,CAAC;gBAC/C,QAAQ,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,CAAC;YACvC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,0CAA0C,QAAQ,GAAG,EAAE,KAAK,CAAC,CAAC;YAChF,CAAC;QACL,CAAC;QAED,kCAAkC;QAClC,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAEO,oBAAoB;QACxB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACvF,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEO,KAAK,CAAC,uBAAuB,CAAC,IAAkB;QACpD,MAAM,QAAQ,GAAuB,EAAE,CAAC;QAExC,wBAAwB;QACxB,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC;QAC/E,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,QAAQ,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,eAAe;gBACnB,QAAQ,EAAE,SAAS;gBACnB,QAAQ,EAAE,MAAM;gBAChB,UAAU,EAAE,IAAI;gBAChB,KAAK,EAAE,GAAG,YAAY,CAAC,MAAM,yBAAyB;gBACtD,WAAW,EAAE,SAAS,YAAY,CAAC,MAAM,qCAAqC;gBAC9E,MAAM,EAAE,+CAA+C;gBACvD,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE;oBACT;wBACI,KAAK,EAAE,mBAAmB;wBAC1B,WAAW,EAAE,gDAAgD;wBAC7D,MAAM,EAAE,iBAAiB;wBACzB,eAAe,EAAE,MAAM;wBACvB,eAAe,EAAE,SAAS;wBAC1B,QAAQ,EAAE,CAAC;qBACd;oBACD;wBACI,KAAK,EAAE,uBAAuB;wBAC9B,WAAW,EAAE,2CAA2C;wBACxD,MAAM,EAAE,qBAAqB;wBAC7B,eAAe,EAAE,QAAQ;wBACzB,eAAe,EAAE,OAAO;wBACxB,QAAQ,EAAE,CAAC;qBACd;iBACJ;gBACD,QAAQ,EAAE;oBACN,MAAM,EAAE,cAAc;oBACtB,WAAW,EAAE,IAAI,IAAI,EAAE;iBAC1B;aACJ,CAAC,CAAC;QACP,CAAC;QAED,wBAAwB;QACxB,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,MAAM,CAAC;QACtF,MAAM,QAAQ,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAExE,IAAI,QAAQ,GAAG,EAAE,EAAE,CAAC;YAChB,QAAQ,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,mBAAmB;gBACvB,QAAQ,EAAE,SAAS;gBACnB,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,GAAG;gBACf,KAAK,EAAE,mBAAmB;gBAC1B,WAAW,EAAE,oBAAoB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B;gBAC9E,MAAM,EAAE,mCAAmC;gBAC3C,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE;oBACT;wBACI,KAAK,EAAE,gBAAgB;wBACvB,WAAW,EAAE,4CAA4C;wBACzD,MAAM,EAAE,UAAU;wBAClB,eAAe,EAAE,MAAM;wBACvB,eAAe,EAAE,OAAO;wBACxB,QAAQ,EAAE,CAAC;qBACd;iBACJ;gBACD,QAAQ,EAAE;oBACN,MAAM,EAAE,mBAAmB;oBAC3B,WAAW,EAAE,IAAI,IAAI,EAAE;iBAC1B;aACJ,CAAC,CAAC;QACP,CAAC;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,2BAA2B,CAAC,IAAkB;QACxD,MAAM,QAAQ,GAAuB,EAAE,CAAC;QAExC,kCAAkC;QAClC,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAClD,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC3C,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,OAAO,QAAQ,GAAG,KAAK,CAAC,CAAC,aAAa;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,QAAQ,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,eAAe;gBACnB,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,GAAG;gBACf,KAAK,EAAE,wBAAwB;gBAC/B,WAAW,EAAE,GAAG,YAAY,CAAC,MAAM,uCAAuC;gBAC1E,MAAM,EAAE,4CAA4C;gBACpD,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE;oBACT;wBACI,KAAK,EAAE,4BAA4B;wBACnC,WAAW,EAAE,sCAAsC;wBACnD,MAAM,EAAE,kBAAkB;wBAC1B,eAAe,EAAE,QAAQ;wBACzB,eAAe,EAAE,SAAS;wBAC1B,QAAQ,EAAE,CAAC;qBACd;iBACJ;gBACD,QAAQ,EAAE;oBACN,MAAM,EAAE,iBAAiB;oBACzB,WAAW,EAAE,IAAI,IAAI,EAAE;iBAC1B;aACJ,CAAC,CAAC;QACP,CAAC;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,IAAkB;QACrD,MAAM,QAAQ,GAAuB,EAAE,CAAC;QAExC,4CAA4C;QAC5C,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CACvD,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC;YAClD,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC;YACvD,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,CACtD,CAAC;QAEF,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,QAAQ,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,iBAAiB;gBACrB,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,UAAU;gBACpB,UAAU,EAAE,GAAG;gBACf,KAAK,EAAE,0BAA0B;gBACjC,WAAW,EAAE,SAAS,cAAc,CAAC,MAAM,4BAA4B;gBACvE,MAAM,EAAE,yCAAyC;gBACjD,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE;oBACT;wBACI,KAAK,EAAE,wBAAwB;wBAC/B,WAAW,EAAE,8CAA8C;wBAC3D,MAAM,EAAE,gBAAgB;wBACxB,eAAe,EAAE,MAAM;wBACvB,eAAe,EAAE,OAAO;wBACxB,QAAQ,EAAE,CAAC;qBACd;iBACJ;gBACD,QAAQ,EAAE;oBACN,MAAM,EAAE,gBAAgB;oBACxB,WAAW,EAAE,IAAI,IAAI,EAAE;iBAC1B;aACJ,CAAC,CAAC;QACP,CAAC;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,uBAAuB,CAAC,IAAkB;QACpD,MAAM,QAAQ,GAAuB,EAAE,CAAC;QAExC,yBAAyB;QACzB,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QACnF,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,QAAQ,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,iBAAiB;gBACrB,QAAQ,EAAE,SAAS;gBACnB,QAAQ,EAAE,MAAM;gBAChB,UAAU,EAAE,GAAG;gBACf,KAAK,EAAE,yBAAyB;gBAChC,WAAW,EAAE,GAAG,cAAc,CAAC,MAAM,kCAAkC;gBACvE,MAAM,EAAE,qCAAqC;gBAC7C,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE;oBACT;wBACI,KAAK,EAAE,mBAAmB;wBAC1B,WAAW,EAAE,0CAA0C;wBACvD,MAAM,EAAE,WAAW;wBACnB,eAAe,EAAE,MAAM;wBACvB,eAAe,EAAE,OAAO;wBACxB,QAAQ,EAAE,CAAC;qBACd;iBACJ;gBACD,QAAQ,EAAE;oBACN,MAAM,EAAE,gBAAgB;oBACxB,WAAW,EAAE,IAAI,IAAI,EAAE;iBAC1B;aACJ,CAAC,CAAC;QACP,CAAC;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,IAAkB;QAChD,MAAM,QAAQ,GAAuB,EAAE,CAAC;QAExC,sBAAsB;QACtB,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAClD,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YACrF,OAAO,eAAe,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,aAAa,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;YAC5B,QAAQ,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,uBAAuB;gBAC3B,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,GAAG;gBACf,KAAK,EAAE,uBAAuB;gBAC9B,WAAW,EAAE,GAAG,aAAa,CAAC,MAAM,2BAA2B;gBAC/D,MAAM,EAAE,6CAA6C;gBACrD,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE;oBACT;wBACI,KAAK,EAAE,uBAAuB;wBAC9B,WAAW,EAAE,kCAAkC;wBAC/C,MAAM,EAAE,eAAe;wBACvB,eAAe,EAAE,KAAK;wBACtB,eAAe,EAAE,SAAS;wBAC1B,QAAQ,EAAE,CAAC;qBACd;iBACJ;gBACD,QAAQ,EAAE;oBACN,MAAM,EAAE,aAAa;oBACrB,WAAW,EAAE,IAAI,IAAI,EAAE;iBAC1B;aACJ,CAAC,CAAC;QACP,CAAC;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,0BAA0B,CAAC,IAAkB;QACvD,MAAM,QAAQ,GAAuB,EAAE,CAAC;QAExC,sCAAsC;QACtC,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CACzD,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAChD,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAChD,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CACvD,CAAC;QAEF,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9B,QAAQ,CAAC,IAAI,CAAC;gBACV,EAAE,EAAE,mBAAmB;gBACvB,QAAQ,EAAE,cAAc;gBACxB,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,GAAG;gBACf,KAAK,EAAE,mBAAmB;gBAC1B,WAAW,EAAE,GAAG,gBAAgB,CAAC,MAAM,kCAAkC;gBACzE,MAAM,EAAE,oCAAoC;gBAC5C,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE;oBACT;wBACI,KAAK,EAAE,qBAAqB;wBAC5B,WAAW,EAAE,wCAAwC;wBACrD,MAAM,EAAE,oBAAoB;wBAC5B,eAAe,EAAE,QAAQ;wBACzB,eAAe,EAAE,OAAO;wBACxB,QAAQ,EAAE,CAAC;qBACd;iBACJ;gBACD,QAAQ,EAAE;oBACN,MAAM,EAAE,qBAAqB;oBAC7B,WAAW,EAAE,IAAI,IAAI,EAAE;iBAC1B;aACJ,CAAC,CAAC;QACP,CAAC;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,kBAAkB,CAAC,QAA4B;QACnD,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,MAAM,aAAa,GAAG;gBAClB,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,CAAC;gBACT,QAAQ,EAAE,CAAC;gBACX,KAAK,EAAE,CAAC;aACX,CAAC;YAEF,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC;YACxD,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC;YAExD,OAAO,MAAM,GAAG,MAAM,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,iBAAiB;QAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAqB,gBAAgB,EAAE,EAAE,CAAC,CAAC;QACvF,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,QAA4B;QACxD,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACtE,CAAC;IAEM,OAAO;QACV,oBAAoB;QACpB,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ;AA9UD,0DA8UC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/ai-insights/engines/automatedInsightsEngine.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { AnalysisData, InsightData, InsightPriority } from '../../../types';\n\nexport interface AutomatedInsight {\n    id: string;\n    category: 'testing' | 'performance' | 'security' | 'quality' | 'git' | 'dependencies';\n    priority: InsightPriority;\n    confidence: number;\n    title: string;\n    description: string;\n    impact: string;\n    actionable: boolean;\n    suggestions: InsightSuggestion[];\n    metadata: {\n        source: string;\n        generatedAt: Date;\n        validUntil?: Date;\n    };\n}\n\nexport interface InsightSuggestion {\n    title: string;\n    description: string;\n    action: string;\n    estimatedImpact: 'low' | 'medium' | 'high';\n    estimatedEffort: 'minutes' | 'hours' | 'days';\n    priority: number;\n}\n\nexport class AutomatedInsightsEngine {\n    private context: vscode.ExtensionContext;\n    private insightGenerators: Map<string, (data: AnalysisData) => Promise<AutomatedInsight[]>>;\n\n    constructor(context: vscode.ExtensionContext) {\n        this.context = context;\n        this.insightGenerators = new Map();\n        this.initializeGenerators();\n    }\n\n    public async generateAutomatedInsights(data: AnalysisData): Promise<AutomatedInsight[]> {\n        const insights: AutomatedInsight[] = [];\n\n        // Run all insight generators\n        for (const [category, generator] of this.insightGenerators) {\n            try {\n                const categoryInsights = await generator(data);\n                insights.push(...categoryInsights);\n            } catch (error) {\n                console.error(`Error generating insights for category ${category}:`, error);\n            }\n        }\n\n        // Sort by priority and confidence\n        return this.prioritizeInsights(insights);\n    }\n\n    private initializeGenerators(): void {\n        this.insightGenerators.set('testing', this.generateTestingInsights.bind(this));\n        this.insightGenerators.set('performance', this.generatePerformanceInsights.bind(this));\n        this.insightGenerators.set('security', this.generateSecurityInsights.bind(this));\n        this.insightGenerators.set('quality', this.generateQualityInsights.bind(this));\n        this.insightGenerators.set('git', this.generateGitInsights.bind(this));\n        this.insightGenerators.set('dependencies', this.generateDependencyInsights.bind(this));\n    }\n\n    private async generateTestingInsights(data: AnalysisData): Promise<AutomatedInsight[]> {\n        const insights: AutomatedInsight[] = [];\n\n        // Analyze test failures\n        const failingTests = data.testResults.filter(test => test.status === 'failed');\n        if (failingTests.length > 0) {\n            insights.push({\n                id: 'test-failures',\n                category: 'testing',\n                priority: 'high',\n                confidence: 0.95,\n                title: `${failingTests.length} Test Failures Detected`,\n                description: `Found ${failingTests.length} failing tests that need attention.`,\n                impact: 'Code quality and stability may be compromised',\n                actionable: true,\n                suggestions: [\n                    {\n                        title: 'Run Failing Tests',\n                        description: 'Execute only the failing tests to debug issues',\n                        action: 'runFailingTests',\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'minutes',\n                        priority: 1\n                    },\n                    {\n                        title: 'Analyze Test Patterns',\n                        description: 'Look for common patterns in test failures',\n                        action: 'analyzeTestPatterns',\n                        estimatedImpact: 'medium',\n                        estimatedEffort: 'hours',\n                        priority: 2\n                    }\n                ],\n                metadata: {\n                    source: 'test-results',\n                    generatedAt: new Date()\n                }\n            });\n        }\n\n        // Analyze test coverage\n        const totalTests = data.testResults.length;\n        const passingTests = data.testResults.filter(test => test.status === 'passed').length;\n        const coverage = totalTests > 0 ? (passingTests / totalTests) * 100 : 0;\n\n        if (coverage < 80) {\n            insights.push({\n                id: 'low-test-coverage',\n                category: 'testing',\n                priority: 'medium',\n                confidence: 0.8,\n                title: 'Low Test Coverage',\n                description: `Test coverage is ${coverage.toFixed(1)}%, below recommended 80%`,\n                impact: 'Increased risk of undetected bugs',\n                actionable: true,\n                suggestions: [\n                    {\n                        title: 'Add More Tests',\n                        description: 'Write additional tests to improve coverage',\n                        action: 'addTests',\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'hours',\n                        priority: 1\n                    }\n                ],\n                metadata: {\n                    source: 'coverage-analysis',\n                    generatedAt: new Date()\n                }\n            });\n        }\n\n        return insights;\n    }\n\n    private async generatePerformanceInsights(data: AnalysisData): Promise<AutomatedInsight[]> {\n        const insights: AutomatedInsight[] = [];\n\n        // Analyze command execution times\n        const slowCommands = data.commandHistory.filter(cmd => {\n            const duration = cmd.endTime && cmd.startTime ? \n                cmd.endTime.getTime() - cmd.startTime.getTime() : 0;\n            return duration > 30000; // 30 seconds\n        });\n\n        if (slowCommands.length > 0) {\n            insights.push({\n                id: 'slow-commands',\n                category: 'performance',\n                priority: 'medium',\n                confidence: 0.7,\n                title: 'Slow Command Execution',\n                description: `${slowCommands.length} commands took longer than 30 seconds`,\n                impact: 'Development workflow efficiency is reduced',\n                actionable: true,\n                suggestions: [\n                    {\n                        title: 'Optimize Command Execution',\n                        description: 'Consider running affected tests only',\n                        action: 'optimizeCommands',\n                        estimatedImpact: 'medium',\n                        estimatedEffort: 'minutes',\n                        priority: 1\n                    }\n                ],\n                metadata: {\n                    source: 'command-history',\n                    generatedAt: new Date()\n                }\n            });\n        }\n\n        return insights;\n    }\n\n    private async generateSecurityInsights(data: AnalysisData): Promise<AutomatedInsight[]> {\n        const insights: AutomatedInsight[] = [];\n\n        // Check for security-related error patterns\n        const securityErrors = data.errorPatterns.filter(pattern => \n            pattern.pattern.toLowerCase().includes('security') ||\n            pattern.pattern.toLowerCase().includes('vulnerability') ||\n            pattern.pattern.toLowerCase().includes('injection')\n        );\n\n        if (securityErrors.length > 0) {\n            insights.push({\n                id: 'security-issues',\n                category: 'security',\n                priority: 'critical',\n                confidence: 0.9,\n                title: 'Security Issues Detected',\n                description: `Found ${securityErrors.length} potential security issues`,\n                impact: 'Application security may be compromised',\n                actionable: true,\n                suggestions: [\n                    {\n                        title: 'Review Security Issues',\n                        description: 'Investigate and fix security vulnerabilities',\n                        action: 'reviewSecurity',\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'hours',\n                        priority: 1\n                    }\n                ],\n                metadata: {\n                    source: 'error-patterns',\n                    generatedAt: new Date()\n                }\n            });\n        }\n\n        return insights;\n    }\n\n    private async generateQualityInsights(data: AnalysisData): Promise<AutomatedInsight[]> {\n        const insights: AutomatedInsight[] = [];\n\n        // Analyze error patterns\n        const frequentErrors = data.errorPatterns.filter(pattern => pattern.frequency > 5);\n        if (frequentErrors.length > 0) {\n            insights.push({\n                id: 'frequent-errors',\n                category: 'quality',\n                priority: 'high',\n                confidence: 0.8,\n                title: 'Frequent Error Patterns',\n                description: `${frequentErrors.length} error patterns occur frequently`,\n                impact: 'Code quality and reliability issues',\n                actionable: true,\n                suggestions: [\n                    {\n                        title: 'Fix Common Errors',\n                        description: 'Address the most frequent error patterns',\n                        action: 'fixErrors',\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'hours',\n                        priority: 1\n                    }\n                ],\n                metadata: {\n                    source: 'error-analysis',\n                    generatedAt: new Date()\n                }\n            });\n        }\n\n        return insights;\n    }\n\n    private async generateGitInsights(data: AnalysisData): Promise<AutomatedInsight[]> {\n        const insights: AutomatedInsight[] = [];\n\n        // Analyze git history\n        const recentCommits = data.gitHistory.filter(commit => {\n            const daysSinceCommit = (Date.now() - commit.date.getTime()) / (1000 * 60 * 60 * 24);\n            return daysSinceCommit <= 7;\n        });\n\n        if (recentCommits.length > 20) {\n            insights.push({\n                id: 'high-commit-frequency',\n                category: 'git',\n                priority: 'low',\n                confidence: 0.6,\n                title: 'High Commit Frequency',\n                description: `${recentCommits.length} commits in the last week`,\n                impact: 'May indicate unstable code or missing tests',\n                actionable: true,\n                suggestions: [\n                    {\n                        title: 'Review Commit Quality',\n                        description: 'Consider squashing small commits',\n                        action: 'reviewCommits',\n                        estimatedImpact: 'low',\n                        estimatedEffort: 'minutes',\n                        priority: 1\n                    }\n                ],\n                metadata: {\n                    source: 'git-history',\n                    generatedAt: new Date()\n                }\n            });\n        }\n\n        return insights;\n    }\n\n    private async generateDependencyInsights(data: AnalysisData): Promise<AutomatedInsight[]> {\n        const insights: AutomatedInsight[] = [];\n\n        // Check for dependency-related errors\n        const dependencyErrors = data.errorPatterns.filter(pattern => \n            pattern.pattern.toLowerCase().includes('module') ||\n            pattern.pattern.toLowerCase().includes('import') ||\n            pattern.pattern.toLowerCase().includes('dependency')\n        );\n\n        if (dependencyErrors.length > 0) {\n            insights.push({\n                id: 'dependency-issues',\n                category: 'dependencies',\n                priority: 'medium',\n                confidence: 0.7,\n                title: 'Dependency Issues',\n                description: `${dependencyErrors.length} dependency-related errors found`,\n                impact: 'Build and runtime stability issues',\n                actionable: true,\n                suggestions: [\n                    {\n                        title: 'Update Dependencies',\n                        description: 'Review and update project dependencies',\n                        action: 'updateDependencies',\n                        estimatedImpact: 'medium',\n                        estimatedEffort: 'hours',\n                        priority: 1\n                    }\n                ],\n                metadata: {\n                    source: 'dependency-analysis',\n                    generatedAt: new Date()\n                }\n            });\n        }\n\n        return insights;\n    }\n\n    private prioritizeInsights(insights: AutomatedInsight[]): AutomatedInsight[] {\n        return insights.sort((a, b) => {\n            const priorityScore = {\n                'critical': 4,\n                'high': 3,\n                'medium': 2,\n                'low': 1\n            };\n\n            const aScore = priorityScore[a.priority] * a.confidence;\n            const bScore = priorityScore[b.priority] * b.confidence;\n\n            return bScore - aScore;\n        });\n    }\n\n    public async getInsightHistory(): Promise<AutomatedInsight[]> {\n        const history = this.context.globalState.get<AutomatedInsight[]>('insightHistory', []);\n        return history;\n    }\n\n    public async saveInsightHistory(insights: AutomatedInsight[]): Promise<void> {\n        await this.context.globalState.update('insightHistory', insights);\n    }\n\n    public dispose(): void {\n        // Cleanup resources\n        this.insightGenerators.clear();\n    }\n}\n"],"version":3}