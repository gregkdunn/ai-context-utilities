ed00f558b88fbbc308e3df52cfa60abc
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepareToPushCommand = void 0;
const vscode = __importStar(require("vscode"));
const child_process_1 = require("child_process");
class PrepareToPushCommand {
    constructor() { }
    /**
     * Run Prepare to Push command (lint and format)
     */
    async run(project, options = {}) {
        const startTime = Date.now();
        try {
            if (!project) {
                throw new Error("Project name is required");
            }
            this.showHeader(`Preparing to Push: ${project}`);
            // Step 1: Run linting
            this.showStep("Running linter...");
            this.showInfo(`Command: yarn nx lint ${project}`);
            const lintResult = await this.executeLint(project);
            if (lintResult.success) {
                this.showSuccess("Linting passed!");
            }
            else {
                this.showError(`Linting failed with exit code: ${lintResult.exitCode}`);
                this.showNextSteps([
                    "Fix the linting errors shown above",
                    `Some errors may be auto-fixable with: yarn nx lint ${project} --fix`,
                    `Re-run prepareToPush ${project} after fixes`
                ]);
                const duration = Date.now() - startTime;
                return {
                    success: false,
                    exitCode: lintResult.exitCode,
                    output: lintResult.output,
                    error: lintResult.error,
                    duration
                };
            }
            // Step 2: Run prettier formatting
            this.showStep("Running code formatter...");
            this.showInfo(`Command: yarn nx prettier ${project} --write`);
            const prettierResult = await this.executePrettier(project);
            if (prettierResult.success) {
                this.showSuccess("Code formatting completed!");
            }
            else {
                this.showError(`Prettier failed with exit code: ${prettierResult.exitCode}`);
                this.showNextSteps([
                    "Check the prettier errors shown above",
                    "Ensure all files are valid syntax",
                    `Re-run prepareToPush ${project} after fixes`
                ]);
                const duration = Date.now() - startTime;
                return {
                    success: false,
                    exitCode: prettierResult.exitCode,
                    output: prettierResult.output,
                    error: prettierResult.error,
                    duration
                };
            }
            // Success summary
            this.showSuccessSummary(project);
            const duration = Date.now() - startTime;
            return {
                success: true,
                exitCode: 0,
                output: `Prepare to push completed successfully for ${project}`,
                duration
            };
        }
        catch (error) {
            const duration = Date.now() - startTime;
            return {
                success: false,
                exitCode: 1,
                output: "",
                error: error instanceof Error ? error.message : 'Unknown error',
                duration
            };
        }
    }
    async executeLint(project) {
        return new Promise((resolve) => {
            const process = (0, child_process_1.spawn)('yarn', ['nx', 'lint', project], {
                cwd: this.getWorkspaceRoot(),
                shell: true
            });
            let output = '';
            let errorOutput = '';
            process.stdout?.on('data', (data) => {
                const text = data.toString();
                output += text;
                this.showInfo(text);
            });
            process.stderr?.on('data', (data) => {
                const text = data.toString();
                errorOutput += text;
                this.showInfo(text);
            });
            process.on('close', (code) => {
                resolve({
                    success: code === 0,
                    exitCode: code || 0,
                    output,
                    error: errorOutput || undefined,
                    duration: 0
                });
            });
            process.on('error', (error) => {
                resolve({
                    success: false,
                    exitCode: 1,
                    output,
                    error: error.message,
                    duration: 0
                });
            });
        });
    }
    async executePrettier(project) {
        return new Promise((resolve) => {
            const process = (0, child_process_1.spawn)('yarn', ['nx', 'prettier', project, '--write'], {
                cwd: this.getWorkspaceRoot(),
                shell: true
            });
            let output = '';
            let errorOutput = '';
            process.stdout?.on('data', (data) => {
                const text = data.toString();
                output += text;
                this.showInfo(text);
            });
            process.stderr?.on('data', (data) => {
                const text = data.toString();
                errorOutput += text;
                this.showInfo(text);
            });
            process.on('close', (code) => {
                resolve({
                    success: code === 0,
                    exitCode: code || 0,
                    output,
                    error: errorOutput || undefined,
                    duration: 0
                });
            });
            process.on('error', (error) => {
                resolve({
                    success: false,
                    exitCode: 1,
                    output,
                    error: error.message,
                    duration: 0
                });
            });
        });
    }
    showHeader(title) {
        const separator = "=".repeat(60);
        this.showInfo(`\n${separator}`);
        this.showInfo(`üöÄ ${title}`);
        this.showInfo(separator);
    }
    showStep(message) {
        this.showInfo(`\n${message}`);
    }
    showNextSteps(steps) {
        this.showInfo("\nüí° NEXT STEPS:");
        steps.forEach(step => {
            this.showInfo(`‚Ä¢ ${step}`);
        });
    }
    showSuccessSummary(project) {
        const separator = "=".repeat(60);
        this.showInfo(`\n${separator}`);
        this.showInfo("üéâ Ready to Push!");
        this.showInfo(separator);
        this.showInfo("‚úÖ Linting: Passed");
        this.showInfo("‚úÖ Formatting: Applied");
        this.showInfo("");
        this.showInfo("üìã SUGGESTED NEXT STEPS:");
        this.showInfo("1. Review any formatting changes made by prettier");
        this.showInfo(`2. Run aiDebug ${project} to ensure tests still pass`);
        this.showInfo("3. Commit your changes: git add . && git commit -m 'Your message'");
        this.showInfo("4. Push to your branch: git push");
        this.showInfo("");
        this.showInfo("üîÑ COMPLETE WORKFLOW:");
        this.showInfo(`‚Ä¢ prepareToPush ${project}  (‚úÖ Done!)`);
        this.showInfo(`‚Ä¢ aiDebug ${project}        (recommended next)`);
        this.showInfo("‚Ä¢ git commit && git push  (final step)");
        this.showInfo(separator);
    }
    getWorkspaceRoot() {
        return vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
    }
    showInfo(message) {
        const outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');
        outputChannel.appendLine(message);
        outputChannel.show();
    }
    showSuccess(message) {
        this.showInfo(`‚úÖ ${message}`);
    }
    showError(message) {
        this.showInfo(`‚ùå ${message}`);
    }
}
exports.PrepareToPushCommand = PrepareToPushCommand;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,