{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/__tests__/streaming.integration.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/__tests__/streaming.integration.test.ts"],"sourcesContent":["import { WebviewProvider } from '../webview/provider';\nimport { ProjectDetector } from '../utils/projectDetector';\nimport { CommandRunner } from '../utils/shellRunner';\nimport { FileManager } from '../utils/fileManager';\nimport { StatusTracker } from '../utils/statusTracker';\nimport { WebviewMessage } from '../types';\nimport * as vscode from 'vscode';\n\n// Mock VSCode completely for integration tests\njest.mock('vscode', () => ({\n    StatusBarAlignment: {\n        Left: 1,\n        Right: 2\n    },\n    Uri: {\n        joinPath: jest.fn(() => ({ toString: () => 'mock://uri' })),\n        parse: jest.fn(() => ({ toString: () => 'mock://uri' }))\n    },\n    workspace: {\n        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\n        getConfiguration: jest.fn(() => ({\n            get: jest.fn(() => true)\n        }))\n    },\n    window: {\n        createStatusBarItem: jest.fn(() => ({\n            show: jest.fn(),\n            hide: jest.fn(),\n            dispose: jest.fn(),\n            text: '',\n            tooltip: '',\n            command: ''\n        })),\n        showInformationMessage: jest.fn(),\n        showErrorMessage: jest.fn(),\n        createOutputChannel: jest.fn(() => ({\n            append: jest.fn(),\n            appendLine: jest.fn(),\n            show: jest.fn(),\n            hide: jest.fn(),\n            dispose: jest.fn()\n        }))\n    }\n}));\n\ndescribe('Integration Tests', () => {\n    let provider: WebviewProvider;\n    let mockProjectDetector: jest.Mocked<ProjectDetector>;\n    let mockCommandRunner: jest.Mocked<CommandRunner>;\n    let mockFileManager: jest.Mocked<FileManager>;\n    let mockWebviewView: jest.Mocked<vscode.WebviewView>;\n    let mockWebview: jest.Mocked<vscode.Webview>;\n    let receivedMessages: any[] = [];\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        receivedMessages = [];\n\n        // Setup mocked dependencies\n        mockProjectDetector = {\n            getProjects: jest.fn().mockResolvedValue([\n                { name: 'test-app', root: 'apps/test-app', projectType: 'application' }\n            ]),\n            getCurrentProject: jest.fn().mockResolvedValue({ name: 'test-app', root: 'apps/test-app', projectType: 'application' })\n        } as any;\n\n        mockCommandRunner = {\n            runAiDebug: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'AI debug complete', duration: 2000 }),\n            runNxTest: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'Tests passed', duration: 5000 }),\n            runGitDiff: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'Diff complete', duration: 1000 }),\n            runPrepareToPush: jest.fn().mockResolvedValue({ success: true, exitCode: 0, output: 'Prepared to push', duration: 3000 })\n        } as any;\n\n        mockFileManager = {\n            watchFiles: jest.fn(),\n            getFileContent: jest.fn().mockResolvedValue('test file content'),\n            openFile: jest.fn()\n        } as any;\n\n        // Setup webview mocks that capture messages\n        mockWebview = {\n            asWebviewUri: jest.fn().mockReturnValue('mock://webview-uri'),\n            postMessage: jest.fn((message) => {\n                receivedMessages.push(message);\n                return Promise.resolve(true);\n            }),\n            onDidReceiveMessage: jest.fn(),\n            html: '',\n            options: {}\n        } as any;\n\n        mockWebviewView = {\n            webview: mockWebview,\n            show: jest.fn()\n        } as any;\n\n        // Create provider\n        const mockStatusTracker = new StatusTracker();\n        provider = new WebviewProvider(\n            vscode.Uri.parse('test://extension'),\n            mockProjectDetector,\n            mockCommandRunner,\n            mockFileManager,\n            mockStatusTracker\n        );\n    });\n\n    describe('webview integration', () => {\n        beforeEach(() => {\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n        });\n\n        it('should handle runCommand message for nxTest', async () => {\n            // Arrange\n            const message: WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'nxTest',\n                    project: 'test-app',\n                    options: {}\n                }\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(mockCommandRunner.runNxTest).toHaveBeenCalledWith('test-app', {});\n            expect(receivedMessages.some(msg => msg.type === 'commandResult')).toBe(true);\n            \n            const resultMessage = receivedMessages.find(msg => msg.type === 'commandResult');\n            expect(resultMessage.data.action).toBe('nxTest');\n            expect(resultMessage.data.result.success).toBe(true);\n        });\n\n        it('should handle runCommand message for gitDiff', async () => {\n            // Arrange\n            const message: WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'gitDiff',\n                    options: {}\n                }\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(mockCommandRunner.runGitDiff).toHaveBeenCalledWith({});\n            expect(receivedMessages.some(msg => msg.type === 'commandResult')).toBe(true);\n        });\n\n        it('should handle runCommand message for aiDebug', async () => {\n            // Arrange\n            const message: WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'aiDebug',\n                    project: 'test-app',\n                    options: {}\n                }\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(mockCommandRunner.runAiDebug).toHaveBeenCalledWith('test-app', {});\n            expect(receivedMessages.some(msg => msg.type === 'commandResult')).toBe(true);\n        });\n\n        it('should handle getProjects message', async () => {\n            // Arrange\n            const message: WebviewMessage = {\n                command: 'getProjects',\n                data: {}\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(mockProjectDetector.getProjects).toHaveBeenCalled();\n            expect(receivedMessages.some(msg => msg.type === 'projects')).toBe(true);\n            \n            const projectsMessage = receivedMessages.find(msg => msg.type === 'projects');\n            expect(projectsMessage.data.projects).toHaveLength(1);\n            expect(projectsMessage.data.projects[0].name).toBe('test-app');\n        });\n\n        it('should handle openFile message', async () => {\n            // Arrange\n            const message: WebviewMessage = {\n                command: 'openFile',\n                data: {\n                    filePath: '/test/file.ts'\n                }\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(mockFileManager.openFile).toHaveBeenCalledWith('/test/file.ts');\n        });\n\n        it('should handle clearOutput message', async () => {\n            // Arrange\n            const message: WebviewMessage = {\n                command: 'clearOutput',\n                data: {}\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(receivedMessages.some(msg => msg.type === 'outputCleared')).toBe(true);\n        });\n\n        it('should handle unknown message command', async () => {\n            // Arrange\n            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n            const message: WebviewMessage = {\n                command: 'unknownCommand' as any,\n                data: {}\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(consoleSpy).toHaveBeenCalledWith('Unknown message command:', 'unknownCommand');\n            \n            consoleSpy.mockRestore();\n        });\n\n        it('should handle command errors gracefully', async () => {\n            // Arrange\n            mockCommandRunner.runNxTest.mockRejectedValue(new Error('Command failed'));\n            \n            const message: WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'nxTest',\n                    project: 'test-app'\n                }\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(receivedMessages.some(msg => msg.type === 'commandError')).toBe(true);\n            \n            const errorMessage = receivedMessages.find(msg => msg.type === 'commandError');\n            expect(errorMessage.data.action).toBe('nxTest');\n            expect(errorMessage.data.error).toBe('Command failed');\n        });\n\n        it('should handle project detection errors', async () => {\n            // Arrange\n            mockProjectDetector.getProjects.mockRejectedValue(new Error('Project detection failed'));\n            \n            const message: WebviewMessage = {\n                command: 'getProjects',\n                data: {}\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(receivedMessages.some(msg => msg.type === 'error')).toBe(true);\n            \n            const errorMessage = receivedMessages.find(msg => msg.type === 'error');\n            expect(errorMessage.data.error).toBe('Project detection failed');\n        });\n\n        it('should handle file operation errors', async () => {\n            // Arrange\n            mockFileManager.openFile.mockRejectedValue(new Error('File not found'));\n            \n            const message: WebviewMessage = {\n                command: 'openFile',\n                data: {\n                    filePath: '/non/existent/file.ts'\n                }\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(receivedMessages.some(msg => msg.type === 'error')).toBe(true);\n            \n            const errorMessage = receivedMessages.find(msg => msg.type === 'error');\n            expect(errorMessage.data.error).toBe('File not found');\n        });\n\n        it('should handle invalid action in runCommand', async () => {\n            // Arrange\n            vscode.window.showErrorMessage = jest.fn();\n            \n            const message: WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'invalidAction' as any,\n                    project: 'test-app'\n                }\n            };\n\n            const messageHandler = mockWebview.onDidReceiveMessage.mock.calls[0][0];\n\n            // Act\n            await messageHandler(message);\n\n            // Assert\n            expect(receivedMessages.some(msg => msg.type === 'commandError')).toBe(true);\n            \n            const errorMessage = receivedMessages.find(msg => msg.type === 'commandError');\n            expect(errorMessage.data.error).toContain('Unknown action: invalidAction');\n        });\n    });\n\n    describe('webview setup', () => {\n        it('should set up webview correctly', () => {\n            // Act\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n\n            // Assert\n            expect(mockWebviewView.webview.options.enableScripts).toBe(true);\n            expect(mockWebviewView.webview.options.localResourceRoots).toHaveLength(1);\n            expect(mockWebviewView.webview.options.localResourceRoots?.[0]?.toString()).toBe('mock://uri');\n            expect(mockWebviewView.webview.html).toContain('<!DOCTYPE html>');\n            expect(mockWebviewView.webview.onDidReceiveMessage).toHaveBeenCalled();\n            expect(mockFileManager.watchFiles).toHaveBeenCalled();\n        });\n\n        it('should set up file watcher', () => {\n            // Arrange\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n\n            // Get the file watcher callback\n            const watchFilesCallback = mockFileManager.watchFiles.mock.calls[0][0];\n\n            // Act\n            watchFilesCallback('/test/file.ts', 'modified');\n\n            // Assert\n            expect(receivedMessages.some(msg => msg.type === 'fileChanged')).toBe(true);\n            \n            const fileChangedMessage = receivedMessages.find(msg => msg.type === 'fileChanged');\n            expect(fileChangedMessage.data.filePath).toBe('/test/file.ts');\n            expect(fileChangedMessage.data.eventType).toBe('modified');\n        });\n\n        it('should generate correct HTML for webview', () => {\n            // Act\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n\n            // Assert\n            const html = mockWebviewView.webview.html;\n            expect(html).toContain('<!DOCTYPE html>');\n            expect(html).toContain('<title>AI Debug Utilities</title>');\n            expect(html).toContain('<div id=\"root\"></div>');\n            expect(html).toContain('mock://webview-uri');\n        });\n    });\n\n    describe('public methods', () => {\n        beforeEach(() => {\n            provider.resolveWebviewView(mockWebviewView, {} as any, {} as any);\n        });\n\n        it('should show webview when show() is called', () => {\n            // Act\n            provider.show();\n\n            // Assert\n            expect(mockWebviewView.show).toHaveBeenCalled();\n        });\n\n        it('should run command when runCommand() is called', async () => {\n            // Act\n            await provider.runCommand('nxTest', { project: 'test-app' });\n\n            // Assert\n            expect(mockCommandRunner.runNxTest).toHaveBeenCalledWith('test-app', undefined);\n        });\n\n        it('should dispose cleanly', () => {\n            // Act\n            provider.dispose();\n\n            // Assert - should not throw\n            expect(() => provider.dispose()).not.toThrow();\n        });\n    });\n});\n"],"version":3}