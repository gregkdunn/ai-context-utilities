{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/nxTest.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/nxTest.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { spawn } from 'child_process';\nimport { CommandOptions, CommandResult } from '../types';\nimport { FileManager } from '../utils/fileManager';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\n\nexport class NxTestCommand {\n    private fileManager: FileManager;\n    private outputChannel: vscode.OutputChannel;\n\n    constructor() {\n        this.outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');\n        this.fileManager = new FileManager(this.outputChannel);\n    }\n\n    /**\n     * Run NX Test command with AI-optimized output\n     */\n    async run(project: string, options: CommandOptions = {}): Promise<CommandResult> {\n        const startTime = Date.now();\n        \n        try {\n            const finalOutputFile = this.fileManager.getOutputFilePath('jest-output.txt');\n            const expectedOutputFile = this.fileManager.getOutputFilePath('jest-output-expected.txt');\n            \n            // Create temporary files\n            const tempRawOutput = path.join(os.tmpdir(), `jest-raw-${Date.now()}.txt`);\n            const tempCleanOutput = path.join(os.tmpdir(), `jest-clean-${Date.now()}.txt`);\n            const tempOptimizedOutput = path.join(os.tmpdir(), `jest-optimized-${Date.now()}.txt`);\n            \n            // Ensure output directory exists\n            await this.fileManager.ensureDirectoryExists(path.dirname(finalOutputFile));\n            \n            // Delete existing output file\n            try {\n                await fs.promises.unlink(finalOutputFile);\n            } catch {\n                // File doesn't exist, that's fine\n            }\n            \n            // If --use-expected flag was set, use expected output directly\n            if (options.useExpected) {\n                try {\n                    await fs.promises.copyFile(expectedOutputFile, finalOutputFile);\n                    this.showInfo(\"Using expected output file directly (--use-expected flag set)\");\n                    \n                    const content = await fs.promises.readFile(finalOutputFile, 'utf8');\n                    this.showFormattedReport(content, finalOutputFile);\n                    \n                    const duration = Date.now() - startTime;\n                    return {\n                        success: true,\n                        exitCode: 0,\n                        output: content,\n                        outputFiles: [finalOutputFile],\n                        duration\n                    };\n                } catch (error) {\n                    throw new Error(`Expected output file not found: ${expectedOutputFile}`);\n                }\n            }\n\n            // Execute the test command\n            const testArgs = project ? [project] : [];\n            this.showInfo(`Running: yarn nx test ${testArgs.join(' ')}`);\n            this.showInfo(`Output mode: ${options.fullOutput ? \"Full output\" : \"AI-optimized\"}`);\n            \n            const testResult = await this.executeTest(testArgs, tempRawOutput);\n            \n            // Validate raw output\n            if (fs.existsSync(tempRawOutput) && fs.statSync(tempRawOutput).size > 0) {\n                const lines = fs.readFileSync(tempRawOutput, 'utf8').split('\\n').length;\n                this.showInfo(`Raw test output captured successfully (${lines} lines)`);\n            } else {\n                this.showWarning(\"No raw test output was captured\");\n                this.showError(\"Test execution may have failed\");\n                \n                const duration = Date.now() - startTime;\n                return {\n                    success: false,\n                    exitCode: testResult.exitCode,\n                    output: testResult.output,\n                    error: \"No test output captured\",\n                    duration\n                };\n            }\n\n            // Clean ANSI codes\n            this.showInfo(\"Processing output for AI analysis...\");\n            const cleaningSuccess = await this.cleanAnsiCodes(tempRawOutput, tempCleanOutput);\n            \n            if (cleaningSuccess) {\n                this.showSuccess(\"ANSI cleaning successful\");\n            } else {\n                this.showWarning(\"ANSI cleaning failed, using raw output\");\n                await fs.promises.copyFile(tempRawOutput, tempCleanOutput);\n            }\n\n            // Generate final output\n            if (options.fullOutput) {\n                this.showInfo(\"📄 Using full output (--full-output specified)\");\n                await fs.promises.copyFile(tempCleanOutput, finalOutputFile);\n            } else {\n                this.showInfo(\"🤖 Optimizing output for AI analysis...\");\n                await this.createAiOptimizedOutput(tempCleanOutput, tempOptimizedOutput, testArgs.join(' '), testResult.exitCode);\n                await fs.promises.copyFile(tempOptimizedOutput, finalOutputFile);\n            }\n\n            // Show final report\n            const finalContent = await fs.promises.readFile(finalOutputFile, 'utf8');\n            this.showFormattedReport(finalContent, finalOutputFile);\n            \n            // Show statistics\n            const stats = fs.statSync(finalOutputFile);\n            const lines = finalContent.split('\\n').length;\n            const sizeKB = Math.round(stats.size / 1024);\n            this.showInfo(`Optimized output: ${sizeKB}KB, Lines: ${lines} (${options.fullOutput ? \"full\" : \"optimized\"})`);\n\n            // Clean up temporary files\n            await this.cleanupTempFiles([tempRawOutput, tempCleanOutput, tempOptimizedOutput]);\n            \n            const duration = Date.now() - startTime;\n            return {\n                success: testResult.success,\n                exitCode: testResult.exitCode,\n                output: finalContent,\n                outputFiles: [finalOutputFile],\n                duration\n            };\n\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            return {\n                success: false,\n                exitCode: 1,\n                output: \"\",\n                error: error instanceof Error ? error.message : 'Unknown error',\n                duration\n            };\n        }\n    }\n\n    private async executeTest(args: string[], outputFile: string): Promise<CommandResult> {\n        return new Promise((resolve) => {\n            const fullArgs = ['nx', 'test', ...args, '--verbose'];\n            const process = spawn('yarn', fullArgs, {\n                cwd: this.getWorkspaceRoot(),\n                shell: true\n            });\n\n            let output = '';\n            let errorOutput = '';\n            const writeStream = fs.createWriteStream(outputFile);\n\n            process.stdout?.on('data', (data) => {\n                const text = data.toString();\n                output += text;\n                writeStream.write(text);\n            });\n\n            process.stderr?.on('data', (data) => {\n                const text = data.toString();\n                errorOutput += text;\n                writeStream.write(text);\n            });\n\n            process.on('close', (code) => {\n                writeStream.end();\n                resolve({\n                    success: code === 0,\n                    exitCode: code || 0,\n                    output,\n                    error: errorOutput || undefined,\n                    duration: 0\n                });\n            });\n\n            process.on('error', (error) => {\n                writeStream.end();\n                resolve({\n                    success: false,\n                    exitCode: 1,\n                    output,\n                    error: error.message,\n                    duration: 0\n                });\n            });\n        });\n    }\n\n    private async cleanAnsiCodes(inputFile: string, outputFile: string): Promise<boolean> {\n        try {\n            const content = await fs.promises.readFile(inputFile, 'utf8');\n            \n            // Remove carriage returns and ANSI escape sequences\n            const cleaned = content\n                .replace(/\\r/g, '')\n                .replace(/\\x1b\\[[0-9;]*[mGKHJA-Z]/g, '');\n            \n            await fs.promises.writeFile(outputFile, cleaned);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    private async createAiOptimizedOutput(inputFile: string, outputFile: string, testArgs: string, exitCode: number): Promise<void> {\n        const content = await fs.promises.readFile(inputFile, 'utf8');\n        const lines = content.split('\\n');\n        \n        // Extract key information\n        const testCommand = `yarn nx test ${testArgs}`;\n        const totalSuites = this.extractPattern(lines, /Test Suites:.*total/) || \"\";\n        const totalTests = this.extractPattern(lines, /Tests:.*total/) || \"\";\n        const testTime = this.extractPattern(lines, /Time:.*s/) || \"\";\n        const failedSuites = this.countMatches(lines, /FAIL.*\\.spec\\.ts/);\n        const passedSuites = this.countMatches(lines, /PASS.*\\.spec\\.ts/);\n        \n        let output = `=================================================================\n🤖 TEST ANALYSIS REPORT\n=================================================================\n\nCOMMAND: ${testCommand}\nEXIT CODE: ${exitCode}\nSTATUS: ${exitCode === 0 ? \"✅ PASSED\" : \"❌ FAILED\"}\n\n=================================================================\n📊 EXECUTIVE SUMMARY\n=================================================================\n${totalSuites}\n${totalTests}\n${testTime}\nTest Suites: ${passedSuites} passed, ${failedSuites} failed\n\n`;\n\n        // Add failure analysis if tests failed\n        if (exitCode !== 0) {\n            output += `==================================================================\n💥 FAILURE ANALYSIS\n==================================================================\n\n`;\n\n            // Extract compilation errors\n            if (lines.some(line => line.includes(\"Test suite failed to run\"))) {\n                output += `🔥 COMPILATION/RUNTIME ERRORS:\n--------------------------------\n\n`;\n                \n                let inFailedSuite = false;\n                for (const line of lines) {\n                    if (line.includes(\"Test suite failed to run\")) {\n                        inFailedSuite = true;\n                        continue;\n                    }\n                    if (inFailedSuite && line.trim() === \"\") {\n                        inFailedSuite = false;\n                        continue;\n                    }\n                    if (inFailedSuite && (line.includes(\"error TS\") || line.includes(\"Property\") || line.includes(\"Cannot find\") || line.includes(\"Type\") && line.includes(\"is not assignable\"))) {\n                        output += `  • ${line.trim()}\\n`;\n                    }\n                }\n            }\n\n            // Extract test failures\n            if (lines.some(line => line.includes(\"✕\") || line.includes(\"●\") || line.includes(\"expect\"))) {\n                output += `\n🧪 TEST FAILURES:\n-----------------\n\n`;\n                \n                let currentTest = \"\";\n                for (let i = 0; i < lines.length; i++) {\n                    const line = lines[i];\n                    if (line.match(/● .*›.*/)) {\n                        currentTest = line.trim();\n                        const nextLine = lines[i + 1];\n                        if (nextLine) {\n                            output += `  • ${currentTest}\\n`;\n                            output += `    ${nextLine.trim()}\\n\\n`;\n                        }\n                    }\n                }\n\n                // Extract expect() failures\n                const expectFailures = lines.filter(line => \n                    line.includes(\"expect\") && (line.includes(\"toEqual\") || line.includes(\"Expected\") || line.includes(\"Received\"))\n                );\n                \n                expectFailures.forEach(failure => {\n                    output += `    ${failure.trim()}\\n`;\n                });\n            }\n        }\n\n        // Add test results summary\n        output += `==================================================================\n🧪 TEST RESULTS SUMMARY\n==================================================================\n\n`;\n\n        // Extract test suite results\n        for (const line of lines) {\n            if (line.match(/PASS.*\\.spec\\.ts/)) {\n                const suite = line.replace(/.*PASS +[^ ]+ +/, \"\").replace(/\\([0-9.]+ s\\)/, \"\").trim();\n                output += `✅ ${suite}\\n`;\n            } else if (line.match(/FAIL.*\\.spec\\.ts/)) {\n                const suite = line.replace(/.*FAIL +[^ ]+ +/, \"\").replace(/\\([0-9.]+ s\\)/, \"\").trim();\n                output += `❌ ${suite}\\n`;\n            }\n        }\n\n        // Add performance insights\n        if (testTime) {\n            output += `\n==================================================================\n⚡ PERFORMANCE INSIGHTS\n==================================================================\n${testTime}\n\n`;\n\n            // Extract slow tests (>1s)\n            const slowTests = lines.filter(line => {\n                const match = line.match(/✓.*\\(([0-9]+) ms\\)/);\n                return match && parseInt(match[1]) > 1000;\n            });\n\n            slowTests.forEach(test => {\n                const cleaned = test.replace(/^[[:space:]]*✓[[:space:]]*/, \"\").trim();\n                output += `🐌 SLOW: ${cleaned}\\n`;\n            });\n        }\n\n        // Add final AI context\n        output += `\n==================================================================\n🎯 AI ANALYSIS CONTEXT\n==================================================================\nThis report focuses on:\n• Test failures and their root causes\n• Compilation/TypeScript errors\n• Performance issues (slow tests)\n• Overall test health metrics\n\nKey areas for analysis:\n`;\n\n        if (exitCode !== 0) {\n            output += `• 🔍 Focus on failure analysis section above\n• 🔗 Correlate failures with recent code changes\n• 🛠️  Identify patterns in TypeScript errors\n`;\n        } else {\n            output += `• ✅ All tests passing - check for performance optimizations\n• 📈 Monitor test execution time trends\n`;\n        }\n\n        output += `\nOriginal output reduced from ${lines.length} lines to ${output.split('\\n').length} lines for AI efficiency.\n`;\n\n        await fs.promises.writeFile(outputFile, output);\n    }\n\n    private extractPattern(lines: string[], pattern: RegExp): string {\n        const match = lines.find(line => pattern.test(line));\n        return match ? match.match(pattern)?.[0] || \"\" : \"\";\n    }\n\n    private countMatches(lines: string[], pattern: RegExp): number {\n        return lines.filter(line => pattern.test(line)).length;\n    }\n\n    private showFormattedReport(content: string, filePath: string): void {\n        this.showInfo(`\\n${\"=\".repeat(60)}`);\n        this.showInfo(\"✅ TEST REPORT\");\n        this.showInfo(`${\"=\".repeat(60)}`);\n        this.showInfo(content);\n        this.showInfo(`${\"=\".repeat(60)}`);\n        this.showInfo(`Report saved to: ${filePath}`);\n    }\n\n    private async cleanupTempFiles(files: string[]): Promise<void> {\n        for (const file of files) {\n            try {\n                await fs.promises.unlink(file);\n            } catch {\n                // File doesn't exist or can't be deleted, ignore\n            }\n        }\n    }\n\n    private getWorkspaceRoot(): string {\n        return vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\n    }\n\n    private showInfo(message: string): void {\n        this.outputChannel.appendLine(message);\n        this.outputChannel.show();\n    }\n\n    private showSuccess(message: string): void {\n        this.showInfo(`✅ ${message}`);\n    }\n\n    private showWarning(message: string): void {\n        this.showInfo(`⚠️  ${message}`);\n    }\n\n    private showError(message: string): void {\n        this.showInfo(`❌ ${message}`);\n    }\n}"],"version":3}