{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/analyticsEngine.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/analytics/analyticsEngine.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { \n  AnalyticsEvent, \n  Metrics, \n  Dashboard, \n  ReportFormat, \n  TimeRange, \n  DashboardConfig,\n  AnalyticsEngineConfig,\n  MetricsSnapshot,\n  PredictionResult,\n  PerformanceMetrics,\n  ErrorMetrics,\n  UsageMetrics,\n  ExecutionMetrics,\n  TrendAnalysis,\n  AnalyticsExportData\n} from '../../types';\n\n/**\n * Advanced Analytics Engine for Phase 4.4\n * \n * Provides comprehensive analytics capabilities including:\n * - Advanced metrics collection and processing\n * - Interactive dashboard generation\n * - Predictive analytics and insights\n * - Custom report generation with export\n * - Real-time performance monitoring\n */\nexport class AnalyticsEngine extends EventEmitter {\n  private metricsHistory: MetricsSnapshot[] = [];\n  private eventBuffer: AnalyticsEvent[] = [];\n  private dashboards: Map<string, Dashboard> = new Map();\n  private config: AnalyticsEngineConfig;\n  private isCollecting = false;\n  private bufferFlushInterval?: NodeJS.Timeout;\n  private performanceMonitor?: NodeJS.Timeout;\n\n  constructor(config: AnalyticsEngineConfig = {}) {\n    super();\n    this.config = {\n      bufferSize: 1000,\n      flushInterval: 5000, // 5 seconds\n      retentionDays: 30,\n      enablePredictiveAnalytics: true,\n      enableRealTimeMonitoring: true,\n      ...config\n    };\n    \n    this.initializeEngine();\n  }\n\n  /**\n   * Initialize the analytics engine\n   */\n  private initializeEngine(): void {\n    this.startEventBuffering();\n    if (this.config.enableRealTimeMonitoring) {\n      this.startPerformanceMonitoring();\n    }\n    this.emit('engineInitialized');\n  }\n\n  /**\n   * Start collecting analytics events\n   */\n  public startCollection(): void {\n    if (this.isCollecting) {\n      return;\n    }\n    \n    this.isCollecting = true;\n    this.emit('collectionStarted');\n  }\n\n  /**\n   * Stop collecting analytics events\n   */\n  public stopCollection(): void {\n    if (!this.isCollecting) {\n      return;\n    }\n    \n    this.isCollecting = false;\n    this.flushEventBuffer();\n    this.emit('collectionStopped');\n  }\n\n  /**\n   * Track an analytics event\n   */\n  public async trackEvent(event: AnalyticsEvent): Promise<void> {\n    if (!this.isCollecting) {\n      return;\n    }\n\n    // Validate event structure\n    if (!this.validateEvent(event)) {\n      throw new Error('Invalid event structure');\n    }\n\n    // Add to buffer\n    this.eventBuffer.push({\n      ...event,\n      timestamp: event.timestamp || new Date(),\n      id: event.id || this.generateEventId()\n    });\n\n    // Check if buffer needs flushing\n    if (this.eventBuffer.length >= (this.config.bufferSize || 1000)) {\n      this.flushEventBuffer();\n    }\n\n    this.emit('eventTracked', event);\n  }\n\n  /**\n   * Generate comprehensive metrics for a time range\n   */\n  public async generateMetrics(timeRange: TimeRange): Promise<Metrics> {\n    const events = this.getEventsInRange(timeRange);\n    \n    const metrics: Metrics = {\n      timeRange,\n      commandExecutions: this.analyzeCommandExecutions(events),\n      performance: this.analyzePerformance(events),\n      errors: this.analyzeErrors(events),\n      usage: this.analyzeUsage(events),\n      trends: this.analyzeTrends(events),\n      predictions: this.config.enablePredictiveAnalytics ? \n        await this.generatePredictions(events) : undefined\n    };\n\n    // Store metrics snapshot\n    this.metricsHistory.push({\n      id: this.generateSnapshotId(),\n      metrics: metrics as any,\n      timestamp: new Date(),\n      systemMetrics: {\n        timestamp: new Date(),\n        cpu: {\n          usage: 0,\n          cores: 1,\n          loadAverage: [0, 0, 0]\n        },\n        memory: {\n          total: 0,\n          used: 0,\n          free: 0,\n          percentage: 0\n        },\n        disk: {\n          total: 0,\n          used: 0,\n          free: 0,\n          percentage: 0\n        },\n        network: {\n          rx: 0,\n          tx: 0,\n          rxPackets: 0,\n          txPackets: 0\n        },\n        processes: 0,\n        uptime: 0\n      },\n      collectionStats: {},\n      bufferStats: {}\n    });\n\n    // Cleanup old metrics\n    this.cleanupOldMetrics();\n\n    this.emit('metricsGenerated', metrics);\n    return metrics;\n  }\n\n  /**\n   * Create an interactive dashboard\n   */\n  public async createDashboard(config: DashboardConfig): Promise<Dashboard> {\n    const dashboard: Dashboard = {\n      id: config.id || this.generateDashboardId(),\n      name: config.name,\n      description: config.description,\n      layout: config.layout || { type: 'grid', columns: 12, rows: 'auto', gap: '1rem', padding: '1rem' },\n      widgets: await this.createDashboardWidgets(config),\n      filters: config.filters || [],\n      refreshInterval: config.refreshInterval || 30000,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      isRealTime: config.isRealTime || false\n    };\n\n    this.dashboards.set(dashboard.id, dashboard);\n    \n    if (dashboard.isRealTime) {\n      this.startDashboardUpdates(dashboard.id);\n    }\n\n    this.emit('dashboardCreated', dashboard);\n    return dashboard;\n  }\n\n  /**\n   * Export analytics data in specified format\n   */\n  public async exportReport(\n    format: ReportFormat, \n    timeRange: TimeRange,\n    config?: any\n  ): Promise<Buffer> {\n    const metrics = await this.generateMetrics(timeRange);\n    const exportData: AnalyticsExportData = {\n      metrics,\n      events: this.getEventsInRange(timeRange),\n      dashboards: Array.from(this.dashboards.values()),\n      exportedAt: new Date(),\n      timeRange,\n      format\n    };\n\n    switch (format) {\n      case 'json':\n        return this.exportAsJson(exportData);\n      case 'csv':\n        return this.exportAsCsv(exportData);\n      case 'pdf':\n        return this.exportAsPdf(exportData, config);\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n  }\n\n  /**\n   * Generate predictive analytics insights\n   */\n  public async generatePredictions(events?: AnalyticsEvent[]): Promise<PredictionResult[]> {\n    if (!this.config.enablePredictiveAnalytics) {\n      return [];\n    }\n\n    const analysisEvents = events || this.eventBuffer;\n    const predictions: PredictionResult[] = [];\n\n    // Command failure prediction\n    const failurePrediction = this.predictCommandFailures(analysisEvents);\n    if (failurePrediction) {\n      predictions.push(failurePrediction);\n    }\n\n    // Performance degradation prediction\n    const performancePrediction = this.predictPerformanceDegradation(analysisEvents);\n    if (performancePrediction) {\n      predictions.push(performancePrediction);\n    }\n\n    // Resource utilization prediction\n    const resourcePrediction = this.predictResourceUtilization(analysisEvents);\n    if (resourcePrediction) {\n      predictions.push(resourcePrediction);\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Get real-time performance metrics\n   */\n  public getRealtimeMetrics(): PerformanceMetrics {\n    const recentEvents = this.eventBuffer.slice(-100); // Last 100 events\n    return this.analyzePerformance(recentEvents);\n  }\n\n  /**\n   * Update dashboard configuration\n   */\n  public async updateDashboard(id: string, config: Partial<DashboardConfig>): Promise<Dashboard> {\n    const dashboard = this.dashboards.get(id);\n    if (!dashboard) {\n      throw new Error(`Dashboard not found: ${id}`);\n    }\n\n    const updatedDashboard = {\n      ...dashboard,\n      ...config,\n      updatedAt: new Date()\n    };\n\n    this.dashboards.set(id, updatedDashboard as Dashboard);\n    this.emit('dashboardUpdated', updatedDashboard);\n    return updatedDashboard as Dashboard;\n  }\n\n  /**\n   * Get dashboard by ID\n   */\n  public getDashboard(id: string): Dashboard | undefined {\n    return this.dashboards.get(id);\n  }\n\n  /**\n   * List all dashboards\n   */\n  public listDashboards(): Dashboard[] {\n    return Array.from(this.dashboards.values());\n  }\n\n  /**\n   * Delete a dashboard\n   */\n  public deleteDashboard(id: string): boolean {\n    const deleted = this.dashboards.delete(id);\n    if (deleted) {\n      this.emit('dashboardDeleted', id);\n    }\n    return deleted;\n  }\n\n  /**\n   * Get historical metrics\n   */\n  public getMetricsHistory(limit?: number): MetricsSnapshot[] {\n    return limit ? this.metricsHistory.slice(-limit) : this.metricsHistory;\n  }\n\n  /**\n   * Clear all analytics data\n   */\n  public clearData(): void {\n    this.eventBuffer = [];\n    this.metricsHistory = [];\n    this.dashboards.clear();\n    this.emit('dataCleared');\n  }\n\n  /**\n   * Dispose of the analytics engine\n   */\n  public dispose(): void {\n    this.stopCollection();\n    if (this.bufferFlushInterval) {\n      clearInterval(this.bufferFlushInterval);\n    }\n    if (this.performanceMonitor) {\n      clearInterval(this.performanceMonitor);\n    }\n    this.removeAllListeners();\n  }\n\n  // Private helper methods\n\n  private validateEvent(event: AnalyticsEvent): boolean {\n    return !!(event.type && event.timestamp && event.userId);\n  }\n\n  private generateEventId(): string {\n    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateSnapshotId(): string {\n    return `snapshot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateDashboardId(): string {\n    return `dashboard_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateWidgetId(): string {\n    return `widget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private startEventBuffering(): void {\n    this.bufferFlushInterval = setInterval(() => {\n      if (this.eventBuffer.length > 0) {\n        this.flushEventBuffer();\n      }\n    }, this.config.flushInterval);\n  }\n\n  private flushEventBuffer(): void {\n    if (this.eventBuffer.length === 0) {return;}\n\n    const eventsToFlush = [...this.eventBuffer];\n    this.eventBuffer = [];\n    this.emit('bufferFlushed', eventsToFlush);\n  }\n\n  private startPerformanceMonitoring(): void {\n    this.performanceMonitor = setInterval(() => {\n      const metrics = this.getRealtimeMetrics();\n      this.emit('performanceUpdate', metrics);\n    }, 1000); // Update every second\n  }\n\n  private getEventsInRange(timeRange: TimeRange): AnalyticsEvent[] {\n    return this.eventBuffer.filter(event => \n      event.timestamp >= timeRange.start && \n      event.timestamp <= timeRange.end\n    );\n  }\n\n  private analyzeCommandExecutions(events: AnalyticsEvent[]): ExecutionMetrics {\n    const commandEvents = events.filter(e => e.type === 'command_executed');\n    const successEvents = commandEvents.filter(e => e.metadata.success);\n    const failureEvents = commandEvents.filter(e => !e.metadata.success);\n\n    return {\n      total: commandEvents.length,\n      successful: successEvents.length,\n      failed: failureEvents.length,\n      successRate: commandEvents.length > 0 ? successEvents.length / commandEvents.length : 0,\n      averageExecutionTime: this.calculateAverageExecutionTime(commandEvents),\n      mostUsedCommands: this.getMostUsedCommands(commandEvents),\n      failurePatterns: this.analyzeFailurePatterns(failureEvents)\n    };\n  }\n\n  private analyzePerformance(events: AnalyticsEvent[]): PerformanceMetrics {\n    const performanceEvents = events.filter(e => e.type === 'performance_metric');\n    \n    return {\n      averageResponseTime: this.calculateAverageResponseTime(performanceEvents),\n      throughput: this.calculateThroughput(performanceEvents),\n      errorRate: this.calculateErrorRate(events),\n      memoryUsage: this.calculateMemoryUsage(performanceEvents),\n      cpuUsage: this.calculateCpuUsage(performanceEvents),\n      slowestOperations: this.findSlowestOperations(performanceEvents)\n    };\n  }\n\n  private analyzeErrors(events: AnalyticsEvent[]): ErrorMetrics {\n    const errorEvents = events.filter(e => e.type === 'error');\n    \n    return {\n      total: errorEvents.length,\n      byType: this.groupErrorsByType(errorEvents),\n      byComponent: this.groupErrorsByComponent(errorEvents),\n      topErrors: this.getTopErrors(errorEvents),\n      resolutionRate: this.calculateResolutionRate(errorEvents)\n    };\n  }\n\n  private analyzeUsage(events: AnalyticsEvent[]): UsageMetrics {\n    const userEvents = events.filter(e => e.userId);\n    const uniqueUsers = new Set(userEvents.map(e => e.userId));\n    \n    return {\n      activeUsers: uniqueUsers.size,\n      totalSessions: this.countSessions(userEvents),\n      averageSessionDuration: this.calculateAverageSessionDuration(userEvents),\n      featureUsage: this.analyzeFeatureUsage(userEvents),\n      userJourney: this.analyzeUserJourney(userEvents)\n    };\n  }\n\n  private analyzeTrends(events: AnalyticsEvent[]): TrendAnalysis {\n    return {\n      usage: this.calculateUsageTrend(events),\n      performance: this.calculatePerformanceTrend(events),\n      errors: this.calculateErrorTrend(events),\n      predictions: this.generateTrendPredictions(events)\n    };\n  }\n\n  private predictCommandFailures(events: AnalyticsEvent[]): PredictionResult | null {\n    const commandEvents = events.filter(e => e.type === 'command_executed');\n    const failureRate = this.calculateFailureRate(commandEvents);\n    \n    if (failureRate > 0.3) { // 30% failure rate threshold\n      return {\n        type: 'test-failure',\n        probability: Math.min(failureRate * 2, 1), // Cap at 100%\n        confidence: Math.min(failureRate * 2, 1), // Cap at 100%\n        description: 'High probability of command failures',\n        affectedFiles: [],\n        prevention: [],\n        timeline: '1-2 hours',\n        prediction: 'High probability of command failures',\n        impact: 'high'\n      };\n    }\n    \n    return null;\n  }\n\n  private predictPerformanceDegradation(events: AnalyticsEvent[]): PredictionResult | null {\n    const performanceEvents = events.filter(e => e.type === 'performance_metric');\n    const trend = this.calculatePerformanceTrend(performanceEvents);\n    \n    if (trend.direction === 'declining' && trend.severity > 0.7) {\n      return {\n        type: 'performance-degradation',\n        probability: trend.severity,\n        confidence: trend.severity,\n        description: 'Performance degradation detected',\n        affectedFiles: [],\n        prevention: [],\n        timeline: '30-60 minutes',\n        prediction: 'Performance degradation detected',\n        impact: 'medium'\n      };\n    }\n    \n    return null;\n  }\n\n  private predictResourceUtilization(events: AnalyticsEvent[]): PredictionResult | null {\n    const resourceEvents = events.filter(e => e.type === 'resource_usage');\n    const memoryTrend = this.calculateMemoryTrend(resourceEvents);\n    \n    if (memoryTrend.utilizationRate > 0.8) {\n      return {\n        type: 'security-issue',\n        probability: memoryTrend.utilizationRate,\n        confidence: memoryTrend.utilizationRate,\n        description: 'High resource utilization predicted',\n        affectedFiles: [],\n        prevention: [],\n        timeline: '15-30 minutes',\n        prediction: 'High resource utilization predicted',\n        impact: 'high'\n      };\n    }\n    \n    return null;\n  }\n\n  private async createDashboardWidgets(config: DashboardConfig): Promise<any[]> {\n    // Return the widgets from the config if provided, otherwise return default widgets\n    if (config.widgets && config.widgets.length > 0) {\n      return config.widgets.map(widget => ({\n        id: widget.id || this.generateWidgetId(),\n        type: widget.type,\n        title: widget.title,\n        config: widget.configuration || {}\n      }));\n    }\n    \n    // Default widgets when none specified\n    return [\n      {\n        id: 'performance_chart',\n        type: 'chart',\n        title: 'Performance Metrics',\n        config: { chartType: 'line', metrics: ['responseTime', 'throughput'] }\n      },\n      {\n        id: 'error_summary',\n        type: 'summary',\n        title: 'Error Overview',\n        config: { metrics: ['errorRate', 'totalErrors'] }\n      }\n    ];\n  }\n\n  private startDashboardUpdates(dashboardId: string): void {\n    const dashboard = this.dashboards.get(dashboardId);\n    // Implementation for real-time dashboard updates\n    setInterval(() => {\n      const currentDashboard = this.dashboards.get(dashboardId);\n      if (currentDashboard) {\n        this.emit('dashboardUpdate', currentDashboard);\n      }\n    }, dashboard?.refreshInterval || 30000);\n  }\n\n  private exportAsJson(data: AnalyticsExportData): Buffer {\n    return Buffer.from(JSON.stringify(data, null, 2));\n  }\n\n  private exportAsCsv(data: AnalyticsExportData): Buffer {\n    // Simple CSV export implementation\n    const csv = this.convertToCSV(data);\n    return Buffer.from(csv);\n  }\n\n  private exportAsPdf(data: AnalyticsExportData, config?: any): Buffer {\n    // PDF export would require a PDF library\n    // For now, return a mock buffer\n    return Buffer.from('PDF Report Content');\n  }\n\n  private convertToCSV(data: AnalyticsExportData): string {\n    // Basic CSV conversion\n    const lines = ['Type,Timestamp,User ID,Data'];\n    data.events.forEach(event => {\n      lines.push(`${event.type},${event.timestamp},${event.userId},${JSON.stringify(event.metadata)}`);\n    });\n    return lines.join('\\n');\n  }\n\n  private cleanupOldMetrics(): void {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - (this.config.retentionDays || 30));\n    \n    this.metricsHistory = this.metricsHistory.filter(\n      snapshot => snapshot.timestamp > cutoffDate\n    );\n  }\n\n  // Additional helper methods for calculations\n  private calculateAverageExecutionTime(events: AnalyticsEvent[]): number {\n    const times = events.map(e => e.metadata.executionTime).filter(t => t);\n    return times.length > 0 ? times.reduce((a, b) => a + b, 0) / times.length : 0;\n  }\n\n  private calculateAverageResponseTime(events: AnalyticsEvent[]): number {\n    const times = events.map(e => e.metadata.responseTime).filter(t => t);\n    return times.length > 0 ? times.reduce((a, b) => a + b, 0) / times.length : 0;\n  }\n\n  private calculateThroughput(events: AnalyticsEvent[]): number {\n    return events.length / ((this.config.flushInterval || 5000) / 1000); // Events per second\n  }\n\n  private calculateErrorRate(events: AnalyticsEvent[]): number {\n    const errorEvents = events.filter(e => e.type === 'error');\n    return events.length > 0 ? errorEvents.length / events.length : 0;\n  }\n\n  private calculateMemoryUsage(events: AnalyticsEvent[]): number {\n    const memoryEvents = events.filter(e => e.metadata.memoryUsage);\n    if (memoryEvents.length === 0) {return 0;}\n    \n    const totalMemory = memoryEvents.reduce((sum, e) => sum + e.metadata.memoryUsage, 0);\n    return totalMemory / memoryEvents.length;\n  }\n\n  private calculateCpuUsage(events: AnalyticsEvent[]): number {\n    const cpuEvents = events.filter(e => e.metadata.cpuUsage);\n    if (cpuEvents.length === 0) {return 0;}\n    \n    const totalCpu = cpuEvents.reduce((sum, e) => sum + e.metadata.cpuUsage, 0);\n    return totalCpu / cpuEvents.length;\n  }\n\n  private findSlowestOperations(events: AnalyticsEvent[]): any[] {\n    return events\n      .filter(e => e.metadata.operationTime)\n      .sort((a, b) => b.metadata.operationTime - a.metadata.operationTime)\n      .slice(0, 10);\n  }\n\n  private getMostUsedCommands(events: AnalyticsEvent[]): any[] {\n    const commandCounts = new Map<string, number>();\n    events.forEach(e => {\n      const command = e.metadata.command;\n      if (command) {\n        commandCounts.set(command, (commandCounts.get(command) || 0) + 1);\n      }\n    });\n    \n    return Array.from(commandCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([command, count]) => ({ command, count }));\n  }\n\n  private analyzeFailurePatterns(events: AnalyticsEvent[]): any[] {\n    const patterns = new Map<string, number>();\n    events.forEach(e => {\n      const pattern = e.metadata.errorPattern || 'unknown';\n      patterns.set(pattern, (patterns.get(pattern) || 0) + 1);\n    });\n    \n    return Array.from(patterns.entries())\n      .sort((a, b) => b[1] - a[1])\n      .map(([pattern, count]) => ({ pattern, count }));\n  }\n\n  private groupErrorsByType(events: AnalyticsEvent[]): Map<string, number> {\n    const types = new Map<string, number>();\n    events.forEach(e => {\n      const type = e.metadata.errorType || 'unknown';\n      types.set(type, (types.get(type) || 0) + 1);\n    });\n    return types;\n  }\n\n  private groupErrorsByComponent(events: AnalyticsEvent[]): Map<string, number> {\n    const components = new Map<string, number>();\n    events.forEach(e => {\n      const component = e.metadata.component || 'unknown';\n      components.set(component, (components.get(component) || 0) + 1);\n    });\n    return components;\n  }\n\n  private getTopErrors(events: AnalyticsEvent[]): any[] {\n    const errorCounts = new Map<string, number>();\n    events.forEach(e => {\n      const error = e.metadata.errorMessage || 'unknown';\n      errorCounts.set(error, (errorCounts.get(error) || 0) + 1);\n    });\n    \n    return Array.from(errorCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([error, count]) => ({ error, count }));\n  }\n\n  private calculateResolutionRate(events: AnalyticsEvent[]): number {\n    const resolvedEvents = events.filter(e => e.metadata.resolved);\n    return events.length > 0 ? resolvedEvents.length / events.length : 0;\n  }\n\n  private countSessions(events: AnalyticsEvent[]): number {\n    const sessions = new Set(events.map(e => e.sessionId).filter(s => s));\n    return sessions.size;\n  }\n\n  private calculateAverageSessionDuration(events: AnalyticsEvent[]): number {\n    const sessions = new Map<string, { start: Date, end: Date }>();\n    \n    events.forEach(e => {\n      if (e.sessionId) {\n        if (!sessions.has(e.sessionId)) {\n          sessions.set(e.sessionId, { start: e.timestamp, end: e.timestamp });\n        } else {\n          const session = sessions.get(e.sessionId)!;\n          if (e.timestamp < session.start) {session.start = e.timestamp;}\n          if (e.timestamp > session.end) {session.end = e.timestamp;}\n        }\n      }\n    });\n    \n    const durations = Array.from(sessions.values())\n      .map(s => s.end.getTime() - s.start.getTime());\n    \n    return durations.length > 0 ? durations.reduce((a, b) => a + b, 0) / durations.length : 0;\n  }\n\n  private analyzeFeatureUsage(events: AnalyticsEvent[]): Map<string, number> {\n    const features = new Map<string, number>();\n    events.forEach(e => {\n      const feature = e.metadata.feature;\n      if (feature) {\n        features.set(feature, (features.get(feature) || 0) + 1);\n      }\n    });\n    return features;\n  }\n\n  private analyzeUserJourney(events: AnalyticsEvent[]): any[] {\n    // Simplified user journey analysis\n    const journeys = new Map<string, string[]>();\n    events.forEach(e => {\n      if (e.userId && e.metadata.action) {\n        if (!journeys.has(e.userId)) {\n          journeys.set(e.userId, []);\n        }\n        journeys.get(e.userId)!.push(e.metadata.action);\n      }\n    });\n    \n    return Array.from(journeys.entries()).map(([userId, actions]) => ({ userId, actions }));\n  }\n\n  private calculateUsageTrend(events: AnalyticsEvent[]): any {\n    // Simplified trend calculation\n    const hourlyUsage = new Map<number, number>();\n    events.forEach(e => {\n      const hour = e.timestamp.getHours();\n      hourlyUsage.set(hour, (hourlyUsage.get(hour) || 0) + 1);\n    });\n    \n    return {\n      direction: 'stable',\n      data: Array.from(hourlyUsage.entries())\n    };\n  }\n\n  private calculatePerformanceTrend(events: AnalyticsEvent[]): any {\n    const performanceEvents = events.filter(e => e.type === 'performance_metric');\n    if (performanceEvents.length === 0) {\n      return { direction: 'stable', severity: 0 };\n    }\n    \n    const avgResponseTime = this.calculateAverageResponseTime(performanceEvents);\n    const severity = Math.min(avgResponseTime / 1000, 1); // Normalize to 0-1\n    \n    return {\n      direction: severity > 0.7 ? 'declining' : 'stable',\n      severity\n    };\n  }\n\n  private calculateErrorTrend(events: AnalyticsEvent[]): any {\n    const errorEvents = events.filter(e => e.type === 'error');\n    const errorRate = this.calculateErrorRate(events);\n    \n    return {\n      direction: errorRate > 0.1 ? 'increasing' : 'stable',\n      rate: errorRate\n    };\n  }\n\n  private generateTrendPredictions(events: AnalyticsEvent[]): any[] {\n    return [\n      {\n        metric: 'usage',\n        prediction: 'stable',\n        confidence: 0.8\n      },\n      {\n        metric: 'performance',\n        prediction: 'improving',\n        confidence: 0.6\n      }\n    ];\n  }\n\n  private calculateFailureRate(events: AnalyticsEvent[]): number {\n    const failedEvents = events.filter(e => !e.metadata.success);\n    return events.length > 0 ? failedEvents.length / events.length : 0;\n  }\n\n  private calculateMemoryTrend(events: AnalyticsEvent[]): any {\n    const memoryEvents = events.filter(e => e.metadata.memoryUsage);\n    if (memoryEvents.length === 0) {\n      return { utilizationRate: 0 };\n    }\n    \n    const avgMemory = this.calculateMemoryUsage(memoryEvents);\n    const utilizationRate = Math.min(avgMemory / (1024 * 1024 * 1024), 1); // GB to ratio\n    \n    return { utilizationRate };\n  }\n}\n"],"version":3}