21d173c45883f02069d5d48e5c3c9953
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingCommandRunner = void 0;
const events_1 = require("events");
const child_process_1 = require("child_process");
const vscode = __importStar(require("vscode"));
class StreamingCommandRunner extends events_1.EventEmitter {
    _outputChannel;
    _activeProcess;
    _isRunning = false;
    _startTime;
    _currentOutput = '';
    _timeoutId;
    _forceKillTimeoutId;
    constructor(_outputChannel) {
        super();
        this._outputChannel = _outputChannel;
    }
    // Main execution method
    async executeWithStreaming(command, args, options = {}) {
        if (this._isRunning) {
            throw new Error('Command is already running');
        }
        this._isRunning = true;
        this._startTime = Date.now();
        this._currentOutput = '';
        try {
            return await this._executeCommand(command, args, options);
        }
        finally {
            this._cleanup();
        }
    }
    // Test command execution
    async executeTestCommand(command, args, cwd) {
        return this.executeWithStreaming(command, args, { cwd });
    }
    // Git command execution
    async executeGitCommand(args, cwd) {
        return this.executeWithStreaming('git', args, { cwd });
    }
    // Lint command execution
    async executeLintCommand(command, args, cwd) {
        return this.executeWithStreaming(command, args, { cwd });
    }
    async _executeCommand(command, args, options) {
        return new Promise((resolve, reject) => {
            this._activeProcess = (0, child_process_1.spawn)(command, args, {
                cwd: options.cwd || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath,
                env: { ...process.env, ...options.env },
                stdio: ['pipe', 'pipe', 'pipe']
            });
            let output = '';
            let error = '';
            // FIX: Add error handling for stdout/stderr streams
            this._activeProcess.stdout?.on('data', (data) => {
                const text = data.toString();
                output += text;
                this._currentOutput += text;
                this.emit('output', text);
                this._outputChannel.append(text);
            });
            this._activeProcess.stdout?.on('error', (err) => {
                console.warn('stdout stream error:', err);
                // Don't reject here, let the process handle it
            });
            this._activeProcess.stderr?.on('data', (data) => {
                const text = data.toString();
                error += text;
                this._currentOutput += text;
                this.emit('error', text);
                this._outputChannel.append(text);
            });
            this._activeProcess.stderr?.on('error', (err) => {
                console.warn('stderr stream error:', err);
                // Don't reject here, let the process handle it
            });
            this._activeProcess.on('close', (code) => {
                const duration = Date.now() - (this._startTime || 0);
                // FIX: Clear timeout when process completes
                if (this._timeoutId) {
                    clearTimeout(this._timeoutId);
                    this._timeoutId = undefined;
                }
                const result = {
                    success: code === 0,
                    exitCode: code,
                    output,
                    error,
                    duration
                };
                this.emit('complete', result);
                resolve(result);
            });
            this._activeProcess.on('error', (err) => {
                const duration = Date.now() - (this._startTime || 0);
                // FIX: Clear timeout when process errors
                if (this._timeoutId) {
                    clearTimeout(this._timeoutId);
                    this._timeoutId = undefined;
                }
                const result = {
                    success: false,
                    exitCode: 1,
                    output,
                    error: err.message,
                    duration
                };
                this.emit('error', err.message);
                this.emit('complete', result);
                resolve(result); // Resolve instead of reject to maintain consistency
            });
            // FIX: Handle timeout properly
            if (options.timeout) {
                this._timeoutId = setTimeout(() => {
                    if (this._activeProcess && this._isRunning) {
                        console.log(`Command timed out after ${options.timeout}ms`);
                        this._cancelWithTimeout();
                        reject(new Error(`Command timed out after ${options.timeout}ms`));
                    }
                }, options.timeout);
            }
        });
    }
    cancel() {
        if (this._activeProcess && this._isRunning) {
            this._cancelWithTimeout();
        }
    }
    // FIX: Improved cancel with timeout handling
    _cancelWithTimeout() {
        if (!this._activeProcess) {
            return;
        }
        console.log('Cancelling command with SIGTERM');
        this._activeProcess.kill('SIGTERM');
        // FIX: Clear existing force kill timeout before setting new one
        if (this._forceKillTimeoutId) {
            clearTimeout(this._forceKillTimeoutId);
        }
        // Force kill after 5 seconds
        this._forceKillTimeoutId = setTimeout(() => {
            if (this._activeProcess) {
                console.log('Force killing command with SIGKILL');
                this._activeProcess.kill('SIGKILL');
            }
            this._forceKillTimeoutId = undefined;
        }, 5000);
    }
    // FIX: Comprehensive cleanup method
    _cleanup() {
        this._isRunning = false;
        this._activeProcess = undefined;
        if (this._timeoutId) {
            clearTimeout(this._timeoutId);
            this._timeoutId = undefined;
        }
        if (this._forceKillTimeoutId) {
            clearTimeout(this._forceKillTimeoutId);
            this._forceKillTimeoutId = undefined;
        }
    }
    get isRunning() {
        return this._isRunning;
    }
    getCurrentOutput() {
        return this._currentOutput;
    }
    clearOutput() {
        this._currentOutput = '';
    }
    simulateProgress(duration) {
        const interval = 100; // Update every 100ms
        const steps = duration / interval;
        let currentStep = 0;
        const progressInterval = setInterval(() => {
            // FIX: Stop progress simulation if command is no longer running
            if (!this._isRunning) {
                clearInterval(progressInterval);
                return;
            }
            currentStep++;
            const progress = Math.min(90, Math.floor((currentStep / steps) * 100)); // Cap at 90%
            this.emit('progress', progress);
            if (currentStep >= steps) {
                clearInterval(progressInterval);
            }
        }, interval);
    }
    dispose() {
        this.cancel();
        this._cleanup();
        this.removeAllListeners();
    }
}
exports.StreamingCommandRunner = StreamingCommandRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,