7ece366023d568789f3dfeaf7351c0b0
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectDetector = void 0;
const vscode = __importStar(require("vscode"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
class ProjectDetector {
    _workspacePath;
    _cache = new Map();
    constructor(_workspacePath) {
        this._workspacePath = _workspacePath;
    }
    // Find NX workspace configuration
    async findNxWorkspace() {
        try {
            const nxConfigPath = path.join(this._workspacePath, 'nx.json');
            const angularConfigPath = path.join(this._workspacePath, 'angular.json');
            if (fs.existsSync(nxConfigPath)) {
                return nxConfigPath;
            }
            if (fs.existsSync(angularConfigPath)) {
                return angularConfigPath;
            }
            return null;
        }
        catch (error) {
            console.error('Error finding workspace configuration:', error);
            return null;
        }
    }
    // Get all projects
    async getProjects() {
        return this.detectProjects();
    }
    // Get specific project by name
    async getProject(name) {
        const projects = await this.detectProjects();
        return projects.find(project => project.name === name) || null;
    }
    // Check if project has a specific target
    async hasTarget(projectName, targetName) {
        const project = await this.getProject(projectName);
        return project?.targets?.[targetName] !== undefined;
    }
    // Get workspace root
    getWorkspaceRoot() {
        return this._workspacePath;
    }
    // Legacy method name for compatibility
    async detectCurrentProject() {
        return this.getCurrentProject();
    }
    async detectProjects() {
        const cacheKey = this._workspacePath;
        if (this._cache.has(cacheKey)) {
            return this._cache.get(cacheKey);
        }
        const projects = await this._scanForProjects();
        this._cache.set(cacheKey, projects);
        return projects;
    }
    async _scanForProjects() {
        const projects = [];
        try {
            // Check for NX workspace
            const nxConfigPath = path.join(this._workspacePath, 'nx.json');
            if (fs.existsSync(nxConfigPath)) {
                const nxProjects = await this._detectNxProjects();
                projects.push(...nxProjects);
            }
            // Check for Angular workspace
            const angularConfigPath = path.join(this._workspacePath, 'angular.json');
            if (fs.existsSync(angularConfigPath)) {
                const angularProjects = await this._detectAngularProjects();
                projects.push(...angularProjects);
            }
            // Fallback to npm projects
            if (projects.length === 0) {
                const npmProjects = await this._detectNpmProjects();
                projects.push(...npmProjects);
            }
        }
        catch (error) {
            console.error('Error detecting projects:', error);
        }
        return projects;
    }
    async _detectNxProjects() {
        const projects = [];
        const nxConfigPath = path.join(this._workspacePath, 'nx.json');
        try {
            const nxConfig = JSON.parse(fs.readFileSync(nxConfigPath, 'utf8'));
            // Check for projects in nx.json
            if (nxConfig.projects) {
                for (const [name, projectPath] of Object.entries(nxConfig.projects)) {
                    const fullPath = path.join(this._workspacePath, projectPath);
                    const packageJsonPath = path.join(fullPath, 'package.json');
                    if (fs.existsSync(packageJsonPath)) {
                        projects.push({
                            name,
                            root: fullPath,
                            type: 'nx',
                            packageJsonPath,
                            configPath: nxConfigPath,
                            projectType: 'application' // Default
                        });
                    }
                }
            }
            // Check for project.json files
            const projectJsonPaths = await this._findProjectJsonFiles();
            for (const projectJsonPath of projectJsonPaths) {
                const projectConfig = JSON.parse(fs.readFileSync(projectJsonPath, 'utf8'));
                const projectDir = path.dirname(projectJsonPath);
                const projectName = path.basename(projectDir);
                projects.push({
                    name: projectName,
                    root: projectDir,
                    type: 'nx',
                    packageJsonPath: path.join(projectDir, 'package.json'),
                    configPath: projectJsonPath,
                    projectType: projectConfig.projectType || 'application',
                    targets: projectConfig.targets
                });
            }
        }
        catch (error) {
            console.error('Error detecting NX projects:', error);
        }
        return projects;
    }
    async _detectAngularProjects() {
        const projects = [];
        const angularConfigPath = path.join(this._workspacePath, 'angular.json');
        try {
            const angularConfig = JSON.parse(fs.readFileSync(angularConfigPath, 'utf8'));
            if (angularConfig.projects) {
                for (const [name, projectConfig] of Object.entries(angularConfig.projects)) {
                    const config = projectConfig;
                    const projectRoot = path.join(this._workspacePath, config.root || '');
                    const packageJsonPath = path.join(projectRoot, 'package.json');
                    projects.push({
                        name,
                        root: projectRoot,
                        type: 'angular',
                        packageJsonPath,
                        configPath: angularConfigPath,
                        projectType: config.projectType || 'application',
                        targets: config.architect
                    });
                }
            }
        }
        catch (error) {
            console.error('Error detecting Angular projects:', error);
        }
        return projects;
    }
    async _detectNpmProjects() {
        const projects = [];
        const packageJsonPath = path.join(this._workspacePath, 'package.json');
        if (fs.existsSync(packageJsonPath)) {
            try {
                const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                projects.push({
                    name: packageJson.name || 'root',
                    root: this._workspacePath,
                    type: 'npm',
                    packageJsonPath,
                    projectType: 'application',
                    targets: packageJson.scripts ? Object.keys(packageJson.scripts).reduce((acc, script) => {
                        acc[script] = { executor: 'npm', options: { command: script } };
                        return acc;
                    }, {}) : undefined
                });
            }
            catch (error) {
                console.error('Error detecting npm project:', error);
            }
        }
        return projects;
    }
    async _findProjectJsonFiles() {
        const projectJsonFiles = [];
        const findFiles = (dir) => {
            const files = fs.readdirSync(dir);
            for (const file of files) {
                const fullPath = path.join(dir, file);
                const stat = fs.statSync(fullPath);
                if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
                    findFiles(fullPath);
                }
                else if (file === 'project.json') {
                    projectJsonFiles.push(fullPath);
                }
            }
        };
        try {
            findFiles(this._workspacePath);
        }
        catch (error) {
            console.error('Error finding project.json files:', error);
        }
        return projectJsonFiles;
    }
    clearCache() {
        this._cache.clear();
    }
    async getCurrentProject() {
        const activeEditor = vscode.window.activeTextEditor;
        if (!activeEditor) {
            return undefined;
        }
        const activeFilePath = activeEditor.document.uri.fsPath;
        const projects = await this.detectProjects();
        // Find the project that contains the active file
        return projects.find(project => activeFilePath.startsWith(project.root));
    }
}
exports.ProjectDetector = ProjectDetector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,