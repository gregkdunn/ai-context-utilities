{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/types/__tests__/index.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/types/__tests__/index.test.ts"],"sourcesContent":["import * as types from '../index';\n\ndescribe('Types Module - Interface Definitions', () => {\n    \n    describe('NxProject Interface', () => {\n        it('should have required properties with correct types', () => {\n            const mockProject: types.NxProject = {\n                name: 'test-project',\n                root: './apps/test-project',\n                projectType: 'application',\n                type: 'nx',\n                packageJsonPath: './apps/test-project/package.json'\n            };\n\n            expect(mockProject.name).toBe('test-project');\n            expect(mockProject.root).toBe('./apps/test-project');\n            expect(mockProject.projectType).toBe('application');\n        });\n\n        it('should accept valid projectType values', () => {\n            const appProject: types.NxProject = {\n                name: 'app',\n                root: './apps/app',\n                projectType: 'application',\n                type: 'nx',\n                packageJsonPath: './apps/app/package.json'\n            };\n\n            const libProject: types.NxProject = {\n                name: 'lib',\n                root: './libs/lib',\n                projectType: 'library',\n                type: 'nx',\n                packageJsonPath: './libs/lib/package.json'\n            };\n\n            expect(appProject.projectType).toBe('application');\n            expect(libProject.projectType).toBe('library');\n        });\n\n        it('should allow optional targets property', () => {\n            const projectWithTargets: types.NxProject = {\n                name: 'test',\n                root: './test',\n                projectType: 'application',\n                type: 'nx',\n                packageJsonPath: './test/package.json',\n                targets: {\n                    build: { executor: '@nx/webpack:webpack' },\n                    test: { executor: '@nx/jest:jest' }\n                }\n            };\n\n            const projectWithoutTargets: types.NxProject = {\n                name: 'test',\n                root: './test',\n                projectType: 'application',\n                type: 'nx',\n                packageJsonPath: './test/package.json'\n            };\n\n            expect(projectWithTargets.targets).toBeDefined();\n            expect(projectWithoutTargets.targets).toBeUndefined();\n        });\n    });\n\n    describe('CommandOptions Interface', () => {\n        it('should have all optional properties with correct types', () => {\n            const options: types.CommandOptions = {\n                project: 'my-project',\n                quick: true,\n                fullContext: false,\n                noDiff: true,\n                focus: 'tests',\n                useExpected: false,\n                fullOutput: true\n            };\n\n            expect(typeof options.project).toBe('string');\n            expect(typeof options.quick).toBe('boolean');\n            expect(typeof options.fullContext).toBe('boolean');\n            expect(typeof options.noDiff).toBe('boolean');\n            expect(options.focus).toBe('tests');\n            expect(typeof options.useExpected).toBe('boolean');\n            expect(typeof options.fullOutput).toBe('boolean');\n        });\n\n        it('should accept valid focus values', () => {\n            const testsFocus: types.CommandOptions = { focus: 'tests' };\n            const typesFocus: types.CommandOptions = { focus: 'types' };\n            const perfFocus: types.CommandOptions = { focus: 'performance' };\n\n            expect(testsFocus.focus).toBe('tests');\n            expect(typesFocus.focus).toBe('types');\n            expect(perfFocus.focus).toBe('performance');\n        });\n\n        it('should work with empty options', () => {\n            const emptyOptions: types.CommandOptions = {};\n            \n            expect(emptyOptions.project).toBeUndefined();\n            expect(emptyOptions.quick).toBeUndefined();\n            expect(emptyOptions.fullContext).toBeUndefined();\n        });\n    });\n\n    describe('CommandResult Interface', () => {\n        it('should have required properties with correct types', () => {\n            const result: types.CommandResult = {\n                success: true,\n                exitCode: 0,\n                output: 'Command executed successfully',\n                duration: 1500\n            };\n\n            expect(typeof result.success).toBe('boolean');\n            expect(typeof result.exitCode).toBe('number');\n            expect(typeof result.output).toBe('string');\n            expect(typeof result.duration).toBe('number');\n        });\n\n        it('should allow optional error and outputFiles properties', () => {\n            const resultWithError: types.CommandResult = {\n                success: false,\n                exitCode: 1,\n                output: 'Command failed',\n                error: 'Error details',\n                duration: 800\n            };\n\n            const resultWithOutputFiles: types.CommandResult = {\n                success: true,\n                exitCode: 0,\n                output: 'Success',\n                outputFiles: ['test-results.json', 'coverage.html'],\n                duration: 2000\n            };\n\n            expect(resultWithError.error).toBe('Error details');\n            expect(resultWithOutputFiles.outputFiles).toEqual(['test-results.json', 'coverage.html']);\n        });\n    });\n\n    describe('ActionButton Interface', () => {\n        it('should have required properties with correct types', () => {\n            const button: types.ActionButton = {\n                id: 'aiDebug',\n                label: 'AI Debug',\n                icon: 'debug',\n                status: 'idle',\n                enabled: true\n            };\n\n            expect(button.id).toBe('aiDebug');\n            expect(typeof button.label).toBe('string');\n            expect(typeof button.icon).toBe('string');\n            expect(button.status).toBe('idle');\n            expect(typeof button.enabled).toBe('boolean');\n        });\n\n        it('should accept valid id values', () => {\n            const aiDebugButton: types.ActionButton = {\n                id: 'aiDebug',\n                label: 'AI Debug',\n                icon: 'debug',\n                status: 'idle',\n                enabled: true\n            };\n\n            const nxTestButton: types.ActionButton = {\n                id: 'nxTest',\n                label: 'Run Tests',\n                icon: 'test',\n                status: 'running',\n                enabled: true\n            };\n\n            const gitDiffButton: types.ActionButton = {\n                id: 'gitDiff',\n                label: 'Git Diff',\n                icon: 'diff',\n                status: 'success',\n                enabled: true\n            };\n\n            const prepareToPushButton: types.ActionButton = {\n                id: 'prepareToPush',\n                label: 'Prepare to Push',\n                icon: 'push',\n                status: 'error',\n                enabled: false\n            };\n\n            expect(aiDebugButton.id).toBe('aiDebug');\n            expect(nxTestButton.id).toBe('nxTest');\n            expect(gitDiffButton.id).toBe('gitDiff');\n            expect(prepareToPushButton.id).toBe('prepareToPush');\n        });\n\n        it('should accept valid status values', () => {\n            const statuses: types.ActionButton['status'][] = ['idle', 'running', 'success', 'error'];\n            \n            statuses.forEach(status => {\n                const button: types.ActionButton = {\n                    id: 'aiDebug',\n                    label: 'Test',\n                    icon: 'test',\n                    status: status,\n                    enabled: true\n                };\n                expect(button.status).toBe(status);\n            });\n        });\n\n        it('should allow optional lastRun property', () => {\n            const buttonWithLastRun: types.ActionButton = {\n                id: 'aiDebug',\n                label: 'AI Debug',\n                icon: 'debug',\n                status: 'success',\n                lastRun: new Date('2024-01-01T12:00:00Z'),\n                enabled: true\n            };\n\n            expect(buttonWithLastRun.lastRun).toBeInstanceOf(Date);\n        });\n    });\n\n    describe('WebviewMessage Interface', () => {\n        it('should have required properties with correct types', () => {\n            const message: types.WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'aiDebug',\n                    project: 'test-project'\n                }\n            };\n\n            expect(message.command).toBe('runCommand');\n            expect(typeof message.data).toBe('object');\n        });\n\n        it('should accept valid command values', () => {\n            const commands: types.WebviewMessage['command'][] = [\n                'runCommand', 'getStatus', 'openFile', 'getProjects', 'setProject'\n            ];\n\n            commands.forEach(command => {\n                const message: types.WebviewMessage = {\n                    command: command,\n                    data: {}\n                };\n                expect(message.command).toBe(command);\n            });\n        });\n\n        it('should allow optional data properties', () => {\n            const messageWithAllData: types.WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'nxTest',\n                    project: 'my-project',\n                    options: { quick: true },\n                    filePath: './src/test.ts'\n                }\n            };\n\n            expect(messageWithAllData.data.action).toBe('nxTest');\n            expect(messageWithAllData.data.project).toBe('my-project');\n            expect(messageWithAllData.data.options).toEqual({ quick: true });\n            expect(messageWithAllData.data.filePath).toBe('./src/test.ts');\n        });\n    });\n\n    describe('WebviewState Interface', () => {\n        it('should have required properties with correct types', () => {\n            const state: types.WebviewState = {\n                projects: [\n                    { name: 'project1', root: './apps/project1', projectType: 'application', type: 'nx', packageJsonPath: './apps/project1/package.json' }\n                ],\n                actions: {\n                    'aiDebug': {\n                        id: 'aiDebug',\n                        label: 'AI Debug',\n                        icon: 'debug',\n                        status: 'idle',\n                        enabled: true\n                    }\n                },\n                outputFiles: {\n                    'test-results': 'test output content'\n                },\n                isStreaming: false,\n                currentOutput: ''\n            };\n\n            expect(Array.isArray(state.projects)).toBe(true);\n            expect(typeof state.actions).toBe('object');\n            expect(typeof state.outputFiles).toBe('object');\n        });\n\n        it('should allow optional properties', () => {\n            const stateWithOptionals: types.WebviewState = {\n                currentProject: 'selected-project',\n                projects: [],\n                actions: {},\n                outputFiles: {},\n                lastRun: {\n                    action: 'aiDebug',\n                    timestamp: new Date(),\n                    success: true\n                },\n                isStreaming: false,\n                currentOutput: ''\n            };\n\n            expect(stateWithOptionals.currentProject).toBe('selected-project');\n            expect(stateWithOptionals.lastRun).toBeDefined();\n            expect(stateWithOptionals.lastRun!.action).toBe('aiDebug');\n            expect(stateWithOptionals.lastRun!.timestamp).toBeInstanceOf(Date);\n            expect(stateWithOptionals.lastRun!.success).toBe(true);\n        });\n    });\n\n    describe('OutputType Type', () => {\n        it('should accept valid output type values', () => {\n            const outputTypes: types.OutputType[] = [\n                'ai-debug-context',\n                'jest-output',\n                'diff',\n                'pr-description'\n            ];\n\n            outputTypes.forEach(outputType => {\n                const type: types.OutputType = outputType;\n                expect(type).toBe(outputType);\n            });\n        });\n    });\n\n    describe('DebugContext Interface', () => {\n        it('should have required properties with correct types', () => {\n            const context: types.DebugContext = {\n                testStatus: 'passing',\n                hasFailures: false,\n                changedFiles: ['src/app.ts', 'src/utils.ts'],\n                lintStatus: 'passed',\n                formatStatus: 'passed'\n            };\n\n            expect(context.testStatus).toBe('passing');\n            expect(typeof context.hasFailures).toBe('boolean');\n            expect(Array.isArray(context.changedFiles)).toBe(true);\n            expect(context.lintStatus).toBe('passed');\n            expect(context.formatStatus).toBe('passed');\n        });\n\n        it('should accept valid status values', () => {\n            const testStatuses: types.DebugContext['testStatus'][] = ['passing', 'failing', 'unknown'];\n            const lintStatuses: types.DebugContext['lintStatus'][] = ['passed', 'failed', 'unknown'];\n            const formatStatuses: types.DebugContext['formatStatus'][] = ['passed', 'failed', 'unknown'];\n\n            testStatuses.forEach(status => {\n                const context: types.DebugContext = {\n                    testStatus: status,\n                    hasFailures: false,\n                    changedFiles: [],\n                    lintStatus: 'passed',\n                    formatStatus: 'passed'\n                };\n                expect(context.testStatus).toBe(status);\n            });\n\n            lintStatuses.forEach(status => {\n                const context: types.DebugContext = {\n                    testStatus: 'passing',\n                    hasFailures: false,\n                    changedFiles: [],\n                    lintStatus: status,\n                    formatStatus: 'passed'\n                };\n                expect(context.lintStatus).toBe(status);\n            });\n\n            formatStatuses.forEach(status => {\n                const context: types.DebugContext = {\n                    testStatus: 'passing',\n                    hasFailures: false,\n                    changedFiles: [],\n                    lintStatus: 'passed',\n                    formatStatus: status\n                };\n                expect(context.formatStatus).toBe(status);\n            });\n        });\n    });\n\n    describe('PRContext Interface', () => {\n        it('should have required properties with correct types', () => {\n            const context: types.PRContext = {\n                testsPassing: true,\n                lintPassing: true,\n                formatApplied: true,\n                changedFiles: ['src/feature.ts'],\n                projectName: 'my-project'\n            };\n\n            expect(typeof context.testsPassing).toBe('boolean');\n            expect(typeof context.lintPassing).toBe('boolean');\n            expect(typeof context.formatApplied).toBe('boolean');\n            expect(Array.isArray(context.changedFiles)).toBe(true);\n            expect(typeof context.projectName).toBe('string');\n        });\n\n        it('should work with different boolean combinations', () => {\n            const allPassingContext: types.PRContext = {\n                testsPassing: true,\n                lintPassing: true,\n                formatApplied: true,\n                changedFiles: [],\n                projectName: 'test'\n            };\n\n            const mixedContext: types.PRContext = {\n                testsPassing: false,\n                lintPassing: true,\n                formatApplied: false,\n                changedFiles: ['file1.ts', 'file2.ts'],\n                projectName: 'test'\n            };\n\n            expect(allPassingContext.testsPassing).toBe(true);\n            expect(mixedContext.testsPassing).toBe(false);\n            expect(mixedContext.changedFiles).toHaveLength(2);\n        });\n    });\n\n    describe('Type Compatibility and Integration', () => {\n        it('should work together in realistic scenarios', () => {\n            // Simulate a complete workflow\n            const project: types.NxProject = {\n                name: 'my-app',\n                root: './apps/my-app',\n                projectType: 'application',\n                type: 'nx',\n                packageJsonPath: './apps/my-app/package.json',\n                targets: {\n                    build: { executor: '@nx/webpack:webpack' },\n                    test: { executor: '@nx/jest:jest' }\n                }\n            };\n\n            const options: types.CommandOptions = {\n                project: project.name,\n                quick: false,\n                fullContext: true,\n                focus: 'tests'\n            };\n\n            const result: types.CommandResult = {\n                success: true,\n                exitCode: 0,\n                output: 'Tests passed',\n                outputFiles: ['test-results.json'],\n                duration: 5000\n            };\n\n            const button: types.ActionButton = {\n                id: 'nxTest',\n                label: 'Run Tests',\n                icon: 'test',\n                status: 'success',\n                lastRun: new Date(),\n                enabled: true\n            };\n\n            const message: types.WebviewMessage = {\n                command: 'runCommand',\n                data: {\n                    action: 'nxTest',\n                    project: project.name,\n                    options: options\n                }\n            };\n\n            const state: types.WebviewState = {\n                currentProject: project.name,\n                projects: [project],\n                actions: { [button.id]: button },\n                outputFiles: { 'test-results': result.output },\n                lastRun: {\n                    action: button.id,\n                    timestamp: new Date(),\n                    success: result.success\n                },\n                isStreaming: false,\n                currentOutput: ''\n            };\n\n            // Verify the integration works\n            expect(state.currentProject).toBe(project.name);\n            expect(state.projects[0].name).toBe(project.name);\n            expect(state.actions[button.id].status).toBe('success');\n            expect(message.data.project).toBe(project.name);\n            expect(message.data.options).toEqual(options);\n        });\n\n        it('should handle error scenarios properly', () => {\n            const failedResult: types.CommandResult = {\n                success: false,\n                exitCode: 1,\n                output: 'Test failed',\n                error: 'Test suite failed with 3 errors',\n                duration: 3000\n            };\n\n            const errorButton: types.ActionButton = {\n                id: 'nxTest',\n                label: 'Run Tests',\n                icon: 'test',\n                status: 'error',\n                lastRun: new Date(),\n                enabled: true\n            };\n\n            const debugContext: types.DebugContext = {\n                testStatus: 'failing',\n                hasFailures: true,\n                changedFiles: ['src/broken.ts'],\n                lintStatus: 'failed',\n                formatStatus: 'unknown'\n            };\n\n            const prContext: types.PRContext = {\n                testsPassing: false,\n                lintPassing: false,\n                formatApplied: false,\n                changedFiles: debugContext.changedFiles,\n                projectName: 'failing-project'\n            };\n\n            expect(failedResult.success).toBe(false);\n            expect(errorButton.status).toBe('error');\n            expect(debugContext.hasFailures).toBe(true);\n            expect(prContext.testsPassing).toBe(false);\n        });\n    });\n\n    describe('Type Safety and Edge Cases', () => {\n        it('should prevent invalid enum values at compile time', () => {\n            // These should compile successfully\n            const validProjectType: types.NxProject['projectType'] = 'application';\n            const validStatus: types.ActionButton['status'] = 'running';\n            const validCommand: types.WebviewMessage['command'] = 'getProjects';\n            const validOutputType: types.OutputType = 'diff';\n\n            expect(validProjectType).toBe('application');\n            expect(validStatus).toBe('running');\n            expect(validCommand).toBe('getProjects');\n            expect(validOutputType).toBe('diff');\n        });\n\n        it('should handle optional properties correctly', () => {\n            // Interface with only required properties\n            const minimalProject: types.NxProject = {\n                name: 'minimal',\n                root: './minimal',\n                projectType: 'library',\n                type: 'nx',\n                packageJsonPath: './minimal/package.json'\n            };\n\n            const minimalOptions: types.CommandOptions = {};\n\n            const minimalState: types.WebviewState = {\n                projects: [],\n                actions: {},\n                outputFiles: {},\n                isStreaming: false,\n                currentOutput: ''\n            };\n\n            expect(minimalProject.targets).toBeUndefined();\n            expect(Object.keys(minimalOptions)).toHaveLength(0);\n            expect(minimalState.currentProject).toBeUndefined();\n        });\n\n        it('should handle complex nested structures', () => {\n            const complexState: types.WebviewState = {\n                currentProject: 'main-app',\n                projects: [\n                    {\n                        name: 'main-app',\n                        root: './apps/main-app',\n                        projectType: 'application',\n                        type: 'nx',\n                        packageJsonPath: './apps/main-app/package.json',\n                        targets: {\n                            build: { executor: '@nx/webpack:webpack' },\n                            test: { executor: '@nx/jest:jest' },\n                            lint: { executor: '@nx/linter:eslint' }\n                        }\n                    },\n                    {\n                        name: 'shared-lib',\n                        root: './libs/shared-lib',\n                        projectType: 'library',\n                        type: 'nx',\n                        packageJsonPath: './libs/shared-lib/package.json'\n                    }\n                ],\n                actions: {\n                    aiDebug: { id: 'aiDebug', label: 'AI Debug', icon: 'debug', status: 'idle', enabled: true },\n                    nxTest: { id: 'nxTest', label: 'Test', icon: 'test', status: 'success', enabled: true },\n                    gitDiff: { id: 'gitDiff', label: 'Diff', icon: 'diff', status: 'idle', enabled: true },\n                    prepareToPush: { id: 'prepareToPush', label: 'Push', icon: 'push', status: 'error', enabled: false }\n                },\n                outputFiles: {\n                    'test-results': 'All tests passed',\n                    'lint-results': 'No linting errors',\n                    'build-log': 'Build completed successfully'\n                },\n                lastRun: {\n                    action: 'nxTest',\n                    timestamp: new Date('2024-01-01T10:00:00Z'),\n                    success: true\n                },\n                isStreaming: false,\n                currentOutput: ''\n            };\n\n            expect(complexState.projects).toHaveLength(2);\n            expect(Object.keys(complexState.actions)).toHaveLength(4);\n            expect(complexState.projects[0].targets).toBeDefined();\n            expect(complexState.projects[1].targets).toBeUndefined();\n            expect(complexState.actions.prepareToPush.enabled).toBe(false);\n        });\n    });\n});\n"],"version":3}