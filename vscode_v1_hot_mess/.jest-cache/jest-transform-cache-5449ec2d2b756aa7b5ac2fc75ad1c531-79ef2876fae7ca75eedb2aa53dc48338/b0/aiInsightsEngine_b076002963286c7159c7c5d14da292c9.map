{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/ai-insights/aiInsightsEngine.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/ai-insights/aiInsightsEngine.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { \n    AIInsightsEngine as IAIInsightsEngine, \n    AnalysisData, \n    ExecutionContext, \n    ReportCriteria, \n    QueryResult, \n    Insight, \n    CommandSuggestion, \n    Report, \n    PredictionResult, \n    WorkflowOptimization,\n    CommandExecution,\n    ActionSuggestion,\n    InsightContext\n} from '../../types';\n\n// Phase 4.2 Enhanced Engines\nimport { IntelligentSuggestionsEngine } from './engines/intelligentSuggestionsEngine';\nimport { AutomatedInsightsEngine } from './engines/automatedInsightsEngine';\nimport { NaturalLanguageQueryEngine } from './engines/naturalLanguageQueryEngine';\n\n/**\n * AIInsightsEngine provides AI-powered insights and recommendations for debugging workflows\n * Phase 4.2: Intelligent command suggestions, pattern analysis, and workflow optimization\n */\nexport class AIInsightsEngine implements IAIInsightsEngine {\n    private insightCache: Map<string, Insight[]> = new Map();\n    private patternHistory: Map<string, any[]> = new Map();\n    private suggestionCache: Map<string, CommandSuggestion[]> = new Map();\n    private readonly cacheTimeout = 300000; // 5 minutes\n\n    // Phase 4.2 Enhanced Engines\n    private intelligentSuggestionsEngine!: IntelligentSuggestionsEngine;\n    private automatedInsightsEngine!: AutomatedInsightsEngine;\n    private naturalLanguageQueryEngine!: NaturalLanguageQueryEngine;\n    private readonly phase42Enabled = true;\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.initializeEngine();\n        \n        // Initialize Phase 4.2 engines\n        if (this.phase42Enabled) {\n            this.intelligentSuggestionsEngine = new IntelligentSuggestionsEngine(context);\n            this.automatedInsightsEngine = new AutomatedInsightsEngine(context);\n            this.naturalLanguageQueryEngine = new NaturalLanguageQueryEngine(context);\n            console.log('Phase 4.2 AI engines initialized successfully');\n        }\n    }\n\n    private initializeEngine(): void {\n        this.loadCachedData();\n        setInterval(() => this.cleanupCache(), 60000);\n        console.log('AIInsightsEngine initialized');\n    }\n\n    async analyzePattern(data: AnalysisData): Promise<Insight[]> {\n        const cacheKey = this.generateCacheKey(data);\n        \n        if (this.insightCache.has(cacheKey)) {\n            return this.insightCache.get(cacheKey)!;\n        }\n\n        const insights: Insight[] = [];\n        \n        try {\n            // Phase 4.2: Use enhanced automated insights engine\n            if (this.phase42Enabled && this.automatedInsightsEngine) {\n                const enhancedInsights = await this.automatedInsightsEngine.generateAutomatedInsights(data);\n                insights.push(...(enhancedInsights as unknown as Insight[]));\n                console.log(`Phase 4.2: Generated ${enhancedInsights.length} enhanced insights`);\n            } else {\n                // Fallback to legacy analysis\n                const performanceInsights = await this.analyzePerformancePatterns(data);\n                insights.push(...performanceInsights);\n\n                const errorInsights = await this.analyzeErrorPatterns(data);\n                insights.push(...errorInsights);\n\n                const testInsights = await this.analyzeTestPatterns(data);\n                insights.push(...testInsights);\n            }\n\n            this.insightCache.set(cacheKey, insights);\n            console.log(`Generated ${insights.length} insights from pattern analysis`);\n            return insights;\n            \n        } catch (error) {\n            console.error('Error analyzing patterns:', error);\n            return [];\n        }\n    }\n\n    async suggestCommand(context: ExecutionContext): Promise<CommandSuggestion[]> {\n        const contextKey = this.generateContextKey(context);\n        \n        if (this.suggestionCache.has(contextKey)) {\n            return this.suggestionCache.get(contextKey)!;\n        }\n\n        const suggestions: CommandSuggestion[] = [];\n        \n        try {\n            // Phase 4.2: Use intelligent suggestions engine\n            if (this.phase42Enabled && this.intelligentSuggestionsEngine) {\n                const intelligentSuggestions = await this.intelligentSuggestionsEngine.generateIntelligentSuggestions(context);\n                suggestions.push(...intelligentSuggestions);\n                console.log(`Phase 4.2: Generated ${intelligentSuggestions.length} intelligent suggestions`);\n            } else {\n                // Fallback to legacy suggestions\n                const contextSuggestions = await this.generateContextBasedSuggestions(context);\n                suggestions.push(...contextSuggestions);\n            }\n\n            suggestions.sort((a, b) => b.confidence - a.confidence);\n            const topSuggestions = suggestions.slice(0, 8); // Increased from 5 to 8 for Phase 4.2\n            \n            this.suggestionCache.set(contextKey, topSuggestions);\n            console.log(`Generated ${topSuggestions.length} command suggestions`);\n            return topSuggestions;\n            \n        } catch (error) {\n            console.error('Error generating command suggestions:', error);\n            return [];\n        }\n    }\n\n    async generateReport(criteria: ReportCriteria): Promise<Report> {\n        const reportId = this.generateReportId();\n        \n        try {\n            const reportData = await this.collectReportData(criteria);\n            const analysis = await this.generateReportAnalysis(reportData, criteria);\n            \n            const report: Report = {\n                id: reportId,\n                title: this.generateReportTitle(criteria),\n                description: this.generateReportDescription(criteria),\n                criteria,\n                data: {\n                    ...reportData,\n                    analysis,\n                    summary: this.generateReportSummary(reportData, analysis)\n                },\n                generatedAt: new Date(),\n                generatedBy: await this.getCurrentUserId(),\n                format: criteria.format,\n                size: 0\n            };\n            \n            console.log(`Generated report: ${report.title}`);\n            return report;\n            \n        } catch (error) {\n            console.error('Error generating report:', error);\n            throw new Error(`Failed to generate report: ${(error as Error).message}`);\n        }\n    }\n\n    async processNaturalLanguageQuery(query: string, context?: AnalysisData): Promise<QueryResult> {\n        try {\n            // Phase 4.2: Use enhanced natural language query engine\n            if (this.phase42Enabled && this.naturalLanguageQueryEngine) {\n                const enhancedResult = await this.naturalLanguageQueryEngine.processQuery(query, context);\n                console.log(`Phase 4.2: Processed query with ${enhancedResult.confidence.toFixed(2)} confidence`);\n                return enhancedResult;\n            } else {\n                // Fallback to legacy NLP processing\n                const intent = await this.parseQueryIntent(query);\n                const entities = await this.extractQueryEntities(query);\n                const response = await this.generateQueryResponse(intent, entities, query);\n                const suggestedActions = await this.generateQueryActions(intent, entities);\n                const data = await this.fetchQueryData(intent, entities);\n                \n                const result: QueryResult = {\n                    intent,\n                    entities,\n                    confidence: this.calculateQueryConfidence(intent, entities),\n                    response,\n                    suggestedActions,\n                    data\n                };\n                \n                console.log(`Processed natural language query: \"${query}\"`);\n                return result;\n            }\n            \n        } catch (error) {\n            console.error('Error processing natural language query:', error);\n            return {\n                intent: 'unknown',\n                entities: {},\n                confidence: 0,\n                response: 'I\\'m sorry, I couldn\\'t understand your query. Please try rephrasing it.',\n                suggestedActions: []\n            };\n        }\n    }\n\n    async predictFailures(projectData: any): Promise<PredictionResult[]> {\n        const predictions: PredictionResult[] = [];\n        \n        try {\n            const testFailurePredictions = await this.predictTestFailures(projectData);\n            predictions.push(...testFailurePredictions);\n            \n            const buildFailurePredictions = await this.predictBuildFailures(projectData);\n            predictions.push(...buildFailurePredictions);\n            \n            predictions.sort((a, b) => b.probability - a.probability);\n            \n            console.log(`Generated ${predictions.length} failure predictions`);\n            return predictions;\n            \n        } catch (error) {\n            console.error('Error predicting failures:', error);\n            return [];\n        }\n    }\n\n    async optimizeWorkflow(history: CommandExecution[]): Promise<WorkflowOptimization> {\n        try {\n            const currentEfficiency = await this.calculateWorkflowEfficiency(history);\n            const optimizations = await this.identifyOptimizations(history);\n            const optimizedWorkflow = await this.generateOptimizedWorkflow(history, optimizations);\n            const estimatedImprovement = await this.calculateEstimatedImprovement(history, optimizedWorkflow);\n            const reasoning = await this.generateOptimizationReasoning(optimizations, estimatedImprovement);\n            \n            const optimization: WorkflowOptimization = {\n                currentEfficiency,\n                optimizedWorkflow,\n                estimatedImprovement,\n                reasoning\n            };\n            \n            console.log(`Generated workflow optimization with ${estimatedImprovement.timeReduction}% time reduction`);\n            return optimization;\n            \n        } catch (error) {\n            console.error('Error optimizing workflow:', error);\n            throw new Error(`Failed to optimize workflow: ${(error as Error).message}`);\n        }\n    }\n\n    // Private analysis methods\n\n    private async analyzePerformancePatterns(data: AnalysisData): Promise<Insight[]> {\n        const insights: Insight[] = [];\n        \n        const slowCommands = data.commandHistory.filter(cmd => cmd.endTime && cmd.startTime && \n            (cmd.endTime.getTime() - cmd.startTime.getTime()) > 60000);\n        \n        if (slowCommands.length > 0) {\n            insights.push({\n                id: this.generateInsightId(),\n                type: 'performance',\n                title: 'Slow Command Execution Detected',\n                description: `${slowCommands.length} commands took longer than 1 minute to execute`,\n                actionable: true,\n                suggestions: [\n                    {\n                        id: this.generateSuggestionId(),\n                        title: 'Optimize Test Selection',\n                        description: 'Run focused tests instead of full test suite',\n                        action: {\n                            type: 'command',\n                            data: { command: 'nxTest', options: { focus: 'tests' } }\n                        },\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'minutes'\n                    }\n                ],\n                confidence: 0.8,\n                timestamp: new Date(),\n                category: 'performance',\n                priority: 'medium',\n                context: this.createInsightContext(data, ['performance', 'commands'])\n            });\n        }\n        \n        return insights;\n    }\n\n    private async analyzeErrorPatterns(data: AnalysisData): Promise<Insight[]> {\n        const insights: Insight[] = [];\n        \n        const errorPatterns = data.errorPatterns || [];\n        const frequentErrors = errorPatterns.filter(pattern => pattern.frequency > 3);\n        \n        for (const errorPattern of frequentErrors) {\n            insights.push({\n                id: this.generateInsightId(),\n                type: 'error',\n                title: 'Recurring Error Pattern Detected',\n                description: `Error pattern \"${errorPattern.pattern}\" occurred ${errorPattern.frequency} times`,\n                actionable: true,\n                suggestions: errorPattern.suggestedFix ? [\n                    {\n                        id: this.generateSuggestionId(),\n                        title: 'Apply Suggested Fix',\n                        description: errorPattern.suggestedFix,\n                        action: {\n                            type: 'file-edit',\n                            data: { files: errorPattern.affectedFiles, fix: errorPattern.suggestedFix }\n                        },\n                        estimatedImpact: 'high',\n                        estimatedEffort: 'minutes'\n                    }\n                ] : [],\n                confidence: 0.9,\n                timestamp: new Date(),\n                category: 'error',\n                priority: 'high',\n                context: this.createInsightContext(data, ['errors', 'patterns'])\n            });\n        }\n        \n        return insights;\n    }\n\n    private async analyzeTestPatterns(data: AnalysisData): Promise<Insight[]> {\n        const insights: Insight[] = [];\n        \n        const testResults = data.testResults || [];\n        const recentTests = testResults.filter(test => \n            test.timestamp > new Date(Date.now() - 24 * 60 * 60 * 1000));\n        \n        const failingTests = recentTests.filter(test => test.status === 'failed');\n        \n        if (failingTests.length > 0) {\n            const failureRate = failingTests.length / recentTests.length;\n            if (failureRate > 0.1) {\n                insights.push({\n                    id: this.generateInsightId(),\n                    type: 'quality',\n                    title: 'High Test Failure Rate',\n                    description: `${(failureRate * 100).toFixed(1)}% of tests are failing`,\n                    actionable: true,\n                    suggestions: [\n                        {\n                            id: this.generateSuggestionId(),\n                            title: 'Focus on Failing Tests',\n                            description: 'Run only failing tests to debug issues',\n                            action: {\n                                type: 'command',\n                                data: { command: 'nxTest', options: { focus: 'failing' } }\n                            },\n                            estimatedImpact: 'high',\n                            estimatedEffort: 'minutes'\n                        }\n                    ],\n                    confidence: 0.8,\n                    timestamp: new Date(),\n                    category: 'quality',\n                    priority: 'high',\n                    context: this.createInsightContext(data, ['tests', 'failures'])\n                });\n            }\n        }\n        \n        return insights;\n    }\n\n    private async generateContextBasedSuggestions(context: ExecutionContext): Promise<CommandSuggestion[]> {\n        const suggestions: CommandSuggestion[] = [];\n        \n        if (context.gitStatus.hasUncommittedChanges) {\n            suggestions.push({\n                command: 'gitDiff',\n                reason: 'Uncommitted changes detected',\n                confidence: 0.8,\n                estimatedImpact: 'medium',\n                context: {\n                    trigger: 'git-changes',\n                    relatedFiles: context.gitStatus.changedFiles,\n                    similarPatterns: []\n                }\n            });\n        }\n        \n        if (context.testStatus.failing > 0) {\n            suggestions.push({\n                command: 'nxTest',\n                reason: `${context.testStatus.failing} tests are failing`,\n                confidence: 0.9,\n                estimatedImpact: 'high',\n                context: {\n                    trigger: 'test-failures',\n                    relatedFiles: context.testStatus.failingTests.map(t => t.suite),\n                    similarPatterns: []\n                },\n                options: { focus: 'tests' }\n            });\n        }\n        \n        if (context.gitStatus.hasUncommittedChanges && context.testStatus.failing === 0) {\n            suggestions.push({\n                command: 'prepareToPush',\n                reason: 'Changes ready for review - run full validation',\n                confidence: 0.8,\n                estimatedImpact: 'high',\n                context: {\n                    trigger: 'ready-for-push',\n                    relatedFiles: context.gitStatus.changedFiles,\n                    similarPatterns: []\n                }\n            });\n        }\n        \n        return suggestions;\n    }\n\n    // Helper methods\n\n    private generateCacheKey(data: AnalysisData): string {\n        return [\n            data.commandHistory.length,\n            data.projectFiles.length,\n            data.gitHistory.length,\n            data.testResults.length,\n            data.performanceMetrics.length,\n            data.errorPatterns.length\n        ].join('-');\n    }\n\n    private generateContextKey(context: ExecutionContext): string {\n        return `${context.project}-${context.currentFiles.length}-${context.recentCommands.length}`;\n    }\n\n    private generateInsightId(): string {\n        return `insight_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    private generateSuggestionId(): string {\n        return `suggestion_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    private generateReportId(): string {\n        return `report_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    private createInsightContext(data: AnalysisData, tags: string[]): InsightContext {\n        return {\n            project: data.projectFiles[0] || 'unknown',\n            files: data.projectFiles.slice(0, 10),\n            commands: data.commandHistory.slice(0, 10).map(cmd => cmd.action),\n            timeRange: {\n                start: new Date(Date.now() - 24 * 60 * 60 * 1000),\n                end: new Date()\n            },\n            metrics: {\n                commandCount: data.commandHistory.length,\n                errorCount: data.errorPatterns.length,\n                testCount: data.testResults.length\n            }\n        };\n    }\n\n    private async loadCachedData(): Promise<void> {\n        console.log('Loading cached AI insights data');\n    }\n\n    private cleanupCache(): void {\n        for (const [key, value] of this.insightCache.entries()) {\n            if (Math.random() < 0.01) {\n                this.insightCache.delete(key);\n            }\n        }\n        for (const [key, value] of this.suggestionCache.entries()) {\n            if (Math.random() < 0.01) {\n                this.suggestionCache.delete(key);\n            }\n        }\n    }\n\n    // AI method implementations\n    private async parseQueryIntent(query: string): Promise<string> {\n        const lowerQuery = query.toLowerCase();\n        if (lowerQuery.includes('test') || lowerQuery.includes('failing')) {return 'test-query';}\n        if (lowerQuery.includes('performance') || lowerQuery.includes('slow')) {return 'performance-query';}\n        if (lowerQuery.includes('error') || lowerQuery.includes('bug')) {return 'error-query';}\n        if (lowerQuery.includes('git') || lowerQuery.includes('commit')) {return 'git-query';}\n        return 'general-query';\n    }\n\n    private async extractQueryEntities(query: string): Promise<Record<string, any>> {\n        const entities: Record<string, any> = {};\n        const projectMatch = query.match(/project[s]?\\s+(\\w+)/i);\n        if (projectMatch) {\n            entities.project = projectMatch[1];\n        }\n        const timeMatch = query.match(/(last|past)\\s+(\\d+)\\s+(day|week|month|year)s?/i);\n        if (timeMatch) {\n            entities.timeRange = { amount: parseInt(timeMatch[2]), unit: timeMatch[3] };\n        }\n        return entities;\n    }\n\n    private async generateQueryResponse(intent: string, entities: Record<string, any>, query: string): Promise<string> {\n        const responses = {\n            'test-query': 'I can help you analyze test results and identify patterns in test failures.',\n            'performance-query': 'I can analyze performance metrics and suggest optimizations for your workflows.',\n            'error-query': 'I can help identify recurring error patterns and suggest fixes.',\n            'git-query': 'I can analyze your git history and suggest improvements to your commit patterns.'\n        };\n        return (responses as any)[intent] || 'I can help you analyze your debugging patterns and suggest improvements.';\n    }\n\n    private async generateQueryActions(intent: string, entities: Record<string, any>): Promise<ActionSuggestion[]> {\n        const actions: ActionSuggestion[] = [];\n        \n        if (intent === 'test-query') {\n            actions.push({\n                id: this.generateSuggestionId(),\n                title: 'Run Test Analysis',\n                description: 'Analyze current test results and patterns',\n                action: { type: 'command', data: { command: 'nxTest' } },\n                estimatedImpact: 'medium',\n                estimatedEffort: 'minutes'\n            });\n        }\n        \n        if (intent === 'performance-query') {\n            actions.push({\n                id: this.generateSuggestionId(),\n                title: 'Run Performance Analysis',\n                description: 'Generate performance report and recommendations',\n                action: { type: 'command', data: { command: 'aiDebug', options: { focus: 'performance' } } },\n                estimatedImpact: 'high',\n                estimatedEffort: 'minutes'\n            });\n        }\n        \n        return actions;\n    }\n\n    private async fetchQueryData(intent: string, entities: Record<string, any>): Promise<any> {\n        return null;\n    }\n\n    private calculateQueryConfidence(intent: string, entities: Record<string, any>): number {\n        let confidence = 0.5;\n        if (intent !== 'unknown') {\n            confidence += 0.3;\n        }\n        if (Object.keys(entities).length > 0) {\n            confidence += 0.2;\n        }\n        return Math.min(confidence, 1.0);\n    }\n\n    private async getCurrentUserId(): Promise<string> {\n        return process.env.USER || process.env.USERNAME || 'unknown';\n    }\n\n    private async collectReportData(criteria: ReportCriteria): Promise<any> {\n        return {\n            timeRange: criteria.timeRange,\n            projects: criteria.projects || [],\n            commands: criteria.commands || [],\n            metrics: {}\n        };\n    }\n\n    private async generateReportAnalysis(data: any, criteria: ReportCriteria): Promise<any> {\n        return { summary: 'Report analysis summary', insights: [], recommendations: [] };\n    }\n\n    private generateReportTitle(criteria: ReportCriteria): string {\n        const timeRange = criteria.timeRange.preset || 'custom';\n        const projects = criteria.projects?.length ? criteria.projects.join(', ') : 'all projects';\n        return `Debug Analysis Report - ${projects} (${timeRange})`;\n    }\n\n    private generateReportDescription(criteria: ReportCriteria): string {\n        return `Comprehensive analysis of debugging patterns and performance metrics`;\n    }\n\n    private generateReportSummary(data: any, analysis: any): string {\n        return `Report generated with ${Object.keys(data).length} data points and ${analysis.insights?.length || 0} insights`;\n    }\n\n    private async predictTestFailures(projectData: any): Promise<PredictionResult[]> {\n        return [];\n    }\n\n    private async predictBuildFailures(projectData: any): Promise<PredictionResult[]> {\n        return [];\n    }\n\n    private async calculateWorkflowEfficiency(history: CommandExecution[]): Promise<number> {\n        const successRate = history.filter(cmd => cmd.status === 'completed').length / history.length;\n        const avgDuration = history.reduce((sum, cmd) => {\n            if (cmd.endTime && cmd.startTime) {\n                return sum + (cmd.endTime.getTime() - cmd.startTime.getTime());\n            }\n            return sum;\n        }, 0) / history.length;\n        \n        return Math.min(successRate * (1 - avgDuration / 600000), 1);\n    }\n\n    private async identifyOptimizations(history: CommandExecution[]): Promise<any[]> {\n        return [];\n    }\n\n    private async generateOptimizedWorkflow(history: CommandExecution[], optimizations: any[]): Promise<CommandSuggestion[]> {\n        return [];\n    }\n\n    private async calculateEstimatedImprovement(history: CommandExecution[], optimized: CommandSuggestion[]): Promise<any> {\n        return { timeReduction: 20, errorReduction: 15, productivityGain: 25 };\n    }\n\n    private async generateOptimizationReasoning(optimizations: any[], improvement: any): Promise<string> {\n        return 'Optimization based on command usage patterns and historical performance data';\n    }\n\n    /**\n     * Phase 4.2: Get query suggestions based on context\n     */\n    async getQuerySuggestions(context?: AnalysisData): Promise<string[]> {\n        if (this.phase42Enabled && this.naturalLanguageQueryEngine) {\n            return this.naturalLanguageQueryEngine.getQuerySuggestions(context);\n        }\n        \n        // Fallback suggestions\n        return [\n            \"Show me failing tests\",\n            \"What errors are most common?\",\n            \"How can I improve performance?\",\n            \"Show recent changes\"\n        ];\n    }\n\n    /**\n     * Phase 4.2: Analyze command execution patterns for learning\n     */\n    async analyzeExecutionPatterns(executions: CommandExecution[]): Promise<void> {\n        if (this.phase42Enabled && this.intelligentSuggestionsEngine) {\n            await this.intelligentSuggestionsEngine.analyzeExecutionPatterns(executions);\n            console.log(`Phase 4.2: Analyzed ${executions.length} execution patterns`);\n        }\n    }\n\n    /**\n     * Phase 4.2: Predict command success based on context\n     */\n    async predictCommandSuccess(context: ExecutionContext): Promise<Map<string, any>> {\n        if (this.phase42Enabled && this.intelligentSuggestionsEngine) {\n            return this.intelligentSuggestionsEngine.predictCommandSuccess(context);\n        }\n        \n        return new Map();\n    }\n\n    /**\n     * Phase 4.2: Get learning analytics from query patterns\n     */\n    async getQueryAnalytics(): Promise<any> {\n        if (this.phase42Enabled && this.naturalLanguageQueryEngine) {\n            const patterns = await this.naturalLanguageQueryEngine.analyzeQueryPatterns();\n            return { patterns, insights: [] };\n        }\n        \n        return { patterns: [], insights: [] };\n    }\n\n    /**\n     * Phase 4.2: Save all engine states and patterns\n     */\n    async saveEngineStates(): Promise<void> {\n        try {\n            if (this.phase42Enabled) {\n                await Promise.all([\n                    this.intelligentSuggestionsEngine?.savePatterns(),\n                    this.automatedInsightsEngine?.saveInsightHistory([]),\n                    this.naturalLanguageQueryEngine?.saveQueryHistory()\n                ]);\n                console.log('Phase 4.2: All engine states saved successfully');\n            }\n        } catch (error) {\n            console.error('Error saving engine states:', error);\n        }\n    }\n\n    dispose(): void {\n        // Save state before disposing\n        this.saveEngineStates();\n        \n        // Dispose Phase 4.2 engines\n        if (this.phase42Enabled) {\n            this.intelligentSuggestionsEngine?.dispose();\n            this.automatedInsightsEngine?.dispose();\n            this.naturalLanguageQueryEngine?.dispose();\n            console.log('Phase 4.2 engines disposed');\n        }\n        \n        // Clear legacy caches\n        this.insightCache.clear();\n        this.patternHistory.clear();\n        this.suggestionCache.clear();\n        console.log('AIInsightsEngine disposed');\n    }\n}\n"],"version":3}