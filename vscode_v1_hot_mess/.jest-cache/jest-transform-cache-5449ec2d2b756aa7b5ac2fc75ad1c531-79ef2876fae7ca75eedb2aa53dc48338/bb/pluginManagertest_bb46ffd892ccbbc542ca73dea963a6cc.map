{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/__tests__/pluginManager.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/__tests__/pluginManager.test.ts"],"sourcesContent":["import { PluginManager } from '../pluginManager';\nimport { Plugin, PluginMetadata, PluginAPI, PluginContext } from '../../../types/plugin';\nimport * as vscode from 'vscode';\n\n// Mock VSCode API\njest.mock('vscode', () => ({\n  window: {\n    showInformationMessage: jest.fn(),\n    showWarningMessage: jest.fn(),\n    showErrorMessage: jest.fn(),\n    withProgress: jest.fn(),\n    createTreeView: jest.fn(),\n    showTextDocument: jest.fn(),\n    showInputBox: jest.fn(),\n    showQuickPick: jest.fn(),\n    activeTextEditor: {\n      document: {\n        fileName: 'test.ts',\n        getText: jest.fn().mockReturnValue('test content')\n      },\n      selection: {}\n    }\n  },\n  workspace: {\n    openTextDocument: jest.fn(),\n    fs: {\n      writeFile: jest.fn(),\n      readFile: jest.fn()\n    }\n  },\n  commands: {\n    registerCommand: jest.fn().mockReturnValue({ dispose: jest.fn() })\n  },\n  ProgressLocation: {\n    Notification: 15\n  },\n  Uri: {\n    file: jest.fn()\n  }\n}));\n\n// Mock plugin for testing\nclass TestPlugin implements Plugin {\n  metadata: PluginMetadata = {\n    id: 'test-plugin',\n    name: 'Test Plugin',\n    version: '1.0.0',\n    description: 'Test plugin for unit tests',\n    author: 'Test Author',\n    license: 'MIT',\n    enabled: true,\n    capabilities: [\n      {\n        type: 'command',\n        name: 'test-command',\n        description: 'Test command'\n      }\n    ]\n  };\n\n  activated = false;\n  deactivated = false;\n\n  async activate(api: PluginAPI, context: PluginContext): Promise<void> {\n    this.activated = true;\n  }\n\n  async deactivate(api: PluginAPI, context: PluginContext): Promise<void> {\n    this.deactivated = true;\n  }\n\n  get commands() {\n    return [\n      {\n        id: 'test-command',\n        title: 'Test Command',\n        description: 'Test command',\n        execute: async (context: PluginContext, args?: any[]) => {\n          return 'test-result';\n        }\n      }\n    ];\n  }\n}\n\ndescribe('PluginManager', () => {\n  let pluginManager: PluginManager;\n  let mockExtensionContext: vscode.ExtensionContext;\n\n  beforeEach(() => {\n    mockExtensionContext = {\n      subscriptions: [],\n      extensionPath: '/test/path',\n      globalState: {\n        get: jest.fn().mockReturnValue({}),\n        update: jest.fn(),\n        keys: jest.fn().mockReturnValue([])\n      }\n    } as any;\n\n    pluginManager = new PluginManager(mockExtensionContext, '/test/workspace');\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Plugin Registration', () => {\n    it('should register a plugin successfully', async () => {\n      const testPlugin = new TestPlugin();\n      \n      await pluginManager.register(testPlugin);\n      \n      const registeredPlugin = pluginManager.get('test-plugin');\n      expect(registeredPlugin).toBe(testPlugin);\n      expect(testPlugin.activated).toBe(true);\n    });\n\n    it('should throw error when registering plugin with duplicate ID', async () => {\n      const testPlugin1 = new TestPlugin();\n      const testPlugin2 = new TestPlugin();\n      \n      await pluginManager.register(testPlugin1);\n      \n      await expect(pluginManager.register(testPlugin2)).rejects.toThrow(\n        'Plugin with ID \\'test-plugin\\' is already registered'\n      );\n    });\n\n    it('should validate plugin before registration', async () => {\n      const invalidPlugin = {\n        metadata: {\n          id: '',\n          name: '',\n          version: '',\n          description: '',\n          author: '',\n          license: '',\n          enabled: true,\n          capabilities: []\n        },\n        activate: jest.fn(),\n        deactivate: jest.fn()\n      } as Plugin;\n      \n      await expect(pluginManager.register(invalidPlugin)).rejects.toThrow();\n    });\n  });\n\n  describe('Plugin Lifecycle', () => {\n    it('should enable and disable plugins', async () => {\n      const testPlugin = new TestPlugin();\n      await pluginManager.register(testPlugin);\n      \n      // Plugin should be enabled by default\n      expect(pluginManager.isEnabled('test-plugin')).toBe(true);\n      \n      // Disable plugin\n      await pluginManager.disable('test-plugin');\n      expect(pluginManager.isEnabled('test-plugin')).toBe(false);\n      expect(testPlugin.deactivated).toBe(true);\n      \n      // Re-enable plugin\n      testPlugin.activated = false;\n      await pluginManager.enable('test-plugin');\n      expect(pluginManager.isEnabled('test-plugin')).toBe(true);\n      expect(testPlugin.activated).toBe(true);\n    });\n\n    it('should unregister plugins', async () => {\n      const testPlugin = new TestPlugin();\n      await pluginManager.register(testPlugin);\n      \n      expect(pluginManager.get('test-plugin')).toBe(testPlugin);\n      \n      await pluginManager.unregister('test-plugin');\n      \n      expect(pluginManager.get('test-plugin')).toBeUndefined();\n      expect(testPlugin.deactivated).toBe(true);\n    });\n  });\n\n  describe('Plugin Discovery', () => {\n    it('should get all registered plugins', async () => {\n      const testPlugin1 = new TestPlugin();\n      const testPlugin2 = new TestPlugin();\n      testPlugin2.metadata.id = 'test-plugin-2';\n      \n      await pluginManager.register(testPlugin1);\n      await pluginManager.register(testPlugin2);\n      \n      const allPlugins = pluginManager.getAll();\n      expect(allPlugins).toHaveLength(5); // 2 test plugins + 3 built-in plugins\n      expect(allPlugins.find(p => p.metadata.id === 'test-plugin')).toBe(testPlugin1);\n      expect(allPlugins.find(p => p.metadata.id === 'test-plugin-2')).toBe(testPlugin2);\n    });\n\n    it('should get plugins by capability', async () => {\n      const testPlugin = new TestPlugin();\n      await pluginManager.register(testPlugin);\n      \n      const commandPlugins = pluginManager.getByCapability('command');\n      expect(commandPlugins.length).toBeGreaterThan(0);\n      expect(commandPlugins.find(p => p.metadata.id === 'test-plugin')).toBe(testPlugin);\n    });\n  });\n\n  describe('Plugin Commands', () => {\n    it('should execute plugin commands', async () => {\n      const testPlugin = new TestPlugin();\n      await pluginManager.register(testPlugin);\n      \n      const result = await pluginManager.executePluginCommand('test-plugin', 'test-command');\n      expect(result).toBe('test-result');\n    });\n\n    it('should throw error for non-existent plugin', async () => {\n      await expect(\n        pluginManager.executePluginCommand('non-existent', 'test-command')\n      ).rejects.toThrow('Plugin \\'non-existent\\' not found or not enabled');\n    });\n\n    it('should throw error for non-existent command', async () => {\n      const testPlugin = new TestPlugin();\n      await pluginManager.register(testPlugin);\n      \n      await expect(\n        pluginManager.executePluginCommand('test-plugin', 'non-existent-command')\n      ).rejects.toThrow('Command \\'non-existent-command\\' not found in plugin \\'test-plugin\\'');\n    });\n  });\n\n  describe('Plugin Context', () => {\n    it('should refresh plugin context', async () => {\n      const testPlugin = new TestPlugin();\n      await pluginManager.register(testPlugin);\n      \n      await pluginManager.refreshPluginContext();\n      \n      // Context should be updated\n      expect(pluginManager).toBeDefined();\n    });\n  });\n\n  describe('Development Utilities', () => {\n    it('should create development utils', () => {\n      const devUtils = pluginManager.createDevUtils('test-plugin');\n      \n      expect(devUtils).toBeDefined();\n      expect(devUtils.createLogger).toBeDefined();\n      expect(devUtils.createStorage).toBeDefined();\n      expect(devUtils.createScheduler).toBeDefined();\n    });\n\n    it('should create logger', () => {\n      const devUtils = pluginManager.createDevUtils('test-plugin');\n      const logger = devUtils.createLogger('test-plugin');\n      \n      expect(logger).toBeDefined();\n      expect(logger.info).toBeDefined();\n      expect(logger.warn).toBeDefined();\n      expect(logger.error).toBeDefined();\n      expect(logger.debug).toBeDefined();\n      \n      // Test logging (should not throw)\n      logger.info('Test message');\n      logger.warn('Test warning');\n      logger.error('Test error');\n      logger.debug('Test debug');\n    });\n\n    it('should create storage', () => {\n      const devUtils = pluginManager.createDevUtils('test-plugin');\n      const storage = devUtils.createStorage('test-plugin');\n      \n      expect(storage).toBeDefined();\n      expect(storage.get).toBeDefined();\n      expect(storage.set).toBeDefined();\n      expect(storage.delete).toBeDefined();\n      expect(storage.clear).toBeDefined();\n      expect(storage.keys).toBeDefined();\n    });\n\n    it('should create scheduler', () => {\n      const devUtils = pluginManager.createDevUtils('test-plugin');\n      const scheduler = devUtils.createScheduler('test-plugin');\n      \n      expect(scheduler).toBeDefined();\n      expect(scheduler.schedule).toBeDefined();\n      expect(scheduler.cancel).toBeDefined();\n      expect(scheduler.cancelAll).toBeDefined();\n    });\n  });\n});\n"],"version":3}