{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/fileBatchManager.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/fileBatchManager.ts"],"sourcesContent":["import { EnhancedFileManager, FileBatch, FileMetadata } from './enhancedFileManager';\nimport { OutputType } from '../types';\nimport * as vscode from 'vscode';\n\nexport interface BatchOperationResult {\n    success: boolean;\n    batchId: string;\n    filesProcessed: number;\n    errors: string[];\n    duration: number;\n    outputPaths: Record<OutputType, string>;\n}\n\nexport interface BatchOperationOptions {\n    createBackup?: boolean;\n    validateContent?: boolean;\n    notifyUser?: boolean;\n    trackHistory?: boolean;\n    maxRetries?: number;\n}\n\nexport class FileBatchManager {\n    private fileManager: EnhancedFileManager;\n    private activeBatches: Map<string, FileBatch> = new Map();\n\n    constructor() {\n        this.fileManager = new EnhancedFileManager();\n    }\n\n    /**\n     * Execute a batch file operation for a command\n     */\n    async executeBatch(\n        command: string,\n        files: Array<{ type: OutputType; content: string }>,\n        options: BatchOperationOptions = {}\n    ): Promise<BatchOperationResult> {\n        const startTime = Date.now();\n        const batchId = `${command}-${Date.now()}`;\n        const errors: string[] = [];\n        const outputPaths: Record<OutputType, string> = {} as Record<OutputType, string>;\n        let filesProcessed = 0;\n\n        try {\n            // Create backup if requested\n            if (options.createBackup) {\n                try {\n                    await this.fileManager.createBackup(`${command}-auto`);\n                } catch (error) {\n                    errors.push(`Backup failed: ${error}`);\n                }\n            }\n\n            // Process each file\n            for (const file of files) {\n                let retries = options.maxRetries || 0;\n                let fileSuccess = false;\n\n                while (!fileSuccess && retries >= 0) {\n                    try {\n                        if (options.validateContent) {\n                            const filePath = await this.fileManager.saveOutputWithVersioning(\n                                file.type,\n                                file.content,\n                                { validate: true }\n                            );\n                            outputPaths[file.type] = filePath;\n                        } else {\n                            const filePath = await this.fileManager.saveOutput(file.type, file.content);\n                            outputPaths[file.type] = filePath;\n                        }\n                        \n                        filesProcessed++;\n                        fileSuccess = true;\n                    } catch (error) {\n                        retries--;\n                        if (retries < 0) {\n                            errors.push(`Failed to save ${file.type}: ${error}`);\n                        } else {\n                            // Wait before retry\n                            await new Promise(resolve => setTimeout(resolve, 100));\n                        }\n                    }\n                }\n            }\n\n            // Create file batch record if tracking enabled\n            if (options.trackHistory) {\n                const batch = await this.fileManager.createFileBatch(\n                    command,\n                    files.map(f => f.type),\n                    errors.length === 0\n                );\n                this.activeBatches.set(batchId, batch);\n            }\n\n            // Notify user if requested\n            if (options.notifyUser && errors.length === 0) {\n                vscode.window.showInformationMessage(\n                    `${command}: Successfully processed ${filesProcessed} files`\n                );\n            } else if (options.notifyUser && errors.length > 0) {\n                vscode.window.showWarningMessage(\n                    `${command}: Processed ${filesProcessed} files with ${errors.length} errors`\n                );\n            }\n\n            const duration = Date.now() - startTime;\n            return {\n                success: errors.length === 0,\n                batchId,\n                filesProcessed,\n                errors,\n                duration,\n                outputPaths\n            };\n\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            return {\n                success: false,\n                batchId,\n                filesProcessed,\n                errors: [...errors, `Batch operation failed: ${error}`],\n                duration,\n                outputPaths\n            };\n        }\n    }\n\n    /**\n     * Prepare output files for a command workflow\n     */\n    async prepareCommandOutputs(command: string, types: OutputType[]): Promise<Record<OutputType, string>> {\n        const outputPaths: Record<OutputType, string> = {} as Record<OutputType, string>;\n        \n        // Ensure output directory exists\n        this.fileManager.ensureOutputDirectory();\n        \n        // Get file paths for each type\n        for (const type of types) {\n            outputPaths[type] = this.fileManager.getFilePath(type);\n        }\n        \n        return outputPaths;\n    }\n\n    /**\n     * Validate command outputs after execution\n     */\n    async validateCommandOutputs(\n        command: string,\n        expectedTypes: OutputType[]\n    ): Promise<{ valid: OutputType[]; missing: OutputType[]; corrupt: OutputType[] }> {\n        const valid: OutputType[] = [];\n        const missing: OutputType[] = [];\n        const corrupt: OutputType[] = [];\n\n        for (const type of expectedTypes) {\n            if (!this.fileManager.fileExists(type)) {\n                missing.push(type);\n                continue;\n            }\n\n            try {\n                const content = await this.fileManager.getFileContent(type);\n                if (!content || content.trim().length === 0) {\n                    corrupt.push(type);\n                } else if (this.isContentValid(type, content)) {\n                    valid.push(type);\n                } else {\n                    corrupt.push(type);\n                }\n            } catch (error) {\n                corrupt.push(type);\n            }\n        }\n\n        return { valid, missing, corrupt };\n    }\n\n    /**\n     * Create a summary report of file operations\n     */\n    async createOperationSummary(\n        command: string,\n        result: BatchOperationResult,\n        additionalContext?: Record<string, any>\n    ): Promise<string> {\n        const timestamp = new Date().toISOString();\n        const fileStats = await Promise.all(\n            Object.entries(result.outputPaths).map(async ([type, path]) => {\n                const stats = await this.fileManager.getFileStats(path);\n                return `${type}: ${stats.size} (${stats.lines} lines)`;\n            })\n        );\n\n        let summary = `\n=================================================================\n📊 FILE OPERATION SUMMARY - ${command.toUpperCase()}\n=================================================================\n\n🕐 Timestamp: ${timestamp}\n⏱️  Duration: ${result.duration}ms\n📁 Batch ID: ${result.batchId}\n✅ Success: ${result.success ? 'Yes' : 'No'}\n📄 Files Processed: ${result.filesProcessed}\n❌ Errors: ${result.errors.length}\n\n=================================================================\n📋 FILE DETAILS\n=================================================================\n\n${fileStats.join('\\n')}\n\n`;\n\n        if (result.errors.length > 0) {\n            summary += `\n=================================================================\n⚠️  ERRORS ENCOUNTERED\n=================================================================\n\n${result.errors.map((error, i) => `${i + 1}. ${error}`).join('\\n')}\n\n`;\n        }\n\n        if (additionalContext) {\n            summary += `\n=================================================================\n📝 ADDITIONAL CONTEXT\n=================================================================\n\n${Object.entries(additionalContext)\n    .map(([key, value]) => `${key}: ${JSON.stringify(value, null, 2)}`)\n    .join('\\n')}\n\n`;\n        }\n\n        summary += `\n=================================================================\n🎯 RECOMMENDATIONS\n=================================================================\n\n`;\n\n        if (result.success) {\n            summary += `✅ All files processed successfully\n• Files are ready for AI analysis\n• Consider creating a backup before major changes\n• Review file content for accuracy\n`;\n        } else {\n            summary += `⚠️  Some operations failed\n• Review error messages above\n• Check file permissions and disk space\n• Consider retrying failed operations\n• Verify output directory accessibility\n`;\n        }\n\n        return summary;\n    }\n\n    /**\n     * Get file manager instance for direct access\n     */\n    getFileManager(): EnhancedFileManager {\n        return this.fileManager;\n    }\n\n    /**\n     * Monitor file changes for active batches\n     */\n    monitorBatchFiles(\n        batchId: string,\n        callback: (type: OutputType, path: string, change: 'created' | 'modified' | 'deleted') => void\n    ): vscode.Disposable {\n        const batch = this.activeBatches.get(batchId);\n        if (!batch) {\n            throw new Error(`Batch ${batchId} not found`);\n        }\n\n        return this.fileManager.watchOutputFiles((event) => {\n            // Only notify about files in this batch\n            const batchTypes = batch.files.map(f => f.type);\n            if (batchTypes.includes(event.file)) {\n                callback(event.file, event.path, event.type);\n            }\n        });\n    }\n\n    /**\n     * Get status of all active batches\n     */\n    getActiveBatches(): Map<string, FileBatch> {\n        return new Map(this.activeBatches);\n    }\n\n    /**\n     * Get specific batch by ID\n     */\n    getBatch(batchId: string): FileBatch | undefined {\n        return this.activeBatches.get(batchId);\n    }\n\n    /**\n     * Clean up completed batches\n     */\n    cleanupCompletedBatches(maxAge: number = 60 * 60 * 1000): void {\n        const now = Date.now();\n        for (const [batchId, batch] of this.activeBatches) {\n            const age = now - batch.timestamp.getTime();\n            if (age > maxAge) {\n                this.activeBatches.delete(batchId);\n            }\n        }\n    }\n\n    /**\n     * Validate content based on file type\n     */\n    private isContentValid(type: OutputType, content: string): boolean {\n        switch (type) {\n            case 'jest-output':\n                return content.includes('Test') || content.includes('PASS') || \n                       content.includes('FAIL') || content.includes('SKIP');\n            \n            case 'diff':\n                return content.trim() === '' || content.includes('diff --git') || \n                       content.includes('@@') || content.includes('No changes detected');\n            \n            case 'ai-debug-context':\n                return content.includes('AI DEBUG CONTEXT') || content.length > 100;\n            \n            case 'pr-description':\n                return content.includes('PR DESCRIPTION') || content.includes('Problem') ||\n                       content.includes('Solution');\n            \n            default:\n                return content.length > 0;\n        }\n    }\n}"],"version":3}