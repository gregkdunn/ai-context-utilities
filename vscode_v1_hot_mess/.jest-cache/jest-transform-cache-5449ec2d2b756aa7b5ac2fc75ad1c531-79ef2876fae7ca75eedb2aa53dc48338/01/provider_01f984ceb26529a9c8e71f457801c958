99b384bafd7cb3450d8b6e7c06578168
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebviewProvider = void 0;
const vscode = __importStar(require("vscode"));
class WebviewProvider {
    _extensionUri;
    _projectDetector;
    _commandRunner;
    _fileManager;
    _statusTracker;
    static viewType = 'aiDebugUtilities';
    _view;
    _disposables = [];
    constructor(_extensionUri, _projectDetector, _commandRunner, _fileManager, _statusTracker) {
        this._extensionUri = _extensionUri;
        this._projectDetector = _projectDetector;
        this._commandRunner = _commandRunner;
        this._fileManager = _fileManager;
        this._statusTracker = _statusTracker;
    }
    resolveWebviewView(webviewView, context, _token) {
        this._view = webviewView;
        webviewView.webview.options = {
            enableScripts: true,
            localResourceRoots: [this._extensionUri]
        };
        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);
        webviewView.webview.onDidReceiveMessage(async (data) => {
            // FIX: Properly handle async message processing
            try {
                await this._handleMessage(data);
            }
            catch (error) {
                console.error('Error handling webview message:', error);
                this._postMessage({
                    type: 'error',
                    data: { error: error.message }
                });
            }
        }, undefined, this._disposables);
        // Set up file watcher
        try {
            this._fileManager.watchFiles((filePath, eventType) => {
                this._postMessage({ type: 'fileChanged', data: { filePath, eventType } });
            });
        }
        catch (error) {
            console.error('Error setting up file watcher:', error);
        }
    }
    // FIX: Make _handleMessage async and add proper error handling
    async _handleMessage(data) {
        try {
            switch (data.command) {
                case 'runCommand':
                    await this._handleRunCommand(data.data);
                    break;
                case 'getProjects':
                    await this._handleGetProjects();
                    break;
                case 'openFile':
                    await this._handleOpenFile(data.data);
                    break;
                case 'clearOutput':
                    await this._handleClearOutput();
                    break;
                default:
                    console.warn('Unknown message command:', data.command);
            }
        }
        catch (error) {
            console.error(`Error handling command ${data.command}:`, error);
            this._postMessage({
                type: 'commandError',
                data: {
                    command: data.command,
                    error: error.message
                }
            });
        }
    }
    async _handleRunCommand(data) {
        const { action, project, options } = data;
        try {
            let result;
            switch (action) {
                case 'aiDebug':
                    result = await this._commandRunner.runAiDebug(project, options);
                    break;
                case 'nxTest':
                    result = await this._commandRunner.runNxTest(project, options);
                    break;
                case 'gitDiff':
                    result = await this._commandRunner.runGitDiff(options);
                    break;
                case 'prepareToPush':
                    result = await this._commandRunner.runPrepareToPush(project, options);
                    break;
                default:
                    throw new Error(`Unknown action: ${action}`);
            }
            this._postMessage({
                type: 'commandResult',
                data: { action, result }
            });
        }
        catch (error) {
            console.error(`Error executing command ${action}:`, error);
            this._postMessage({
                type: 'commandError',
                data: { action, error: error.message }
            });
        }
    }
    async _handleGetProjects() {
        try {
            const projects = await this._projectDetector.getProjects();
            this._postMessage({
                type: 'projects',
                data: { projects }
            });
        }
        catch (error) {
            console.error('Error getting projects:', error);
            this._postMessage({
                type: 'error',
                data: { error: error.message }
            });
        }
    }
    async _handleOpenFile(data) {
        const { filePath } = data;
        try {
            await this._fileManager.openFile(filePath);
            this._postMessage({
                type: 'fileOpened',
                data: { filePath }
            });
        }
        catch (error) {
            console.error(`Error opening file ${filePath}:`, error);
            this._postMessage({
                type: 'error',
                data: { error: error.message }
            });
        }
    }
    // FIX: Make _handleClearOutput async for consistency
    async _handleClearOutput() {
        try {
            // Clear output in status tracker or file manager
            this._statusTracker.clearHistory();
            this._postMessage({
                type: 'outputCleared',
                data: {}
            });
        }
        catch (error) {
            console.error('Error clearing output:', error);
            this._postMessage({
                type: 'error',
                data: { error: error.message }
            });
        }
    }
    // Public methods for external use
    show() {
        if (this._view) {
            try {
                this._view.show();
            }
            catch (error) {
                console.error('Error showing webview:', error);
            }
        }
    }
    // FIX: Ensure runCommand is properly async
    async runCommand(action, data) {
        try {
            await this._handleRunCommand({ action, ...data });
        }
        catch (error) {
            console.error(`Error running command ${action}:`, error);
            throw error;
        }
    }
    _postMessage(message) {
        if (this._view) {
            try {
                this._view.webview.postMessage(message);
            }
            catch (error) {
                console.error('Error posting message to webview:', error);
            }
        }
    }
    _getHtmlForWebview(webview) {
        const scriptUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'out', 'webview', 'main.js'));
        const styleUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'out', 'webview', 'styles.css'));
        return `<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link href="${styleUri}" rel="stylesheet">
            <title>AI Debug Utilities</title>
        </head>
        <body>
            <div id="root"></div>
            <script src="${scriptUri}"></script>
        </body>
        </html>`;
    }
    setupStreamingListeners() {
        // Method for streaming integration - placeholder implementation
        // This method would set up listeners for streaming events
    }
    dispose() {
        this._disposables.forEach(d => d.dispose());
    }
}
exports.WebviewProvider = WebviewProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,