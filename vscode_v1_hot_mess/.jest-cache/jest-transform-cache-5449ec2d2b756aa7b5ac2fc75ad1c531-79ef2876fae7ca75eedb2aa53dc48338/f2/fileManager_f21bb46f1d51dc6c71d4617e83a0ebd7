c1a32eae3acbb77cbb7d199207da09b6
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileManager = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const vscode = __importStar(require("vscode"));
class FileManager {
    outputChannel;
    workspacePath;
    outputDirectory;
    watchers = [];
    constructor(outputChannel) {
        this.outputChannel = outputChannel;
        this.workspacePath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
        this.outputDirectory = path.join(this.workspacePath, '.ai-debug-output');
        this.ensureOutputDirectory();
    }
    // Output directory management
    getOutputDirectory() {
        return this.outputDirectory;
    }
    ensureOutputDirectory() {
        if (!fs.existsSync(this.outputDirectory)) {
            fs.mkdirSync(this.outputDirectory, { recursive: true });
        }
    }
    // Initialize output files
    async initializeOutputFiles(types) {
        const outputFiles = {};
        for (const type of types) {
            const filePath = this.getOutputFilePath(type);
            outputFiles[type] = filePath;
            // Create empty file if it doesn't exist
            if (!fs.existsSync(filePath)) {
                await fs.promises.writeFile(filePath, '', 'utf8');
            }
        }
        return outputFiles;
    }
    // Get output file path
    getOutputFilePath(fileName) {
        if (!fileName.endsWith('.txt')) {
            fileName += '.txt';
        }
        return path.join(this.outputDirectory, fileName);
    }
    // Save output to file
    async saveOutput(type, content) {
        try {
            const filePath = this.getOutputFilePath(type);
            await fs.promises.writeFile(filePath, content, 'utf8');
            this.outputChannel.appendLine(`Saved ${type} output to: ${filePath}`);
            return filePath;
        }
        catch (error) {
            const message = `Failed to save ${type} output: ${error}`;
            this.outputChannel.appendLine(message);
            throw new Error(message);
        }
    }
    // Get file content
    async getFileContent(type) {
        try {
            const filePath = this.getOutputFilePath(type);
            if (!fs.existsSync(filePath)) {
                return '';
            }
            return await fs.promises.readFile(filePath, 'utf8');
        }
        catch (error) {
            this.outputChannel.appendLine(`Error reading ${type} file: ${error}`);
            return '';
        }
    }
    // Get file path
    getFilePath(type) {
        return this.getOutputFilePath(type);
    }
    // Get file modification time
    getFileModTime(type) {
        try {
            const filePath = this.getOutputFilePath(type);
            if (!fs.existsSync(filePath)) {
                return null;
            }
            const stats = fs.statSync(filePath);
            return stats.mtime;
        }
        catch (error) {
            this.outputChannel.appendLine(`Error getting mod time for ${type}: ${error}`);
            return null;
        }
    }
    // Get file stats
    async getFileStats(filePath) {
        try {
            const stats = await fs.promises.stat(filePath);
            return {
                size: stats.size,
                created: stats.birthtime,
                modified: stats.mtime,
                accessed: stats.atime
            };
        }
        catch (error) {
            this.outputChannel.appendLine(`Error getting file stats for ${filePath}: ${error}`);
            return null;
        }
    }
    // Get all output files
    getAllOutputFiles() {
        const files = {};
        try {
            const outputFiles = fs.readdirSync(this.outputDirectory);
            for (const file of outputFiles) {
                if (file.endsWith('.txt')) {
                    const name = file.replace('.txt', '');
                    files[name] = path.join(this.outputDirectory, file);
                }
            }
        }
        catch (error) {
            this.outputChannel.appendLine(`Error reading output directory: ${error}`);
        }
        return files;
    }
    // Cleanup old files
    async cleanupOldFiles(maxAge = 7 * 24 * 60 * 60 * 1000) {
        try {
            const files = fs.readdirSync(this.outputDirectory);
            const now = Date.now();
            for (const file of files) {
                const filePath = path.join(this.outputDirectory, file);
                const stats = fs.statSync(filePath);
                if (now - stats.mtime.getTime() > maxAge) {
                    await fs.promises.unlink(filePath);
                    this.outputChannel.appendLine(`Cleaned up old file: ${file}`);
                }
            }
        }
        catch (error) {
            this.outputChannel.appendLine(`Error cleaning up old files: ${error}`);
        }
    }
    // Copy to clipboard
    async copyToClipboard(type) {
        try {
            const content = await this.getFileContent(type);
            await vscode.env.clipboard.writeText(content);
            vscode.window.showInformationMessage(`${type} content copied to clipboard`);
        }
        catch (error) {
            vscode.window.showErrorMessage(`Failed to copy ${type} to clipboard: ${error}`);
        }
    }
    // Open file in editor
    async openFile(filePath) {
        try {
            const document = await vscode.workspace.openTextDocument(filePath);
            await vscode.window.showTextDocument(document);
        }
        catch (error) {
            vscode.window.showErrorMessage(`Failed to open file: ${error}`);
        }
    }
    // Watch files for changes
    watchFiles(callback) {
        const watcher = fs.watch(this.outputDirectory, (eventType, filename) => {
            if (filename) {
                const filePath = path.join(this.outputDirectory, filename);
                callback(filePath, eventType);
            }
        });
        this.watchers.push(watcher);
        return {
            dispose: () => {
                const index = this.watchers.indexOf(watcher);
                if (index > -1) {
                    this.watchers.splice(index, 1);
                }
                watcher.close();
            }
        };
    }
    // Basic file operations
    async readFile(filePath) {
        try {
            const fullPath = path.resolve(this.workspacePath, filePath);
            const content = await fs.promises.readFile(fullPath, 'utf8');
            return {
                success: true,
                filePath: fullPath,
                content
            };
        }
        catch (error) {
            return {
                success: false,
                filePath,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    async writeFile(filePath, content) {
        try {
            const fullPath = path.resolve(this.workspacePath, filePath);
            await fs.promises.mkdir(path.dirname(fullPath), { recursive: true });
            await fs.promises.writeFile(fullPath, content, 'utf8');
            this.outputChannel.appendLine(`File written: ${fullPath}`);
            return {
                success: true,
                filePath: fullPath
            };
        }
        catch (error) {
            return {
                success: false,
                filePath,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    async ensureDirectoryExists(dirPath) {
        const fullPath = path.resolve(this.workspacePath, dirPath);
        await fs.promises.mkdir(fullPath, { recursive: true });
    }
    async fileExists(filePath) {
        try {
            const fullPath = path.resolve(this.workspacePath, filePath);
            await fs.promises.access(fullPath);
            return true;
        }
        catch {
            return false;
        }
    }
    async deleteFile(filePath) {
        try {
            const fullPath = path.resolve(this.workspacePath, filePath);
            await fs.promises.unlink(fullPath);
            return {
                success: true,
                filePath: fullPath
            };
        }
        catch (error) {
            return {
                success: false,
                filePath,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    async copyFile(sourcePath, destPath) {
        try {
            const fullSourcePath = path.resolve(this.workspacePath, sourcePath);
            const fullDestPath = path.resolve(this.workspacePath, destPath);
            await fs.promises.mkdir(path.dirname(fullDestPath), { recursive: true });
            await fs.promises.copyFile(fullSourcePath, fullDestPath);
            return {
                success: true,
                filePath: fullDestPath
            };
        }
        catch (error) {
            return {
                success: false,
                filePath: destPath,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
    async listFiles(dirPath) {
        try {
            const fullPath = path.resolve(this.workspacePath, dirPath);
            const files = await fs.promises.readdir(fullPath);
            return files.map(file => path.join(dirPath, file));
        }
        catch (error) {
            this.outputChannel.appendLine(`Error listing files in ${dirPath}: ${error}`);
            return [];
        }
    }
    getWorkspacePath() {
        return this.workspacePath;
    }
    getRelativePath(absolutePath) {
        return path.relative(this.workspacePath, absolutePath);
    }
    getAbsolutePath(relativePath) {
        return path.resolve(this.workspacePath, relativePath);
    }
    dispose() {
        this.watchers.forEach(watcher => watcher.close());
        this.watchers = [];
    }
}
exports.FileManager = FileManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,