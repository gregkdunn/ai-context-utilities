{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/nx/NxAffectedManager.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/nx/NxAffectedManager.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { spawn } from 'child_process';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport interface NxProject {\n    name: string;\n    root: string;\n    targets: { [key: string]: any };\n    type: 'application' | 'library';\n}\n\nexport interface AffectedCommandResult {\n    projects: string[];\n    output: string;\n    success: boolean;\n    errors?: string[];\n}\n\nexport class NxAffectedManager {\n    private workspaceRoot: string;\n    private nxConfig: any;\n    private affectedCache: Map<string, string[]> = new Map();\n    private fileWatcher: vscode.FileSystemWatcher | null = null;\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\n        this.initialize();\n    }\n\n    private async initialize(): Promise<void> {\n        try {\n            await this.loadNxConfiguration();\n            this.setupFileWatcher();\n        } catch (error) {\n            console.error('Failed to initialize NX Affected Manager:', error);\n        }\n    }\n\n    private async loadNxConfiguration(): Promise<void> {\n        const nxConfigPath = path.join(this.workspaceRoot, 'nx.json');\n        const angularConfigPath = path.join(this.workspaceRoot, 'angular.json');\n\n        try {\n            if (fs.existsSync(nxConfigPath)) {\n                const configContent = fs.readFileSync(nxConfigPath, 'utf-8');\n                this.nxConfig = JSON.parse(configContent);\n            } else if (fs.existsSync(angularConfigPath)) {\n                const configContent = fs.readFileSync(angularConfigPath, 'utf-8');\n                this.nxConfig = JSON.parse(configContent);\n            } else {\n                throw new Error('No NX configuration found');\n            }\n        } catch (error) {\n            throw new Error(`Failed to load NX configuration: ${(error as Error).message}`);\n        }\n    }\n\n    private setupFileWatcher(): void {\n        if (this.fileWatcher) {\n            this.fileWatcher.dispose();\n        }\n\n        this.fileWatcher = vscode.workspace.createFileSystemWatcher('**/*');\n        \n        this.fileWatcher.onDidChange(() => this.clearAffectedCache());\n        this.fileWatcher.onDidCreate(() => this.clearAffectedCache());\n        this.fileWatcher.onDidDelete(() => this.clearAffectedCache());\n        \n        this.context.subscriptions.push(this.fileWatcher);\n    }\n\n    private clearAffectedCache(): void {\n        this.affectedCache.clear();\n    }\n\n    async getAffectedProjects(base: string = 'main'): Promise<string[]> {\n        const headCommit = await this.getHeadCommit();\n        const cacheKey = `${base}-${headCommit}`;\n\n        if (this.affectedCache.has(cacheKey)) {\n            return this.affectedCache.get(cacheKey)!;\n        }\n\n        try {\n            const projects = await this.executeNxCommand(['show', 'projects', '--affected', '--base', base]);\n            this.affectedCache.set(cacheKey, projects);\n            return projects;\n        } catch (error) {\n            console.error('Failed to get affected projects:', error);\n            return [];\n        }\n    }\n\n    async getAllProjects(): Promise<NxProject[]> {\n        try {\n            const projectNames = await this.executeNxCommand(['show', 'projects']);\n            const projects: NxProject[] = [];\n\n            for (const projectName of projectNames) {\n                try {\n                    const projectConfig = await this.getProjectConfiguration(projectName);\n                    projects.push(projectConfig);\n                } catch (error) {\n                    console.warn(`Failed to get configuration for project ${projectName}:`, error);\n                }\n            }\n\n            return projects;\n        } catch (error) {\n            console.error('Failed to get all projects:', error);\n            return [];\n        }\n    }\n\n    async getProjectConfiguration(projectName: string): Promise<NxProject> {\n        try {\n            const configOutput = await this.executeNxCommandRaw(['show', 'project', projectName, '--json']);\n            const config = JSON.parse(configOutput);\n\n            return {\n                name: projectName,\n                root: config.root || '',\n                targets: config.targets || {},\n                type: this.inferProjectType(config)\n            };\n        } catch (error) {\n            throw new Error(`Failed to get project configuration for ${projectName}: ${(error as Error).message}`);\n        }\n    }\n\n    private inferProjectType(config: any): 'application' | 'library' {\n        if (config.targets && config.targets.serve) {\n            return 'application';\n        }\n        return 'library';\n    }\n\n    async runAffectedCommand(target: string, base: string = 'main', options: string[] = []): Promise<AffectedCommandResult> {\n        try {\n            const projects = await this.getAffectedProjects(base);\n            \n            if (projects.length === 0) {\n                return {\n                    projects: [],\n                    output: 'No affected projects found',\n                    success: true\n                };\n            }\n\n            const args = ['run-many', '--target', target, '--projects', projects.join(','), ...options];\n            const output = await this.executeNxCommandRaw(args);\n\n            return {\n                projects,\n                output,\n                success: true\n            };\n        } catch (error) {\n            return {\n                projects: [],\n                output: (error as Error).message,\n                success: false,\n                errors: [(error as Error).message]\n            };\n        }\n    }\n\n    async runAffectedTest(base: string = 'main', parallel: boolean = true): Promise<AffectedCommandResult> {\n        const options = parallel ? ['--parallel'] : [];\n        return this.runAffectedCommand('test', base, options);\n    }\n\n    async runAffectedLint(base: string = 'main', parallel: boolean = true): Promise<AffectedCommandResult> {\n        const options = parallel ? ['--parallel'] : [];\n        return this.runAffectedCommand('lint', base, options);\n    }\n\n    async runAffectedBuild(base: string = 'main', parallel: boolean = true): Promise<AffectedCommandResult> {\n        const options = parallel ? ['--parallel'] : [];\n        return this.runAffectedCommand('build', base, options);\n    }\n\n    private async executeNxCommand(args: string[]): Promise<string[]> {\n        const output = await this.executeNxCommandRaw(args);\n        return output.trim().split('\\n').filter(line => line.length > 0);\n    }\n\n    private async executeNxCommandRaw(args: string[]): Promise<string> {\n        return new Promise((resolve, reject) => {\n            const child = spawn('npx', ['nx', ...args], {\n                cwd: this.workspaceRoot,\n                stdio: 'pipe',\n                shell: process.platform === 'win32'\n            });\n\n            let output = '';\n            let errorOutput = '';\n\n            child.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n\n            child.stderr.on('data', (data) => {\n                errorOutput += data.toString();\n            });\n\n            child.on('close', (code) => {\n                if (code === 0) {\n                    resolve(output);\n                } else {\n                    reject(new Error(`NX command failed with code ${code}: ${errorOutput}`));\n                }\n            });\n\n            child.on('error', (error) => {\n                reject(new Error(`Failed to execute NX command: ${error.message}`));\n            });\n\n            // Set timeout for long-running commands\n            setTimeout(() => {\n                child.kill();\n                reject(new Error('NX command timeout'));\n            }, 120000); // 2 minutes timeout\n        });\n    }\n\n    private async getHeadCommit(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            const child = spawn('git', ['rev-parse', 'HEAD'], {\n                cwd: this.workspaceRoot,\n                stdio: 'pipe'\n            });\n\n            let output = '';\n            child.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n\n            child.on('close', (code) => {\n                if (code === 0) {\n                    resolve(output.trim());\n                } else {\n                    resolve('unknown');\n                }\n            });\n\n            child.on('error', () => {\n                resolve('unknown');\n            });\n        });\n    }\n\n    async isNxWorkspace(): Promise<boolean> {\n        const nxConfig = path.join(this.workspaceRoot, 'nx.json');\n        const angularConfig = path.join(this.workspaceRoot, 'angular.json');\n        return fs.existsSync(nxConfig) || fs.existsSync(angularConfig);\n    }\n\n    dispose(): void {\n        if (this.fileWatcher) {\n            this.fileWatcher.dispose();\n        }\n        this.clearAffectedCache();\n    }\n}\n"],"version":3}