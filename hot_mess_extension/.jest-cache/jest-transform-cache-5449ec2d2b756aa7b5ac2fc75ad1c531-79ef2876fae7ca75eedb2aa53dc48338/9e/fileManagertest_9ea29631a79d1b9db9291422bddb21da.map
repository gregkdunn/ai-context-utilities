{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/fileManager.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/__tests__/fileManager.test.ts"],"sourcesContent":["import { FileManager } from '../fileManager';\nimport { OutputType } from '../../types';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Mock fs and path modules\njest.mock('fs', () => ({\n  existsSync: jest.fn(),\n  mkdirSync: jest.fn(),\n  readdirSync: jest.fn(),\n  statSync: jest.fn(),\n  watch: jest.fn(),\n  promises: {\n    writeFile: jest.fn(),\n    readFile: jest.fn(),\n    mkdir: jest.fn(),\n    unlink: jest.fn(),\n    stat: jest.fn(),\n    access: jest.fn(),\n    readdir: jest.fn(),\n    copyFile: jest.fn()\n  }\n}));\njest.mock('path');\n\n// Mock vscode module\njest.mock('vscode', () => ({\n  workspace: {\n    workspaceFolders: [\n      { uri: { fsPath: '/test/workspace' } }\n    ],\n    getConfiguration: jest.fn(() => ({\n      get: jest.fn((key: string) => {\n        if (key === 'outputDirectory') {return '.github/instructions/ai_utilities_context';}\n        return undefined;\n      })\n    })),\n    onDidChangeConfiguration: jest.fn(),\n    createFileSystemWatcher: jest.fn(() => ({\n      onDidChange: jest.fn(),\n      onDidCreate: jest.fn(),\n      dispose: jest.fn()\n    })),\n    openTextDocument: jest.fn()\n  },\n  window: {\n    showTextDocument: jest.fn(),\n    showErrorMessage: jest.fn(),\n    showInformationMessage: jest.fn(),\n    showWarningMessage: jest.fn()\n  },\n  env: {\n    clipboard: {\n      writeText: jest.fn()\n    }\n  },\n  Uri: {\n    file: jest.fn((path: string) => ({ fsPath: path }))\n  },\n  RelativePattern: jest.fn()\n}));\n\nconst mockedFs = fs as jest.Mocked<typeof fs>;\nconst mockedPath = path as jest.Mocked<typeof path>;\n\ndescribe('FileManager', () => {\n  let fileManager: FileManager;\n  const mockWorkspaceRoot = '/test/workspace';\n  const mockOutputDir = '/test/workspace/.ai-debug-output';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Setup path mocks\n    mockedPath.join.mockImplementation((...segments) => segments.join('/'));\n    mockedPath.basename.mockImplementation((p) => p.split('/').pop() || '');\n    \n    // Create mock output channel\n    const mockOutputChannel = {\n      appendLine: jest.fn(),\n      show: jest.fn(),\n      hide: jest.fn(),\n      dispose: jest.fn(),\n      name: 'Test Output Channel'\n    } as any;\n    \n    fileManager = new FileManager(mockOutputChannel);\n  });\n\n  describe('constructor', () => {\n    it('should initialize with correct workspace root and output directory', () => {\n      expect(fileManager.getOutputDirectory()).toBe(mockOutputDir);\n    });\n  });\n\n  describe('ensureOutputDirectory', () => {\n    it('should create directory if it does not exist', () => {\n      mockedFs.existsSync.mockReturnValue(false);\n      mockedFs.mkdirSync.mockImplementation(() => undefined);\n\n      fileManager.ensureOutputDirectory();\n\n      expect(mockedFs.mkdirSync).toHaveBeenCalledWith(mockOutputDir, { recursive: true });\n    });\n\n    it('should not create directory if it already exists', () => {\n      // Since constructor calls ensureOutputDirectory, we need to clear the mock\n      jest.clearAllMocks();\n      mockedFs.existsSync.mockReturnValue(true);\n\n      fileManager.ensureOutputDirectory();\n\n      expect(mockedFs.mkdirSync).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('saveOutput', () => {\n    it('should save content to correct file path', async () => {\n      const content = 'test content';\n      const type: OutputType = 'jest-output';\n      \n      (mockedFs.promises.writeFile as jest.Mock).mockResolvedValue(undefined);\n\n      const result = await fileManager.saveOutput(type, content);\n\n      expect(result).toBe('/test/workspace/.ai-debug-output/jest-output.txt');\n      expect(mockedFs.promises.writeFile).toHaveBeenCalledWith(\n        '/test/workspace/.ai-debug-output/jest-output.txt',\n        content,\n        'utf8'\n      );\n    });\n\n    it('should handle file write errors', async () => {\n      const content = 'test content';\n      const type: OutputType = 'jest-output';\n      \n      (mockedFs.promises.writeFile as jest.Mock).mockRejectedValue(new Error('Write error'));\n\n      await expect(fileManager.saveOutput(type, content)).rejects.toThrow('Failed to save jest-output output: Error: Write error');\n    });\n  });\n\n  describe('getFileContent', () => {\n    it('should read and return file content', async () => {\n      const expectedContent = 'file content';\n      const type: OutputType = 'ai-debug-context';\n\n      mockedFs.existsSync.mockReturnValue(true);\n      (mockedFs.promises.readFile as jest.Mock).mockResolvedValue(expectedContent);\n\n      const result = await fileManager.getFileContent(type);\n\n      expect(result).toBe(expectedContent);\n      expect(mockedFs.promises.readFile).toHaveBeenCalledWith(\n        '/test/workspace/.ai-debug-output/ai-debug-context.txt',\n        'utf8'\n      );\n    });\n\n    it('should return empty string if file does not exist', async () => {\n      const type: OutputType = 'ai-debug-context';\n\n      mockedFs.existsSync.mockReturnValue(false);\n\n      const result = await fileManager.getFileContent(type);\n\n      expect(result).toBe('');\n    });\n\n    it('should handle read errors gracefully', async () => {\n      const type: OutputType = 'ai-debug-context';\n\n      mockedFs.existsSync.mockReturnValue(true);\n      (mockedFs.promises.readFile as jest.Mock).mockRejectedValue(new Error('Read error'));\n\n      const result = await fileManager.getFileContent(type);\n\n      expect(result).toBe('');\n    });\n  });\n\n  describe('getFilePath', () => {\n    it('should return correct file paths for all output types', () => {\n      const testCases: Array<[OutputType, string]> = [\n        ['ai-debug-context', '/test/workspace/.ai-debug-output/ai-debug-context.txt'],\n        ['jest-output', '/test/workspace/.ai-debug-output/jest-output.txt'],\n        ['diff', '/test/workspace/.ai-debug-output/diff.txt'],\n        ['pr-description', '/test/workspace/.ai-debug-output/pr-description.txt'],\n        ['pr-description-prompt', '/test/workspace/.ai-debug-output/pr-description-prompt.txt']\n      ];\n\n      testCases.forEach(([type, expectedPath]) => {\n        expect(fileManager.getFilePath(type)).toBe(expectedPath);\n      });\n    });\n  });\n\n  describe('fileExists', () => {\n    it('should return true when file exists', async () => {\n      (mockedFs.promises.access as jest.Mock).mockResolvedValue(undefined);\n      \n      const result = await fileManager.fileExists('jest-output.txt');\n\n      expect(result).toBe(true);\n    });\n\n    it('should return false when file does not exist', async () => {\n      (mockedFs.promises.access as jest.Mock).mockRejectedValue(new Error('File not found'));\n      \n      const result = await fileManager.fileExists('nonexistent.txt');\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getFileModTime', () => {\n    it('should return modification time when file exists', () => {\n      const mockDate = new Date('2024-01-01');\n      const mockStats = { mtime: mockDate };\n\n      mockedFs.existsSync.mockReturnValue(true);\n      mockedFs.statSync.mockReturnValue(mockStats as any);\n\n      const result = fileManager.getFileModTime('jest-output');\n\n      expect(result).toBe(mockDate);\n    });\n\n    it('should return null when file does not exist', () => {\n      mockedFs.existsSync.mockReturnValue(false);\n\n      const result = fileManager.getFileModTime('jest-output');\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle stat errors gracefully', () => {\n      mockedFs.existsSync.mockReturnValue(true);\n      mockedFs.statSync.mockImplementation(() => {\n        throw new Error('Stat error');\n      });\n\n      const result = fileManager.getFileModTime('jest-output');\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getAllOutputFiles', () => {\n    it('should return dictionary of output files', () => {\n      mockedFs.readdirSync.mockReturnValue(['jest-output.txt', 'diff.txt'] as any);\n\n      const result = fileManager.getAllOutputFiles();\n\n      expect(result).toEqual({\n        'jest-output': '/test/workspace/.ai-debug-output/jest-output.txt',\n        'diff': '/test/workspace/.ai-debug-output/diff.txt'\n      });\n    });\n\n    it('should handle empty directory', () => {\n      mockedFs.readdirSync.mockReturnValue([] as any);\n\n      const result = fileManager.getAllOutputFiles();\n\n      expect(result).toEqual({});\n    });\n  });\n\n  describe('cleanupOldFiles', () => {\n    it('should remove files older than max age', async () => {\n      const oldDate = new Date(Date.now() - 10 * 24 * 60 * 60 * 1000); // 10 days old\n      const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days\n\n      mockedFs.readdirSync.mockReturnValue(['old-file.txt', 'another-old.txt'] as any);\n      mockedFs.statSync.mockReturnValue({ mtime: oldDate } as any);\n      (mockedFs.promises.unlink as jest.Mock).mockResolvedValue(undefined);\n\n      await fileManager.cleanupOldFiles(maxAge);\n\n      expect(mockedFs.promises.unlink).toHaveBeenCalledTimes(2);\n    });\n\n    it('should not remove recent files', async () => {\n      const recentDate = new Date(Date.now() - 1 * 24 * 60 * 60 * 1000); // 1 day old\n      const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days\n\n      mockedFs.readdirSync.mockReturnValue(['recent-file.txt'] as any);\n      mockedFs.statSync.mockReturnValue({ mtime: recentDate } as any);\n      (mockedFs.promises.unlink as jest.Mock).mockResolvedValue(undefined);\n\n      await fileManager.cleanupOldFiles(maxAge);\n\n      expect(mockedFs.promises.unlink).not.toHaveBeenCalled();\n    });\n\n    it('should handle unlink errors gracefully', async () => {\n      const oldDate = new Date(Date.now() - 10 * 24 * 60 * 60 * 1000);\n      const maxAge = 7 * 24 * 60 * 60 * 1000;\n\n      mockedFs.readdirSync.mockReturnValue(['error-file.txt'] as any);\n      mockedFs.statSync.mockReturnValue({ mtime: oldDate } as any);\n      (mockedFs.promises.unlink as jest.Mock).mockRejectedValue(new Error('Unlink error'));\n\n      // Should not throw\n      await expect(fileManager.cleanupOldFiles(maxAge)).resolves.toBeUndefined();\n    });\n  });\n\n  describe('copyToClipboard', () => {\n    it('should copy content to clipboard when file exists', async () => {\n      const mockContent = 'file content';\n      const vscode = require('vscode');\n\n      // Mock the getFileContent method\n      jest.spyOn(fileManager, 'getFileContent').mockResolvedValue(mockContent);\n\n      await fileManager.copyToClipboard('jest-output');\n\n      expect(vscode.env.clipboard.writeText).toHaveBeenCalledWith(mockContent);\n      expect(vscode.window.showInformationMessage).toHaveBeenCalledWith('jest-output content copied to clipboard');\n    });\n\n    it('should handle errors gracefully', async () => {\n      const vscode = require('vscode');\n\n      // Mock the getFileContent method to throw an error\n      jest.spyOn(fileManager, 'getFileContent').mockRejectedValue(new Error('Read error'));\n\n      await fileManager.copyToClipboard('jest-output');\n\n      expect(vscode.env.clipboard.writeText).not.toHaveBeenCalled();\n      expect(vscode.window.showErrorMessage).toHaveBeenCalledWith('Failed to copy jest-output to clipboard: Error: Read error');\n    });\n  });\n\n  describe('openFile', () => {\n    it('should open file in VSCode editor', async () => {\n      const filePath = '/test/file.txt';\n      const vscode = require('vscode');\n      const mockDocument = { uri: { fsPath: filePath } };\n\n      vscode.workspace.openTextDocument.mockResolvedValue(mockDocument);\n      vscode.window.showTextDocument.mockResolvedValue(undefined);\n\n      await fileManager.openFile(filePath);\n\n      expect(vscode.workspace.openTextDocument).toHaveBeenCalledWith(filePath);\n      expect(vscode.window.showTextDocument).toHaveBeenCalledWith(mockDocument);\n    });\n\n    it('should handle errors when opening file', async () => {\n      const filePath = '/test/file.txt';\n      const vscode = require('vscode');\n\n      vscode.workspace.openTextDocument.mockRejectedValue(new Error('Open error'));\n\n      await fileManager.openFile(filePath);\n\n      expect(vscode.window.showErrorMessage).toHaveBeenCalledWith('Failed to open file: Error: Open error');\n    });\n  });\n\n  describe('watchFiles', () => {\n    it('should create file system watcher and handle file changes', () => {\n      const mockCallback = jest.fn();\n      const mockFs = require('fs');\n      \n      // Mock fs.watch\n      const mockWatcher = {\n        close: jest.fn()\n      };\n      mockFs.watch = jest.fn().mockReturnValue(mockWatcher);\n\n      const disposable = fileManager.watchFiles(mockCallback);\n\n      expect(mockFs.watch).toHaveBeenCalledWith(\n        '/test/workspace/.ai-debug-output',\n        expect.any(Function)\n      );\n      \n      // Test disposable\n      disposable.dispose();\n      expect(mockWatcher.close).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}