{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/streamingRunner.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/streamingRunner.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { spawn, ChildProcess } from 'child_process';\nimport * as vscode from 'vscode';\nimport { StreamingMessage, CommandResult } from '../types';\n\nexport interface StreamingOptions {\n    cwd?: string;\n    env?: Record<string, string>;\n    timeout?: number;\n    killSignal?: string;\n    progressSteps?: string[];\n}\n\nexport class StreamingCommandRunner extends EventEmitter {\n    private _activeProcess?: ChildProcess;\n    private _isRunning = false;\n    private _startTime?: number;\n    private _currentOutput = '';\n    private _timeoutId?: NodeJS.Timeout;\n    private _forceKillTimeoutId?: NodeJS.Timeout;\n\n    constructor(private readonly _outputChannel: vscode.OutputChannel) {\n        super();\n    }\n\n    // Main execution method\n    public async executeWithStreaming(command: string, args: string[], options: StreamingOptions = {}): Promise<CommandResult> {\n        if (this._isRunning) {\n            throw new Error('Command is already running');\n        }\n\n        this._isRunning = true;\n        this._startTime = Date.now();\n        this._currentOutput = '';\n\n        try {\n            return await this._executeCommand(command, args, options);\n        } finally {\n            this._cleanup();\n        }\n    }\n\n    // Test command execution\n    public async executeTestCommand(command: string, args: string[], cwd?: string): Promise<CommandResult> {\n        return this.executeWithStreaming(command, args, { cwd });\n    }\n\n    // Git command execution\n    public async executeGitCommand(args: string[], cwd?: string): Promise<CommandResult> {\n        return this.executeWithStreaming('git', args, { cwd });\n    }\n\n    // Lint command execution\n    public async executeLintCommand(command: string, args: string[], cwd?: string): Promise<CommandResult> {\n        return this.executeWithStreaming(command, args, { cwd });\n    }\n\n    private async _executeCommand(command: string, args: string[], options: StreamingOptions): Promise<CommandResult> {\n        return new Promise<CommandResult>((resolve, reject) => {\n            this._activeProcess = spawn(command, args, {\n                cwd: options.cwd || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath,\n                env: { ...process.env, ...options.env },\n                stdio: ['pipe', 'pipe', 'pipe']\n            });\n\n            let output = '';\n            let error = '';\n\n            // FIX: Add error handling for stdout/stderr streams\n            this._activeProcess.stdout?.on('data', (data: Buffer) => {\n                const text = data.toString();\n                output += text;\n                this._currentOutput += text;\n                \n                this.emit('output', text);\n                this._outputChannel.append(text);\n            });\n\n            this._activeProcess.stdout?.on('error', (err: Error) => {\n                console.warn('stdout stream error:', err);\n                // Don't reject here, let the process handle it\n            });\n\n            this._activeProcess.stderr?.on('data', (data: Buffer) => {\n                const text = data.toString();\n                error += text;\n                this._currentOutput += text;\n                \n                this.emit('error', text);\n                this._outputChannel.append(text);\n            });\n\n            this._activeProcess.stderr?.on('error', (err: Error) => {\n                console.warn('stderr stream error:', err);\n                // Don't reject here, let the process handle it\n            });\n\n            this._activeProcess.on('close', (code: number) => {\n                const duration = Date.now() - (this._startTime || 0);\n                \n                // FIX: Clear timeout when process completes\n                if (this._timeoutId) {\n                    clearTimeout(this._timeoutId);\n                    this._timeoutId = undefined;\n                }\n                \n                const result: CommandResult = {\n                    success: code === 0,\n                    exitCode: code,\n                    output,\n                    error,\n                    duration\n                };\n\n                this.emit('complete', result);\n                resolve(result);\n            });\n\n            this._activeProcess.on('error', (err: Error) => {\n                const duration = Date.now() - (this._startTime || 0);\n                \n                // FIX: Clear timeout when process errors\n                if (this._timeoutId) {\n                    clearTimeout(this._timeoutId);\n                    this._timeoutId = undefined;\n                }\n                \n                const result: CommandResult = {\n                    success: false,\n                    exitCode: 1,\n                    output,\n                    error: err.message,\n                    duration\n                };\n\n                this.emit('error', err.message);\n                this.emit('complete', result);\n                resolve(result); // Resolve instead of reject to maintain consistency\n            });\n\n            // FIX: Handle timeout properly\n            if (options.timeout) {\n                this._timeoutId = setTimeout(() => {\n                    if (this._activeProcess && this._isRunning) {\n                        console.log(`Command timed out after ${options.timeout}ms`);\n                        this._cancelWithTimeout();\n                        reject(new Error(`Command timed out after ${options.timeout}ms`));\n                    }\n                }, options.timeout);\n            }\n        });\n    }\n\n    public cancel(): void {\n        if (this._activeProcess && this._isRunning) {\n            this._cancelWithTimeout();\n        }\n    }\n\n    // FIX: Improved cancel with timeout handling\n    private _cancelWithTimeout(): void {\n        if (!this._activeProcess) {\n            return;\n        }\n\n        console.log('Cancelling command with SIGTERM');\n        this._activeProcess.kill('SIGTERM');\n        \n        // FIX: Clear existing force kill timeout before setting new one\n        if (this._forceKillTimeoutId) {\n            clearTimeout(this._forceKillTimeoutId);\n        }\n        \n        // Force kill after 5 seconds\n        this._forceKillTimeoutId = setTimeout(() => {\n            if (this._activeProcess) {\n                console.log('Force killing command with SIGKILL');\n                this._activeProcess.kill('SIGKILL');\n            }\n            this._forceKillTimeoutId = undefined;\n        }, 5000);\n    }\n\n    // FIX: Comprehensive cleanup method\n    private _cleanup(): void {\n        this._isRunning = false;\n        this._activeProcess = undefined;\n        \n        if (this._timeoutId) {\n            clearTimeout(this._timeoutId);\n            this._timeoutId = undefined;\n        }\n        \n        if (this._forceKillTimeoutId) {\n            clearTimeout(this._forceKillTimeoutId);\n            this._forceKillTimeoutId = undefined;\n        }\n    }\n\n    public get isRunning(): boolean {\n        return this._isRunning;\n    }\n\n    public getCurrentOutput(): string {\n        return this._currentOutput;\n    }\n\n    public clearOutput(): void {\n        this._currentOutput = '';\n    }\n\n    public simulateProgress(duration: number): void {\n        const interval = 100; // Update every 100ms\n        const steps = duration / interval;\n        let currentStep = 0;\n\n        const progressInterval = setInterval(() => {\n            // FIX: Stop progress simulation if command is no longer running\n            if (!this._isRunning) {\n                clearInterval(progressInterval);\n                return;\n            }\n\n            currentStep++;\n            const progress = Math.min(90, Math.floor((currentStep / steps) * 100)); // Cap at 90%\n            \n            this.emit('progress', progress);\n            \n            if (currentStep >= steps) {\n                clearInterval(progressInterval);\n            }\n        }, interval);\n    }\n\n    public dispose(): void {\n        this.cancel();\n        this._cleanup();\n        this.removeAllListeners();\n    }\n}"],"version":3}