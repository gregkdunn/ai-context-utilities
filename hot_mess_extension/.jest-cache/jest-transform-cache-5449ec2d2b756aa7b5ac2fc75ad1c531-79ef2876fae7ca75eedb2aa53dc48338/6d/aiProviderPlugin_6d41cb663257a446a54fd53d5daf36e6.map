{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/builtin/aiProviderPlugin.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/builtin/aiProviderPlugin.ts"],"sourcesContent":["import { \n  Plugin, \n  PluginMetadata, \n  PluginAPI, \n  PluginContext, \n  PluginCommand,\n  AIProvider,\n  AIResponse,\n  AISuggestion\n} from '../../../types/plugin';\nimport * as vscode from 'vscode';\n\nexport class AIProviderPlugin implements Plugin {\n  metadata: PluginMetadata = {\n    id: 'builtin-ai-provider',\n    name: 'AI Provider',\n    version: '1.0.0',\n    description: 'Extensible AI provider for integrating external AI services',\n    author: 'AI Debug Team',\n    license: 'MIT',\n    enabled: true,\n    capabilities: [\n      {\n        type: 'ai-provider',\n        name: 'ai-provider',\n        description: 'Provide AI-powered insights and recommendations',\n        permissions: ['network:ai-services:Connect to external AI services for analysis']\n      },\n      {\n        type: 'command',\n        name: 'ai-analysis',\n        description: 'Run AI analysis on code'\n      }\n    ]\n  };\n\n  private api?: PluginAPI;\n  private aiProviderMap: Map<string, AIProvider> = new Map();\n  \n  get providers(): any[] {\n    return [];\n  }\n  \n  get aiProviders(): AIProvider[] {\n    return [\n      {\n        id: 'code-analysis-ai',\n        name: 'Code Analysis AI',\n        description: 'AI-powered code analysis and suggestions',\n        capabilities: ['code-analysis', 'bug-detection', 'optimization'],\n        \n        generateInsights: async (data: any, context: any): Promise<AIResponse> => {\n          const insights = await this.generateCodeInsights(data, context);\n          return { response: JSON.stringify(insights), suggestions: insights.map((i: any) => ({ title: i.title, description: i.description })) };\n        },\n        \n        processQuery: async (query: string, context: any): Promise<AIResponse> => {\n          const result = await this.processNaturalLanguageQuery(query, context);\n          return { response: result.response, suggestions: result.suggestions };\n        },\n        \n        suggestActions: async (context: any): Promise<AISuggestion[]> => {\n          return await this.suggestContextualActions(context);\n        }\n      },\n      {\n        id: 'test-insights-ai',\n        name: 'Test Insights AI',\n        description: 'AI-powered test analysis and recommendations',\n        capabilities: ['test-analysis', 'coverage-optimization', 'test-generation'],\n        \n        generateInsights: async (data: any, context: any): Promise<AIResponse> => {\n          const insights = await this.generateTestInsights(data, context);\n          return { response: JSON.stringify(insights), suggestions: insights.map((i: any) => ({ title: i.title, description: i.description })) };\n        },\n        \n        processQuery: async (query: string, context: any): Promise<AIResponse> => {\n          const result = await this.processTestQuery(query, context);\n          return { response: result.response, suggestions: result.suggestions };\n        },\n        \n        suggestActions: async (context: any): Promise<AISuggestion[]> => {\n          return await this.suggestTestActions(context);\n        }\n      },\n      {\n        id: 'performance-ai',\n        name: 'Performance AI',\n        description: 'AI-powered performance analysis and optimization',\n        capabilities: ['performance-analysis', 'optimization', 'monitoring'],\n        \n        generateInsights: async (data: any, context: any): Promise<AIResponse> => {\n          const insights = await this.generatePerformanceInsights(data, context);\n          return { response: JSON.stringify(insights), suggestions: insights.map((i: any) => ({ title: i.title, description: i.description })) };\n        },\n        \n        processQuery: async (query: string, context: any): Promise<AIResponse> => {\n          const result = await this.processPerformanceQuery(query, context);\n          return { response: result.response, suggestions: result.suggestions };\n        },\n        \n        suggestActions: async (context: any): Promise<AISuggestion[]> => {\n          return await this.suggestPerformanceActions(context);\n        }\n      }\n    ];\n  }\n\n  get commands(): PluginCommand[] {\n    return [\n      {\n        id: 'ai-code-review',\n        title: 'AI Code Review',\n        description: 'Perform AI-powered code review',\n        category: 'AI',\n        icon: 'eye',\n        \n        execute: async (context: PluginContext, args?: any[]): Promise<any> => {\n          const provider = this.aiProviderMap.get('code-analysis-ai');\n          if (!provider) {\n            throw new Error('Code analysis AI provider not available');\n          }\n          \n          const currentFile = context.currentFile;\n          if (!currentFile) {\n            this.api?.showNotification?.('No file selected', 'warning');\n            return;\n          }\n          \n          const fileContent = await vscode.workspace.fs.readFile(vscode.Uri.file(currentFile));\n          const codeData = {\n            content: fileContent.toString(),\n            filePath: currentFile,\n            language: this.getLanguageFromFile(currentFile)\n          };\n          \n          const insights = await provider.generateInsights?.(codeData, context);\n          \n          // Display results\n          const report = this.formatCodeReview(insights as any);\n          const doc = await vscode.workspace.openTextDocument({\n            content: report,\n            language: 'markdown'\n          });\n          \n          await vscode.window.showTextDocument(doc);\n          \n          return insights;\n        }\n      },\n      {\n        id: 'ai-ask-question',\n        title: 'Ask AI Question',\n        description: 'Ask a question about your code',\n        category: 'AI',\n        icon: 'question',\n        \n        execute: async (context: PluginContext, args?: any[]): Promise<any> => {\n          const question = await vscode.window.showInputBox({\n            prompt: 'What would you like to know about your code?',\n            placeHolder: 'e.g., How can I improve this function?'\n          });\n          \n          if (!question) {\n            return;\n          }\n          \n          const provider = this.aiProviderMap.get('code-analysis-ai');\n          if (!provider) {\n            throw new Error('AI provider not available');\n          }\n          \n          const answer = await provider.processQuery?.(question, context);\n          \n          // Show answer in a notification or document\n          if (answer && answer.response && answer.response.length > 200) {\n            const doc = await vscode.workspace.openTextDocument({\n              content: `# AI Assistant Response\\n\\n**Question:** ${question}\\n\\n**Answer:** ${answer.response}\\n\\n${answer.suggestions ? '## Suggestions\\n' + answer.suggestions.map(s => `- ${s.title}: ${s.description}`).join('\\n') : ''}`,\n              language: 'markdown'\n            });\n            \n            await vscode.window.showTextDocument(doc);\n          } else {\n            this.api?.showNotification?.(answer?.response || 'No response', 'info');\n          }\n          \n          return answer;\n        }\n      },\n      {\n        id: 'ai-optimize-code',\n        title: 'AI Code Optimization',\n        description: 'Get AI suggestions for code optimization',\n        category: 'AI',\n        icon: 'zap',\n        \n        execute: async (context: PluginContext, args?: any[]): Promise<any> => {\n          const provider = this.aiProviderMap.get('performance-ai');\n          if (!provider) {\n            throw new Error('Performance AI provider not available');\n          }\n          \n          const suggestions = await provider.suggestActions?.(context);\n          \n          if (!suggestions) {\n            this.api?.showNotification?.('No optimization suggestions available', 'info');\n            return [];\n          }\n          \n          // Show optimization suggestions\n          const items = suggestions.map(suggestion => ({\n            label: suggestion.title,\n            description: suggestion.description,\n            detail: `Impact: ${(suggestion as any).impact} | Effort: ${(suggestion as any).effort}`\n          }));\n          \n          const selected = await vscode.window.showQuickPick(items, {\n            placeHolder: 'Select optimization to apply',\n            canPickMany: false\n          });\n          \n          if (selected) {\n            const suggestion = suggestions.find(s => s.title === selected?.label);\n            if (suggestion) {\n              await this.applyOptimization(suggestion, context);\n            }\n          }\n          \n          return suggestions;\n        }\n      }\n    ];\n  }\n\n  async activate(api: PluginAPI, context: PluginContext): Promise<void> {\n    this.api = api;\n    \n    // Register AI providers\n    for (const provider of this.aiProviders) {\n      this.aiProviderMap.set(provider.id, provider);\n    }\n    \n    // Register commands\n    for (const command of this.commands) {\n      api.registerCommand(command.id, command.execute);\n    }\n    \n    // Listen for AI events\n    api.on?.('ai:query', (data) => this.onAIQuery(data, context));\n    api.on?.('ai:analysis-request', (data) => this.onAnalysisRequest(data, context));\n    \n    console.log('AI Provider Plugin activated');\n  }\n\n  async deactivate(api: PluginAPI, context: PluginContext): Promise<void> {\n    // Cleanup\n    api.off?.('ai:query');\n    api.off?.('ai:analysis-request');\n    this.aiProviderMap.clear();\n    \n    console.log('AI Provider Plugin deactivated');\n  }\n\n  private async generateCodeInsights(data: any, context: PluginContext): Promise<any[]> {\n    // Simulate AI-powered code analysis\n    const insights = [\n      {\n        id: 'code-complexity',\n        type: 'performance',\n        title: 'Code Complexity Analysis',\n        description: 'This function has high cyclomatic complexity',\n        confidence: 0.85,\n        severity: 'medium',\n        suggestions: [\n          {\n            title: 'Extract Method',\n            description: 'Break down the function into smaller methods',\n            impact: 'High',\n            effort: 'Medium'\n          }\n        ]\n      },\n      {\n        id: 'potential-bug',\n        type: 'error',\n        title: 'Potential Null Reference',\n        description: 'Variable could be null before usage',\n        confidence: 0.72,\n        severity: 'high',\n        suggestions: [\n          {\n            title: 'Add Null Check',\n            description: 'Add null checking before using the variable',\n            impact: 'High',\n            effort: 'Low'\n          }\n        ]\n      },\n      {\n        id: 'optimization-opportunity',\n        type: 'suggestion',\n        title: 'Performance Optimization',\n        description: 'Loop can be optimized using array methods',\n        confidence: 0.78,\n        severity: 'low',\n        suggestions: [\n          {\n            title: 'Use Array.map()',\n            description: 'Replace for loop with array.map() for better performance',\n            impact: 'Medium',\n            effort: 'Low'\n          }\n        ]\n      }\n    ];\n\n    return insights;\n  }\n\n  private async generateTestInsights(data: any, context: PluginContext): Promise<any[]> {\n    // Simulate AI-powered test analysis\n    const insights = [\n      {\n        id: 'test-coverage-gap',\n        type: 'warning',\n        title: 'Test Coverage Gap',\n        description: 'Critical function lacks proper test coverage',\n        confidence: 0.88,\n        severity: 'high',\n        suggestions: [\n          {\n            title: 'Add Unit Tests',\n            description: 'Create comprehensive unit tests for this function',\n            impact: 'High',\n            effort: 'Medium'\n          }\n        ]\n      },\n      {\n        id: 'test-quality-issue',\n        type: 'info',\n        title: 'Test Quality Issue',\n        description: 'Test is too generic and may not catch edge cases',\n        confidence: 0.75,\n        severity: 'medium',\n        suggestions: [\n          {\n            title: 'Add Edge Case Tests',\n            description: 'Include tests for boundary conditions and error cases',\n            impact: 'Medium',\n            effort: 'Low'\n          }\n        ]\n      }\n    ];\n\n    return insights;\n  }\n\n  private async generatePerformanceInsights(data: any, context: PluginContext): Promise<any[]> {\n    // Simulate AI-powered performance analysis\n    const insights = [\n      {\n        id: 'memory-leak',\n        type: 'error',\n        title: 'Potential Memory Leak',\n        description: 'Event listener is not properly cleaned up',\n        confidence: 0.82,\n        severity: 'high',\n        suggestions: [\n          {\n            title: 'Add Cleanup',\n            description: 'Remove event listener in cleanup function',\n            impact: 'High',\n            effort: 'Low'\n          }\n        ]\n      },\n      {\n        id: 'slow-operation',\n        type: 'performance',\n        title: 'Slow Operation Detected',\n        description: 'Synchronous operation blocking main thread',\n        confidence: 0.79,\n        severity: 'medium',\n        suggestions: [\n          {\n            title: 'Use Async/Await',\n            description: 'Convert to asynchronous operation',\n            impact: 'High',\n            effort: 'Medium'\n          }\n        ]\n      }\n    ];\n\n    return insights;\n  }\n\n  private async processNaturalLanguageQuery(query: string, context: PluginContext): Promise<any> {\n    // Simulate NLP processing\n    const intent = this.classifyIntent(query);\n    const entities = this.extractEntities(query);\n    \n    let response = '';\n    let suggestions: any[] = [];\n    \n    switch (intent) {\n      case 'code-review':\n        response = 'I can help you review your code. I found several areas for improvement including complexity reduction and potential bug fixes.';\n        suggestions = [\n          {\n            title: 'Run Code Analysis',\n            description: 'Perform comprehensive code analysis',\n            action: 'ai-code-review'\n          }\n        ];\n        break;\n        \n      case 'optimization':\n        response = 'I can suggest optimizations for your code. Common areas include algorithm efficiency, memory usage, and async operations.';\n        suggestions = [\n          {\n            title: 'Optimize Performance',\n            description: 'Get AI-powered optimization suggestions',\n            action: 'ai-optimize-code'\n          }\n        ];\n        break;\n        \n      case 'testing':\n        response = 'I can help improve your testing strategy. This includes coverage analysis, test quality assessment, and test generation.';\n        suggestions = [\n          {\n            title: 'Analyze Test Coverage',\n            description: 'Generate comprehensive test coverage report',\n            action: 'test-coverage-report'\n          }\n        ];\n        break;\n        \n      default:\n        response = `I understand you're asking about \"${query}\". I can help with code analysis, optimization, and testing. What specific aspect would you like me to focus on?`;\n    }\n    \n    return {\n      intent,\n      entities,\n      confidence: 0.85,\n      response,\n      suggestions\n    };\n  }\n\n  private async processTestQuery(query: string, context: PluginContext): Promise<any> {\n    // Simulate test-specific query processing\n    const testIntent = this.classifyTestIntent(query);\n    \n    let response = '';\n    let suggestions: any[] = [];\n    \n    switch (testIntent) {\n      case 'coverage':\n        response = 'Test coverage analysis shows areas that need more testing. Focus on edge cases and error conditions.';\n        suggestions = [\n          {\n            title: 'Generate Coverage Report',\n            description: 'Create detailed coverage analysis',\n            action: 'test-coverage-report'\n          }\n        ];\n        break;\n        \n      case 'quality':\n        response = 'Test quality can be improved by adding more descriptive test names and better assertion patterns.';\n        suggestions = [\n          {\n            title: 'Analyze Test Quality',\n            description: 'Review test structure and patterns',\n            action: 'test-quality-analysis'\n          }\n        ];\n        break;\n        \n      default:\n        response = 'I can help with test coverage, quality analysis, and performance optimization.';\n    }\n    \n    return {\n      intent: testIntent,\n      response,\n      suggestions\n    };\n  }\n\n  private async processPerformanceQuery(query: string, context: PluginContext): Promise<any> {\n    // Simulate performance-specific query processing\n    const perfIntent = this.classifyPerformanceIntent(query);\n    \n    let response = '';\n    let suggestions: any[] = [];\n    \n    switch (perfIntent) {\n      case 'memory':\n        response = 'Memory usage can be optimized by proper cleanup and avoiding memory leaks.';\n        suggestions = [\n          {\n            title: 'Memory Analysis',\n            description: 'Analyze memory usage patterns',\n            action: 'memory-analysis'\n          }\n        ];\n        break;\n        \n      case 'speed':\n        response = 'Performance can be improved by optimizing algorithms and using async operations.';\n        suggestions = [\n          {\n            title: 'Performance Optimization',\n            description: 'Get speed optimization suggestions',\n            action: 'ai-optimize-code'\n          }\n        ];\n        break;\n        \n      default:\n        response = 'I can help with memory optimization, speed improvements, and performance monitoring.';\n    }\n    \n    return {\n      intent: perfIntent,\n      response,\n      suggestions\n    };\n  }\n\n  private async suggestContextualActions(context: PluginContext): Promise<any[]> {\n    const actions = [];\n    \n    // Analyze current context\n    if (context.currentFile) {\n      const fileExt = context.currentFile.split('.').pop();\n      \n      if (fileExt === 'ts' || fileExt === 'js') {\n        actions.push({\n          title: 'Code Review',\n          description: 'Perform AI-powered code review',\n          impact: 'High',\n          effort: 'Low',\n          action: 'ai-code-review'\n        });\n      }\n      \n      if (context.currentFile.includes('.test.') || context.currentFile.includes('.spec.')) {\n        actions.push({\n          title: 'Test Analysis',\n          description: 'Analyze test quality and coverage',\n          impact: 'Medium',\n          effort: 'Low',\n          action: 'test-quality-analysis'\n        });\n      }\n    }\n    \n    // Always suggest general optimization\n    actions.push({\n      title: 'Performance Optimization',\n      description: 'Get AI-powered optimization suggestions',\n      impact: 'Medium',\n      effort: 'Medium',\n      action: 'ai-optimize-code'\n    });\n    \n    return actions;\n  }\n\n  private async suggestTestActions(context: PluginContext): Promise<any[]> {\n    return [\n      {\n        title: 'Generate Test Cases',\n        description: 'AI-generated test cases for uncovered code',\n        impact: 'High',\n        effort: 'Medium',\n        action: 'generate-tests'\n      },\n      {\n        title: 'Optimize Test Performance',\n        description: 'Improve test execution speed',\n        impact: 'Medium',\n        effort: 'Low',\n        action: 'optimize-tests'\n      }\n    ];\n  }\n\n  private async suggestPerformanceActions(context: PluginContext): Promise<any[]> {\n    return [\n      {\n        title: 'Memory Optimization',\n        description: 'Reduce memory usage and prevent leaks',\n        impact: 'High',\n        effort: 'Medium',\n        action: 'optimize-memory'\n      },\n      {\n        title: 'Async Optimization',\n        description: 'Convert blocking operations to async',\n        impact: 'High',\n        effort: 'High',\n        action: 'optimize-async'\n      },\n      {\n        title: 'Algorithm Optimization',\n        description: 'Improve algorithm efficiency',\n        impact: 'Medium',\n        effort: 'High',\n        action: 'optimize-algorithms'\n      }\n    ];\n  }\n\n  private classifyIntent(query: string): string {\n    const lowerQuery = query.toLowerCase();\n    \n    if (lowerQuery.includes('review') || lowerQuery.includes('analyze') || lowerQuery.includes('check')) {\n      return 'code-review';\n    }\n    \n    if (lowerQuery.includes('optimize') || lowerQuery.includes('performance') || lowerQuery.includes('speed')) {\n      return 'optimization';\n    }\n    \n    if (lowerQuery.includes('test') || lowerQuery.includes('coverage') || lowerQuery.includes('unit')) {\n      return 'testing';\n    }\n    \n    return 'general';\n  }\n\n  private classifyTestIntent(query: string): string {\n    const lowerQuery = query.toLowerCase();\n    \n    if (lowerQuery.includes('coverage')) {\n      return 'coverage';\n    }\n    \n    if (lowerQuery.includes('quality') || lowerQuery.includes('structure')) {\n      return 'quality';\n    }\n    \n    return 'general';\n  }\n\n  private classifyPerformanceIntent(query: string): string {\n    const lowerQuery = query.toLowerCase();\n    \n    if (lowerQuery.includes('memory') || lowerQuery.includes('leak')) {\n      return 'memory';\n    }\n    \n    if (lowerQuery.includes('speed') || lowerQuery.includes('slow') || lowerQuery.includes('fast')) {\n      return 'speed';\n    }\n    \n    return 'general';\n  }\n\n  private extractEntities(query: string): Record<string, any> {\n    const entities: Record<string, any> = {};\n    \n    // Extract file references\n    const fileMatch = query.match(/\\b\\w+\\.(ts|js|tsx|jsx|py|java|cpp|c|h)\\b/g);\n    if (fileMatch) {\n      entities.files = fileMatch;\n    }\n    \n    // Extract function references\n    const funcMatch = query.match(/\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*\\(/g);\n    if (funcMatch) {\n      entities.functions = funcMatch.map(f => f.replace('(', ''));\n    }\n    \n    return entities;\n  }\n\n  private getLanguageFromFile(filePath: string): string {\n    const ext = filePath.split('.').pop();\n    const languageMap: Record<string, string> = {\n      'ts': 'typescript',\n      'js': 'javascript',\n      'tsx': 'typescriptreact',\n      'jsx': 'javascriptreact',\n      'py': 'python',\n      'java': 'java',\n      'cpp': 'cpp',\n      'c': 'c',\n      'h': 'c'\n    };\n    \n    return languageMap[ext || ''] || 'plaintext';\n  }\n\n  private formatCodeReview(insights: any[]): string {\n    let report = `# AI Code Review Report\\n\\n`;\n    \n    for (const insight of insights) {\n      report += `## ${insight.title}\\n`;\n      report += `**Type:** ${insight.type}\\n`;\n      report += `**Severity:** ${insight.severity}\\n`;\n      report += `**Confidence:** ${Math.round(insight.confidence * 100)}%\\n`;\n      report += `**Description:** ${insight.description}\\n\\n`;\n      \n      if (insight.suggestions && insight.suggestions.length > 0) {\n        report += `### Suggestions\\n`;\n        for (const suggestion of insight.suggestions) {\n          report += `- **${suggestion.title}**: ${suggestion.description} (Impact: ${suggestion.impact}, Effort: ${suggestion.effort})\\n`;\n        }\n        report += `\\n`;\n      }\n    }\n    \n    report += `---\\n*Generated by AI Debug AI Provider Plugin*\\n`;\n    \n    return report;\n  }\n\n  private async applyOptimization(suggestion: any, context: PluginContext): Promise<void> {\n    // Implementation for applying optimization suggestions\n    this.api?.showNotification?.(`Applied optimization: ${suggestion.title}`, 'info');\n  }\n\n  private async onAIQuery(data: any, context: PluginContext): Promise<void> {\n    // Handle AI query events\n    console.log('AI query received:', data);\n  }\n\n  private async onAnalysisRequest(data: any, context: PluginContext): Promise<void> {\n    // Handle analysis request events\n    console.log('Analysis request received:', data);\n  }\n}\n"],"version":3}