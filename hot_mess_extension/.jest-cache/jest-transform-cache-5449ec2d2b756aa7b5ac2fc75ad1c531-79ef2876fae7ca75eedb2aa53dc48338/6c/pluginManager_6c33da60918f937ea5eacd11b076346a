72f6ae296b4ff80c9a1be8a30032f982
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginManager = void 0;
const vscode = __importStar(require("vscode"));
const events_1 = require("events");
const plugin_1 = require("../../types/plugin");
class PluginManager {
    extensionContext;
    workspaceRoot;
    plugins = new Map();
    pluginConfigs = new Map();
    eventEmitter = new events_1.EventEmitter();
    pluginAPI;
    context;
    constructor(extensionContext, workspaceRoot) {
        this.extensionContext = extensionContext;
        this.workspaceRoot = workspaceRoot;
        this.pluginAPI = this.createPluginAPI();
        this.context = this.createPluginContext();
        this.initializeBuiltinPlugins().catch(error => {
            console.error('Failed to initialize plugin manager:', error);
        });
    }
    createPluginAPI() {
        return {
            // VS Code API
            vscode: vscode,
            // Plugin metadata methods
            getPluginPath: () => this.extensionContext.extensionPath,
            getPluginVersion: () => this.extensionContext.extension.packageJSON.version,
            getPluginMetadata: () => ({
                id: this.extensionContext.extension.id,
                name: this.extensionContext.extension.packageJSON.displayName || this.extensionContext.extension.packageJSON.name,
                version: this.extensionContext.extension.packageJSON.version,
                description: this.extensionContext.extension.packageJSON.description || '',
                author: this.extensionContext.extension.packageJSON.author || '',
                license: this.extensionContext.extension.packageJSON.license || '',
                enabled: true,
                capabilities: []
            }),
            // Command registration
            registerCommand: (id, callback) => {
                const disposable = vscode.commands.registerCommand(id, callback);
                this.extensionContext.subscriptions.push(disposable);
                return disposable;
            },
            registerProvider: (type, provider) => {
                // Implementation depends on provider type
                return { dispose: () => { } };
            },
            // Core services
            getInsightsEngine: () => this.getInsightsEngine(),
            getCollaborationService: () => this.getCollaborationService(),
            getExecutionService: () => this.getExecutionService(),
            // Utilities
            showNotification: (message, type) => {
                switch (type) {
                    case 'info':
                        vscode.window.showInformationMessage(message);
                        break;
                    case 'warning':
                        vscode.window.showWarningMessage(message);
                        break;
                    case 'error':
                        vscode.window.showErrorMessage(message);
                        break;
                }
            },
            showProgress: async (title, task) => {
                return await vscode.window.withProgress({
                    location: vscode.ProgressLocation.Notification,
                    title,
                    cancellable: true
                }, task);
            },
            openFile: async (filePath) => {
                const doc = await vscode.workspace.openTextDocument(filePath);
                await vscode.window.showTextDocument(doc);
            },
            writeFile: async (filePath, content) => {
                const uri = vscode.Uri.file(filePath);
                await vscode.workspace.fs.writeFile(uri, Buffer.from(content));
            },
            // Plugin extension points
            registerAnalyzer: (analyzer) => this.registerAnalyzer(analyzer),
            registerFormatter: (formatter) => this.registerFormatter(formatter),
            registerTransformer: (transformer) => this.registerTransformer(transformer),
            registerValidator: (validator) => this.registerValidator(validator),
            // VS Code workspace and window APIs
            createOutputChannel: (name) => vscode.window.createOutputChannel(name),
            showMessage: (message, level) => {
                switch (level) {
                    case 'warning':
                        vscode.window.showWarningMessage(message);
                        break;
                    case 'error':
                        vscode.window.showErrorMessage(message);
                        break;
                    default: vscode.window.showInformationMessage(message);
                }
            },
            getConfiguration: (section) => vscode.workspace.getConfiguration(section),
            onDidChangeConfiguration: (callback) => vscode.workspace.onDidChangeConfiguration(callback),
            createStatusBarItem: (alignment, priority) => vscode.window.createStatusBarItem(alignment, priority),
            createTreeView: (viewId, options) => vscode.window.createTreeView(viewId, options),
            createWebviewPanel: (viewType, title, showOptions, options) => {
                if (typeof showOptions === 'object' && showOptions && 'viewColumn' in showOptions) {
                    const webviewOptions = showOptions;
                    return vscode.window.createWebviewPanel(viewType, title, webviewOptions.viewColumn, { ...options, ...webviewOptions });
                }
                else {
                    return vscode.window.createWebviewPanel(viewType, title, showOptions, options);
                }
            },
            executeCommand: (command, ...args) => vscode.commands.executeCommand(command, ...args),
            openExternal: (uri) => vscode.env.openExternal(uri),
            showTextDocument: (document, column, preserveFocus) => vscode.window.showTextDocument(document, column, preserveFocus),
            showQuickPick: (items, options) => vscode.window.showQuickPick(items, options),
            showInputBox: (options) => vscode.window.showInputBox(options),
            withProgress: (options, task) => vscode.window.withProgress(options, task),
            createTerminal: (name, shellPath, shellArgs) => vscode.window.createTerminal(name, shellPath, shellArgs),
            createFileSystemWatcher: (globPattern, ignoreCreateEvents, ignoreChangeEvents, ignoreDeleteEvents) => vscode.workspace.createFileSystemWatcher(globPattern, ignoreCreateEvents, ignoreChangeEvents, ignoreDeleteEvents),
            findFiles: (include, exclude, maxResults, token) => vscode.workspace.findFiles(include, exclude, maxResults, token),
            openTextDocument: (uri) => vscode.workspace.openTextDocument(uri),
            saveAll: (includeUntitled) => vscode.workspace.saveAll(includeUntitled),
            applyEdit: (edit) => vscode.workspace.applyEdit(edit),
            createDiagnosticCollection: (name) => vscode.languages.createDiagnosticCollection(name),
            // Provider registrations
            registerCodeActionsProvider: (selector, provider) => vscode.languages.registerCodeActionsProvider(selector, provider),
            registerCompletionItemProvider: (selector, provider, ...triggerCharacters) => vscode.languages.registerCompletionItemProvider(selector, provider, ...triggerCharacters),
            registerDefinitionProvider: (selector, provider) => vscode.languages.registerDefinitionProvider(selector, provider),
            registerHoverProvider: (selector, provider) => vscode.languages.registerHoverProvider(selector, provider),
            registerDocumentFormattingEditProvider: (selector, provider) => vscode.languages.registerDocumentFormattingEditProvider(selector, provider),
            registerDocumentRangeFormattingEditProvider: (selector, provider) => vscode.languages.registerDocumentRangeFormattingEditProvider(selector, provider),
            registerRenameProvider: (selector, provider) => vscode.languages.registerRenameProvider(selector, provider),
            registerReferenceProvider: (selector, provider) => vscode.languages.registerReferenceProvider(selector, provider),
            registerDocumentSymbolProvider: (selector, provider) => vscode.languages.registerDocumentSymbolProvider(selector, provider),
            registerDocumentHighlightProvider: (selector, provider) => vscode.languages.registerDocumentHighlightProvider(selector, provider),
            registerDocumentLinkProvider: (selector, provider) => vscode.languages.registerDocumentLinkProvider(selector, provider),
            registerSignatureHelpProvider: (selector, provider, ...triggerCharacters) => vscode.languages.registerSignatureHelpProvider(selector, provider, ...triggerCharacters),
            // Debug and task APIs
            registerDebugConfigurationProvider: (type, provider) => vscode.debug.registerDebugConfigurationProvider(type, provider),
            registerDebugAdapterDescriptorFactory: (type, factory) => vscode.debug.registerDebugAdapterDescriptorFactory(type, factory),
            registerTaskProvider: (type, provider) => vscode.tasks.registerTaskProvider(type, provider),
            createTask: (definition, name, source, execution, problemMatchers) => new vscode.Task(definition, vscode.TaskScope.Workspace, name, source, execution, problemMatchers),
            executeTask: (task) => vscode.tasks.executeTask(task),
            onDidStartTask: (callback) => vscode.tasks.onDidStartTask(callback),
            onDidEndTask: (callback) => vscode.tasks.onDidEndTask(callback),
            onDidStartTaskProcess: (callback) => vscode.tasks.onDidStartTaskProcess(callback),
            onDidEndTaskProcess: (callback) => vscode.tasks.onDidEndTaskProcess(callback),
            // Additional provider methods
            createTreeDataProvider: (viewId, treeDataProvider) => ({ dispose: () => { } }),
            createCustomTextEditorProvider: (viewType, provider) => ({ dispose: () => { } }),
            createCustomEditorProvider: (viewType, provider, options) => ({ dispose: () => { } }),
            createWebviewViewProvider: (viewId, provider) => ({ dispose: () => { } }),
            createAuthenticationProvider: (id, label, provider, options) => ({ dispose: () => { } }),
            createSourceControlResourceGroup: (id, label) => ({}),
            createSourceControl: (id, label, rootUri) => ({}),
            createCommentController: (id, label) => ({}),
            createNotebookController: (id, notebookType, label) => ({}),
            createNotebookCellExecution: (uri) => ({}),
            createNotebookCellOutput: (items) => ({}),
            createNotebookCellOutputItem: (data, mime) => ({}),
            createNotebookDocument: (uri, notebookType, metadata) => ({}),
            createNotebookEdit: (uri, edit) => ({}),
            createNotebookRange: (start, end) => ({}),
            createNotebookCell: (kind, value, languageId, outputs, metadata, executionSummary) => ({}),
            createNotebookCellData: (kind, value, languageId, outputs, metadata, executionSummary) => ({}),
            createNotebookData: (cells, metadata) => ({}),
            createNotebookDocumentFilter: (pattern, scheme, language) => ({}),
            createNotebookDocumentMetadata: (metadata) => ({}),
            // Events
            emit: (event, data) => this.eventEmitter.emit(event, data),
            on: (event, handler) => this.eventEmitter.on(event, handler),
            off: (event, handler) => {
                if (handler) {
                    this.eventEmitter.off(event, handler);
                }
                else {
                    this.eventEmitter.removeAllListeners(event);
                }
            }
        };
    }
    createPluginContext() {
        return {
            subscriptions: this.extensionContext.subscriptions,
            workspaceState: this.extensionContext.workspaceState,
            globalState: this.extensionContext.globalState,
            secrets: this.extensionContext.secrets,
            extensionUri: this.extensionContext.extensionUri,
            extensionPath: this.extensionContext.extensionPath,
            environmentVariableCollection: this.extensionContext.environmentVariableCollection,
            asAbsolutePath: (relativePath) => this.extensionContext.asAbsolutePath(relativePath),
            storageUri: this.extensionContext.storageUri,
            storagePath: this.extensionContext.storagePath,
            globalStorageUri: this.extensionContext.globalStorageUri,
            globalStoragePath: this.extensionContext.globalStoragePath,
            logUri: this.extensionContext.logUri,
            logPath: this.extensionContext.logPath,
            extensionMode: this.extensionContext.extensionMode,
            extension: this.extensionContext.extension,
            workspaceRoot: this.workspaceRoot,
            currentFile: vscode.window.activeTextEditor?.document.fileName,
            selectedText: vscode.window.activeTextEditor?.document.getText(vscode.window.activeTextEditor?.selection),
            executionHistory: [],
            aiInsights: [],
            collaborationData: {},
            customData: {}
        };
    }
    // Plugin Registry implementation
    async register(plugin) {
        const { id } = plugin.metadata;
        if (this.plugins.has(id)) {
            throw new Error(`Plugin with ID '${id}' is already registered`);
        }
        // Validate plugin
        await this.validatePlugin(plugin);
        // Store plugin
        this.plugins.set(id, plugin);
        // Set default config
        if (!this.pluginConfigs.has(id)) {
            this.pluginConfigs.set(id, {
                enabled: plugin.metadata.enabled,
                settings: plugin.metadata.config || {},
                permissions: [],
                resources: {}
            });
        }
        // Activate if enabled
        if (this.isEnabled(id)) {
            await this.activatePlugin(id);
        }
        this.emitEvent(plugin_1.PLUGIN_EVENTS.ACTIVATED, { pluginId: id });
    }
    async unregister(pluginId) {
        const plugin = this.plugins.get(pluginId);
        if (!plugin) {
            throw new Error(`Plugin with ID '${pluginId}' not found`);
        }
        // Deactivate if active
        if (this.isEnabled(pluginId)) {
            await this.deactivatePlugin(pluginId);
        }
        // Remove from storage
        this.plugins.delete(pluginId);
        this.pluginConfigs.delete(pluginId);
        this.emitEvent(plugin_1.PLUGIN_EVENTS.DEACTIVATED, { pluginId });
    }
    get(pluginId) {
        return this.plugins.get(pluginId);
    }
    getAll() {
        return Array.from(this.plugins.values());
    }
    getPlugin(pluginId) {
        return this.plugins.get(pluginId);
    }
    getAllPlugins() {
        return Array.from(this.plugins.values());
    }
    getByCapability(capability) {
        return this.getAll().filter(plugin => plugin.metadata.capabilities.some(cap => cap.type === capability));
    }
    isEnabled(pluginId) {
        const config = this.pluginConfigs.get(pluginId);
        return config?.enabled ?? false;
    }
    async enable(pluginId) {
        const config = this.pluginConfigs.get(pluginId);
        if (!config) {
            throw new Error(`Plugin '${pluginId}' not found`);
        }
        config.enabled = true;
        await this.activatePlugin(pluginId);
        this.savePluginConfig(pluginId, config);
    }
    async disable(pluginId) {
        const config = this.pluginConfigs.get(pluginId);
        if (!config) {
            throw new Error(`Plugin '${pluginId}' not found`);
        }
        config.enabled = false;
        await this.deactivatePlugin(pluginId);
        this.savePluginConfig(pluginId, config);
    }
    // Plugin lifecycle
    async activatePlugin(pluginId) {
        const plugin = this.plugins.get(pluginId);
        if (!plugin) {
            throw new Error(`Plugin '${pluginId}' not found`);
        }
        try {
            await plugin.activate(this.pluginAPI, this.context);
            // Register plugin capabilities
            this.registerPluginCapabilities(plugin);
            // Execute activation hook
            if (plugin.hooks?.onActivate) {
                await plugin.hooks.onActivate(this.context);
            }
        }
        catch (error) {
            this.emitEvent(plugin_1.PLUGIN_EVENTS.ERROR, {
                pluginId,
                error: error.message
            });
            throw error;
        }
    }
    async deactivatePlugin(pluginId) {
        const plugin = this.plugins.get(pluginId);
        if (!plugin) {
            return;
        }
        try {
            // Execute deactivation hook
            if (plugin.hooks?.onDeactivate) {
                await plugin.hooks.onDeactivate(this.context);
            }
            await plugin.deactivate(this.pluginAPI, this.context);
            // Unregister plugin capabilities
            this.unregisterPluginCapabilities(plugin);
        }
        catch (error) {
            this.emitEvent(plugin_1.PLUGIN_EVENTS.ERROR, {
                pluginId,
                error: error.message
            });
            throw error;
        }
    }
    registerPluginCapabilities(plugin) {
        const { id } = plugin.metadata;
        // Register commands
        if (plugin.commands) {
            plugin.commands.forEach(command => {
                this.registerCommand(command);
            });
        }
        // Register analyzers
        if (plugin.analyzers) {
            plugin.analyzers.forEach(analyzer => {
                this.registerAnalyzer(analyzer);
            });
        }
        // Register formatters
        if (plugin.formatters) {
            plugin.formatters.forEach(formatter => {
                this.registerFormatter(formatter);
            });
        }
        // Register transformers
        if (plugin.transformers) {
            plugin.transformers.forEach(transformer => {
                this.registerTransformer(transformer);
            });
        }
        // Register validators
        if (plugin.validators) {
            plugin.validators.forEach(validator => {
                this.registerValidator(validator);
            });
        }
    }
    unregisterPluginCapabilities(plugin) {
        // Implementation would remove registered capabilities
        // This is a simplified version
    }
    // Capability registration methods
    registerCommand(command) {
        // Register VSCode command
        const disposable = vscode.commands.registerCommand(`aiDebug.plugin.${command.id}`, async (...args) => {
            try {
                const result = await command.execute(this.context, args);
                this.emitEvent(plugin_1.PLUGIN_EVENTS.COMMAND_EXECUTED, {
                    commandId: command.id,
                    result
                });
                return result;
            }
            catch (error) {
                this.emitEvent(plugin_1.PLUGIN_EVENTS.ERROR, {
                    commandId: command.id,
                    error: error.message
                });
                throw error;
            }
        });
        this.extensionContext.subscriptions.push(disposable);
    }
    registerAnalyzer(analyzer) {
        // Store analyzer for use by insight engine
        this.eventEmitter.emit('analyzer:registered', analyzer);
    }
    registerFormatter(formatter) {
        // Store formatter for use by output system
        this.eventEmitter.emit('formatter:registered', formatter);
    }
    registerTransformer(transformer) {
        // Store transformer for use by processing pipeline
        this.eventEmitter.emit('transformer:registered', transformer);
    }
    registerValidator(validator) {
        // Store validator for use by validation system
        this.eventEmitter.emit('validator:registered', validator);
    }
    // Plugin validation
    async validatePlugin(plugin) {
        const { metadata } = plugin;
        if (!metadata.id || !metadata.name || !metadata.version) {
            throw new Error('Plugin must have id, name, and version');
        }
        if (!metadata.capabilities || metadata.capabilities.length === 0) {
            throw new Error('Plugin must declare at least one capability');
        }
        // Validate dependencies
        if (metadata.dependencies) {
            for (const dep of metadata.dependencies) {
                if (!this.plugins.has(dep)) {
                    throw new Error(`Missing dependency: ${dep}`);
                }
            }
        }
        // Validate required methods
        if (typeof plugin.activate !== 'function') {
            throw new Error('Plugin must have an activate method');
        }
        if (typeof plugin.deactivate !== 'function') {
            throw new Error('Plugin must have a deactivate method');
        }
    }
    // Configuration management
    savePluginConfig(pluginId, config) {
        const configs = this.extensionContext.globalState.get('pluginConfigs', {});
        configs[pluginId] = config;
        this.extensionContext.globalState.update('pluginConfigs', configs);
    }
    loadPluginConfigs() {
        const configs = this.extensionContext.globalState.get('pluginConfigs', {});
        for (const [pluginId, config] of Object.entries(configs)) {
            this.pluginConfigs.set(pluginId, config);
        }
    }
    // Event handling
    emitEvent(type, data) {
        const event = {
            type,
            pluginId: data?.pluginId || 'system',
            timestamp: new Date(),
            data,
            source: 'plugin-manager'
        };
        this.eventEmitter.emit(type, event);
    }
    // Development utilities
    createDevUtils(pluginId) {
        return {
            createTestSuite: (id) => this.createTestSuite(id),
            createLogger: (id) => this.createLogger(id),
            createProfiler: (id) => this.createProfiler(id),
            createStorage: (id) => this.createStorage(id),
            createScheduler: (id) => this.createScheduler(id)
        };
    }
    createLogger(pluginId) {
        return {
            info: (message, data) => {
                console.log(`[${pluginId}] ${message}`, data);
            },
            warn: (message, data) => {
                console.warn(`[${pluginId}] ${message}`, data);
            },
            error: (message, error) => {
                console.error(`[${pluginId}] ${message}`, error);
            },
            debug: (message, data) => {
                console.debug(`[${pluginId}] ${message}`, data);
            },
            trace: (message, data) => {
                console.trace(`[${pluginId}] ${message}`, data);
            },
            setLevel: (level) => {
                // Implementation would set the log level
            },
            createChild: (name) => {
                return this.createLogger(`${pluginId}:${name}`);
            }
        };
    }
    createStorage(pluginId) {
        const prefix = `plugin.${pluginId}.`;
        return {
            get: async (key) => {
                return this.extensionContext.globalState.get(prefix + key);
            },
            set: async (key, value) => {
                await this.extensionContext.globalState.update(prefix + key, value);
            },
            delete: async (key) => {
                await this.extensionContext.globalState.update(prefix + key, undefined);
            },
            clear: async () => {
                // Get all keys with this plugin's prefix and clear them
                const keys = this.extensionContext.globalState.keys();
                for (const key of keys) {
                    if (key.startsWith(prefix)) {
                        await this.extensionContext.globalState.update(key, undefined);
                    }
                }
            },
            keys: async () => {
                return this.extensionContext.globalState.keys()
                    .filter(key => key.startsWith(prefix))
                    .map(key => key.substring(prefix.length));
            },
            has: async (key) => {
                return this.extensionContext.globalState.keys().includes(prefix + key);
            },
            size: async () => {
                return this.extensionContext.globalState.keys()
                    .filter(key => key.startsWith(prefix)).length;
            }
        };
    }
    createScheduler(pluginId) {
        const timers = new Map();
        return {
            schedule: (task, delay) => {
                const id = `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                // Create timer
                const timer = setTimeout(async () => {
                    try {
                        await task();
                    }
                    catch (error) {
                        this.emitEvent(plugin_1.PLUGIN_EVENTS.ERROR, {
                            pluginId,
                            error: error.message,
                            source: 'scheduler'
                        });
                    }
                    timers.delete(id);
                }, delay);
                timers.set(id, timer);
                return {
                    id,
                    cancel: () => {
                        const timer = timers.get(id);
                        if (timer) {
                            clearTimeout(timer);
                            timers.delete(id);
                        }
                    },
                    reschedule: (newDelay) => {
                        const timer = timers.get(id);
                        if (timer) {
                            clearTimeout(timer);
                            const newTimer = setTimeout(async () => {
                                try {
                                    await task();
                                }
                                catch (error) {
                                    this.emitEvent(plugin_1.PLUGIN_EVENTS.ERROR, {
                                        pluginId,
                                        error: error.message,
                                        source: 'scheduler'
                                    });
                                }
                                timers.delete(id);
                            }, newDelay);
                            timers.set(id, newTimer);
                        }
                    }
                };
            },
            scheduleRepeating: (task, interval) => {
                const id = `repeat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                const timer = setInterval(async () => {
                    try {
                        await task();
                    }
                    catch (error) {
                        this.emitEvent(plugin_1.PLUGIN_EVENTS.ERROR, {
                            pluginId,
                            error: error.message,
                            source: 'scheduler'
                        });
                    }
                }, interval);
                timers.set(id, timer);
                return {
                    id,
                    cancel: () => {
                        const timer = timers.get(id);
                        if (timer) {
                            clearInterval(timer);
                            timers.delete(id);
                        }
                    },
                    reschedule: (newInterval) => {
                        const timer = timers.get(id);
                        if (timer) {
                            clearInterval(timer);
                            const newTimer = setInterval(async () => {
                                try {
                                    await task();
                                }
                                catch (error) {
                                    this.emitEvent(plugin_1.PLUGIN_EVENTS.ERROR, {
                                        pluginId,
                                        error: error.message,
                                        source: 'scheduler'
                                    });
                                }
                            }, newInterval);
                            timers.set(id, newTimer);
                        }
                    }
                };
            },
            cancel: (scheduledTask) => {
                scheduledTask.cancel();
            },
            cancelAll: () => {
                for (const timer of timers.values()) {
                    clearInterval(timer);
                    clearTimeout(timer);
                }
                timers.clear();
            }
        };
    }
    createTestSuite(pluginId) {
        return {
            addTest: (name, test) => {
                // Implementation would add test to suite
            },
            addSetup: (setup) => {
                // Implementation would add setup
            },
            addTeardown: (teardown) => {
                // Implementation would add teardown
            }
        };
    }
    createProfiler(pluginId) {
        return {
            start: (name) => {
                const startTime = Date.now();
                return {
                    end: () => Date.now() - startTime,
                    mark: (markName) => {
                        // Implementation would record mark
                    }
                };
            },
            measure: (name, fn) => {
                const start = Date.now();
                const result = fn();
                console.log(`[${pluginId}] ${name}: ${Date.now() - start}ms`);
                return result;
            },
            measureAsync: async (name, fn) => {
                const start = Date.now();
                const result = await fn();
                console.log(`[${pluginId}] ${name}: ${Date.now() - start}ms`);
                return result;
            }
        };
    }
    // Integration with existing services
    getInsightsEngine() {
        // Return reference to existing AI insights engine
        return null; // Placeholder
    }
    getCollaborationService() {
        // Return reference to existing collaboration service
        return null; // Placeholder
    }
    getExecutionService() {
        // Return reference to existing execution service
        return null; // Placeholder
    }
    // Built-in plugins initialization
    async initializeBuiltinPlugins() {
        // Load built-in plugins
        this.loadPluginConfigs();
        // Register built-in plugins
        try {
            const { GitAnalyzerPlugin, TestAnalyzerPlugin, AIProviderPlugin } = await Promise.resolve().then(() => __importStar(require('./builtin')));
            // Register Git Analyzer Plugin
            const gitPlugin = new GitAnalyzerPlugin();
            await this.register(gitPlugin);
            // Register Test Analyzer Plugin
            const testPlugin = new TestAnalyzerPlugin();
            await this.register(testPlugin);
            // Register AI Provider Plugin
            const aiPlugin = new AIProviderPlugin();
            await this.register(aiPlugin);
            console.log('Built-in plugins initialized successfully');
        }
        catch (error) {
            console.error('Failed to initialize built-in plugins:', error);
        }
    }
    // Public API for extension
    async executePluginCommand(pluginId, commandId, args) {
        const plugin = this.plugins.get(pluginId);
        if (!plugin || !this.isEnabled(pluginId)) {
            throw new Error(`Plugin '${pluginId}' not found or not enabled`);
        }
        const command = plugin.commands?.find(cmd => cmd.id === commandId);
        if (!command) {
            throw new Error(`Command '${commandId}' not found in plugin '${pluginId}'`);
        }
        return await command.execute(this.context, args);
    }
    getPluginInsights(pluginId) {
        // Return insights generated by specific plugin
        return [];
    }
    async refreshPluginContext() {
        this.context = this.createPluginContext();
        // Notify all active plugins about context change
        for (const [pluginId, plugin] of this.plugins) {
            if (this.isEnabled(pluginId) && plugin.hooks?.onCommand) {
                // This is a simplified notification
                // In practice, you'd have a more sophisticated context update system
            }
        }
    }
}
exports.PluginManager = PluginManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,