05651b91cea27e940a7856cb0e34c403
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = activate;
exports.deactivate = deactivate;
const vscode = __importStar(require("vscode"));
const provider_1 = require("./webview/provider");
const projectDetector_1 = require("./utils/projectDetector");
const shellRunner_1 = require("./utils/shellRunner");
const fileManager_1 = require("./utils/fileManager");
const statusTracker_1 = require("./utils/statusTracker");
const commandCoordinator_1 = require("./utils/commandCoordinator");
const pluginManager_1 = require("./services/plugins/pluginManager");
const pluginMarketplace_1 = require("./services/plugins/pluginMarketplace");
const pluginDiscovery_1 = require("./services/plugins/pluginDiscovery");
// Phase 5 Features
const NxAffectedManager_1 = require("./services/nx/NxAffectedManager");
const NxCommandProvider_1 = require("./services/nx/NxCommandProvider");
const NxStatusBar_1 = require("./services/nx/NxStatusBar");
const GitDiffManager_1 = require("./services/git/GitDiffManager");
const GitCommandProvider_1 = require("./services/git/GitCommandProvider");
const FlipperDetectionManager_1 = require("./services/flipper/FlipperDetectionManager");
let webviewProvider;
let statusTracker;
let commandCoordinator;
let pluginManager;
let pluginMarketplace;
let pluginDiscovery;
// Phase 5 Features
let nxAffectedManager;
let nxCommandProvider;
let nxStatusBar;
let gitDiffManager;
let gitCommandProvider;
let flipperDetectionManager;
async function activate(context) {
    console.log('AI Debug Utilities extension is now active');
    try {
        // Get workspace path
        const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
        // Create output channel
        const outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');
        // Initialize core utilities with required parameters
        const projectDetector = new projectDetector_1.ProjectDetector(workspaceRoot);
        const commandRunner = new shellRunner_1.CommandRunner(outputChannel);
        const fileManager = new fileManager_1.FileManager(outputChannel);
        // Initialize status tracking and coordination
        statusTracker = new statusTracker_1.StatusTracker();
        commandCoordinator = new commandCoordinator_1.CommandCoordinator(statusTracker, context);
        // Initialize plugin system
        pluginManager = new pluginManager_1.PluginManager(context, workspaceRoot);
        pluginMarketplace = new pluginMarketplace_1.PluginMarketplaceService(context);
        pluginDiscovery = new pluginDiscovery_1.PluginDiscoveryService(context);
        // Initialize Phase 5 Features
        nxAffectedManager = new NxAffectedManager_1.NxAffectedManager(context);
        nxCommandProvider = new NxCommandProvider_1.NxCommandProvider(nxAffectedManager);
        nxStatusBar = new NxStatusBar_1.NxStatusBar(context, nxAffectedManager);
        gitDiffManager = new GitDiffManager_1.GitDiffManager(context);
        gitCommandProvider = new GitCommandProvider_1.GitCommandProvider(gitDiffManager);
        flipperDetectionManager = new FlipperDetectionManager_1.FlipperDetectionManager(context);
        // Check if this is an NX workspace
        const isNxWorkspace = await projectDetector.findNxWorkspace();
        if (isNxWorkspace) {
            // Set context for when clauses
            vscode.commands.executeCommand('setContext', 'workspaceHasNxProject', true);
            // Initialize webview provider
            webviewProvider = new provider_1.WebviewProvider(context.extensionUri, projectDetector, commandRunner, fileManager, statusTracker);
            // Register webview provider
            context.subscriptions.push(vscode.window.registerWebviewViewProvider('aiDebugUtilities', webviewProvider));
            // Register commands
            registerCommands(context, webviewProvider, projectDetector, commandRunner, fileManager, statusTracker, commandCoordinator, pluginManager, pluginMarketplace);
            // Register Phase 5 commands
            const nxCommands = nxCommandProvider.register();
            const gitCommands = gitCommandProvider.register();
            context.subscriptions.push(...nxCommands, ...gitCommands);
            console.log('AI Debug Utilities: NX workspace detected, extension fully activated');
            // Show welcome notification
            const config = vscode.workspace.getConfiguration('aiDebugUtilities');
            if (config.get('showNotifications')) {
                vscode.window.showInformationMessage('AI Debug Utilities activated! Open the panel to get started.', 'Open Panel').then(selection => {
                    if (selection === 'Open Panel') {
                        vscode.commands.executeCommand('aiDebugUtilities.openPanel');
                    }
                });
            }
        }
        else {
            vscode.commands.executeCommand('setContext', 'workspaceHasNxProject', false);
            console.log('AI Debug Utilities: No NX workspace detected, extension remains dormant');
        }
    }
    catch (error) {
        console.error('Error activating AI Debug Utilities:', error);
        vscode.commands.executeCommand('setContext', 'workspaceHasNxProject', false);
    }
}
function registerCommands(context, webviewProvider, projectDetector, commandRunner, fileManager, statusTracker, commandCoordinator, pluginManager, pluginMarketplace) {
    // Open panel command
    const openPanelCommand = vscode.commands.registerCommand('aiDebugUtilities.openPanel', () => {
        webviewProvider.show();
    });
    // Run AI Debug command
    const runAiDebugCommand = vscode.commands.registerCommand('aiDebugUtilities.runAiDebug', async () => {
        const project = await projectDetector.getCurrentProject();
        if (project) {
            await webviewProvider.runCommand('aiDebug', { project: project.name });
        }
        else {
            vscode.window.showWarningMessage('No NX project detected. Please select a project first.');
        }
    });
    // Run NX Test command
    const runNxTestCommand = vscode.commands.registerCommand('aiDebugUtilities.runNxTest', async () => {
        const project = await projectDetector.getCurrentProject();
        if (project) {
            await webviewProvider.runCommand('nxTest', { project: project.name });
        }
        else {
            vscode.window.showWarningMessage('No NX project detected. Please select a project first.');
        }
    });
    // Run Git Diff command
    const runGitDiffCommand = vscode.commands.registerCommand('aiDebugUtilities.runGitDiff', async () => {
        await webviewProvider.runCommand('gitDiff', {});
    });
    // Run Prepare to Push command
    const runPrepareToPushCommand = vscode.commands.registerCommand('aiDebugUtilities.runPrepareToPush', async () => {
        const project = await projectDetector.getCurrentProject();
        if (project) {
            await webviewProvider.runCommand('prepareToPush', { project: project.name });
        }
        else {
            vscode.window.showWarningMessage('No NX project detected. Please select a project first.');
        }
    });
    // Status tracking commands
    const showStatusCommand = vscode.commands.registerCommand('aiDebugUtilities.showStatus', () => {
        const report = statusTracker.generateStatusReport();
        const panel = vscode.window.createWebviewPanel('aiDebugStatus', 'AI Debug Status Report', vscode.ViewColumn.One, {});
        panel.webview.html = `
            <!DOCTYPE html>
            <html>
            <head>
                <title>Status Report</title>
                <style>
                    body { font-family: monospace; white-space: pre-wrap; padding: 20px; }
                    .report { background: #1e1e1e; color: #d4d4d4; padding: 20px; border-radius: 5px; }
                </style>
            </head>
            <body>
                <div class="report">${report.replace(/\n/g, '<br>')}</div>
            </body>
            </html>
        `;
    });
    // Plugin management commands
    const pluginManagerCommand = vscode.commands.registerCommand('aiDebugUtilities.pluginManager', async () => {
        const plugins = pluginManager.getAll();
        const items = plugins.map(plugin => ({
            label: plugin.metadata.name,
            description: plugin.metadata.description,
            detail: `v${plugin.metadata.version} - ${plugin.metadata.author}`,
            plugin
        }));
        const selected = await vscode.window.showQuickPick(items, {
            placeHolder: 'Select a plugin to manage',
            canPickMany: false
        });
        if (selected) {
            const actions = [
                { label: 'Enable/Disable', action: 'toggle' },
                { label: 'View Details', action: 'details' },
                { label: 'Uninstall', action: 'uninstall' }
            ];
            const action = await vscode.window.showQuickPick(actions, {
                placeHolder: `What would you like to do with ${selected.plugin.metadata.name}?`
            });
            if (action) {
                switch (action.action) {
                    case 'toggle':
                        if (pluginManager.isEnabled(selected.plugin.metadata.id)) {
                            await pluginManager.disable(selected.plugin.metadata.id);
                            vscode.window.showInformationMessage(`${selected.plugin.metadata.name} disabled`);
                        }
                        else {
                            await pluginManager.enable(selected.plugin.metadata.id);
                            vscode.window.showInformationMessage(`${selected.plugin.metadata.name} enabled`);
                        }
                        break;
                    case 'details':
                        const details = `# ${selected.plugin.metadata.name}\n\n` +
                            `**Version:** ${selected.plugin.metadata.version}\n` +
                            `**Author:** ${selected.plugin.metadata.author}\n` +
                            `**Description:** ${selected.plugin.metadata.description}\n\n` +
                            `**Capabilities:**\n` +
                            selected.plugin.metadata.capabilities.map(cap => `- ${cap.name}: ${cap.description}`).join('\n');
                        const doc = await vscode.workspace.openTextDocument({
                            content: details,
                            language: 'markdown'
                        });
                        await vscode.window.showTextDocument(doc);
                        break;
                    case 'uninstall':
                        const confirm = await vscode.window.showWarningMessage(`Are you sure you want to uninstall ${selected.plugin.metadata.name}?`, { modal: true }, 'Yes', 'No');
                        if (confirm === 'Yes') {
                            await pluginManager.unregister(selected.plugin.metadata.id);
                            vscode.window.showInformationMessage(`${selected.plugin.metadata.name} uninstalled`);
                        }
                        break;
                }
            }
        }
    });
    const pluginMarketplaceCommand = vscode.commands.registerCommand('aiDebugUtilities.pluginMarketplace', async () => {
        const query = await vscode.window.showInputBox({
            prompt: 'Search for plugins',
            placeHolder: 'Enter search terms (e.g., "git", "test", "ai")',
            value: ''
        });
        if (query !== undefined) {
            const plugins = await pluginMarketplace.searchPlugins(query || '');
            const items = plugins.map(plugin => ({
                label: plugin.name,
                description: plugin.description,
                detail: `v${plugin.version} - ${plugin.author} (${plugin.downloads} downloads, ${plugin.rating}/5 stars)`,
                plugin
            }));
            const selected = await vscode.window.showQuickPick(items, {
                placeHolder: 'Select a plugin to install',
                canPickMany: false
            });
            if (selected) {
                const actions = [
                    { label: 'Install', action: 'install' },
                    { label: 'View Details', action: 'details' }
                ];
                const action = await vscode.window.showQuickPick(actions, {
                    placeHolder: `What would you like to do with ${selected.plugin.name}?`
                });
                if (action) {
                    switch (action.action) {
                        case 'install':
                            try {
                                await pluginMarketplace.installPlugin(selected.plugin.id);
                                vscode.window.showInformationMessage(`${selected.plugin.name} installed successfully!`);
                            }
                            catch (error) {
                                vscode.window.showErrorMessage(`Failed to install ${selected.plugin.name}: ${error.message}`);
                            }
                            break;
                        case 'details':
                            const details = `# ${selected.plugin.name}\n\n` +
                                `**Version:** ${selected.plugin.version}\n` +
                                `**Author:** ${selected.plugin.author}\n` +
                                `**Description:** ${selected.plugin.description}\n` +
                                `**Downloads:** ${selected.plugin.downloads}\n` +
                                `**Rating:** ${selected.plugin.rating}/5\n\n` +
                                `**Tags:** ${selected.plugin.tags.join(', ')}\n\n` +
                                `**README:**\n${selected.plugin.readme}`;
                            const doc = await vscode.workspace.openTextDocument({
                                content: details,
                                language: 'markdown'
                            });
                            await vscode.window.showTextDocument(doc);
                            break;
                    }
                }
            }
        }
    });
    const runPluginCommand = vscode.commands.registerCommand('aiDebugUtilities.runPluginCommand', async () => {
        const plugins = pluginManager.getAll().filter(p => pluginManager.isEnabled(p.metadata.id));
        const commands = plugins.flatMap(plugin => (plugin.commands || []).map(cmd => ({
            label: cmd.title,
            description: cmd.description,
            detail: `Plugin: ${plugin.metadata.name}`,
            pluginId: plugin.metadata.id,
            commandId: cmd.id
        })));
        const selected = await vscode.window.showQuickPick(commands, {
            placeHolder: 'Select a plugin command to run',
            canPickMany: false
        });
        if (selected) {
            try {
                const result = await pluginManager.executePluginCommand(selected.pluginId, selected.commandId);
                vscode.window.showInformationMessage(`Command executed successfully: ${selected.label}`);
            }
            catch (error) {
                vscode.window.showErrorMessage(`Failed to execute command: ${error.message}`);
            }
        }
    });
    const clearHistoryCommand = vscode.commands.registerCommand('aiDebugUtilities.clearHistory', async () => {
        const result = await vscode.window.showWarningMessage('Are you sure you want to clear the command history?', { modal: true }, 'Yes', 'No');
        if (result === 'Yes') {
            statusTracker.clearHistory();
            vscode.window.showInformationMessage('Command history cleared.');
        }
    });
    const cancelAllCommand = vscode.commands.registerCommand('aiDebugUtilities.cancelAll', () => {
        commandCoordinator.cancelAllCommands();
        vscode.window.showInformationMessage('All running commands cancelled.');
    });
    const healthReportCommand = vscode.commands.registerCommand('aiDebugUtilities.healthReport', () => {
        const report = commandCoordinator.createHealthReport();
        const panel = vscode.window.createWebviewPanel('aiDebugHealth', 'Command Execution Health Report', vscode.ViewColumn.One, {});
        panel.webview.html = `
            <!DOCTYPE html>
            <html>
            <head>
                <title>Health Report</title>
                <style>
                    body { font-family: monospace; white-space: pre-wrap; padding: 20px; }
                    .report { background: #1e1e1e; color: #d4d4d4; padding: 20px; border-radius: 5px; }
                </style>
            </head>
            <body>
                <div class="report">${report.replace(/\n/g, '<br>')}</div>
            </body>
            </html>
        `;
    });
    // Add all commands to subscriptions
    context.subscriptions.push(openPanelCommand, runAiDebugCommand, runNxTestCommand, runGitDiffCommand, runPrepareToPushCommand, showStatusCommand, clearHistoryCommand, cancelAllCommand, healthReportCommand, pluginManagerCommand, pluginMarketplaceCommand, runPluginCommand);
}
function deactivate() {
    console.log('AI Debug Utilities extension is now deactivated');
    // Clean up resources
    if (statusTracker) {
        statusTracker.dispose();
    }
    if (commandCoordinator) {
        commandCoordinator.dispose();
    }
    // Clean up plugin system
    if (pluginManager) {
        try {
            const allPlugins = pluginManager.getAll();
            if (allPlugins && Array.isArray(allPlugins)) {
                for (const plugin of allPlugins) {
                    if (plugin?.metadata?.id && pluginManager.isEnabled(plugin.metadata.id)) {
                        pluginManager.disable(plugin.metadata.id).catch(error => {
                            console.error(`Failed to disable plugin ${plugin.metadata.id}:`, error);
                        });
                    }
                }
            }
        }
        catch (error) {
            console.error('Error during plugin cleanup:', error);
        }
    }
    // Clean up Phase 5 Features
    if (nxAffectedManager) {
        nxAffectedManager.dispose();
    }
    if (nxStatusBar) {
        nxStatusBar.dispose();
    }
    if (gitDiffManager) {
        gitDiffManager.dispose();
    }
    if (flipperDetectionManager) {
        flipperDetectionManager.dispose();
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,