{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/nx/__tests__/NxAffectedManager.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/nx/__tests__/NxAffectedManager.test.ts"],"sourcesContent":["import { NxAffectedManager } from '../NxAffectedManager';\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { spawn } from 'child_process';\n\n// Mock dependencies\njest.mock('vscode');\njest.mock('fs');\njest.mock('child_process');\n\ndescribe('NxAffectedManager', () => {\n    let nxManager: NxAffectedManager;\n    let mockContext: vscode.ExtensionContext;\n    let mockSpawn: jest.Mock;\n\n    beforeEach(() => {\n        // Setup mocks\n        mockContext = {\n            subscriptions: [],\n            extensionUri: vscode.Uri.file('/test')\n        } as any;\n\n        mockSpawn = spawn as jest.Mock;\n        \n        // Mock vscode.workspace\n        (vscode.workspace as any).workspaceFolders = [{ uri: { fsPath: '/test/workspace' } }];\n        (vscode.workspace as any).createFileSystemWatcher = jest.fn().mockReturnValue({\n            onDidChange: jest.fn(),\n            onDidCreate: jest.fn(),\n            onDidDelete: jest.fn(),\n            dispose: jest.fn()\n        });\n\n        // Mock fs\n        (fs.existsSync as jest.Mock).mockReturnValue(true);\n        (fs.readFileSync as jest.Mock).mockReturnValue(JSON.stringify({\n            projects: {\n                'test-app': { root: 'apps/test-app' },\n                'test-lib': { root: 'libs/test-lib' }\n            }\n        }));\n\n        nxManager = new NxAffectedManager(mockContext);\n    });\n\n    afterEach(() => {\n        jest.clearAllMocks();\n    });\n\n    describe('getAffectedProjects', () => {\n        it('should return affected projects for a given base branch', async () => {\n            // Mock spawn to return affected projects\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('test-app\\ntest-lib\\n'));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await nxManager.getAffectedProjects('main');\n            \n            expect(result).toEqual(['test-app', 'test-lib']);\n            expect(mockSpawn).toHaveBeenCalledWith('npx', ['nx', 'show', 'projects', '--affected', '--base', 'main'], expect.any(Object));\n        });\n\n        it('should return empty array when no affected projects', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from(''));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await nxManager.getAffectedProjects('main');\n            \n            expect(result).toEqual([]);\n        });\n\n        it('should handle command errors gracefully', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: jest.fn()\n                    },\n                    stderr: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('Command failed'));\n                            }\n                        }\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(1);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await nxManager.getAffectedProjects('main');\n            \n            expect(result).toEqual([]);\n        });\n    });\n\n    describe('runAffectedCommand', () => {\n        it('should successfully run affected command', async () => {\n            // Mock getAffectedProjects to return test projects\n            jest.spyOn(nxManager, 'getAffectedProjects').mockResolvedValue(['test-app', 'test-lib']);\n\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('Tests passed successfully'));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await nxManager.runAffectedCommand('test', 'main');\n            \n            expect(result.success).toBe(true);\n            expect(result.projects).toEqual(['test-app', 'test-lib']);\n            expect(result.output).toContain('Tests passed successfully');\n        });\n\n        it('should handle no affected projects', async () => {\n            jest.spyOn(nxManager, 'getAffectedProjects').mockResolvedValue([]);\n\n            const result = await nxManager.runAffectedCommand('test', 'main');\n            \n            expect(result.success).toBe(true);\n            expect(result.projects).toEqual([]);\n            expect(result.output).toBe('No affected projects found');\n        });\n\n        it('should handle command failures', async () => {\n            jest.spyOn(nxManager, 'getAffectedProjects').mockResolvedValue(['test-app']);\n\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: jest.fn()\n                    },\n                    stderr: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('Test failed'));\n                            }\n                        }\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(1);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await nxManager.runAffectedCommand('test', 'main');\n            \n            expect(result.success).toBe(false);\n            expect(result.errors).toBeDefined();\n            expect(result.errors![0]).toContain('Test failed');\n        });\n    });\n\n    describe('getProjectConfiguration', () => {\n        it('should return project configuration', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from(JSON.stringify({\n                                    root: 'apps/test-app',\n                                    targets: {\n                                        serve: { executor: '@angular-devkit/build-angular:dev-server' },\n                                        build: { executor: '@angular-devkit/build-angular:browser' }\n                                    }\n                                })));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await nxManager.getProjectConfiguration('test-app');\n            \n            expect(result.name).toBe('test-app');\n            expect(result.root).toBe('apps/test-app');\n            expect(result.type).toBe('application');\n            expect(result.targets.serve).toBeDefined();\n        });\n\n        it('should infer library type correctly', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from(JSON.stringify({\n                                    root: 'libs/test-lib',\n                                    targets: {\n                                        build: { executor: '@angular-devkit/build-angular:ng-packagr' }\n                                    }\n                                })));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await nxManager.getProjectConfiguration('test-lib');\n            \n            expect(result.type).toBe('library');\n        });\n    });\n\n    describe('isNxWorkspace', () => {\n        it('should return true for NX workspace', async () => {\n            (fs.existsSync as jest.Mock).mockReturnValue(true);\n            \n            const result = await nxManager.isNxWorkspace();\n            \n            expect(result).toBe(true);\n        });\n\n        it('should return false for non-NX workspace', async () => {\n            (fs.existsSync as jest.Mock).mockReturnValue(false);\n            \n            const result = await nxManager.isNxWorkspace();\n            \n            expect(result).toBe(false);\n        });\n    });\n\n    describe('caching', () => {\n        it('should cache affected projects results', async () => {\n            // Mock git command for HEAD commit\n            mockSpawn.mockImplementation((command, args) => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                if (args.includes('rev-parse')) {\n                                    callback(Buffer.from('abc123'));\n                                } else {\n                                    callback(Buffer.from('test-app\\n'));\n                                }\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            // First call\n            const result1 = await nxManager.getAffectedProjects('main');\n            \n            // Second call should use cache\n            const result2 = await nxManager.getAffectedProjects('main');\n            \n            expect(result1).toEqual(result2);\n            expect(result1).toEqual(['test-app']);\n        });\n    });\n});\n"],"version":3}