{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/shellRunner.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/shellRunner.ts"],"sourcesContent":["import { spawn, ChildProcess } from 'child_process';\nimport * as vscode from 'vscode';\nimport { CommandOptions, CommandResult } from '../types';\n\nexport type { CommandResult, CommandOptions } from '../types';\nexport type { CommandOptions as ShellCommandOptions } from '../types/commandOptions';\n\nexport class CommandRunner {\n    private _outputChannel: vscode.OutputChannel;\n    private _currentProcess?: ChildProcess;\n    private _isRunning = false;\n\n    constructor(outputChannel: vscode.OutputChannel) {\n        this._outputChannel = outputChannel;\n    }\n\n    public async execute(command: string, args: string[], options: CommandOptions = {}): Promise<CommandResult> {\n        const startTime = Date.now();\n        \n        return new Promise<CommandResult>((resolve) => {\n            this._isRunning = true;\n            \n            this._currentProcess = spawn(command, args, {\n                cwd: options.cwd || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath,\n                env: { ...process.env, ...options.env },\n                stdio: ['pipe', 'pipe', 'pipe'],\n                shell: options.shell || false\n            });\n\n            let stdout = '';\n            let stderr = '';\n\n            this._currentProcess.stdout?.on('data', (data: Buffer) => {\n                const text = data.toString();\n                stdout += text;\n                this._outputChannel.append(text);\n            });\n\n            this._currentProcess.stderr?.on('data', (data: Buffer) => {\n                const text = data.toString();\n                stderr += text;\n                this._outputChannel.append(text);\n            });\n\n            this._currentProcess.on('close', (code: number | null) => {\n                this._isRunning = false;\n                this._currentProcess = undefined;\n                \n                const duration = Date.now() - startTime;\n                const exitCode = code || 0;\n                \n                resolve({\n                    success: exitCode === 0,\n                    exitCode,\n                    output: stdout,\n                    error: stderr || undefined,\n                    duration,\n                    outputFiles: this.getExpectedOutputFiles(this.mapCommandName(command, args))\n                });\n            });\n\n            this._currentProcess.on('error', (error: Error) => {\n                this._isRunning = false;\n                this._currentProcess = undefined;\n                \n                const duration = Date.now() - startTime;\n                \n                resolve({\n                    success: false,\n                    exitCode: 1,\n                    output: stdout,\n                    error: error.message,\n                    duration,\n                    outputFiles: this.getExpectedOutputFiles(this.mapCommandName(command, args))\n                });\n            });\n\n            // Handle timeout\n            if (options.timeout) {\n                setTimeout(() => {\n                    if (this._currentProcess) {\n                        this._currentProcess.kill('SIGTERM');\n                        this._isRunning = false;\n                        this._currentProcess = undefined;\n                        \n                        resolve({\n                            success: false,\n                            exitCode: 1,\n                            output: stdout,\n                            error: 'Command timed out',\n                            duration: Date.now() - startTime\n                        });\n                    }\n                }, options.timeout);\n            }\n        });\n    }\n\n    private mapCommandName(command: string, args: string[]): string {\n        if (command === 'yarn' && args.includes('nx')) {\n            if (args.includes('test')) {\n                return 'nxTest';\n            }\n            if (args.includes('lint')) {\n                return 'prepareToPush';\n            }\n            if (args.includes('ai-debug')) {\n                return 'aiDebug';\n            }\n        }\n        if (command === 'git' && args.includes('diff')) {\n            return 'gitDiff';\n        }\n        return 'unknown';\n    }\n\n    public async executeShell(command: string, options: CommandOptions = {}): Promise<CommandResult> {\n        const [cmd, ...args] = command.split(' ');\n        return this.execute(cmd, args, { ...options, shell: true });\n    }\n\n    // AI Debug command\n    public async runAiDebug(project: string, options: CommandOptions = {}): Promise<CommandResult> {\n        const args = ['nx', 'test', project, '--verbose'];\n        const expectedFiles = [\n            '.github/instructions/ai_utilities_context/ai-debug-context.txt',\n            '.github/instructions/ai_utilities_context/jest-output.txt',\n            '.github/instructions/ai_utilities_context/diff.txt'\n        ];\n        \n        const result = await this.execute('yarn', args, options);\n        return {\n            ...result,\n            outputFiles: expectedFiles\n        };\n    }\n\n    // NX Test command\n    public async runNxTest(project: string, options: CommandOptions = {}): Promise<CommandResult> {\n        const args = ['nx', 'test', project, options.useExpected ? '--use-expected' : '--verbose'];\n        const expectedFiles = [\n            '.github/instructions/ai_utilities_context/jest-output.txt'\n        ];\n        \n        const result = await this.execute('yarn', args, options);\n        return {\n            ...result,\n            outputFiles: expectedFiles\n        };\n    }\n\n    // Git Diff command\n    public async runGitDiff(options: CommandOptions = {}): Promise<CommandResult> {\n        const args = ['diff'];\n        const expectedFiles = [\n            '.github/instructions/ai_utilities_context/diff.txt'\n        ];\n        \n        const result = await this.execute('git', args, options);\n        return {\n            ...result,\n            outputFiles: expectedFiles\n        };\n    }\n\n    // Prepare to Push command\n    public async runPrepareToPush(project: string, options: CommandOptions = {}): Promise<CommandResult> {\n        const args = ['nx', 'lint', project];\n        const expectedFiles: string[] = [];\n        \n        const result = await this.execute('yarn', args, options);\n        return {\n            ...result,\n            outputFiles: expectedFiles\n        };\n    }\n\n    // Check if command is running\n    public isRunning(): boolean {\n        return this._isRunning;\n    }\n\n    // Cancel current command\n    public cancel(): void {\n        if (this._currentProcess) {\n            this._currentProcess.kill('SIGTERM');\n            this._isRunning = false;\n            this._currentProcess = undefined;\n        }\n    }\n\n    private mapToYarnCommands(command: string, args: string[]): { command: string; commandArgs: string[] } {\n        return {\n            command: 'echo',\n            commandArgs: [`Unknown command: ${command}`]\n        };\n    }\n\n    private getExpectedOutputFiles(commandType: string): string[] {\n        switch (commandType) {\n            case 'aiDebug':\n                return [\n                    '.github/instructions/ai_utilities_context/ai-debug-context.txt',\n                    '.github/instructions/ai_utilities_context/jest-output.txt',\n                    '.github/instructions/ai_utilities_context/diff.txt'\n                ];\n            case 'nxTest':\n                return [\n                    '.github/instructions/ai_utilities_context/jest-output.txt'\n                ];\n            case 'gitDiff':\n                return [\n                    '.github/instructions/ai_utilities_context/diff.txt'\n                ];\n            case 'prepareToPush':\n                return [];\n            default:\n                return [];\n        }\n    }\n}\n"],"version":3}