72906878d9ee74e5f9b4f81240799f0a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandRunner = void 0;
const child_process_1 = require("child_process");
const vscode = __importStar(require("vscode"));
class CommandRunner {
    _outputChannel;
    _currentProcess;
    _isRunning = false;
    constructor(outputChannel) {
        this._outputChannel = outputChannel;
    }
    async execute(command, args, options = {}) {
        const startTime = Date.now();
        return new Promise((resolve) => {
            this._isRunning = true;
            this._currentProcess = (0, child_process_1.spawn)(command, args, {
                cwd: options.cwd || vscode.workspace.workspaceFolders?.[0]?.uri.fsPath,
                env: { ...process.env, ...options.env },
                stdio: ['pipe', 'pipe', 'pipe'],
                shell: options.shell || false
            });
            let stdout = '';
            let stderr = '';
            this._currentProcess.stdout?.on('data', (data) => {
                const text = data.toString();
                stdout += text;
                this._outputChannel.append(text);
            });
            this._currentProcess.stderr?.on('data', (data) => {
                const text = data.toString();
                stderr += text;
                this._outputChannel.append(text);
            });
            this._currentProcess.on('close', (code) => {
                this._isRunning = false;
                this._currentProcess = undefined;
                const duration = Date.now() - startTime;
                const exitCode = code || 0;
                resolve({
                    success: exitCode === 0,
                    exitCode,
                    output: stdout,
                    error: stderr || undefined,
                    duration,
                    outputFiles: this.getExpectedOutputFiles(this.mapCommandName(command, args))
                });
            });
            this._currentProcess.on('error', (error) => {
                this._isRunning = false;
                this._currentProcess = undefined;
                const duration = Date.now() - startTime;
                resolve({
                    success: false,
                    exitCode: 1,
                    output: stdout,
                    error: error.message,
                    duration,
                    outputFiles: this.getExpectedOutputFiles(this.mapCommandName(command, args))
                });
            });
            // Handle timeout
            if (options.timeout) {
                setTimeout(() => {
                    if (this._currentProcess) {
                        this._currentProcess.kill('SIGTERM');
                        this._isRunning = false;
                        this._currentProcess = undefined;
                        resolve({
                            success: false,
                            exitCode: 1,
                            output: stdout,
                            error: 'Command timed out',
                            duration: Date.now() - startTime
                        });
                    }
                }, options.timeout);
            }
        });
    }
    mapCommandName(command, args) {
        if (command === 'yarn' && args.includes('nx')) {
            if (args.includes('test')) {
                return 'nxTest';
            }
            if (args.includes('lint')) {
                return 'prepareToPush';
            }
            if (args.includes('ai-debug')) {
                return 'aiDebug';
            }
        }
        if (command === 'git' && args.includes('diff')) {
            return 'gitDiff';
        }
        return 'unknown';
    }
    async executeShell(command, options = {}) {
        const [cmd, ...args] = command.split(' ');
        return this.execute(cmd, args, { ...options, shell: true });
    }
    // AI Debug command
    async runAiDebug(project, options = {}) {
        const args = ['nx', 'test', project, '--verbose'];
        const expectedFiles = [
            '.github/instructions/ai_utilities_context/ai-debug-context.txt',
            '.github/instructions/ai_utilities_context/jest-output.txt',
            '.github/instructions/ai_utilities_context/diff.txt'
        ];
        const result = await this.execute('yarn', args, options);
        return {
            ...result,
            outputFiles: expectedFiles
        };
    }
    // NX Test command
    async runNxTest(project, options = {}) {
        const args = ['nx', 'test', project, options.useExpected ? '--use-expected' : '--verbose'];
        const expectedFiles = [
            '.github/instructions/ai_utilities_context/jest-output.txt'
        ];
        const result = await this.execute('yarn', args, options);
        return {
            ...result,
            outputFiles: expectedFiles
        };
    }
    // Git Diff command
    async runGitDiff(options = {}) {
        const args = ['diff'];
        const expectedFiles = [
            '.github/instructions/ai_utilities_context/diff.txt'
        ];
        const result = await this.execute('git', args, options);
        return {
            ...result,
            outputFiles: expectedFiles
        };
    }
    // Prepare to Push command
    async runPrepareToPush(project, options = {}) {
        const args = ['nx', 'lint', project];
        const expectedFiles = [];
        const result = await this.execute('yarn', args, options);
        return {
            ...result,
            outputFiles: expectedFiles
        };
    }
    // Check if command is running
    isRunning() {
        return this._isRunning;
    }
    // Cancel current command
    cancel() {
        if (this._currentProcess) {
            this._currentProcess.kill('SIGTERM');
            this._isRunning = false;
            this._currentProcess = undefined;
        }
    }
    mapToYarnCommands(command, args) {
        return {
            command: 'echo',
            commandArgs: [`Unknown command: ${command}`]
        };
    }
    getExpectedOutputFiles(commandType) {
        switch (commandType) {
            case 'aiDebug':
                return [
                    '.github/instructions/ai_utilities_context/ai-debug-context.txt',
                    '.github/instructions/ai_utilities_context/jest-output.txt',
                    '.github/instructions/ai_utilities_context/diff.txt'
                ];
            case 'nxTest':
                return [
                    '.github/instructions/ai_utilities_context/jest-output.txt'
                ];
            case 'gitDiff':
                return [
                    '.github/instructions/ai_utilities_context/diff.txt'
                ];
            case 'prepareToPush':
                return [];
            default:
                return [];
        }
    }
}
exports.CommandRunner = CommandRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,