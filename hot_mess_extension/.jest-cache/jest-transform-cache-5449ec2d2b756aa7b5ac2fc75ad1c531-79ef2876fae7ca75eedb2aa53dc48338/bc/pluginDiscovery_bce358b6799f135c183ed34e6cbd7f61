bbe2cdd7681b3f378cc12aca7c53c4a9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginSecurityService = exports.PluginDiscoveryService = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
class PluginDiscoveryService {
    context;
    securityService;
    constructor(context) {
        this.context = context;
        this.securityService = new PluginSecurityService();
    }
    async discoverPlugins(directories) {
        const manifests = [];
        try {
            const dirArray = Array.isArray(directories) ? directories : [directories];
            const allPluginDirs = [];
            for (const directory of dirArray) {
                const pluginDirs = await this.getPluginDirectories(directory);
                allPluginDirs.push(...pluginDirs);
            }
            for (const pluginDir of allPluginDirs) {
                const manifest = await this.loadPluginManifest(pluginDir);
                if (manifest) {
                    manifests.push(manifest);
                }
            }
        }
        catch (error) {
            console.warn(`Failed to discover plugins:`, error);
        }
        return manifests;
    }
    async loadPlugin(manifest) {
        try {
            // Security check
            // Convert manifest to plugin-like object for security scan
            const pluginForScan = {
                metadata: manifest.metadata,
                activate: async () => { },
                deactivate: async () => { }
            };
            const securityReport = await this.securityService.scanPlugin(pluginForScan);
            if (!securityReport.approved) {
                throw new Error(`Plugin ${manifest.metadata.id} failed security scan`);
            }
            // Load plugin module
            const pluginModule = require(manifest.entryPoint);
            const PluginClass = pluginModule.default || pluginModule;
            if (typeof PluginClass !== 'function') {
                throw new Error(`Plugin ${manifest.metadata.id} does not export a valid plugin class`);
            }
            const plugin = new PluginClass();
            // Validate plugin structure
            if (!await this.validatePlugin(plugin)) {
                throw new Error(`Plugin ${manifest.metadata.id} failed validation`);
            }
            return plugin;
        }
        catch (error) {
            throw new Error(`Failed to load plugin ${manifest.metadata.id}: ${error.message}`);
        }
    }
    async validatePlugin(manifest) {
        const errors = [];
        const warnings = [];
        try {
            // Check required properties
            if (!manifest.metadata.id || !manifest.metadata.name || !manifest.metadata.version) {
                errors.push('Plugin must have id, name, and version in metadata');
            }
            // Check capabilities
            if (!manifest.metadata.capabilities || manifest.metadata.capabilities.length === 0) {
                warnings.push('Plugin should declare at least one capability');
            }
            // Validate version format
            if (!this.isValidVersion(manifest.metadata.version)) {
                errors.push('Plugin version must follow semantic versioning');
            }
            // Check capabilities structure
            for (const capability of manifest.metadata.capabilities) {
                if (!capability.type || !capability.name) {
                    errors.push('Each capability must have type and name');
                }
            }
            return {
                isValid: errors.length === 0,
                errors,
                warnings
            };
        }
        catch (error) {
            return {
                isValid: false,
                errors: [`Plugin validation failed: ${error.message}`],
                warnings
            };
        }
    }
    async getPluginDirectories(directory) {
        const directories = [];
        if (!fs.existsSync(directory)) {
            return directories;
        }
        const entries = fs.readdirSync(directory, { withFileTypes: true });
        for (const entry of entries) {
            if (entry.isDirectory()) {
                const pluginDir = path.join(directory, entry.name);
                const packageJsonPath = path.join(pluginDir, 'package.json');
                if (fs.existsSync(packageJsonPath)) {
                    directories.push(pluginDir);
                }
            }
        }
        return directories;
    }
    async loadPluginManifest(pluginDir) {
        try {
            const packageJsonPath = path.join(pluginDir, 'package.json');
            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
            // Check if it's an AI Debug plugin
            if (!packageJson.keywords?.includes('ai-debug-plugin')) {
                return null;
            }
            const metadata = {
                id: packageJson.name,
                name: packageJson.displayName || packageJson.name,
                version: packageJson.version,
                description: packageJson.description,
                author: packageJson.author,
                license: packageJson.license,
                repository: packageJson.repository?.url,
                homepage: packageJson.homepage,
                keywords: packageJson.keywords,
                enabled: true, // Default to enabled
                capabilities: packageJson.aiDebugPlugin?.capabilities || [],
                dependencies: packageJson.aiDebugPlugin?.dependencies || [],
                engineVersion: packageJson.aiDebugPlugin?.engineVersion || '1.0.0',
                config: packageJson.aiDebugPlugin?.config || {},
                icon: packageJson.aiDebugPlugin?.icon,
                documentation: packageJson.aiDebugPlugin?.documentation,
                examples: packageJson.aiDebugPlugin?.examples || []
            };
            const entryPoint = path.join(pluginDir, packageJson.main || 'index.js');
            if (!fs.existsSync(entryPoint)) {
                throw new Error(`Entry point not found: ${entryPoint}`);
            }
            return {
                path: pluginDir,
                packageJson,
                metadata,
                entryPoint
            };
        }
        catch (error) {
            console.warn(`Failed to load plugin manifest from ${pluginDir}:`, error);
            return null;
        }
    }
    isValidVersion(version) {
        // Simplified semver regex that works with TypeScript
        const semverRegex = /^\d+\.\d+\.\d+(?:-[\w.-]+)?(?:\+[\w.-]+)?$/;
        return semverRegex.test(version);
    }
}
exports.PluginDiscoveryService = PluginDiscoveryService;
class PluginSecurityService {
    async validatePlugin(plugin) {
        const errors = [];
        const warnings = [];
        try {
            // Check required methods
            if (typeof plugin.activate !== 'function') {
                errors.push('Plugin must have an activate method');
            }
            if (typeof plugin.deactivate !== 'function') {
                errors.push('Plugin must have a deactivate method');
            }
            // Check metadata
            const { metadata } = plugin;
            if (!metadata.id || !metadata.name || !metadata.version) {
                errors.push('Plugin must have id, name, and version in metadata');
            }
            return {
                isValid: errors.length === 0,
                errors,
                warnings
            };
        }
        catch (error) {
            return {
                isValid: false,
                errors: [`Plugin validation failed: ${error.message}`],
                warnings
            };
        }
    }
    async scanPlugin(plugin) {
        const vulnerabilities = [];
        let riskLevel = 'low';
        // Check for suspicious dependencies
        // const suspiciousDeps = await this.checkDependencies(dependencies || {});
        // vulnerabilities.push(...suspiciousDeps);
        // Check permissions
        const permissionIssues = await this.checkPermissionsPrivate(plugin.metadata.capabilities);
        vulnerabilities.push(...permissionIssues);
        // Check code patterns - would need entry point from plugin metadata
        // const codeIssues = await this.checkCodePatterns(entryPoint);
        // vulnerabilities.push(...codeIssues);
        // Determine risk level
        const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical');
        const highVulns = vulnerabilities.filter(v => v.severity === 'high');
        const mediumVulns = vulnerabilities.filter(v => v.severity === 'medium');
        if (criticalVulns.length > 0) {
            riskLevel = 'critical';
        }
        else if (highVulns.length > 0) {
            riskLevel = 'high';
        }
        else if (mediumVulns.length > 0) {
            riskLevel = 'medium';
        }
        return {
            pluginId: plugin.metadata.id,
            scannedAt: new Date(),
            riskLevel,
            issues: vulnerabilities.map(v => ({
                type: v.type,
                severity: v.severity,
                message: v.description,
                location: v.affectedFiles?.join(', '),
                fix: v.fix
            })),
            recommendations: this.generateRecommendations(vulnerabilities),
            approved: riskLevel !== 'critical' && vulnerabilities.length === 0
        };
    }
    async validatePermissions(plugin, permissions) {
        // Check if plugin is requesting only necessary permissions
        const validPermissions = ['file-system', 'network', 'extension-api', 'user-interaction', 'workspace-access'];
        for (const permission of permissions) {
            if (!validPermissions.includes(permission.type)) {
                return false;
            }
        }
        return true;
    }
    async sandboxPlugin(plugin) {
        // Implement plugin sandboxing if needed
        // This would involve creating a restricted execution environment
        console.log(`Sandboxing plugin: ${plugin.metadata.id}`);
    }
    async checkIntegrity(plugin) {
        // Implement integrity checking
        // This would involve verifying plugin signatures, checksums, etc.
        return true;
    }
    async checkDependencies(dependencies) {
        const vulnerabilities = [];
        // List of known malicious or problematic packages
        const suspiciousPackages = [
            'exec', 'child_process', 'spawn', 'eval', 'vm'
        ];
        for (const [depName, version] of Object.entries(dependencies)) {
            if (suspiciousPackages.includes(depName)) {
                vulnerabilities.push({
                    id: `dep-${depName}`,
                    type: 'dependency',
                    severity: 'medium',
                    description: `Potentially dangerous dependency: ${depName}`,
                    impact: 'Plugin can execute arbitrary code'
                });
            }
        }
        return vulnerabilities;
    }
    async checkPermissions(plugin) {
        const capabilities = plugin.metadata.capabilities;
        const granted = [];
        const denied = [];
        const requested = [];
        for (const capability of capabilities) {
            requested.push(capability.type);
            // Simple approval logic
            if (['command', 'analyzer', 'formatter'].includes(capability.type)) {
                granted.push(capability.type);
            }
            else {
                denied.push(capability.type);
            }
        }
        return { granted, denied, requested };
    }
    async checkPermissionsPrivate(capabilities) {
        const vulnerabilities = [];
        for (const capability of capabilities) {
            if (capability.permissions) {
                for (const permission of capability.permissions) {
                    if (permission.type === 'file-system' && permission.scope === '*') {
                        vulnerabilities.push({
                            id: `perm-fs-wildcard`,
                            type: 'permission',
                            severity: 'high',
                            description: 'Plugin requests unrestricted file system access',
                            impact: 'Plugin can read/write any file'
                        });
                    }
                }
            }
        }
        return vulnerabilities;
    }
    async checkCodePatterns(entryPoint) {
        const vulnerabilities = [];
        try {
            const code = fs.readFileSync(entryPoint, 'utf8');
            // Check for eval usage
            if (code.includes('eval(')) {
                vulnerabilities.push({
                    id: 'code-eval',
                    type: 'code',
                    severity: 'critical',
                    description: 'Plugin uses eval() which can execute arbitrary code',
                    impact: 'Code injection vulnerability'
                });
            }
            // Check for network requests to suspicious domains
            const suspiciousDomains = ['bit.ly', 'tinyurl.com', 'raw.githubusercontent.com'];
            for (const domain of suspiciousDomains) {
                if (code.includes(domain)) {
                    vulnerabilities.push({
                        id: `code-suspicious-domain-${domain}`,
                        type: 'network',
                        severity: 'medium',
                        description: `Plugin makes requests to suspicious domain: ${domain}`,
                        impact: 'Potential data exfiltration'
                    });
                }
            }
        }
        catch (error) {
            console.warn(`Failed to scan code patterns in ${entryPoint}:`, error);
        }
        return vulnerabilities;
    }
    generateRecommendations(vulnerabilities) {
        const recommendations = [];
        if (vulnerabilities.some(v => v.severity === 'critical')) {
            recommendations.push('Do not install this plugin due to critical security issues');
        }
        if (vulnerabilities.some(v => v.severity === 'high')) {
            recommendations.push('Review plugin permissions and code before installation');
        }
        if (vulnerabilities.some(v => v.type === 'dependency')) {
            recommendations.push('Audit plugin dependencies for known vulnerabilities');
        }
        if (vulnerabilities.some(v => v.type === 'permission')) {
            recommendations.push('Limit plugin permissions to minimum necessary');
        }
        return recommendations;
    }
}
exports.PluginSecurityService = PluginSecurityService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,