{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/aiDebug.test.ts","mappings":";;AAMA,kBAAkB;AAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;IACvB,SAAS,EAAE;QACP,gBAAgB,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,iBAAiB,EAAE,EAAE,CAAC;QAC1D,gBAAgB,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YAC7B,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,2CAA2C,CAAC;SAClE,CAAC,CAAC;KACN;IACD,MAAM,EAAE;QACJ,mBAAmB,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YAChC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;YACrB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;SAClB,CAAC,CAAC;KACN;CACJ,CAAC,CAAC,CAAC;AAEJ,mBAAmB;AACnB,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;AAGrC,qBAAqB;AACrB,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;AAGrC,qCAAqC;AACrC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;CACnB,CAAC,CAAC,CAAC;AAjCJ,wCAA4C;AAE5C,yDAAsD;AACtD,yDAAwD;AAqBxD,MAAM,iBAAiB,GAAG,yBAAmD,CAAC;AAI9E,MAAM,mBAAmB,GAAG,2BAAuD,CAAC;AAOpF,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC5B,IAAI,cAA8B,CAAC;IACnC,IAAI,eAAyC,CAAC;IAC9C,IAAI,iBAA6C,CAAC;IAClD,IAAI,SAAmC,CAAC;IAExC,UAAU,CAAC,GAAG,EAAE;QACZ,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,yBAAyB;QACzB,eAAe,GAAG;YACd,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBAC/C,kBAAkB,EAAE,4BAA4B;gBAChD,uBAAuB,EAAE,iCAAiC;gBAC1D,MAAM,EAAE,gBAAgB;gBACxB,aAAa,EAAE,uBAAuB;aACzC,CAAC;YACF,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;YACzD,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;YAChE,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACtC,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,IAAI,IAAI,EAAE;gBACnB,QAAQ,EAAE,IAAI,IAAI,EAAE;gBACpB,QAAQ,EAAE,IAAI,IAAI,EAAE;aACvB,CAAC;YACF,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;YACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;YACjF,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;YAChC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;SACjB,CAAC;QAET,2BAA2B;QAC3B,iBAAiB,GAAG;YAChB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACpC,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,CAAC;gBACX,MAAM,EAAE,iBAAiB;gBACzB,QAAQ,EAAE,IAAI;aACjB,CAAC;YACF,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACnC,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,CAAC;gBACX,MAAM,EAAE,aAAa;gBACrB,QAAQ,EAAE,IAAI;aACjB,CAAC;SACE,CAAC;QAET,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,CAAC;QAC5D,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,CAAC;QAEhE,mBAAmB;QACnB,SAAS,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;QAC3C,MAAM,WAAW,GAAG;YAChB,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE;YACzB,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE;YACzB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;gBAC5B,IAAI,KAAK,KAAK,OAAO,EAAE,CAAC;oBACpB,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU;gBACjD,CAAC;YACL,CAAC,CAAC;SACL,CAAC;QACF,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAEvC,cAAc,GAAG,IAAI,wBAAc,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;QACjB,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YAClE,UAAU;YACV,MAAM,OAAO,GAAG,cAAc,CAAC;YAC/B,MAAM,OAAO,GAAmB;gBAC5B,KAAK,EAAE,KAAK;gBACZ,WAAW,EAAE,KAAK;gBAClB,MAAM,EAAE,KAAK;gBACb,KAAK,EAAE,OAAO;aACjB,CAAC;YAEF,2EAA2E;YAE3E,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAE1D,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACxD,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YAClH,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC7D,UAAU;YACV,MAAM,OAAO,GAAG,cAAc,CAAC;YAC/B,MAAM,OAAO,GAAmB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;YAEjD,sDAAsD;YAEtD,MAAM;YACN,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAE3C,SAAS;YACT,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC7D,UAAU;YACV,MAAM,OAAO,GAAG,cAAc,CAAC;YAC/B,MAAM,OAAO,GAAmB,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;YAEtD,4CAA4C;YAE5C,MAAM;YACN,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAE3C,SAAS;YACT,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACrH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACtD,UAAU;YACV,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,oDAAoD;YAEpD,MAAM;YACN,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAElC,+DAA+D;YAC/D,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACpD,UAAU;YACV,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,qDAAqD;YACrD,iBAAiB,CAAC,SAAS,CAAC,qBAAqB,CAAC;gBAC9C,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,CAAC;gBACX,MAAM,EAAE,aAAa;gBACrB,KAAK,EAAE,sBAAsB;gBAC7B,QAAQ,EAAE,IAAI;aACjB,CAAC,CAAC;YAEH,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC,mCAAmC;QAC9F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACnD,UAAU;YACV,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,eAAe,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC,CAAC;YAE/H,MAAM;YACN,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC5D,UAAU;YACV,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,iCAAiC;YAEjC,MAAM;YACN,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAElC,SAAS;YACT,MAAM,eAAe,GAAG,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;YAC9D,MAAM,iBAAiB,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAClD,IAAI,CAAC,CAAC,CAAC,KAAK,uBAAuB,CACtC,CAAC;YACF,MAAM,CAAC,iBAAiB,CAAC,CAAC,WAAW,EAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YAC/D,UAAU;YACV,MAAM,OAAO,GAAG,cAAc,CAAC;YAC/B,MAAM,OAAO,GAAmB,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;YAEnD,iCAAiC;YAEjC,MAAM;YACN,MAAM,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAE3C,SAAS;YACT,MAAM,eAAe,GAAG,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;YAC9D,MAAM,WAAW,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAC5C,IAAI,CAAC,CAAC,CAAC,KAAK,kBAAkB,CACjC,CAAC;YACF,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,MAAM,CAAC,WAAY,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,oCAAoC,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACrD,UAAU;YACV,MAAM,WAAW,GAAG,mBAAmB,CAAC;YACxC,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,eAAe,CAAC,cAAc,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAEjE,MAAM;YACN,MAAO,cAAsB,CAAC,oBAAoB,CAC9C,WAAW,EACX,gBAAgB,EAChB,gBAAgB,EAChB,OAAO,EACP,CAAC,EAAE,wBAAwB;YAC3B,SAAS,EACT,KAAK,EACL,CAAC,EAAE,4BAA4B;YAC/B,CAAC,CAAE,gCAAgC;aACtC,CAAC;YAEF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACnD,kBAAkB,EAClB,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CACrD,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACnD,kBAAkB,EAClB,MAAM,CAAC,gBAAgB,CAAC,iCAAiC,CAAC,CAC7D,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACrD,UAAU;YACV,MAAM,WAAW,GAAG,mBAAmB,CAAC;YACxC,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,eAAe,CAAC,cAAc,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;YAElE,MAAM;YACN,MAAO,cAAsB,CAAC,oBAAoB,CAC9C,WAAW,EACX,gBAAgB,EAChB,gBAAgB,EAChB,OAAO,EACP,CAAC,EAAE,wBAAwB;YAC3B,SAAS,EACT,KAAK,EACL,CAAC,EAAE,4BAA4B;YAC/B,CAAC,CAAE,gCAAgC;aACtC,CAAC;YAEF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACnD,kBAAkB,EAClB,MAAM,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CACrD,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACnD,kBAAkB,EAClB,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CACjD,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC7C,UAAU;YACV,MAAM,WAAW,GAAG,mBAAmB,CAAC;YACxC,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,eAAe,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAE9E,MAAM;YACN,MAAO,cAAsB,CAAC,oBAAoB,CAC9C,WAAW,EACX,gBAAgB,EAChB,gBAAgB,EAChB,OAAO,EACP,CAAC,EACD,SAAS,EACT,KAAK,EACL,CAAC,EACD,CAAC,CACJ,CAAC;YAEF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACnD,kBAAkB,EAClB,MAAM,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,CACzD,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YAClD,UAAU;YACV,MAAM,MAAM,GAAG,0BAA0B,CAAC;YAC1C,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,MAAM;YACN,MAAO,cAAsB,CAAC,0BAA0B,CACpD,MAAM,EACN,gBAAgB,EAChB,gBAAgB,EAChB,OAAO,EACP,CAAC,EAAE,wBAAwB;YAC3B,CAAC,EAAE,4BAA4B;YAC/B,CAAC,CAAE,gCAAgC;aACtC,CAAC;YAEF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACnD,uBAAuB,EACvB,MAAM,CAAC,gBAAgB,CAAC,0CAA0C,CAAC,CACtE,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACnD,uBAAuB,EACvB,MAAM,CAAC,gBAAgB,CAAC,kCAAkC,CAAC,CAC9D,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YACzD,UAAU;YACV,MAAM,MAAM,GAAG,0BAA0B,CAAC;YAC1C,MAAM,OAAO,GAAG,cAAc,CAAC;YAE/B,MAAM;YACN,MAAO,cAAsB,CAAC,0BAA0B,CACpD,MAAM,EACN,gBAAgB,EAChB,gBAAgB,EAChB,OAAO,EACP,CAAC,EAAE,wBAAwB;YAC3B,CAAC,EAAE,4BAA4B;YAC/B,CAAC,CAAE,gCAAgC;aACtC,CAAC;YAEF,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACnD,uBAAuB,EACvB,MAAM,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,CAC/D,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACnD,UAAU;YACV,MAAM,UAAU,GAAG;;;;;kBAKb,CAAC;YAEP,MAAM;YACN,MAAM,KAAK,GAAI,cAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAEpE,SAAS;YACT,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC7C,UAAU;YACV,MAAM,UAAU,GAAG,EAAE,CAAC;YAEtB,MAAM;YACN,MAAM,KAAK,GAAI,cAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAEpE,SAAS;YACT,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/__tests__/aiDebug.test.ts"],"sourcesContent":["import { AiDebugCommand } from '../aiDebug';\nimport { CommandOptions } from '../../types';\nimport { FileManager } from '../../utils/fileManager';\nimport { CommandRunner } from '../../utils/shellRunner';\nimport * as vscode from 'vscode';\n\n// Mock VSCode API\njest.mock('vscode', () => ({\n    workspace: {\n        workspaceFolders: [{ uri: { fsPath: '/test/workspace' } }],\n        getConfiguration: jest.fn(() => ({\n            get: jest.fn(() => '.github/instructions/ai_utilities_context')\n        }))\n    },\n    window: {\n        createOutputChannel: jest.fn(() => ({\n            appendLine: jest.fn(),\n            show: jest.fn()\n        }))\n    }\n}));\n\n// Mock FileManager\njest.mock('../../utils/fileManager');\nconst MockedFileManager = FileManager as jest.MockedClass<typeof FileManager>;\n\n// Mock CommandRunner\njest.mock('../../utils/shellRunner');\nconst MockedCommandRunner = CommandRunner as jest.MockedClass<typeof CommandRunner>;\n\n// Mock child_process for spawn calls\njest.mock('child_process', () => ({\n    spawn: jest.fn()\n}));\n\ndescribe('AiDebugCommand', () => {\n    let aiDebugCommand: AiDebugCommand;\n    let mockFileManager: jest.Mocked<FileManager>;\n    let mockCommandRunner: jest.Mocked<CommandRunner>;\n    let mockSpawn: jest.MockedFunction<any>;\n\n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        // Setup FileManager mock\n        mockFileManager = {\n            initializeOutputFiles: jest.fn().mockResolvedValue({\n                'ai-debug-context': '/test/ai-debug-context.txt',\n                'pr-description-prompt': '/test/pr-description-prompt.txt',\n                'diff': '/test/diff.txt',\n                'jest-output': '/test/jest-output.txt'\n            }),\n            saveOutput: jest.fn().mockResolvedValue('/test/file.txt'),\n            getFileContent: jest.fn().mockResolvedValue('test file content'),\n            getFileStats: jest.fn().mockResolvedValue({\n                size: 1024,\n                created: new Date(),\n                modified: new Date(),\n                accessed: new Date()\n            }),\n            readFile: jest.fn(),\n            writeFile: jest.fn().mockResolvedValue({ success: true, path: '/test/file.txt' }),\n            ensureDirectoryExists: jest.fn(),\n            deleteFile: jest.fn()\n        } as any;\n\n        // Setup CommandRunner mock\n        mockCommandRunner = {\n            runGitDiff: jest.fn().mockResolvedValue({\n                success: true,\n                exitCode: 0,\n                output: 'git diff output',\n                duration: 1000\n            }),\n            runNxTest: jest.fn().mockResolvedValue({\n                success: true,\n                exitCode: 0,\n                output: 'test output',\n                duration: 5000\n            })\n        } as any;\n\n        MockedFileManager.mockImplementation(() => mockFileManager);\n        MockedCommandRunner.mockImplementation(() => mockCommandRunner);\n        \n        // Setup spawn mock\n        mockSpawn = require('child_process').spawn;\n        const mockProcess = {\n            stdout: { on: jest.fn() },\n            stderr: { on: jest.fn() },\n            on: jest.fn((event, callback) => {\n                if (event === 'close') {\n                    setTimeout(() => callback(0), 10); // Success\n                }\n            })\n        };\n        mockSpawn.mockReturnValue(mockProcess);\n        \n        aiDebugCommand = new AiDebugCommand();\n    });\n\n    describe('run', () => {\n        it('should execute full aiDebug workflow when tests pass', async () => {\n            // Arrange\n            const project = 'test-project';\n            const options: CommandOptions = {\n                quick: false,\n                fullContext: false,\n                noDiff: false,\n                focus: 'tests'\n            };\n\n            // Command runner is already set up in beforeEach with successful responses\n\n            // Act\n            const result = await aiDebugCommand.run(project, options);\n\n            // Assert\n            expect(result.success).toBe(true);\n            expect(result.exitCode).toBe(0);\n            expect(mockCommandRunner.runGitDiff).toHaveBeenCalled();\n            expect(mockCommandRunner.runNxTest).toHaveBeenCalledWith(project, expect.objectContaining({ fullOutput: false }));\n            expect(mockFileManager.saveOutput).toHaveBeenCalled();\n        });\n\n        it('should skip git diff when noDiff option is true', async () => {\n            // Arrange\n            const project = 'test-project';\n            const options: CommandOptions = { noDiff: true };\n\n            // Test runner already mocked with successful response\n\n            // Act\n            await aiDebugCommand.run(project, options);\n\n            // Assert\n            expect(mockCommandRunner.runGitDiff).not.toHaveBeenCalled();\n        });\n\n        it('should use fullContext when option is specified', async () => {\n            // Arrange\n            const project = 'test-project';\n            const options: CommandOptions = { fullContext: true };\n\n            // Test already set up with successful mocks\n\n            // Act\n            await aiDebugCommand.run(project, options);\n\n            // Assert\n            expect(mockCommandRunner.runNxTest).toHaveBeenCalledWith(project, expect.objectContaining({ fullOutput: true }));\n        });\n\n        it('should run prepareToPush when tests pass', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            // Spawn is already mocked with successful responses\n\n            // Act\n            await aiDebugCommand.run(project);\n\n            // Assert - The command should attempt to run lint and prettier\n            expect(mockFileManager.saveOutput).toHaveBeenCalled();\n        });\n\n        it('should handle test failures gracefully', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            // Override the default successful mock for this test\n            mockCommandRunner.runNxTest.mockResolvedValueOnce({\n                success: false,\n                exitCode: 1,\n                output: 'test failed',\n                error: 'Test failure message',\n                duration: 5000\n            });\n\n            // Act\n            const result = await aiDebugCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(mockFileManager.saveOutput).toHaveBeenCalled(); // Should still create context file\n        });\n\n        it('should handle errors during execution', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            mockFileManager.initializeOutputFiles.mockRejectedValue(new Error('this.fileManager.initializeOutputFiles is not a function'));\n\n            // Act\n            const result = await aiDebugCommand.run(project);\n\n            // Assert\n            expect(result.success).toBe(false);\n            expect(result.exitCode).toBe(1);\n            expect(result.error).toBe('this.fileManager.initializeOutputFiles is not a function');\n        });\n\n        it('should generate PR description when tests pass', async () => {\n            // Arrange\n            const project = 'test-project';\n            \n            // Using default successful mocks\n\n            // Act\n            await aiDebugCommand.run(project);\n\n            // Assert\n            const saveOutputCalls = mockFileManager.saveOutput.mock.calls;\n            const prDescriptionCall = saveOutputCalls.find(call => \n                call[0] === 'pr-description-prompt'\n            );\n            expect(prDescriptionCall).toBeDefined();\n        });\n\n        it('should include focus-specific guidance in context', async () => {\n            // Arrange\n            const project = 'test-project';\n            const options: CommandOptions = { focus: 'types' };\n            \n            // Using default successful mocks\n\n            // Act\n            await aiDebugCommand.run(project, options);\n\n            // Assert\n            const saveOutputCalls = mockFileManager.saveOutput.mock.calls;\n            const contextCall = saveOutputCalls.find(call => \n                call[0] === 'ai-debug-context'\n            );\n            expect(contextCall).toBeDefined();\n            expect(contextCall![1]).toContain('FOCUS AREA: TypeScript type issues');\n        });\n    });\n\n    describe('createAiDebugContext', () => {\n        it('should create context for passing tests', async () => {\n            // Arrange\n            const contextFile = '/test/context.txt';\n            const project = 'test-project';\n            \n            mockFileManager.getFileContent.mockResolvedValue('test results');\n\n            // Act\n            await (aiDebugCommand as any).createAiDebugContext(\n                contextFile,\n                '/test/diff.txt',\n                '/test/jest.txt',\n                project,\n                0, // exitCode: 0 (passing)\n                'general',\n                false,\n                0, // lintExitCode: 0 (passing)\n                0  // prettierExitCode: 0 (passing)\n            );\n\n            // Assert\n            expect(mockFileManager.saveOutput).toHaveBeenCalledWith(\n                'ai-debug-context',\n                expect.stringContaining('STATUS: ✅ TESTS PASSING')\n            );\n            expect(mockFileManager.saveOutput).toHaveBeenCalledWith(\n                'ai-debug-context',\n                expect.stringContaining('MOCK DATA VALIDATION (CRITICAL)')\n            );\n        });\n\n        it('should create context for failing tests', async () => {\n            // Arrange\n            const contextFile = '/test/context.txt';\n            const project = 'test-project';\n            \n            mockFileManager.getFileContent.mockResolvedValue('test failures');\n\n            // Act\n            await (aiDebugCommand as any).createAiDebugContext(\n                contextFile,\n                '/test/diff.txt',\n                '/test/jest.txt',\n                project,\n                1, // exitCode: 1 (failing)\n                'general',\n                false,\n                0, // lintExitCode: 0 (passing)\n                0  // prettierExitCode: 0 (passing)\n            );\n\n            // Assert\n            expect(mockFileManager.saveOutput).toHaveBeenCalledWith(\n                'ai-debug-context',\n                expect.stringContaining('STATUS: ❌ TESTS FAILING')\n            );\n            expect(mockFileManager.saveOutput).toHaveBeenCalledWith(\n                'ai-debug-context',\n                expect.stringContaining('ROOT CAUSE ANALYSIS')\n            );\n        });\n\n        it('should handle missing test file', async () => {\n            // Arrange\n            const contextFile = '/test/context.txt';\n            const project = 'test-project';\n            \n            mockFileManager.getFileContent.mockRejectedValue(new Error('File not found'));\n\n            // Act\n            await (aiDebugCommand as any).createAiDebugContext(\n                contextFile,\n                '/test/diff.txt',\n                '/test/jest.txt',\n                project,\n                0,\n                'general',\n                false,\n                0,\n                0\n            );\n\n            // Assert\n            expect(mockFileManager.saveOutput).toHaveBeenCalledWith(\n                'ai-debug-context',\n                expect.stringContaining('❌ No test results available')\n            );\n        });\n    });\n\n    describe('createPrDescriptionPrompts', () => {\n        it('should create PR description prompts', async () => {\n            // Arrange\n            const prFile = '/test/pr-description.txt';\n            const project = 'test-project';\n\n            // Act\n            await (aiDebugCommand as any).createPrDescriptionPrompts(\n                prFile,\n                '/test/diff.txt',\n                '/test/jest.txt',\n                project,\n                0, // exitCode: 0 (passing)\n                0, // lintExitCode: 0 (passing)\n                0  // prettierExitCode: 0 (passing)\n            );\n\n            // Assert\n            expect(mockFileManager.saveOutput).toHaveBeenCalledWith(\n                'pr-description-prompt',\n                expect.stringContaining('GITHUB PR DESCRIPTION GENERATION PROMPTS')\n            );\n            expect(mockFileManager.saveOutput).toHaveBeenCalledWith(\n                'pr-description-prompt',\n                expect.stringContaining('TEST STATUS: ✅ All tests passing')\n            );\n        });\n\n        it('should indicate failing tests in PR prompts', async () => {\n            // Arrange\n            const prFile = '/test/pr-description.txt';\n            const project = 'test-project';\n\n            // Act\n            await (aiDebugCommand as any).createPrDescriptionPrompts(\n                prFile,\n                '/test/diff.txt',\n                '/test/jest.txt',\n                project,\n                1, // exitCode: 1 (failing)\n                0, // lintExitCode: 0 (passing)\n                0  // prettierExitCode: 0 (passing)\n            );\n\n            // Assert\n            expect(mockFileManager.saveOutput).toHaveBeenCalledWith(\n                'pr-description-prompt',\n                expect.stringContaining('TEST STATUS: ❌ Some tests failing')\n            );\n        });\n    });\n\n    describe('countChangedFiles', () => {\n        it('should count changed files from diff output', () => {\n            // Arrange\n            const diffOutput = `📁 FILE: file1.ts\nSome diff content\n📁 FILE: file2.ts\nMore diff content\n📁 FILE: file3.spec.ts\nTest diff content`;\n\n            // Act\n            const count = (aiDebugCommand as any).countChangedFiles(diffOutput);\n\n            // Assert\n            expect(count).toBe(3);\n        });\n\n        it('should return 0 for empty diff output', () => {\n            // Arrange\n            const diffOutput = '';\n\n            // Act\n            const count = (aiDebugCommand as any).countChangedFiles(diffOutput);\n\n            // Assert\n            expect(count).toBe(0);\n        });\n    });\n});\n"],"version":3}