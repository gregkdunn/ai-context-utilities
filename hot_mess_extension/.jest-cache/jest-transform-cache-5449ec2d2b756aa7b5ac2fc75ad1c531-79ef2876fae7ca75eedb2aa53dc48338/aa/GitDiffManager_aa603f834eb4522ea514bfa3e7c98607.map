{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/git/GitDiffManager.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/git/GitDiffManager.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { spawn } from 'child_process';\nimport * as path from 'path';\n\nexport interface GitCommit {\n    hash: string;\n    message: string;\n    author: string;\n    date: string;\n    parents: string[];\n}\n\nexport interface GitDiff {\n    files: GitFileChange[];\n    additions: number;\n    deletions: number;\n    summary: string;\n}\n\nexport interface GitFileChange {\n    path: string;\n    status: 'added' | 'modified' | 'deleted' | 'renamed';\n    additions?: number;\n    deletions?: number;\n    content?: string;\n}\n\nexport interface GitBranch {\n    name: string;\n    isRemote: boolean;\n    isHead: boolean;\n}\n\nexport class GitDiffManager {\n    private workspaceRoot: string;\n    private gitApi: any;\n    private repository: any;\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\n        this.initializeGitApi();\n    }\n\n    private async initializeGitApi(): Promise<void> {\n        try {\n            const gitExtension = vscode.extensions.getExtension('vscode.git');\n            if (!gitExtension) {\n                console.warn('Git extension not found');\n                return;\n            }\n\n            const git = gitExtension.isActive ? gitExtension.exports : await gitExtension.activate();\n            this.gitApi = git.getAPI(1);\n            \n            if (this.gitApi.repositories.length > 0) {\n                this.repository = this.gitApi.repositories[0];\n            }\n        } catch (error) {\n            console.error('Failed to initialize Git API:', error);\n        }\n    }\n\n    async getCommitHistory(maxCount: number = 50): Promise<GitCommit[]> {\n        try {\n            const commits = await this.executeGitCommand([\n                'log',\n                '--oneline',\n                '--max-count',\n                maxCount.toString(),\n                '--pretty=format:%H|%s|%an|%ad|%P',\n                '--date=short'\n            ]);\n\n            return commits.map(line => this.parseCommitLine(line));\n        } catch (error) {\n            console.error('Failed to get commit history:', error);\n            return [];\n        }\n    }\n\n    private parseCommitLine(line: string): GitCommit {\n        const parts = line.split('|');\n        return {\n            hash: parts[0] || '',\n            message: parts[1] || '',\n            author: parts[2] || '',\n            date: parts[3] || '',\n            parents: parts[4] ? parts[4].split(' ') : []\n        };\n    }\n\n    async getBranches(): Promise<GitBranch[]> {\n        try {\n            const localBranches = await this.executeGitCommand(['branch']);\n            const remoteBranches = await this.executeGitCommand(['branch', '-r']);\n\n            const branches: GitBranch[] = [];\n\n            // Parse local branches\n            localBranches.forEach(line => {\n                const trimmed = line.trim();\n                if (trimmed) {\n                    const isHead = trimmed.startsWith('* ');\n                    const name = isHead ? trimmed.substring(2) : trimmed;\n                    branches.push({ name, isRemote: false, isHead });\n                }\n            });\n\n            // Parse remote branches\n            remoteBranches.forEach(line => {\n                const trimmed = line.trim();\n                if (trimmed && !trimmed.includes('HEAD')) {\n                    const name = trimmed.replace(/^origin\\//, '');\n                    // Only add if not already exists as local branch\n                    if (!branches.some(b => b.name === name)) {\n                        branches.push({ name, isRemote: true, isHead: false });\n                    }\n                }\n            });\n\n            return branches;\n        } catch (error) {\n            console.error('Failed to get branches:', error);\n            return [];\n        }\n    }\n\n    async getCurrentBranch(): Promise<string> {\n        try {\n            const result = await this.executeGitCommand(['rev-parse', '--abbrev-ref', 'HEAD']);\n            return result[0] || 'main';\n        } catch (error) {\n            console.error('Failed to get current branch:', error);\n            return 'main';\n        }\n    }\n\n    async getBranchDiff(branch1: string, branch2: string): Promise<GitDiff> {\n        try {\n            const diffOutput = await this.executeGitCommand([\n                'diff',\n                '--name-status',\n                `${branch1}...${branch2}`\n            ]);\n\n            const files = this.parseDiffOutput(diffOutput);\n            \n            // Get detailed diff stats\n            const statsOutput = await this.executeGitCommand([\n                'diff',\n                '--stat',\n                `${branch1}...${branch2}`\n            ]);\n\n            const stats = this.parseDiffStats(statsOutput);\n\n            return {\n                files,\n                additions: stats.additions,\n                deletions: stats.deletions,\n                summary: `${files.length} files changed, ${stats.additions} insertions(+), ${stats.deletions} deletions(-)`\n            };\n        } catch (error) {\n            console.error('Failed to get branch diff:', error);\n            return { files: [], additions: 0, deletions: 0, summary: 'Failed to get diff' };\n        }\n    }\n\n    async getCommitDiff(commit1: string, commit2: string): Promise<GitDiff> {\n        try {\n            const diffOutput = await this.executeGitCommand([\n                'diff',\n                '--name-status',\n                commit1,\n                commit2\n            ]);\n\n            const files = this.parseDiffOutput(diffOutput);\n            \n            // Get detailed diff stats\n            const statsOutput = await this.executeGitCommand([\n                'diff',\n                '--stat',\n                commit1,\n                commit2\n            ]);\n\n            const stats = this.parseDiffStats(statsOutput);\n\n            return {\n                files,\n                additions: stats.additions,\n                deletions: stats.deletions,\n                summary: `${files.length} files changed, ${stats.additions} insertions(+), ${stats.deletions} deletions(-)`\n            };\n        } catch (error) {\n            console.error('Failed to get commit diff:', error);\n            return { files: [], additions: 0, deletions: 0, summary: 'Failed to get diff' };\n        }\n    }\n\n    async getInteractiveDiff(commit1: string, commit2: string): Promise<string> {\n        try {\n            const diffOutput = await this.executeGitCommandRaw([\n                'diff',\n                '--unified=3',\n                '--color=never',\n                commit1,\n                commit2\n            ]);\n\n            return diffOutput;\n        } catch (error) {\n            console.error('Failed to get interactive diff:', error);\n            return `Failed to get diff: ${(error as Error).message}`;\n        }\n    }\n\n    async getFileDiff(commit1: string, commit2: string, filePath: string): Promise<string> {\n        try {\n            const diffOutput = await this.executeGitCommandRaw([\n                'diff',\n                '--unified=3',\n                '--color=never',\n                commit1,\n                commit2,\n                '--',\n                filePath\n            ]);\n\n            return diffOutput;\n        } catch (error) {\n            console.error('Failed to get file diff:', error);\n            return `Failed to get diff for ${filePath}: ${(error as Error).message}`;\n        }\n    }\n\n    private parseDiffOutput(diffOutput: string[]): GitFileChange[] {\n        const files: GitFileChange[] = [];\n\n        diffOutput.forEach(line => {\n            const trimmed = line.trim();\n            if (trimmed) {\n                const parts = trimmed.split('\\t');\n                if (parts.length >= 2) {\n                    const status = this.mapGitStatus(parts[0]);\n                    const path = parts[1];\n                    files.push({ path, status });\n                }\n            }\n        });\n\n        return files;\n    }\n\n    private mapGitStatus(status: string): 'added' | 'modified' | 'deleted' | 'renamed' {\n        switch (status.charAt(0)) {\n            case 'A': return 'added';\n            case 'M': return 'modified';\n            case 'D': return 'deleted';\n            case 'R': return 'renamed';\n            default: return 'modified';\n        }\n    }\n\n    private parseDiffStats(statsOutput: string[]): { additions: number, deletions: number } {\n        let additions = 0;\n        let deletions = 0;\n\n        const summary = statsOutput[statsOutput.length - 1];\n        if (summary) {\n            const insertMatch = summary.match(/(\\d+) insertions?\\(\\+\\)/);\n            const deleteMatch = summary.match(/(\\d+) deletions?\\(\\-\\)/);\n            \n            if (insertMatch) {\n                additions = parseInt(insertMatch[1], 10);\n            }\n            if (deleteMatch) {\n                deletions = parseInt(deleteMatch[1], 10);\n            }\n        }\n\n        return { additions, deletions };\n    }\n\n    private async executeGitCommand(args: string[]): Promise<string[]> {\n        const output = await this.executeGitCommandRaw(args);\n        return output.trim().split('\\n').filter(line => line.length > 0);\n    }\n\n    private async executeGitCommandRaw(args: string[]): Promise<string> {\n        return new Promise((resolve, reject) => {\n            const child = spawn('git', args, {\n                cwd: this.workspaceRoot,\n                stdio: 'pipe',\n                shell: process.platform === 'win32'\n            });\n\n            let output = '';\n            let errorOutput = '';\n\n            child.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n\n            child.stderr.on('data', (data) => {\n                errorOutput += data.toString();\n            });\n\n            child.on('close', (code) => {\n                if (code === 0) {\n                    resolve(output);\n                } else {\n                    reject(new Error(`Git command failed with code ${code}: ${errorOutput}`));\n                }\n            });\n\n            child.on('error', (error) => {\n                reject(new Error(`Failed to execute git command: ${error.message}`));\n            });\n\n            // Set timeout for long-running commands\n            setTimeout(() => {\n                child.kill();\n                reject(new Error('Git command timeout'));\n            }, 30000);\n        });\n    }\n\n    async isGitRepository(): Promise<boolean> {\n        try {\n            await this.executeGitCommand(['rev-parse', '--git-dir']);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    dispose(): void {\n        // Clean up any resources if needed\n    }\n}\n"],"version":3}