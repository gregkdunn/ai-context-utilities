{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/statusTracker.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,mCAAsC;AAkCtC,MAAa,aAAc,SAAQ,qBAAY;IACnC,cAAc,CAAuB;IACrC,SAAS,GAAgB,EAAE,CAAC;IAC5B,cAAc,GAAe;QACjC,SAAS,EAAE,KAAK;QAChB,WAAW,EAAE,IAAI,IAAI,EAAE;KAC1B,CAAC;IACM,gBAAgB,GAA+B,IAAI,GAAG,EAAE,CAAC;IACzD,eAAe,GAAoB,EAAE,CAAC;IAE9C;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CACnD,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAC9B,GAAG,CACN,CAAC;QACF,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAC3B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAED,sBAAsB;IACf,YAAY,CAAC,MAAc,EAAE,OAAgB,EAAE,OAAa;QAC/D,MAAM,SAAS,GAAG,GAAG,MAAM,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAE5C,MAAM,aAAa,GAAkB;YACjC,EAAE,EAAE,SAAS;YACb,MAAM;YACN,OAAO;YACP,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,QAAQ,EAAE,CAAC;YACX,MAAM,EAAE,EAAE;SACb,CAAC;QAEF,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACpD,IAAI,CAAC,YAAY,CAAC;YACd,SAAS,EAAE,IAAI;YACf,aAAa,EAAE,MAAM;YACrB,QAAQ,EAAE,CAAC;SACd,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;QAEjE,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,qBAAqB;IACd,eAAe,CAAC,SAAiB,EAAE,MAAqB;QAC3D,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO;QACX,CAAC;QAED,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC;QAC5D,aAAa,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,aAAa,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QACzC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QACrC,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QACnC,aAAa,CAAC,QAAQ,GAAG,GAAG,CAAC;QAE7B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAExC,gDAAgD;QAChD,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YACnC,IAAI,CAAC,YAAY,CAAC;gBACd,SAAS,EAAE,KAAK;gBAChB,aAAa,EAAE,SAAS;gBACxB,QAAQ,EAAE,GAAG;gBACb,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,gBAAgB;aACnE,CAAC,CAAC;QACP,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;QACjE,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACvD,CAAC;IAED,mBAAmB;IACZ,aAAa,CAAC,SAAiB;QAClC,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO;QACX,CAAC;QAED,aAAa,CAAC,MAAM,GAAG,WAAW,CAAC;QACnC,aAAa,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC;QAE3B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAExC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YACnC,IAAI,CAAC,YAAY,CAAC;gBACd,SAAS,EAAE,KAAK;gBAChB,aAAa,EAAE,SAAS;gBACxB,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE,mBAAmB;aAC/B,CAAC,CAAC;QACP,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,0BAA0B;IACnB,cAAc,CAAC,SAAiB,EAAE,QAAgB;QACrD,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO;QACX,CAAC;QAED,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;QAE9D,IAAI,CAAC,YAAY,CAAC;YACd,QAAQ,EAAE,aAAa,CAAC,QAAQ;SACnC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,2BAA2B;IACpB,YAAY,CAAC,SAAiB,EAAE,MAAc;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO;QACX,CAAC;QAED,aAAa,CAAC,MAAM,IAAI,MAAM,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,0BAA0B;IACnB,WAAW,CAAC,SAAiB,EAAE,KAAa;QAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO;QACX,CAAC;QAED,aAAa,CAAC,KAAK,GAAG,CAAC,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC;QAC1D,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,2BAA2B;IACpB,cAAc;QACjB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,uBAAuB;IAChB,kBAAkB;QACrB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CACpD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,CACxC,CAAC;IACN,CAAC;IAED,sBAAsB;IACf,UAAU;QACb,OAAO,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC;IAED,wBAAwB;IACjB,YAAY;QACf,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACvD,CAAC;IAED,yBAAyB;IAClB,eAAe,CAAC,MAAe;QAClC,IAAI,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC;QAEpC,IAAI,MAAM,EAAE,CAAC;YACT,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;QAC7D,CAAC;QAED,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,MAAM,CAAC;QAC3E,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,MAAM,CAAC;QACrE,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAElF,OAAO;YACH,KAAK,EAAE,QAAQ,CAAC,MAAM;YACtB,UAAU;YACV,MAAM;YACN,eAAe,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1E,cAAc,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;SACtC,CAAC;IACN,CAAC;IAED,yBAAyB;IAClB,oBAAoB;QACvB,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACrC,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAElD,OAAO;;;;kBAIG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM;oBAChD,eAAe,CAAC,MAAM;kBACxB,KAAK,CAAC,KAAK;gBACb,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrE,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;;;EAGlD,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CACvC,KAAK,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,OAAO,IAAI,KAAK,MAAM,GAAG,CAAC,MAAM,MAAM,GAAG,CAAC,QAAQ,IAAI,CAAC,IAAI,CACtF,CAAC,IAAI,CAAC,IAAI,CAAC;SACH,CAAC,IAAI,EAAE,CAAC;IACb,CAAC;IAED,4BAA4B;IACrB,eAAe;QAClB,MAAM,OAAO,GAAiC,EAAE,CAAC;QAEjD,kBAAkB;QAClB,MAAM,OAAO,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAU,CAAC;QAE3E,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC3B,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;YACpF,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe;iBACrC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC;iBACpC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,OAAO,CAAC,MAAM,CAAC,GAAG;gBACd,EAAE,EAAE,MAAM;gBACV,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvD,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;gBACjC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;oBAC7B,aAAa,EAAE,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;wBACjD,aAAa,EAAE,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;gBAC3D,OAAO,EAAE,aAAa,EAAE,OAAO;gBAC/B,OAAO,EAAE,CAAC,cAAc;gBACxB,QAAQ,EAAE,cAAc,EAAE,QAAQ;aACrC,CAAC;QACN,CAAC;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAEO,cAAc,CAAC,MAAc;QACjC,QAAQ,MAAM,EAAE,CAAC;YACb,KAAK,SAAS,CAAC,CAAC,OAAO,cAAc,CAAC;YACtC,KAAK,QAAQ,CAAC,CAAC,OAAO,WAAW,CAAC;YAClC,KAAK,SAAS,CAAC,CAAC,OAAO,gBAAgB,CAAC;YACxC,KAAK,eAAe,CAAC,CAAC,OAAO,iBAAiB,CAAC;YAC/C,OAAO,CAAC,CAAC,OAAO,SAAS,CAAC;QAC9B,CAAC;IACL,CAAC;IAEM,YAAY,CAAC,MAA2B;QAC3C,IAAI,CAAC,cAAc,GAAG;YAClB,GAAG,IAAI,CAAC,cAAc;YACtB,GAAG,MAAM;YACT,WAAW,EAAE,IAAI,IAAI,EAAE;SAC1B,CAAC;QACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAEM,UAAU,CAAC,MAAc,EAAE,OAAgB;QAC9C,IAAI,CAAC,YAAY,CAAC;YACd,SAAS,EAAE,IAAI;YACf,aAAa,EAAE,MAAM;YACrB,OAAO;YACP,QAAQ,EAAE,CAAC;SACd,CAAC,CAAC;IACP,CAAC;IAEM,WAAW,CAAC,QAAgB,EAAE,OAAgB;QACjD,IAAI,CAAC,YAAY,CAAC;YACd,QAAQ;YACR,OAAO;SACV,CAAC,CAAC;IACP,CAAC;IAEM,WAAW,CAAC,OAAgB;QAC/B,IAAI,CAAC,YAAY,CAAC;YACd,SAAS,EAAE,KAAK;YAChB,aAAa,EAAE,SAAS;YACxB,QAAQ,EAAE,GAAG;YACb,OAAO;SACV,CAAC,CAAC;QAEH,oCAAoC;QACpC,UAAU,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC;oBACd,OAAO,EAAE,SAAS;oBAClB,QAAQ,EAAE,SAAS;iBACtB,CAAC,CAAC;YACP,CAAC;QACL,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IAEM,QAAQ,CAAC,KAAa;QACzB,IAAI,CAAC,YAAY,CAAC;YACd,SAAS,EAAE,KAAK;YAChB,aAAa,EAAE,SAAS;YACxB,OAAO,EAAE,UAAU,KAAK,EAAE;YAC1B,QAAQ,EAAE,SAAS;SACtB,CAAC,CAAC;QAEH,kCAAkC;QAClC,UAAU,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;gBACjC,IAAI,CAAC,YAAY,CAAC;oBACd,OAAO,EAAE,SAAS;iBACrB,CAAC,CAAC;YACP,CAAC;QACL,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IAEM,WAAW,CAAC,QAAqB;QACpC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAEM,gBAAgB;QACnB,OAAO,EAAE,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACtC,CAAC;IAEO,gBAAgB;QACpB,IAAI,IAAI,GAAG,uBAAuB,CAAC;QACnC,IAAI,OAAO,GAAG,oBAAoB,CAAC;QAEnC,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;YAChC,IAAI,GAAG,mBAAmB,IAAI,CAAC,cAAc,CAAC,aAAa,IAAI,SAAS,EAAE,CAAC;YAC3E,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,IAAI,oBAAoB,CAAC;YAE9D,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBAC7C,IAAI,IAAI,KAAK,IAAI,CAAC,cAAc,CAAC,QAAQ,IAAI,CAAC;YAClD,CAAC;QACL,CAAC;aAAM,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;YACrC,IAAI,GAAG,WAAW,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;YAChD,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;QAC1C,CAAC;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,IAAI,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,YAAY,CAAC;QACnD,CAAC;QAED,IAAI,CAAC,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,OAAO,CAAC;QACtC,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,4BAA4B,CAAC;IAC/D,CAAC;IAEM,OAAO;QACV,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAC9B,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;CACJ;AA9VD,sCA8VC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/utils/statusTracker.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { EventEmitter } from 'events';\nimport { NxProject, CommandResult, ActionButton } from '../types';\n\nexport interface StatusInfo {\n    isRunning: boolean;\n    currentAction?: string;\n    progress?: number;\n    message?: string;\n    lastUpdated: Date;\n}\n\nexport interface CommandStatus {\n    id: string;\n    action: string;\n    command?: string;\n    project?: string;\n    status: 'running' | 'success' | 'error' | 'cancelled';\n    startTime: Date;\n    endTime?: Date;\n    progress: number;\n    output: string;\n    error?: string;\n    duration?: number;\n    message?: string;\n}\n\nexport interface CommandStats {\n    total: number;\n    successful: number;\n    failed: number;\n    averageDuration: number;\n    recentCommands: CommandStatus[];\n}\n\nexport class StatusTracker extends EventEmitter {\n    private _statusBarItem: vscode.StatusBarItem;\n    private _projects: NxProject[] = [];\n    private _currentStatus: StatusInfo = {\n        isRunning: false,\n        lastUpdated: new Date()\n    };\n    private _commandStatuses: Map<string, CommandStatus> = new Map();\n    private _commandHistory: CommandStatus[] = [];\n\n    constructor() {\n        super();\n        this._statusBarItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Left,\n            100\n        );\n        this._statusBarItem.show();\n        this._updateStatusBar();\n    }\n\n    // Start a new command\n    public startCommand(action: string, project?: string, options?: any): string {\n        const commandId = `${action}-${Date.now()}`;\n        \n        const commandStatus: CommandStatus = {\n            id: commandId,\n            action,\n            project,\n            status: 'running',\n            startTime: new Date(),\n            progress: 0,\n            output: ''\n        };\n\n        this._commandStatuses.set(commandId, commandStatus);\n        this.updateStatus({\n            isRunning: true,\n            currentAction: action,\n            progress: 0\n        });\n\n        this.emit('status_change', { commandId, status: commandStatus });\n        \n        return commandId;\n    }\n\n    // Complete a command\n    public completeCommand(commandId: string, result: CommandResult): void {\n        const commandStatus = this._commandStatuses.get(commandId);\n        if (!commandStatus) {\n            return;\n        }\n\n        commandStatus.status = result.success ? 'success' : 'error';\n        commandStatus.endTime = new Date();\n        commandStatus.duration = result.duration;\n        commandStatus.output = result.output;\n        commandStatus.error = result.error;\n        commandStatus.progress = 100;\n\n        this._commandHistory.push(commandStatus);\n        this._commandStatuses.delete(commandId);\n\n        // Update status if this was the current command\n        if (this._commandStatuses.size === 0) {\n            this.updateStatus({\n                isRunning: false,\n                currentAction: undefined,\n                progress: 100,\n                message: result.success ? 'Command completed' : 'Command failed'\n            });\n        }\n\n        this.emit('status_change', { commandId, status: commandStatus });\n        this.emit('history_updated', this._commandHistory);\n    }\n\n    // Cancel a command\n    public cancelCommand(commandId: string): void {\n        const commandStatus = this._commandStatuses.get(commandId);\n        if (!commandStatus) {\n            return;\n        }\n\n        commandStatus.status = 'cancelled';\n        commandStatus.endTime = new Date();\n        commandStatus.progress = 0;\n\n        this._commandHistory.push(commandStatus);\n        this._commandStatuses.delete(commandId);\n\n        if (this._commandStatuses.size === 0) {\n            this.updateStatus({\n                isRunning: false,\n                currentAction: undefined,\n                progress: undefined,\n                message: 'Command cancelled'\n            });\n        }\n\n        this.emit('status_change', { commandId, status: commandStatus });\n    }\n\n    // Update command progress\n    public updateProgress(commandId: string, progress: number): void {\n        const commandStatus = this._commandStatuses.get(commandId);\n        if (!commandStatus) {\n            return;\n        }\n\n        commandStatus.progress = Math.max(0, Math.min(100, progress));\n        \n        this.updateStatus({\n            progress: commandStatus.progress\n        });\n\n        this.emit('status_change', { commandId, status: commandStatus });\n    }\n\n    // Append output to command\n    public appendOutput(commandId: string, output: string): void {\n        const commandStatus = this._commandStatuses.get(commandId);\n        if (!commandStatus) {\n            return;\n        }\n\n        commandStatus.output += output;\n        this.emit('status_change', { commandId, status: commandStatus });\n    }\n\n    // Append error to command\n    public appendError(commandId: string, error: string): void {\n        const commandStatus = this._commandStatuses.get(commandId);\n        if (!commandStatus) {\n            return;\n        }\n\n        commandStatus.error = (commandStatus.error || '') + error;\n        this.emit('status_change', { commandId, status: commandStatus });\n    }\n\n    // Get all current statuses\n    public getAllStatuses(): CommandStatus[] {\n        return Array.from(this._commandStatuses.values());\n    }\n\n    // Get running commands\n    public getRunningCommands(): CommandStatus[] {\n        return Array.from(this._commandStatuses.values()).filter(\n            status => status.status === 'running'\n        );\n    }\n\n    // Get command history\n    public getHistory(): CommandStatus[] {\n        return [...this._commandHistory];\n    }\n\n    // Clear command history\n    public clearHistory(): void {\n        this._commandHistory = [];\n        this.emit('history_updated', this._commandHistory);\n    }\n\n    // Get command statistics\n    public getCommandStats(action?: string): CommandStats {\n        let commands = this._commandHistory;\n        \n        if (action) {\n            commands = commands.filter(cmd => cmd.action === action);\n        }\n\n        const successful = commands.filter(cmd => cmd.status === 'success').length;\n        const failed = commands.filter(cmd => cmd.status === 'error').length;\n        const totalDuration = commands.reduce((sum, cmd) => sum + (cmd.duration || 0), 0);\n\n        return {\n            total: commands.length,\n            successful,\n            failed,\n            averageDuration: commands.length > 0 ? totalDuration / commands.length : 0,\n            recentCommands: commands.slice(-10)\n        };\n    }\n\n    // Generate status report\n    public generateStatusReport(): string {\n        const stats = this.getCommandStats();\n        const runningCommands = this.getRunningCommands();\n        \n        return `\nAI Debug Status Report\n=====================\n\nCurrent Status: ${this._currentStatus.isRunning ? 'Running' : 'Idle'}\nRunning Commands: ${runningCommands.length}\nTotal Commands: ${stats.total}\nSuccess Rate: ${stats.total > 0 ? ((stats.successful / stats.total) * 100).toFixed(1) : 0}%\nAverage Duration: ${stats.averageDuration.toFixed(0)}ms\n\nRecent Commands:\n${stats.recentCommands.slice(-5).map(cmd => \n    `- ${cmd.action} (${cmd.project || 'N/A'}): ${cmd.status} - ${cmd.duration || 0}ms`\n).join('\\n')}\n        `.trim();\n    }\n\n    // Convert to action buttons\n    public toActionButtons(): Record<string, ActionButton> {\n        const buttons: Record<string, ActionButton> = {};\n        \n        // Default actions\n        const actions = ['aiDebug', 'nxTest', 'gitDiff', 'prepareToPush'] as const;\n        \n        for (const action of actions) {\n            const runningCommand = this.getRunningCommands().find(cmd => cmd.action === action);\n            const recentCommand = this._commandHistory\n                .filter(cmd => cmd.action === action)\n                .sort((a, b) => b.startTime.getTime() - a.startTime.getTime())[0];\n\n            buttons[action] = {\n                id: action,\n                label: action.charAt(0).toUpperCase() + action.slice(1),\n                icon: this._getActionIcon(action),\n                status: runningCommand ? 'running' : \n                       recentCommand?.status === 'success' ? 'success' :\n                       recentCommand?.status === 'error' ? 'error' : 'idle',\n                lastRun: recentCommand?.endTime,\n                enabled: !runningCommand,\n                progress: runningCommand?.progress\n            };\n        }\n\n        return buttons;\n    }\n\n    private _getActionIcon(action: string): string {\n        switch (action) {\n            case 'aiDebug': return '$(debug-alt)';\n            case 'nxTest': return '$(beaker)';\n            case 'gitDiff': return '$(git-compare)';\n            case 'prepareToPush': return '$(cloud-upload)';\n            default: return '$(play)';\n        }\n    }\n\n    public updateStatus(status: Partial<StatusInfo>): void {\n        this._currentStatus = {\n            ...this._currentStatus,\n            ...status,\n            lastUpdated: new Date()\n        };\n        this._updateStatusBar();\n    }\n\n    public setRunning(action: string, message?: string): void {\n        this.updateStatus({\n            isRunning: true,\n            currentAction: action,\n            message,\n            progress: 0\n        });\n    }\n\n    public setProgress(progress: number, message?: string): void {\n        this.updateStatus({\n            progress,\n            message\n        });\n    }\n\n    public setComplete(message?: string): void {\n        this.updateStatus({\n            isRunning: false,\n            currentAction: undefined,\n            progress: 100,\n            message\n        });\n\n        // Clear the message after 3 seconds\n        setTimeout(() => {\n            if (!this._currentStatus.isRunning) {\n                this.updateStatus({\n                    message: undefined,\n                    progress: undefined\n                });\n            }\n        }, 3000);\n    }\n\n    public setError(error: string): void {\n        this.updateStatus({\n            isRunning: false,\n            currentAction: undefined,\n            message: `Error: ${error}`,\n            progress: undefined\n        });\n\n        // Clear the error after 5 seconds\n        setTimeout(() => {\n            if (!this._currentStatus.isRunning) {\n                this.updateStatus({\n                    message: undefined\n                });\n            }\n        }, 5000);\n    }\n\n    public setProjects(projects: NxProject[]): void {\n        this._projects = projects;\n        this._updateStatusBar();\n    }\n\n    public getProjects(): NxProject[] {\n        return this._projects;\n    }\n\n    public getCurrentStatus(): StatusInfo {\n        return { ...this._currentStatus };\n    }\n\n    private _updateStatusBar(): void {\n        let text = '$(debug-alt) AI Debug';\n        let tooltip = 'AI Debug Utilities';\n\n        if (this._currentStatus.isRunning) {\n            text = `$(loading~spin) ${this._currentStatus.currentAction || 'Running'}`;\n            tooltip = this._currentStatus.message || 'Command running...';\n            \n            if (this._currentStatus.progress !== undefined) {\n                text += ` (${this._currentStatus.progress}%)`;\n            }\n        } else if (this._currentStatus.message) {\n            text = `$(info) ${this._currentStatus.message}`;\n            tooltip = this._currentStatus.message;\n        }\n\n        if (this._projects.length > 0) {\n            text += ` (${this._projects.length} projects)`;\n        }\n\n        this._statusBarItem.text = text;\n        this._statusBarItem.tooltip = tooltip;\n        this._statusBarItem.command = 'aiDebugUtilities.openPanel';\n    }\n\n    public dispose(): void {\n        this._statusBarItem.dispose();\n        this.removeAllListeners();\n    }\n}"],"version":3}