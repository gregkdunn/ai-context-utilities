{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/ai-insights/engines/naturalLanguageQueryEngine.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/ai-insights/engines/naturalLanguageQueryEngine.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { \n    QueryResult, \n    ActionSuggestion,\n    CommandExecution,\n    TestResult,\n    ErrorPattern,\n    AnalysisData\n} from '../../../types';\n\n/**\n * Enhanced Natural Language Query Interface for Phase 4.2\n * Provides sophisticated natural language processing for debugging queries\n */\nexport class NaturalLanguageQueryEngine {\n    private queryHistory: QueryHistory[] = [];\n    private entityExtractor: EntityExtractor;\n    private intentClassifier: IntentClassifier;\n    private responseGenerator: ResponseGenerator;\n    private readonly maxHistorySize = 500;\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.entityExtractor = new EntityExtractor();\n        this.intentClassifier = new IntentClassifier();\n        this.responseGenerator = new ResponseGenerator();\n        this.loadQueryHistory();\n    }\n\n    /**\n     * Process natural language query with enhanced understanding\n     */\n    async processQuery(query: string, context?: AnalysisData): Promise<QueryResult> {\n        try {\n            console.log(`Processing natural language query: \"${query}\"`);\n            \n            // Preprocess query\n            const preprocessedQuery = this.preprocessQuery(query);\n            \n            // Extract entities and intent in parallel\n            const [entities, intent] = await Promise.all([\n                this.entityExtractor.extractEntities(preprocessedQuery),\n                this.intentClassifier.classifyIntent(preprocessedQuery)\n            ]);\n            \n            // Calculate confidence based on entity and intent quality\n            const confidence = this.calculateQueryConfidence(intent, entities, preprocessedQuery);\n            \n            // Generate response based on intent and entities\n            const response = await this.responseGenerator.generateResponse(\n                intent, \n                entities, \n                preprocessedQuery, \n                context\n            );\n            \n            // Generate contextual action suggestions\n            const suggestedActions = await this.generateActionSuggestions(\n                intent, \n                entities, \n                context\n            );\n            \n            // Fetch relevant data if available\n            const data = await this.fetchQueryData(intent, entities, context);\n            \n            // Create and store query result\n            const result: QueryResult = {\n                intent,\n                entities,\n                confidence,\n                response,\n                suggestedActions,\n                data\n            };\n            \n            // Record query for learning\n            this.recordQuery(query, result);\n            \n            console.log(`Query processed with ${confidence.toFixed(2)} confidence`);\n            return result;\n            \n        } catch (error) {\n            console.error('Error processing natural language query:', error);\n            return this.createErrorResponse(query);\n        }\n    }\n\n    /**\n     * Get query suggestions based on current context\n     */\n    async getQuerySuggestions(context?: AnalysisData): Promise<string[]> {\n        const suggestions: string[] = [];\n        \n        try {\n            // Base suggestions\n            suggestions.push(\n                \"Show me failing tests from this week\",\n                \"What's causing the performance issues?\",\n                \"Find errors in the checkout module\",\n                \"How can I improve test coverage?\",\n                \"Show recent build failures\"\n            );\n            \n            // Context-aware suggestions\n            if (context) {\n                const contextSuggestions = await this.generateContextualSuggestions(context);\n                suggestions.push(...contextSuggestions);\n            }\n            \n            // Historical suggestions based on common queries\n            const popularSuggestions = this.getPopularQuerySuggestions();\n            suggestions.push(...popularSuggestions);\n            \n            return suggestions.slice(0, 8); // Return top 8 suggestions\n            \n        } catch (error) {\n            console.error('Error generating query suggestions:', error);\n            return suggestions.slice(0, 5);\n        }\n    }\n\n    /**\n     * Analyze query patterns to improve understanding\n     */\n    async analyzeQueryPatterns(): Promise<QueryPattern[]> {\n        const patterns: QueryPattern[] = [];\n        \n        try {\n            // Group queries by intent\n            const intentGroups = this.groupQueriesByIntent();\n            \n            for (const [intent, queries] of intentGroups.entries()) {\n                const pattern = this.extractQueryPattern(intent, queries);\n                if (pattern.confidence > 0.6) {\n                    patterns.push(pattern);\n                }\n            }\n            \n            // Update classifiers based on patterns\n            await this.updateClassifiersFromPatterns(patterns);\n            \n            console.log(`Analyzed ${this.queryHistory.length} queries, found ${patterns.length} patterns`);\n            return patterns;\n            \n        } catch (error) {\n            console.error('Error analyzing query patterns:', error);\n            return [];\n        }\n    }\n\n    // Private implementation methods\n\n    private preprocessQuery(query: string): string {\n        return query\n            .toLowerCase()\n            .trim()\n            .replace(/[^\\w\\s\\?\\!]/g, ' ')\n            .replace(/\\s+/g, ' ');\n    }\n\n    private calculateQueryConfidence(\n        intent: string, \n        entities: Record<string, any>, \n        query: string\n    ): number {\n        let confidence = 0.5; // Base confidence\n        \n        // Intent confidence\n        if (intent !== 'unknown' && intent !== 'unclear') {\n            confidence += 0.3;\n        }\n        \n        // Entity confidence\n        const entityCount = Object.keys(entities).length;\n        if (entityCount > 0) {\n            confidence += Math.min(entityCount * 0.1, 0.2);\n        }\n        \n        // Query length and structure\n        const words = query.split(' ').length;\n        if (words >= 3 && words <= 15) {\n            confidence += 0.1;\n        }\n        \n        // Question structure\n        if (query.includes('?') || query.startsWith('what') || \n            query.startsWith('how') || query.startsWith('show')) {\n            confidence += 0.1;\n        }\n        \n        return Math.min(confidence, 0.95);\n    }\n\n    private async generateActionSuggestions(\n        intent: string, \n        entities: Record<string, any>, \n        context?: AnalysisData\n    ): Promise<ActionSuggestion[]> {\n        const suggestions: ActionSuggestion[] = [];\n        \n        switch (intent) {\n            case 'test-query':\n                suggestions.push({\n                    id: this.generateSuggestionId(),\n                    title: 'Run Test Analysis',\n                    description: 'Execute comprehensive test analysis',\n                    action: {\n                        type: 'command',\n                        data: { command: 'nxTest', options: { focus: 'tests' } }\n                    },\n                    estimatedImpact: 'high',\n                    estimatedEffort: 'minutes'\n                });\n                break;\n                \n            case 'performance-query':\n                suggestions.push({\n                    id: this.generateSuggestionId(),\n                    title: 'Performance Analysis',\n                    description: 'Run detailed performance analysis',\n                    action: {\n                        type: 'command',\n                        data: { command: 'aiDebug', options: { focus: 'performance' } }\n                    },\n                    estimatedImpact: 'high',\n                    estimatedEffort: 'minutes'\n                });\n                break;\n                \n            case 'error-query':\n                suggestions.push({\n                    id: this.generateSuggestionId(),\n                    title: 'Error Investigation',\n                    description: 'Investigate and analyze error patterns',\n                    action: {\n                        type: 'command',\n                        data: { command: 'aiDebug', options: { focus: 'errors' } }\n                    },\n                    estimatedImpact: 'high',\n                    estimatedEffort: 'minutes'\n                });\n                break;\n                \n            case 'git-query':\n                suggestions.push({\n                    id: this.generateSuggestionId(),\n                    title: 'Git Analysis',\n                    description: 'Analyze git history and changes',\n                    action: {\n                        type: 'command',\n                        data: { command: 'gitDiff' }\n                    },\n                    estimatedImpact: 'medium',\n                    estimatedEffort: 'minutes'\n                });\n                break;\n                \n            case 'build-query':\n                suggestions.push({\n                    id: this.generateSuggestionId(),\n                    title: 'Build Analysis',\n                    description: 'Analyze build process and issues',\n                    action: {\n                        type: 'command',\n                        data: { command: 'prepareToPush' }\n                    },\n                    estimatedImpact: 'high',\n                    estimatedEffort: 'minutes'\n                });\n                break;\n        }\n        \n        // Add context-specific suggestions\n        if (context) {\n            const contextSuggestions = await this.generateContextualActionSuggestions(intent, entities, context);\n            suggestions.push(...contextSuggestions);\n        }\n        \n        return suggestions;\n    }\n\n    private async generateContextualActionSuggestions(\n        intent: string, \n        entities: Record<string, any>, \n        context: AnalysisData\n    ): Promise<ActionSuggestion[]> {\n        const suggestions: ActionSuggestion[] = [];\n        \n        // If asking about tests and there are failing tests\n        if (intent === 'test-query' && context.testResults.some(t => t.status === 'failed')) {\n            suggestions.push({\n                id: this.generateSuggestionId(),\n                title: 'Focus on Failing Tests',\n                description: 'Run only the currently failing tests',\n                action: {\n                    type: 'command',\n                    data: { command: 'nxTest', options: { focus: 'failing' } }\n                },\n                estimatedImpact: 'high',\n                estimatedEffort: 'minutes'\n            });\n        }\n        \n        // If asking about errors and there are recurring patterns\n        if (intent === 'error-query' && context.errorPatterns.some(e => e.frequency > 3)) {\n            suggestions.push({\n                id: this.generateSuggestionId(),\n                title: 'Address Recurring Errors',\n                description: 'Focus on the most frequent error patterns',\n                action: {\n                    type: 'command',\n                    data: { command: 'aiDebug', options: { focus: 'recurring-errors' } }\n                },\n                estimatedImpact: 'high',\n                estimatedEffort: 'minutes'\n            });\n        }\n        \n        return suggestions;\n    }\n\n    private async fetchQueryData(\n        intent: string, \n        entities: Record<string, any>, \n        context?: AnalysisData\n    ): Promise<any> {\n        if (!context) {return null;}\n        \n        const data: any = {};\n        \n        switch (intent) {\n            case 'test-query':\n                data.testResults = context.testResults;\n                data.testSummary = this.summarizeTestResults(context.testResults);\n                break;\n                \n            case 'error-query':\n                data.errorPatterns = context.errorPatterns;\n                data.errorSummary = this.summarizeErrorPatterns(context.errorPatterns);\n                break;\n                \n            case 'performance-query':\n                data.performanceMetrics = context.performanceMetrics;\n                data.performanceSummary = this.summarizePerformanceMetrics(context.performanceMetrics);\n                break;\n                \n            case 'git-query':\n                data.gitHistory = context.gitHistory;\n                data.gitSummary = this.summarizeGitHistory(context.gitHistory);\n                break;\n        }\n        \n        return data;\n    }\n\n    private async generateContextualSuggestions(context: AnalysisData): Promise<string[]> {\n        const suggestions: string[] = [];\n        \n        // Test-related suggestions\n        const failingTests = context.testResults.filter(t => t.status === 'failed');\n        if (failingTests.length > 0) {\n            suggestions.push(`Show me the ${failingTests.length} failing tests`);\n            suggestions.push(\"Why are tests failing?\");\n        }\n        \n        // Error-related suggestions\n        const frequentErrors = context.errorPatterns.filter(e => e.frequency > 3);\n        if (frequentErrors.length > 0) {\n            suggestions.push(\"What are the most common errors?\");\n            suggestions.push(\"How to fix recurring errors?\");\n        }\n        \n        // Performance suggestions\n        if (context.performanceMetrics.length > 0) {\n            suggestions.push(\"Show performance trends\");\n            suggestions.push(\"What's slowing down the build?\");\n        }\n        \n        // Git suggestions\n        if (context.gitHistory.length > 0) {\n            suggestions.push(\"Show recent commits\");\n            suggestions.push(\"What files changed recently?\");\n        }\n        \n        return suggestions;\n    }\n\n    private getPopularQuerySuggestions(): string[] {\n        const queryFrequency = new Map<string, number>();\n        \n        // Count query patterns\n        for (const entry of this.queryHistory) {\n            const normalizedQuery = this.normalizeQueryForPattern(entry.query);\n            queryFrequency.set(normalizedQuery, (queryFrequency.get(normalizedQuery) || 0) + 1);\n        }\n        \n        // Return most popular patterns\n        return Array.from(queryFrequency.entries())\n            .sort((a, b) => b[1] - a[1])\n            .slice(0, 3)\n            .map(([query]) => query);\n    }\n\n    private normalizeQueryForPattern(query: string): string {\n        return query\n            .toLowerCase()\n            .replace(/\\b(show|find|get|what|how|why)\\b/g, 'show')\n            .replace(/\\b(test|tests|testing)\\b/g, 'tests')\n            .replace(/\\b(error|errors|bug|bugs)\\b/g, 'errors')\n            .replace(/\\b(performance|speed|slow)\\b/g, 'performance');\n    }\n\n    private groupQueriesByIntent(): Map<string, QueryHistory[]> {\n        const groups = new Map<string, QueryHistory[]>();\n        \n        for (const query of this.queryHistory) {\n            const intent = query.result.intent;\n            if (!groups.has(intent)) {\n                groups.set(intent, []);\n            }\n            groups.get(intent)!.push(query);\n        }\n        \n        return groups;\n    }\n\n    private extractQueryPattern(intent: string, queries: QueryHistory[]): QueryPattern {\n        const commonWords = this.findCommonWords(queries.map(q => q.query));\n        const avgConfidence = queries.reduce((sum, q) => sum + q.result.confidence, 0) / queries.length;\n        \n        return {\n            intent,\n            commonWords,\n            frequency: queries.length,\n            avgConfidence,\n            confidence: avgConfidence > 0.7 ? 0.8 : 0.6,\n            examples: queries.slice(0, 3).map(q => q.query)\n        };\n    }\n\n    private findCommonWords(queries: string[]): string[] {\n        const wordFreq = new Map<string, number>();\n        \n        for (const query of queries) {\n            const words = query.toLowerCase().split(/\\s+/);\n            for (const word of words) {\n                if (word.length > 2) { // Ignore short words\n                    wordFreq.set(word, (wordFreq.get(word) || 0) + 1);\n                }\n            }\n        }\n        \n        const threshold = Math.max(2, Math.floor(queries.length * 0.3));\n        return Array.from(wordFreq.entries())\n            .filter(([, freq]) => freq >= threshold)\n            .sort((a, b) => b[1] - a[1])\n            .slice(0, 5)\n            .map(([word]) => word);\n    }\n\n    private async updateClassifiersFromPatterns(patterns: QueryPattern[]): Promise<void> {\n        // Update intent classifier with new patterns\n        for (const pattern of patterns) {\n            this.intentClassifier.addPattern(pattern);\n        }\n        \n        // Update entity extractor with new examples\n        this.entityExtractor.updateFromPatterns(patterns);\n        \n        console.log(`Updated classifiers with ${patterns.length} patterns`);\n    }\n\n    // Summary methods for different data types\n    private summarizeTestResults(results: TestResult[]): any {\n        const total = results.length;\n        const passed = results.filter(r => r.status === 'passed').length;\n        const failed = results.filter(r => r.status === 'failed').length;\n        const skipped = results.filter(r => r.status === 'skipped').length;\n        \n        return {\n            total,\n            passed,\n            failed,\n            skipped,\n            passRate: passed / total,\n            failureRate: failed / total\n        };\n    }\n\n    private summarizeErrorPatterns(patterns: ErrorPattern[]): any {\n        const total = patterns.length;\n        const totalFrequency = patterns.reduce((sum, p) => sum + p.frequency, 0);\n        const mostFrequent = patterns.sort((a, b) => b.frequency - a.frequency)[0];\n        \n        return {\n            total,\n            totalFrequency,\n            mostFrequent: mostFrequent?.pattern,\n            avgFrequency: totalFrequency / total\n        };\n    }\n\n    private summarizePerformanceMetrics(metrics: any[]): any {\n        return {\n            total: metrics.length,\n            types: [...new Set(metrics.map(m => m.metric))],\n            timeRange: metrics.length > 0 ? {\n                start: Math.min(...metrics.map(m => m.timestamp.getTime())),\n                end: Math.max(...metrics.map(m => m.timestamp.getTime()))\n            } : null\n        };\n    }\n\n    private summarizeGitHistory(history: any[]): any {\n        return {\n            totalCommits: history.length,\n            authors: [...new Set(history.map(c => c.author))],\n            timeRange: history.length > 0 ? {\n                start: Math.min(...history.map(c => c.date.getTime())),\n                end: Math.max(...history.map(c => c.date.getTime()))\n            } : null\n        };\n    }\n\n    private createErrorResponse(query: string): QueryResult {\n        return {\n            intent: 'error',\n            entities: {},\n            confidence: 0,\n            response: `I apologize, but I couldn't understand your query: \"${query}\". Please try rephrasing your question or use one of the suggested queries.`,\n            suggestedActions: [{\n                id: this.generateSuggestionId(),\n                title: 'Try Example Query',\n                description: 'Use one of the example queries to get started',\n                action: {\n                    type: 'external',\n                    data: { action: 'show-examples' }\n                },\n                estimatedImpact: 'low',\n                estimatedEffort: 'minutes'\n            }]\n        };\n    }\n\n    private recordQuery(query: string, result: QueryResult): void {\n        const entry: QueryHistory = {\n            query,\n            result,\n            timestamp: new Date()\n        };\n        \n        this.queryHistory.push(entry);\n        \n        // Limit history size\n        if (this.queryHistory.length > this.maxHistorySize) {\n            this.queryHistory = this.queryHistory.slice(-this.maxHistorySize);\n        }\n    }\n\n    private loadQueryHistory(): void {\n        try {\n            const historyData = this.context.globalState.get<string>('query-history');\n            if (historyData) {\n                const history = JSON.parse(historyData);\n                this.queryHistory = history.map((entry: any) => ({\n                    ...entry,\n                    timestamp: new Date(entry.timestamp)\n                }));\n                console.log(`Loaded ${this.queryHistory.length} query history entries`);\n            }\n        } catch (error) {\n            console.error('Error loading query history:', error);\n        }\n    }\n\n    private generateSuggestionId(): string {\n        return `suggestion_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    async saveQueryHistory(): Promise<void> {\n        try {\n            await this.context.globalState.update(\n                'query-history', \n                JSON.stringify(this.queryHistory)\n            );\n            console.log(`Saved ${this.queryHistory.length} query history entries`);\n        } catch (error) {\n            console.error('Error saving query history:', error);\n        }\n    }\n\n    dispose(): void {\n        this.saveQueryHistory();\n        this.queryHistory = [];\n        this.entityExtractor.dispose();\n        this.intentClassifier.dispose();\n        this.responseGenerator.dispose();\n    }\n}\n\n// Supporting classes for NLP functionality\n\nclass EntityExtractor {\n    private entityPatterns: Map<string, RegExp[]> = new Map();\n\n    constructor() {\n        this.initializePatterns();\n    }\n\n    private initializePatterns(): void {\n        // Time entities\n        this.entityPatterns.set('timeRange', [\n            /(?:last|past)\\s+(\\d+)\\s+(day|week|month|year)s?/i,\n            /(today|yesterday|this\\s+week|last\\s+week)/i\n        ]);\n        \n        // Project entities\n        this.entityPatterns.set('project', [\n            /project[s]?\\s+(\\w+)/i,\n            /in\\s+(\\w+)\\s+project/i\n        ]);\n        \n        // File entities\n        this.entityPatterns.set('files', [\n            /file[s]?\\s+(\\S+\\.\\w+)/i,\n            /(\\w+\\/\\w+\\.\\w+)/i\n        ]);\n        \n        // Test entities\n        this.entityPatterns.set('tests', [\n            /(failing|failed|broken)\\s+tests?/i,\n            /test[s]?\\s+(\\w+)/i\n        ]);\n        \n        // Error entities\n        this.entityPatterns.set('errors', [\n            /error[s]?\\s+in\\s+(\\w+)/i,\n            /(error|bug|issue)[s]?\\s+(\\w+)/i\n        ]);\n    }\n\n    async extractEntities(query: string): Promise<Record<string, any>> {\n        const entities: Record<string, any> = {};\n        \n        for (const [entityType, patterns] of this.entityPatterns.entries()) {\n            for (const pattern of patterns) {\n                const match = query.match(pattern);\n                if (match) {\n                    entities[entityType] = match[1] || match[0];\n                    break;\n                }\n            }\n        }\n        \n        return entities;\n    }\n\n    updateFromPatterns(patterns: QueryPattern[]): void {\n        // Update entity patterns based on successful query patterns\n        for (const pattern of patterns) {\n            // Simplified pattern learning\n            if (pattern.commonWords.length > 0) {\n                const newPatterns = pattern.commonWords.map(word => \n                    new RegExp(`\\\\b${word}\\\\b`, 'i')\n                );\n                \n                if (this.entityPatterns.has(pattern.intent)) {\n                    this.entityPatterns.get(pattern.intent)!.push(...newPatterns);\n                } else {\n                    this.entityPatterns.set(pattern.intent, newPatterns);\n                }\n            }\n        }\n    }\n\n    dispose(): void {\n        this.entityPatterns.clear();\n    }\n}\n\nclass IntentClassifier {\n    private intentPatterns: Map<string, RegExp[]> = new Map();\n\n    constructor() {\n        this.initializeIntentPatterns();\n    }\n\n    private initializeIntentPatterns(): void {\n        this.intentPatterns.set('test-query', [\n            /\\b(test|tests|testing|spec|specs)\\b/i,\n            /\\b(failing|failed|broken|pass|passed)\\b.*\\b(test|tests)\\b/i,\n            /\\brun\\s+tests?\\b/i\n        ]);\n        \n        this.intentPatterns.set('error-query', [\n            /\\b(error|errors|bug|bugs|issue|issues)\\b/i,\n            /\\b(fix|debug|solve|resolve)\\b/i,\n            /\\b(exception|crash|fail)\\b/i\n        ]);\n        \n        this.intentPatterns.set('performance-query', [\n            /\\b(performance|speed|slow|fast|optimize)\\b/i,\n            /\\b(time|duration|latency|bottleneck)\\b/i,\n            /\\bhow\\s+(fast|slow|long)\\b/i\n        ]);\n        \n        this.intentPatterns.set('git-query', [\n            /\\b(git|commit|commits|branch|merge)\\b/i,\n            /\\b(changed|changes|diff|history)\\b/i,\n            /\\bwhat.*changed\\b/i\n        ]);\n        \n        this.intentPatterns.set('build-query', [\n            /\\b(build|builds|compile|compilation)\\b/i,\n            /\\b(deploy|deployment|ci|cd)\\b/i,\n            /\\bpush|pull\\b/i\n        ]);\n        \n        this.intentPatterns.set('coverage-query', [\n            /\\b(coverage|covered|uncovered)\\b/i,\n            /\\bhow\\s+much.*covered\\b/i\n        ]);\n    }\n\n    async classifyIntent(query: string): Promise<string> {\n        for (const [intent, patterns] of this.intentPatterns.entries()) {\n            for (const pattern of patterns) {\n                if (pattern.test(query)) {\n                    return intent;\n                }\n            }\n        }\n        \n        // Fallback classification based on question words\n        if (/^(what|how|why|when|where)\\b/i.test(query)) {\n            return 'general-query';\n        }\n        \n        if (/^(show|find|get|list)\\b/i.test(query)) {\n            return 'data-query';\n        }\n        \n        return 'unknown';\n    }\n\n    addPattern(pattern: QueryPattern): void {\n        if (!this.intentPatterns.has(pattern.intent)) {\n            this.intentPatterns.set(pattern.intent, []);\n        }\n        \n        // Add new patterns based on common words\n        const newPatterns = pattern.commonWords.map(word => \n            new RegExp(`\\\\b${word}\\\\b`, 'i')\n        );\n        \n        this.intentPatterns.get(pattern.intent)!.push(...newPatterns);\n    }\n\n    dispose(): void {\n        this.intentPatterns.clear();\n    }\n}\n\nclass ResponseGenerator {\n    private responseTemplates: Map<string, string[]> = new Map();\n\n    constructor() {\n        this.initializeTemplates();\n    }\n\n    private initializeTemplates(): void {\n        this.responseTemplates.set('test-query', [\n            \"I can help you analyze your test results and identify patterns in test failures.\",\n            \"Let me examine your test data to provide insights about test performance and failures.\",\n            \"I'll analyze your test patterns to help improve test reliability and coverage.\"\n        ]);\n        \n        this.responseTemplates.set('error-query', [\n            \"I can help identify and analyze error patterns in your codebase.\",\n            \"Let me examine the error data to find recurring issues and suggest fixes.\",\n            \"I'll analyze the error patterns to help you resolve the most impactful issues first.\"\n        ]);\n        \n        this.responseTemplates.set('performance-query', [\n            \"I can analyze performance metrics and identify optimization opportunities.\",\n            \"Let me examine your performance data to find bottlenecks and suggest improvements.\",\n            \"I'll analyze performance trends to help you optimize your development workflow.\"\n        ]);\n        \n        this.responseTemplates.set('git-query', [\n            \"I can analyze your git history and provide insights about code changes.\",\n            \"Let me examine your commit patterns and file changes for insights.\",\n            \"I'll analyze your git data to help you understand development patterns.\"\n        ]);\n        \n        this.responseTemplates.set('build-query', [\n            \"I can help analyze your build process and identify improvement opportunities.\",\n            \"Let me examine your build patterns to suggest optimizations.\",\n            \"I'll analyze your build data to help streamline your deployment process.\"\n        ]);\n    }\n\n    async generateResponse(\n        intent: string, \n        entities: Record<string, any>, \n        query: string, \n        context?: AnalysisData\n    ): Promise<string> {\n        const templates = this.responseTemplates.get(intent) || [\n            \"I can help you analyze your debugging patterns and suggest improvements.\"\n        ];\n        \n        let baseResponse = templates[Math.floor(Math.random() * templates.length)];\n        \n        // Customize response based on entities and context\n        if (context) {\n            baseResponse += this.addContextualDetails(intent, entities, context);\n        }\n        \n        return baseResponse;\n    }\n\n    private addContextualDetails(\n        intent: string, \n        entities: Record<string, any>, \n        context: AnalysisData\n    ): string {\n        let details = \"\";\n        \n        switch (intent) {\n            case 'test-query':\n                const failedTests = context.testResults.filter(t => t.status === 'failed').length;\n                if (failedTests > 0) {\n                    details += ` I found ${failedTests} failing tests that need attention.`;\n                }\n                break;\n                \n            case 'error-query':\n                const errorCount = context.errorPatterns.length;\n                if (errorCount > 0) {\n                    details += ` I identified ${errorCount} error patterns in your codebase.`;\n                }\n                break;\n                \n            case 'performance-query':\n                const metricCount = context.performanceMetrics.length;\n                if (metricCount > 0) {\n                    details += ` I have ${metricCount} performance metrics to analyze.`;\n                }\n                break;\n        }\n        \n        return details;\n    }\n\n    dispose(): void {\n        this.responseTemplates.clear();\n    }\n}\n\n// Supporting interfaces for Natural Language Query Engine\n\ninterface QueryHistory {\n    query: string;\n    result: QueryResult;\n    timestamp: Date;\n}\n\ninterface QueryPattern {\n    intent: string;\n    commonWords: string[];\n    frequency: number;\n    avgConfidence: number;\n    confidence: number;\n    examples: string[];\n}\n"],"version":3}