{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/builtin/gitAnalyzerPlugin.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/builtin/gitAnalyzerPlugin.ts"],"sourcesContent":["import { \n  Plugin, \n  PluginMetadata, \n  PluginAPI, \n  PluginContext, \n  PluginAnalyzer, \n  AnalysisResult,\n  Issue,\n  PluginCommand\n} from '../../../types/plugin';\nimport { GitStatus } from '../../../types/index';\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport class GitAnalyzerPlugin implements Plugin {\n  metadata: PluginMetadata = {\n    id: 'builtin-git-analyzer',\n    name: 'Git Analyzer',\n    version: '1.0.0',\n    description: 'Analyze Git repositories, commits, and provide insights for better version control',\n    author: 'AI Debug Team',\n    license: 'MIT',\n    enabled: true,\n    capabilities: [\n      {\n        type: 'analyzer',\n        name: 'git-analyzer',\n        description: 'Analyze Git repositories and commits',\n        permissions: ['workspace-access:git:Analyze Git repository status and history']\n      },\n      {\n        type: 'command',\n        name: 'git-insights',\n        description: 'Generate Git insights and recommendations'\n      }\n    ]\n  };\n\n  private api?: PluginAPI;\n  \n  get analyzers(): PluginAnalyzer[] {\n    return [\n      {\n        id: 'git-commit-analyzer',\n        name: 'Git Commit Analyzer',\n        description: 'Analyze Git commit messages and patterns',\n        filePatterns: ['.git/**/*', '**/.git/**/*'],\n        \n        analyze: async (content: string, filePath: string, context: PluginContext): Promise<AnalysisResult> => {\n          const issues: Issue[] = [];\n          const metrics: Record<string, number> = {};\n          const suggestions: string[] = [];\n          \n          try {\n            // Analyze commit history\n            const commitAnalysis = await this.analyzeCommitHistory(context);\n            issues.push(...commitAnalysis.issues);\n            Object.assign(metrics, commitAnalysis.metrics);\n            suggestions.push(...commitAnalysis.suggestions);\n            \n            // Analyze branch structure\n            const branchAnalysis = await this.analyzeBranches(context);\n            issues.push(...branchAnalysis.issues);\n            Object.assign(metrics, branchAnalysis.metrics);\n            suggestions.push(...branchAnalysis.suggestions);\n            \n            // Analyze file changes\n            const changesAnalysis = await this.analyzeChanges(context);\n            issues.push(...changesAnalysis.issues);\n            Object.assign(metrics, changesAnalysis.metrics);\n            suggestions.push(...changesAnalysis.suggestions);\n            \n          } catch (error) {\n            issues.push({\n              type: 'error',\n              message: `Git analysis failed: ${(error as Error).message}`,\n              severity: 'medium'\n            });\n          }\n          \n          return {\n            id: 'git-analysis',\n            summary: 'Git repository analysis completed',\n            issues,\n            metrics,\n            suggestions,\n            confidence: 0.85\n          };\n        }\n      }\n    ];\n  }\n\n  get commands(): PluginCommand[] {\n    return [\n      {\n        id: 'git-health-check',\n        title: 'Git Health Check',\n        description: 'Perform comprehensive Git repository health check',\n        category: 'Git',\n        icon: 'git-branch',\n        \n        execute: async (context: PluginContext, args?: any[]): Promise<any> => {\n          const healthReport = await this.performHealthCheck(context);\n          \n          // Show results in a new document\n          const doc = await vscode.workspace.openTextDocument({\n            content: this.formatHealthReport(healthReport),\n            language: 'markdown'\n          });\n          \n          await vscode.window.showTextDocument(doc);\n          \n          return healthReport;\n        }\n      },\n      {\n        id: 'git-optimize-workflow',\n        title: 'Optimize Git Workflow',\n        description: 'Analyze and suggest Git workflow optimizations',\n        category: 'Git',\n        icon: 'arrow-up',\n        \n        execute: async (context: PluginContext, args?: any[]): Promise<any> => {\n          const optimizations = await this.suggestWorkflowOptimizations(context);\n          \n          // Show optimization suggestions\n          const items = optimizations.map(opt => ({\n            label: opt.title,\n            description: opt.description,\n            detail: opt.impact\n          }));\n          \n          const selected = await vscode.window.showQuickPick(items, {\n            placeHolder: 'Select optimization to apply',\n            canPickMany: false\n          });\n          \n          if (selected) {\n            const optimization = optimizations.find(opt => opt.title === selected.label);\n            if (optimization) {\n              await this.applyOptimization(optimization, context);\n            }\n          }\n          \n          return optimizations;\n        }\n      }\n    ];\n  }\n\n  async activate(api: PluginAPI, context: PluginContext): Promise<void> {\n    this.api = api;\n    \n    // Register analyzers\n    for (const analyzer of this.analyzers) {\n      api.registerAnalyzer?.(analyzer);\n    }\n    \n    // Register commands\n    for (const command of this.commands) {\n      api.registerCommand(command.id, command.execute);\n    }\n    \n    // Listen for Git events\n    api.on?.('git:commit', (data) => this.onGitCommit(data, context));\n    api.on?.('git:branch-changed', (data) => this.onBranchChanged(data, context));\n    \n    console.log('Git Analyzer Plugin activated');\n  }\n\n  async deactivate(api: PluginAPI, context: PluginContext): Promise<void> {\n    // Cleanup\n    api.off?.('git:commit');\n    api.off?.('git:branch-changed');\n    \n    console.log('Git Analyzer Plugin deactivated');\n  }\n\n  private async analyzeCommitHistory(context: PluginContext): Promise<AnalysisResult> {\n    const issues: Issue[] = [];\n    const metrics: Record<string, number> = {};\n    const suggestions: string[] = [];\n    \n    // Simulate Git commit analysis\n    const recentCommits = await this.getRecentCommits(context);\n    \n    // Analyze commit message quality\n    let poorCommitMessages = 0;\n    let longCommitMessages = 0;\n    \n    for (const commit of recentCommits) {\n      if (commit.message.length < 10) {\n        poorCommitMessages++;\n      }\n      \n      if (commit.message.length > 72) {\n        longCommitMessages++;\n      }\n    }\n    \n    metrics['total-commits'] = recentCommits.length;\n    metrics['poor-commit-messages'] = poorCommitMessages;\n    metrics['long-commit-messages'] = longCommitMessages;\n    \n    if (poorCommitMessages > 0) {\n      issues.push({\n        type: 'warning',\n        message: `Found ${poorCommitMessages} commit(s) with poor messages`,\n        severity: 'low'\n      });\n      \n      suggestions.push('Use conventional commit format: type(scope): description');\n    }\n    \n    if (longCommitMessages > 0) {\n      issues.push({\n        type: 'info',\n        message: `Found ${longCommitMessages} commit(s) with long messages`,\n        severity: 'low'\n      });\n    }\n    \n    // Analyze commit frequency\n    const commitFrequency = this.analyzeCommitFrequency(recentCommits);\n    metrics['commits-per-day'] = commitFrequency.daily;\n    metrics['commits-per-week'] = commitFrequency.weekly;\n    \n    if (commitFrequency.daily < 0.5) {\n      suggestions.push('Consider more frequent commits for better version control');\n    }\n    \n    return {\n      id: 'commit-analysis',\n      summary: 'Commit history analysis completed',\n      issues,\n      metrics,\n      suggestions,\n      confidence: 0.9\n    };\n  }\n\n  private async analyzeBranches(context: PluginContext): Promise<AnalysisResult> {\n    const issues: Issue[] = [];\n    const metrics: Record<string, number> = {};\n    const suggestions: string[] = [];\n    \n    // Simulate branch analysis\n    const branches = await this.getBranches(context);\n    const staleBranches = branches.filter(b => this.isStaleBranch(b));\n    \n    metrics['total-branches'] = branches.length;\n    metrics['stale-branches'] = staleBranches.length;\n    \n    if (staleBranches.length > 0) {\n      issues.push({\n        type: 'warning',\n        message: `Found ${staleBranches.length} stale branch(es)`,\n        severity: 'medium'\n      });\n      \n      suggestions.push('Clean up old branches to maintain a tidy repository');\n    }\n    \n    if (branches.length > 20) {\n      issues.push({\n        type: 'info',\n        message: `Repository has ${branches.length} branches`,\n        severity: 'low'\n      });\n    }\n    \n    return {\n      id: 'branch-analysis',\n      summary: 'Branch analysis completed',\n      issues,\n      metrics,\n      suggestions,\n      confidence: 0.8\n    };\n  }\n\n  private async analyzeChanges(context: PluginContext): Promise<AnalysisResult> {\n    const issues: Issue[] = [];\n    const metrics: Record<string, number> = {};\n    const suggestions: string[] = [];\n    \n    // Analyze uncommitted changes\n    const uncommittedFiles = await this.getUncommittedFiles(context);\n    metrics['uncommitted-files'] = uncommittedFiles.length;\n    \n    if (uncommittedFiles.length > 10) {\n      issues.push({\n        type: 'warning',\n        message: `${uncommittedFiles.length} files with uncommitted changes`,\n        severity: 'medium'\n      });\n    }\n    \n    // Analyze file sizes\n    const largeFiles = uncommittedFiles.filter(f => this.isLargeFile(f));\n    metrics['large-uncommitted-files'] = largeFiles.length;\n    \n    if (largeFiles.length > 0) {\n      issues.push({\n        type: 'warning',\n        message: `${largeFiles.length} large file(s) with uncommitted changes`,\n        severity: 'high'\n      });\n      \n      suggestions.push('Use Git LFS for files larger than 100MB');\n    }\n    \n    return {\n      id: 'changes-analysis',\n      summary: 'Changes analysis completed',\n      issues,\n      metrics,\n      suggestions,\n      confidence: 0.85\n    };\n  }\n\n  private async performHealthCheck(context: PluginContext): Promise<any> {\n    const health = {\n      overall: 'good',\n      scores: {\n        commitQuality: 0,\n        branchHealth: 0,\n        repositorySize: 0,\n        workflowEfficiency: 0\n      },\n      recommendations: [] as string[]\n    };\n    \n    // Perform various health checks\n    const commitAnalysis = await this.analyzeCommitHistory(context);\n    health.scores.commitQuality = this.calculateCommitQualityScore(commitAnalysis);\n    \n    const branchAnalysis = await this.analyzeBranches(context);\n    health.scores.branchHealth = this.calculateBranchHealthScore(branchAnalysis);\n    \n    // Overall score\n    const overallScore = (\n      health.scores.commitQuality + \n      health.scores.branchHealth + \n      health.scores.repositorySize + \n      health.scores.workflowEfficiency\n    ) / 4;\n    \n    if (overallScore >= 0.8) {\n      health.overall = 'excellent';\n    } else if (overallScore >= 0.6) {\n      health.overall = 'good';\n    } else if (overallScore >= 0.4) {\n      health.overall = 'fair';\n    } else {\n      health.overall = 'poor';\n    }\n    \n    return health;\n  }\n\n  private async suggestWorkflowOptimizations(context: PluginContext): Promise<any[]> {\n    return [\n      {\n        title: 'Setup Git Hooks',\n        description: 'Add pre-commit hooks for code quality checks',\n        impact: 'High - prevents bad commits',\n        action: 'setup-hooks'\n      },\n      {\n        title: 'Configure Branch Protection',\n        description: 'Setup branch protection rules for main branch',\n        impact: 'Medium - improves code quality',\n        action: 'branch-protection'\n      },\n      {\n        title: 'Optimize .gitignore',\n        description: 'Update .gitignore to exclude unnecessary files',\n        impact: 'Low - reduces repository size',\n        action: 'optimize-gitignore'\n      }\n    ];\n  }\n\n  private async applyOptimization(optimization: any, context: PluginContext): Promise<void> {\n    switch (optimization.action) {\n      case 'setup-hooks':\n        await this.setupGitHooks(context);\n        break;\n      case 'branch-protection':\n        await this.setupBranchProtection(context);\n        break;\n      case 'optimize-gitignore':\n        await this.optimizeGitignore(context);\n        break;\n      default:\n        console.log(`Unknown optimization action: ${optimization.action}`);\n    }\n  }\n\n  private async getRecentCommits(context: PluginContext): Promise<any[]> {\n    // Simulate Git log\n    return [\n      { hash: 'abc123', message: 'feat: add new feature', author: 'dev', date: new Date() },\n      { hash: 'def456', message: 'fix bug', author: 'dev', date: new Date() },\n      { hash: 'ghi789', message: 'update docs', author: 'dev', date: new Date() }\n    ];\n  }\n\n  private async getBranches(context: PluginContext): Promise<any[]> {\n    // Simulate Git branch list\n    return [\n      { name: 'main', lastCommit: new Date(), active: true },\n      { name: 'develop', lastCommit: new Date(Date.now() - 86400000), active: false },\n      { name: 'feature/old', lastCommit: new Date(Date.now() - 86400000 * 30), active: false }\n    ];\n  }\n\n  private async getUncommittedFiles(context: PluginContext): Promise<any[]> {\n    // Simulate Git status\n    return [\n      { path: 'src/main.ts', status: 'modified', size: 1024 },\n      { path: 'README.md', status: 'modified', size: 2048 }\n    ];\n  }\n\n  private analyzeCommitFrequency(commits: any[]): { daily: number; weekly: number } {\n    const now = new Date();\n    const dayAgo = new Date(now.getTime() - 86400000);\n    const weekAgo = new Date(now.getTime() - 86400000 * 7);\n    \n    const dailyCommits = commits.filter(c => c.date >= dayAgo).length;\n    const weeklyCommits = commits.filter(c => c.date >= weekAgo).length;\n    \n    return {\n      daily: dailyCommits,\n      weekly: weeklyCommits\n    };\n  }\n\n  private isStaleBranch(branch: any): boolean {\n    const monthAgo = new Date(Date.now() - 86400000 * 30);\n    return branch.lastCommit < monthAgo && !branch.active;\n  }\n\n  private isLargeFile(file: any): boolean {\n    return file.size > 100 * 1024 * 1024; // 100MB\n  }\n\n  private calculateCommitQualityScore(analysis: AnalysisResult): number {\n    const totalCommits = analysis.metrics?.['total-commits'] || 1;\n    const poorCommits = analysis.metrics?.['poor-commit-messages'] || 0;\n    const longCommits = analysis.metrics?.['long-commit-messages'] || 0;\n    \n    const qualityScore = 1 - (poorCommits + longCommits * 0.5) / totalCommits;\n    return Math.max(0, Math.min(1, qualityScore));\n  }\n\n  private calculateBranchHealthScore(analysis: AnalysisResult): number {\n    const totalBranches = analysis.metrics?.['total-branches'] || 1;\n    const staleBranches = analysis.metrics?.['stale-branches'] || 0;\n    \n    const healthScore = 1 - (staleBranches / totalBranches);\n    return Math.max(0, Math.min(1, healthScore));\n  }\n\n  private formatHealthReport(health: any): string {\n    return `\n# Git Repository Health Report\n\n## Overall Health: ${health.overall.toUpperCase()}\n\n## Scores\n- **Commit Quality**: ${Math.round(health.scores.commitQuality * 100)}%\n- **Branch Health**: ${Math.round(health.scores.branchHealth * 100)}%\n- **Repository Size**: ${Math.round(health.scores.repositorySize * 100)}%\n- **Workflow Efficiency**: ${Math.round(health.scores.workflowEfficiency * 100)}%\n\n## Recommendations\n${health.recommendations.map((rec: any) => `- ${rec}`).join('\\n')}\n\n---\n*Generated by AI Debug Git Analyzer Plugin*\n    `.trim();\n  }\n\n  private async setupGitHooks(context: PluginContext): Promise<void> {\n    // Implementation for setting up Git hooks\n    this.api?.showNotification?.('Git hooks setup completed', 'info');\n  }\n\n  private async setupBranchProtection(context: PluginContext): Promise<void> {\n    // Implementation for setting up branch protection\n    this.api?.showNotification?.('Branch protection configured', 'info');\n  }\n\n  private async optimizeGitignore(context: PluginContext): Promise<void> {\n    // Implementation for optimizing .gitignore\n    this.api?.showNotification?.('.gitignore optimized', 'info');\n  }\n\n  private async onGitCommit(data: any, context: PluginContext): Promise<void> {\n    // Handle Git commit events\n    console.log('Git commit detected:', data);\n  }\n\n  private async onBranchChanged(data: any, context: PluginContext): Promise<void> {\n    // Handle branch change events\n    console.log('Branch changed:', data);\n  }\n}\n"],"version":3}