f1b802a4170e234a27a07b690fc8b927
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitAnalyzerPlugin = void 0;
const vscode = __importStar(require("vscode"));
class GitAnalyzerPlugin {
    metadata = {
        id: 'builtin-git-analyzer',
        name: 'Git Analyzer',
        version: '1.0.0',
        description: 'Analyze Git repositories, commits, and provide insights for better version control',
        author: 'AI Debug Team',
        license: 'MIT',
        enabled: true,
        capabilities: [
            {
                type: 'analyzer',
                name: 'git-analyzer',
                description: 'Analyze Git repositories and commits',
                permissions: ['workspace-access:git:Analyze Git repository status and history']
            },
            {
                type: 'command',
                name: 'git-insights',
                description: 'Generate Git insights and recommendations'
            }
        ]
    };
    api;
    get analyzers() {
        return [
            {
                id: 'git-commit-analyzer',
                name: 'Git Commit Analyzer',
                description: 'Analyze Git commit messages and patterns',
                filePatterns: ['.git/**/*', '**/.git/**/*'],
                analyze: async (content, filePath, context) => {
                    const issues = [];
                    const metrics = {};
                    const suggestions = [];
                    try {
                        // Analyze commit history
                        const commitAnalysis = await this.analyzeCommitHistory(context);
                        issues.push(...commitAnalysis.issues);
                        Object.assign(metrics, commitAnalysis.metrics);
                        suggestions.push(...commitAnalysis.suggestions);
                        // Analyze branch structure
                        const branchAnalysis = await this.analyzeBranches(context);
                        issues.push(...branchAnalysis.issues);
                        Object.assign(metrics, branchAnalysis.metrics);
                        suggestions.push(...branchAnalysis.suggestions);
                        // Analyze file changes
                        const changesAnalysis = await this.analyzeChanges(context);
                        issues.push(...changesAnalysis.issues);
                        Object.assign(metrics, changesAnalysis.metrics);
                        suggestions.push(...changesAnalysis.suggestions);
                    }
                    catch (error) {
                        issues.push({
                            type: 'error',
                            message: `Git analysis failed: ${error.message}`,
                            severity: 'medium'
                        });
                    }
                    return {
                        id: 'git-analysis',
                        summary: 'Git repository analysis completed',
                        issues,
                        metrics,
                        suggestions,
                        confidence: 0.85
                    };
                }
            }
        ];
    }
    get commands() {
        return [
            {
                id: 'git-health-check',
                title: 'Git Health Check',
                description: 'Perform comprehensive Git repository health check',
                category: 'Git',
                icon: 'git-branch',
                execute: async (context, args) => {
                    const healthReport = await this.performHealthCheck(context);
                    // Show results in a new document
                    const doc = await vscode.workspace.openTextDocument({
                        content: this.formatHealthReport(healthReport),
                        language: 'markdown'
                    });
                    await vscode.window.showTextDocument(doc);
                    return healthReport;
                }
            },
            {
                id: 'git-optimize-workflow',
                title: 'Optimize Git Workflow',
                description: 'Analyze and suggest Git workflow optimizations',
                category: 'Git',
                icon: 'arrow-up',
                execute: async (context, args) => {
                    const optimizations = await this.suggestWorkflowOptimizations(context);
                    // Show optimization suggestions
                    const items = optimizations.map(opt => ({
                        label: opt.title,
                        description: opt.description,
                        detail: opt.impact
                    }));
                    const selected = await vscode.window.showQuickPick(items, {
                        placeHolder: 'Select optimization to apply',
                        canPickMany: false
                    });
                    if (selected) {
                        const optimization = optimizations.find(opt => opt.title === selected.label);
                        if (optimization) {
                            await this.applyOptimization(optimization, context);
                        }
                    }
                    return optimizations;
                }
            }
        ];
    }
    async activate(api, context) {
        this.api = api;
        // Register analyzers
        for (const analyzer of this.analyzers) {
            api.registerAnalyzer?.(analyzer);
        }
        // Register commands
        for (const command of this.commands) {
            api.registerCommand(command.id, command.execute);
        }
        // Listen for Git events
        api.on?.('git:commit', (data) => this.onGitCommit(data, context));
        api.on?.('git:branch-changed', (data) => this.onBranchChanged(data, context));
        console.log('Git Analyzer Plugin activated');
    }
    async deactivate(api, context) {
        // Cleanup
        api.off?.('git:commit');
        api.off?.('git:branch-changed');
        console.log('Git Analyzer Plugin deactivated');
    }
    async analyzeCommitHistory(context) {
        const issues = [];
        const metrics = {};
        const suggestions = [];
        // Simulate Git commit analysis
        const recentCommits = await this.getRecentCommits(context);
        // Analyze commit message quality
        let poorCommitMessages = 0;
        let longCommitMessages = 0;
        for (const commit of recentCommits) {
            if (commit.message.length < 10) {
                poorCommitMessages++;
            }
            if (commit.message.length > 72) {
                longCommitMessages++;
            }
        }
        metrics['total-commits'] = recentCommits.length;
        metrics['poor-commit-messages'] = poorCommitMessages;
        metrics['long-commit-messages'] = longCommitMessages;
        if (poorCommitMessages > 0) {
            issues.push({
                type: 'warning',
                message: `Found ${poorCommitMessages} commit(s) with poor messages`,
                severity: 'low'
            });
            suggestions.push('Use conventional commit format: type(scope): description');
        }
        if (longCommitMessages > 0) {
            issues.push({
                type: 'info',
                message: `Found ${longCommitMessages} commit(s) with long messages`,
                severity: 'low'
            });
        }
        // Analyze commit frequency
        const commitFrequency = this.analyzeCommitFrequency(recentCommits);
        metrics['commits-per-day'] = commitFrequency.daily;
        metrics['commits-per-week'] = commitFrequency.weekly;
        if (commitFrequency.daily < 0.5) {
            suggestions.push('Consider more frequent commits for better version control');
        }
        return {
            id: 'commit-analysis',
            summary: 'Commit history analysis completed',
            issues,
            metrics,
            suggestions,
            confidence: 0.9
        };
    }
    async analyzeBranches(context) {
        const issues = [];
        const metrics = {};
        const suggestions = [];
        // Simulate branch analysis
        const branches = await this.getBranches(context);
        const staleBranches = branches.filter(b => this.isStaleBranch(b));
        metrics['total-branches'] = branches.length;
        metrics['stale-branches'] = staleBranches.length;
        if (staleBranches.length > 0) {
            issues.push({
                type: 'warning',
                message: `Found ${staleBranches.length} stale branch(es)`,
                severity: 'medium'
            });
            suggestions.push('Clean up old branches to maintain a tidy repository');
        }
        if (branches.length > 20) {
            issues.push({
                type: 'info',
                message: `Repository has ${branches.length} branches`,
                severity: 'low'
            });
        }
        return {
            id: 'branch-analysis',
            summary: 'Branch analysis completed',
            issues,
            metrics,
            suggestions,
            confidence: 0.8
        };
    }
    async analyzeChanges(context) {
        const issues = [];
        const metrics = {};
        const suggestions = [];
        // Analyze uncommitted changes
        const uncommittedFiles = await this.getUncommittedFiles(context);
        metrics['uncommitted-files'] = uncommittedFiles.length;
        if (uncommittedFiles.length > 10) {
            issues.push({
                type: 'warning',
                message: `${uncommittedFiles.length} files with uncommitted changes`,
                severity: 'medium'
            });
        }
        // Analyze file sizes
        const largeFiles = uncommittedFiles.filter(f => this.isLargeFile(f));
        metrics['large-uncommitted-files'] = largeFiles.length;
        if (largeFiles.length > 0) {
            issues.push({
                type: 'warning',
                message: `${largeFiles.length} large file(s) with uncommitted changes`,
                severity: 'high'
            });
            suggestions.push('Use Git LFS for files larger than 100MB');
        }
        return {
            id: 'changes-analysis',
            summary: 'Changes analysis completed',
            issues,
            metrics,
            suggestions,
            confidence: 0.85
        };
    }
    async performHealthCheck(context) {
        const health = {
            overall: 'good',
            scores: {
                commitQuality: 0,
                branchHealth: 0,
                repositorySize: 0,
                workflowEfficiency: 0
            },
            recommendations: []
        };
        // Perform various health checks
        const commitAnalysis = await this.analyzeCommitHistory(context);
        health.scores.commitQuality = this.calculateCommitQualityScore(commitAnalysis);
        const branchAnalysis = await this.analyzeBranches(context);
        health.scores.branchHealth = this.calculateBranchHealthScore(branchAnalysis);
        // Overall score
        const overallScore = (health.scores.commitQuality +
            health.scores.branchHealth +
            health.scores.repositorySize +
            health.scores.workflowEfficiency) / 4;
        if (overallScore >= 0.8) {
            health.overall = 'excellent';
        }
        else if (overallScore >= 0.6) {
            health.overall = 'good';
        }
        else if (overallScore >= 0.4) {
            health.overall = 'fair';
        }
        else {
            health.overall = 'poor';
        }
        return health;
    }
    async suggestWorkflowOptimizations(context) {
        return [
            {
                title: 'Setup Git Hooks',
                description: 'Add pre-commit hooks for code quality checks',
                impact: 'High - prevents bad commits',
                action: 'setup-hooks'
            },
            {
                title: 'Configure Branch Protection',
                description: 'Setup branch protection rules for main branch',
                impact: 'Medium - improves code quality',
                action: 'branch-protection'
            },
            {
                title: 'Optimize .gitignore',
                description: 'Update .gitignore to exclude unnecessary files',
                impact: 'Low - reduces repository size',
                action: 'optimize-gitignore'
            }
        ];
    }
    async applyOptimization(optimization, context) {
        switch (optimization.action) {
            case 'setup-hooks':
                await this.setupGitHooks(context);
                break;
            case 'branch-protection':
                await this.setupBranchProtection(context);
                break;
            case 'optimize-gitignore':
                await this.optimizeGitignore(context);
                break;
            default:
                console.log(`Unknown optimization action: ${optimization.action}`);
        }
    }
    async getRecentCommits(context) {
        // Simulate Git log
        return [
            { hash: 'abc123', message: 'feat: add new feature', author: 'dev', date: new Date() },
            { hash: 'def456', message: 'fix bug', author: 'dev', date: new Date() },
            { hash: 'ghi789', message: 'update docs', author: 'dev', date: new Date() }
        ];
    }
    async getBranches(context) {
        // Simulate Git branch list
        return [
            { name: 'main', lastCommit: new Date(), active: true },
            { name: 'develop', lastCommit: new Date(Date.now() - 86400000), active: false },
            { name: 'feature/old', lastCommit: new Date(Date.now() - 86400000 * 30), active: false }
        ];
    }
    async getUncommittedFiles(context) {
        // Simulate Git status
        return [
            { path: 'src/main.ts', status: 'modified', size: 1024 },
            { path: 'README.md', status: 'modified', size: 2048 }
        ];
    }
    analyzeCommitFrequency(commits) {
        const now = new Date();
        const dayAgo = new Date(now.getTime() - 86400000);
        const weekAgo = new Date(now.getTime() - 86400000 * 7);
        const dailyCommits = commits.filter(c => c.date >= dayAgo).length;
        const weeklyCommits = commits.filter(c => c.date >= weekAgo).length;
        return {
            daily: dailyCommits,
            weekly: weeklyCommits
        };
    }
    isStaleBranch(branch) {
        const monthAgo = new Date(Date.now() - 86400000 * 30);
        return branch.lastCommit < monthAgo && !branch.active;
    }
    isLargeFile(file) {
        return file.size > 100 * 1024 * 1024; // 100MB
    }
    calculateCommitQualityScore(analysis) {
        const totalCommits = analysis.metrics?.['total-commits'] || 1;
        const poorCommits = analysis.metrics?.['poor-commit-messages'] || 0;
        const longCommits = analysis.metrics?.['long-commit-messages'] || 0;
        const qualityScore = 1 - (poorCommits + longCommits * 0.5) / totalCommits;
        return Math.max(0, Math.min(1, qualityScore));
    }
    calculateBranchHealthScore(analysis) {
        const totalBranches = analysis.metrics?.['total-branches'] || 1;
        const staleBranches = analysis.metrics?.['stale-branches'] || 0;
        const healthScore = 1 - (staleBranches / totalBranches);
        return Math.max(0, Math.min(1, healthScore));
    }
    formatHealthReport(health) {
        return `
# Git Repository Health Report

## Overall Health: ${health.overall.toUpperCase()}

## Scores
- **Commit Quality**: ${Math.round(health.scores.commitQuality * 100)}%
- **Branch Health**: ${Math.round(health.scores.branchHealth * 100)}%
- **Repository Size**: ${Math.round(health.scores.repositorySize * 100)}%
- **Workflow Efficiency**: ${Math.round(health.scores.workflowEfficiency * 100)}%

## Recommendations
${health.recommendations.map((rec) => `- ${rec}`).join('\n')}

---
*Generated by AI Debug Git Analyzer Plugin*
    `.trim();
    }
    async setupGitHooks(context) {
        // Implementation for setting up Git hooks
        this.api?.showNotification?.('Git hooks setup completed', 'info');
    }
    async setupBranchProtection(context) {
        // Implementation for setting up branch protection
        this.api?.showNotification?.('Branch protection configured', 'info');
    }
    async optimizeGitignore(context) {
        // Implementation for optimizing .gitignore
        this.api?.showNotification?.('.gitignore optimized', 'info');
    }
    async onGitCommit(data, context) {
        // Handle Git commit events
        console.log('Git commit detected:', data);
    }
    async onBranchChanged(data, context) {
        // Handle branch change events
        console.log('Branch changed:', data);
    }
}
exports.GitAnalyzerPlugin = GitAnalyzerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,