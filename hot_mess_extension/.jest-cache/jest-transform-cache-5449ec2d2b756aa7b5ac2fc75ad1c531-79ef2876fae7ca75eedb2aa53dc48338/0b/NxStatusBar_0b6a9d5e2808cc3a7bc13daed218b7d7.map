{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/nx/NxStatusBar.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAGjC,MAAa,WAAW;IAKA;IAA0C;IAJtD,aAAa,CAAuB;IACpC,aAAa,GAAW,CAAC,CAAC;IAC1B,aAAa,GAAY,KAAK,CAAC;IAEvC,YAAoB,OAAgC,EAAU,SAA4B;QAAtE,YAAO,GAAP,OAAO,CAAyB;QAAU,cAAS,GAAT,SAAS,CAAmB;QACtF,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAClD,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAC9B,EAAE,CACL,CAAC;QACF,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,yBAAyB,CAAC;QACvD,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,KAAK,CAAC,UAAU;QACpB,IAAI,CAAC,aAAa,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;QAC1D,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACjC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACxD,CAAC;IACL,CAAC;IAED,KAAK,CAAC,mBAAmB;QACrB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YAAA,OAAO;QAAA,CAAC;QAElC,IAAI,CAAC;YACD,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YAC9D,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YACrD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACtE,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC;YACrC,IAAI,CAAC,eAAe,EAAE,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACzD,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,eAAe,EAAE,CAAC;QAC3B,CAAC;IACL,CAAC;IAEO,eAAe;QACnB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YAAA,OAAO;QAAA,CAAC;QAElC,MAAM,UAAU,GAAG,eAAe,IAAI,CAAC,aAAa,YAAY,CAAC;QACjE,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,UAAU,CAAC;QACrC,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,GAAG,IAAI,CAAC,aAAa,8DAA8D,CAAC;QAEjH,uCAAuC;QACvC,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC;YACzB,IAAI,CAAC,aAAa,CAAC,eAAe,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,iCAAiC,CAAC,CAAC;QAClG,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,aAAa,CAAC,eAAe,GAAG,SAAS,CAAC;QACnD,CAAC;IACL,CAAC;IAED,OAAO;QACH,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QACjC,CAAC;IACL,CAAC;CACJ;AA5DD,kCA4DC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/nx/NxStatusBar.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { NxAffectedManager, NxProject } from './NxAffectedManager';\n\nexport class NxStatusBar {\n    private statusBarItem: vscode.StatusBarItem;\n    private affectedCount: number = 0;\n    private isNxWorkspace: boolean = false;\n\n    constructor(private context: vscode.ExtensionContext, private nxManager: NxAffectedManager) {\n        this.statusBarItem = vscode.window.createStatusBarItem(\n            vscode.StatusBarAlignment.Left,\n            10\n        );\n        this.statusBarItem.command = 'nx.showAffectedProjects';\n        this.initialize();\n    }\n\n    private async initialize(): Promise<void> {\n        this.isNxWorkspace = await this.nxManager.isNxWorkspace();\n        if (this.isNxWorkspace) {\n            await this.updateAffectedCount();\n            this.updateStatusBar();\n            this.statusBarItem.show();\n            this.context.subscriptions.push(this.statusBarItem);\n        }\n    }\n\n    async updateAffectedCount(): Promise<void> {\n        if (!this.isNxWorkspace) {return;}\n\n        try {\n            const config = vscode.workspace.getConfiguration('nxAngular');\n            const baseBranch = config.get('defaultBase', 'main');\n            const projects = await this.nxManager.getAffectedProjects(baseBranch);\n            this.affectedCount = projects.length;\n            this.updateStatusBar();\n        } catch (error) {\n            console.error('Failed to update affected count:', error);\n            this.affectedCount = 0;\n            this.updateStatusBar();\n        }\n    }\n\n    private updateStatusBar(): void {\n        if (!this.isNxWorkspace) {return;}\n\n        const statusText = `$(gear) NX (${this.affectedCount} affected)`;\n        this.statusBarItem.text = statusText;\n        this.statusBarItem.tooltip = `${this.affectedCount} projects affected by recent changes. Click to view details.`;\n        \n        // Update color based on affected count\n        if (this.affectedCount > 0) {\n            this.statusBarItem.backgroundColor = new vscode.ThemeColor('statusBarItem.warningBackground');\n        } else {\n            this.statusBarItem.backgroundColor = undefined;\n        }\n    }\n\n    dispose(): void {\n        if (this.statusBarItem) {\n            this.statusBarItem.dispose();\n        }\n    }\n}\n"],"version":3}