{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/git/__tests__/GitDiffManager.test.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/git/__tests__/GitDiffManager.test.ts"],"sourcesContent":["import { GitDiffManager } from '../GitDiffManager';\nimport * as vscode from 'vscode';\nimport { spawn } from 'child_process';\n\n// Mock dependencies\njest.mock('vscode');\njest.mock('child_process');\n\ndescribe('GitDiffManager', () => {\n    let gitManager: GitDiffManager;\n    let mockContext: vscode.ExtensionContext;\n    let mockSpawn: jest.Mock;\n\n    beforeEach(() => {\n        mockContext = {\n            subscriptions: [],\n            extensionUri: vscode.Uri.file('/test')\n        } as any;\n\n        mockSpawn = spawn as jest.Mock;\n        \n        // Mock vscode.workspace\n        (vscode.workspace as any).workspaceFolders = [{ uri: { fsPath: '/test/workspace' } }];\n        \n        // Mock vscode.extensions\n        (vscode.extensions as any).getExtension = jest.fn().mockReturnValue({\n            isActive: true,\n            exports: {\n                getAPI: jest.fn().mockReturnValue({\n                    repositories: [{ mockRepo: true }]\n                })\n            }\n        });\n\n        gitManager = new GitDiffManager(mockContext);\n    });\n\n    afterEach(() => {\n        jest.clearAllMocks();\n    });\n\n    describe('getCommitHistory', () => {\n        it('should return commit history', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('abc123|Initial commit|John Doe|2023-01-01|def456\\n'));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.getCommitHistory(10);\n            \n            expect(result).toHaveLength(1);\n            expect(result[0]).toEqual({\n                hash: 'abc123',\n                message: 'Initial commit',\n                author: 'John Doe',\n                date: '2023-01-01',\n                parents: ['def456']\n            });\n        });\n\n        it('should handle empty commit history', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from(''));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.getCommitHistory(10);\n            \n            expect(result).toEqual([]);\n        });\n\n        it('should handle git command errors', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: jest.fn()\n                    },\n                    stderr: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('fatal: not a git repository'));\n                            }\n                        }\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(1);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.getCommitHistory(10);\n            \n            expect(result).toEqual([]);\n        });\n    });\n\n    describe('getBranches', () => {\n        it('should return local and remote branches', async () => {\n            mockSpawn.mockImplementation((command, args) => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                if (args.includes('-r')) {\n                                    // Remote branches\n                                    callback(Buffer.from('  origin/main\\n  origin/develop\\n'));\n                                } else {\n                                    // Local branches\n                                    callback(Buffer.from('* main\\n  feature-branch\\n'));\n                                }\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.getBranches();\n            \n            expect(result).toHaveLength(3);\n            expect(result).toContainEqual({ name: 'main', isRemote: false, isHead: true });\n            expect(result).toContainEqual({ name: 'feature-branch', isRemote: false, isHead: false });\n            expect(result).toContainEqual({ name: 'develop', isRemote: true, isHead: false });\n        });\n    });\n\n    describe('getBranchDiff', () => {\n        it('should return diff between branches', async () => {\n            mockSpawn.mockImplementation((command, args) => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                if (args.includes('--name-status')) {\n                                    callback(Buffer.from('M\\tsrc/app/app.component.ts\\nA\\tsrc/app/new-file.ts\\n'));\n                                } else if (args.includes('--stat')) {\n                                    callback(Buffer.from('2 files changed, 10 insertions(+), 5 deletions(-)\\n'));\n                                }\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.getBranchDiff('main', 'feature-branch');\n            \n            expect(result.files).toHaveLength(2);\n            expect(result.files[0]).toEqual({ path: 'src/app/app.component.ts', status: 'modified' });\n            expect(result.files[1]).toEqual({ path: 'src/app/new-file.ts', status: 'added' });\n            expect(result.additions).toBe(10);\n            expect(result.deletions).toBe(5);\n        });\n    });\n\n    describe('getInteractiveDiff', () => {\n        it('should return formatted diff output', async () => {\n            const diffOutput = `diff --git a/src/app/app.component.ts b/src/app/app.component.ts\nindex 1234567..abcdefg 100644\n--- a/src/app/app.component.ts\n+++ b/src/app/app.component.ts\n@@ -1,4 +1,4 @@\n-const oldCode = 'old';\n+const newCode = 'new';`;\n\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from(diffOutput));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.getInteractiveDiff('commit1', 'commit2');\n            \n            expect(result).toContain('diff --git');\n            expect(result).toContain('const newCode = \\'new\\';');\n        });\n    });\n\n    describe('getCurrentBranch', () => {\n        it('should return current branch name', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('feature-branch\\n'));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.getCurrentBranch();\n            \n            expect(result).toBe('feature-branch');\n        });\n\n        it('should return default branch on error', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: jest.fn()\n                    },\n                    stderr: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('fatal: not a git repository'));\n                            }\n                        }\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(1);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.getCurrentBranch();\n            \n            expect(result).toBe('main');\n        });\n    });\n\n    describe('isGitRepository', () => {\n        it('should return true for git repository', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('.git\\n'));\n                            }\n                        }\n                    },\n                    stderr: {\n                        on: jest.fn()\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(0);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.isGitRepository();\n            \n            expect(result).toBe(true);\n        });\n\n        it('should return false for non-git repository', async () => {\n            mockSpawn.mockImplementation(() => {\n                const mockChild = {\n                    stdout: {\n                        on: jest.fn()\n                    },\n                    stderr: {\n                        on: (event: string, callback: (data: any) => void) => {\n                            if (event === 'data') {\n                                callback(Buffer.from('fatal: not a git repository'));\n                            }\n                        }\n                    },\n                    on: (event: string, callback: (code: number) => void) => {\n                        if (event === 'close') {\n                            callback(1);\n                        }\n                    }\n                };\n                return mockChild;\n            });\n\n            const result = await gitManager.isGitRepository();\n            \n            expect(result).toBe(false);\n        });\n    });\n});\n"],"version":3}