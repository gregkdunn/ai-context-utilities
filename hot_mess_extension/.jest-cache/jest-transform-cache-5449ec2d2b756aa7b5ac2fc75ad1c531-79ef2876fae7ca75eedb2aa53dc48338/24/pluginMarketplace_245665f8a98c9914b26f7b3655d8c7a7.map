{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/pluginMarketplace.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/services/plugins/pluginMarketplace.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { \n  PluginMarketplace, \n  PluginInfo,\n  PluginManifest,\n  Plugin\n} from '../../types/plugin';\nimport { PluginDiscoveryService } from './pluginDiscovery';\n\nexport class PluginMarketplaceService implements PluginMarketplace {\n  private discoveryService: PluginDiscoveryService;\n  private pluginsDirectory: string;\n\n  constructor(private context: vscode.ExtensionContext) {\n    this.discoveryService = new PluginDiscoveryService(context);\n    this.pluginsDirectory = path.join(context.extensionPath, 'plugins');\n    \n    // Ensure plugins directory exists\n    if (!fs.existsSync(this.pluginsDirectory)) {\n      fs.mkdirSync(this.pluginsDirectory, { recursive: true });\n    }\n  }\n\n  async search(query: string): Promise<PluginInfo[]> {\n    return this.searchPlugins(query);\n  }\n  \n  async searchPlugins(query: string): Promise<PluginInfo[]> {\n    // In a real implementation, this would search a remote registry\n    // For now, we'll search local plugins and simulate some results\n    \n    const localPlugins = await this.listInstalledPlugins();\n    const filteredPlugins = localPlugins.filter(plugin => \n      plugin.name.toLowerCase().includes(query.toLowerCase()) ||\n      plugin.description.toLowerCase().includes(query.toLowerCase()) ||\n      plugin.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()))\n    );\n\n    // Add some mock plugins for demonstration\n    const mockPlugins = this.getMockPlugins().filter(plugin =>\n      plugin.name.toLowerCase().includes(query.toLowerCase()) ||\n      plugin.description.toLowerCase().includes(query.toLowerCase()) ||\n      plugin.tags.some(tag => tag.toLowerCase().includes(query.toLowerCase()))\n    );\n\n    return [...filteredPlugins, ...mockPlugins];\n  }\n\n  async getPlugin(id: string): Promise<PluginInfo> {\n    const localPlugins = await this.listInstalledPlugins();\n    const localPlugin = localPlugins.find(p => p.id === id);\n    \n    if (localPlugin) {\n      return localPlugin;\n    }\n\n    // Check mock plugins\n    const mockPlugins = this.getMockPlugins();\n    const mockPlugin = mockPlugins.find(p => p.id === id);\n    \n    if (mockPlugin) {\n      return mockPlugin;\n    }\n\n    throw new Error(`Plugin not found: ${id}`);\n  }\n\n  async install(id: string, version?: string): Promise<void> {\n    return this.installPlugin(id, version);\n  }\n  \n  async installPlugin(id: string, version?: string): Promise<void> {\n    try {\n      // In a real implementation, this would download from a registry\n      // For now, we'll simulate installation\n      \n      const pluginInfo = await this.getPlugin(id);\n      const targetVersion = version || pluginInfo.version;\n      \n      // Create plugin directory\n      const pluginDir = path.join(this.pluginsDirectory, id);\n      if (!fs.existsSync(pluginDir)) {\n        fs.mkdirSync(pluginDir, { recursive: true });\n      }\n\n      // Generate package.json\n      const packageJson = {\n        name: pluginInfo.id,\n        displayName: pluginInfo.name,\n        version: targetVersion,\n        description: pluginInfo.description,\n        author: pluginInfo.author,\n        license: pluginInfo.license,\n        repository: {\n          type: 'git',\n          url: pluginInfo.repository\n        },\n        homepage: pluginInfo.homepage,\n        bugs: pluginInfo.bugs,\n        keywords: [...pluginInfo.tags, 'ai-debug-plugin'],\n        main: 'index.js',\n        dependencies: pluginInfo.dependencies,\n        peerDependencies: pluginInfo.peerDependencies,\n        aiDebugPlugin: {\n          capabilities: this.getDefaultCapabilities(pluginInfo),\n          config: {},\n          engineVersion: '1.0.0'\n        }\n      };\n\n      fs.writeFileSync(\n        path.join(pluginDir, 'package.json'),\n        JSON.stringify(packageJson, null, 2)\n      );\n\n      // Generate basic plugin implementation\n      const pluginCode = this.generatePluginCode(pluginInfo);\n      fs.writeFileSync(path.join(pluginDir, 'index.js'), pluginCode);\n\n      // Generate README\n      const readme = this.generateReadme(pluginInfo);\n      fs.writeFileSync(path.join(pluginDir, 'README.md'), readme);\n\n      vscode.window.showInformationMessage(`Plugin ${pluginInfo.name} installed successfully!`);\n      \n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to install plugin: ${(error as Error).message}`);\n      throw error;\n    }\n  }\n\n  async update(id: string, version?: string): Promise<void> {\n    return this.updatePlugin(id, version);\n  }\n  \n  async updatePlugin(id: string, version?: string): Promise<void> {\n    try {\n      const pluginInfo = await this.getPlugin(id);\n      const currentVersion = pluginInfo.version;\n      const targetVersion = version || 'latest';\n      \n      // In a real implementation, this would check for updates and download\n      // For now, we'll simulate an update\n      \n      if (targetVersion === currentVersion) {\n        vscode.window.showInformationMessage(`Plugin ${pluginInfo.name} is already up to date.`);\n        return;\n      }\n\n      // Simulate update process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      vscode.window.showInformationMessage(`Plugin ${pluginInfo.name} updated to version ${targetVersion}!`);\n      \n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to update plugin: ${(error as Error).message}`);\n      throw error;\n    }\n  }\n\n  async uninstall(id: string): Promise<void> {\n    return this.uninstallPlugin(id);\n  }\n  \n  async uninstallPlugin(id: string): Promise<void> {\n    try {\n      const pluginDir = path.join(this.pluginsDirectory, id);\n      \n      if (fs.existsSync(pluginDir)) {\n        // Remove plugin directory\n        fs.rmSync(pluginDir, { recursive: true, force: true });\n        \n        vscode.window.showInformationMessage(`Plugin ${id} uninstalled successfully!`);\n      } else {\n        throw new Error(`Plugin ${id} is not installed`);\n      }\n      \n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to uninstall plugin: ${(error as Error).message}`);\n      throw error;\n    }\n  }\n\n  async listInstalledPlugins(): Promise<PluginInfo[]> {\n    const plugins: PluginInfo[] = [];\n    \n    try {\n      const manifests = await this.discoveryService.discoverPlugins(this.pluginsDirectory);\n      \n      for (const manifest of manifests) {\n        const pluginInfo: PluginInfo = {\n          id: manifest.metadata.id,\n          name: manifest.metadata.name,\n          version: manifest.metadata.version,\n          description: manifest.metadata.description || '',\n          author: manifest.metadata.author || '',\n          downloads: 0, // Would be fetched from registry\n          rating: 0, // Would be fetched from registry\n          tags: manifest.metadata.keywords || [],\n          screenshots: [],\n          readme: this.getReadme(manifest.path),\n          changelog: this.getChangelog(manifest.path),\n          license: manifest.metadata.license || '',\n          repository: manifest.metadata.repository || '',\n          homepage: manifest.metadata.homepage || '',\n          bugs: '',\n          dependencies: manifest.packageJson.dependencies || {},\n          peerDependencies: manifest.packageJson.peerDependencies || {},\n          publishedAt: new Date(fs.statSync(manifest.path).birthtime),\n          updatedAt: new Date(fs.statSync(manifest.path).mtime)\n        };\n        \n        plugins.push(pluginInfo);\n      }\n      \n    } catch (error) {\n      console.error('Failed to list installed plugins:', error);\n    }\n    \n    return plugins;\n  }\n\n  private getMockPlugins(): PluginInfo[] {\n    const now = new Date();\n    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    \n    return [\n      {\n        id: 'git-enhanced-analyzer',\n        name: 'Git Enhanced Analyzer',\n        version: '1.2.0',\n        description: 'Advanced Git analysis with commit pattern recognition and branch optimization suggestions',\n        author: 'AI Debug Community',\n        downloads: 1250,\n        rating: 4.8,\n        tags: ['git', 'analysis', 'vcs', 'optimization'],\n        screenshots: [],\n        readme: '# Git Enhanced Analyzer\\n\\nAdvanced Git analysis plugin...',\n        changelog: '## 1.2.0\\n- Added branch optimization\\n- Improved commit analysis',\n        license: 'MIT',\n        repository: 'https://github.com/ai-debug/git-enhanced-analyzer',\n        homepage: 'https://ai-debug.com/plugins/git-enhanced-analyzer',\n        bugs: 'https://github.com/ai-debug/git-enhanced-analyzer/issues',\n        dependencies: {\n          'simple-git': '^3.0.0',\n          'moment': '^2.29.0'\n        },\n        peerDependencies: {},\n        publishedAt: weekAgo,\n        updatedAt: now\n      },\n      {\n        id: 'test-coverage-insights',\n        name: 'Test Coverage Insights',\n        version: '2.1.3',\n        description: 'Intelligent test coverage analysis with AI-powered suggestions for improving test quality',\n        author: 'TestBot Inc.',\n        downloads: 2100,\n        rating: 4.6,\n        tags: ['testing', 'coverage', 'quality', 'ai'],\n        screenshots: [],\n        readme: '# Test Coverage Insights\\n\\nIntelligent test coverage analysis...',\n        changelog: '## 2.1.3\\n- Fixed coverage calculation\\n- Added AI suggestions',\n        license: 'Apache-2.0',\n        repository: 'https://github.com/testbot/test-coverage-insights',\n        homepage: 'https://testbot.com/plugins/coverage-insights',\n        bugs: 'https://github.com/testbot/test-coverage-insights/issues',\n        dependencies: {\n          'istanbul': '^0.4.5',\n          'nyc': '^15.0.0'\n        },\n        peerDependencies: {},\n        publishedAt: weekAgo,\n        updatedAt: now\n      },\n      {\n        id: 'performance-profiler',\n        name: 'Performance Profiler',\n        version: '1.0.5',\n        description: 'Real-time performance monitoring and optimization suggestions for your development workflow',\n        author: 'SpeedDev',\n        downloads: 890,\n        rating: 4.3,\n        tags: ['performance', 'profiling', 'optimization', 'monitoring'],\n        screenshots: [],\n        readme: '# Performance Profiler\\n\\nReal-time performance monitoring...',\n        changelog: '## 1.0.5\\n- Added memory profiling\\n- Performance improvements',\n        license: 'MIT',\n        repository: 'https://github.com/speeddev/performance-profiler',\n        homepage: 'https://speeddev.com/plugins/performance-profiler',\n        bugs: 'https://github.com/speeddev/performance-profiler/issues',\n        dependencies: {\n          'perf_hooks': '^1.0.0',\n          'v8-profiler': '^5.7.0'\n        },\n        peerDependencies: {},\n        publishedAt: weekAgo,\n        updatedAt: now\n      },\n      {\n        id: 'ai-code-reviewer',\n        name: 'AI Code Reviewer',\n        version: '3.0.1',\n        description: 'AI-powered code review with smart suggestions, bug detection, and code quality analysis',\n        author: 'CodeAI Labs',\n        downloads: 3200,\n        rating: 4.9,\n        tags: ['ai', 'code-review', 'quality', 'bugs', 'analysis'],\n        screenshots: [],\n        readme: '# AI Code Reviewer\\n\\nAI-powered code review...',\n        changelog: '## 3.0.1\\n- Enhanced AI model\\n- Better bug detection',\n        license: 'Commercial',\n        repository: 'https://github.com/codeai/ai-code-reviewer',\n        homepage: 'https://codeai.com/plugins/ai-code-reviewer',\n        bugs: 'https://github.com/codeai/ai-code-reviewer/issues',\n        dependencies: {\n          'openai': '^4.0.0',\n          'typescript': '^5.0.0'\n        },\n        peerDependencies: {},\n        publishedAt: weekAgo,\n        updatedAt: now\n      }\n    ];\n  }\n\n  private getDefaultCapabilities(pluginInfo: PluginInfo): any[] {\n    const capabilities = [];\n    \n    // Add capabilities based on plugin tags\n    if (pluginInfo.tags.includes('git')) {\n      capabilities.push({\n        type: 'analyzer',\n        name: 'git-analyzer',\n        description: 'Analyze Git repositories and commits'\n      });\n    }\n    \n    if (pluginInfo.tags.includes('testing')) {\n      capabilities.push({\n        type: 'analyzer',\n        name: 'test-analyzer',\n        description: 'Analyze test results and coverage'\n      });\n    }\n    \n    if (pluginInfo.tags.includes('performance')) {\n      capabilities.push({\n        type: 'analyzer',\n        name: 'performance-analyzer',\n        description: 'Analyze performance metrics'\n      });\n    }\n    \n    if (pluginInfo.tags.includes('ai')) {\n      capabilities.push({\n        type: 'ai-provider',\n        name: 'ai-provider',\n        description: 'Provide AI-powered insights'\n      });\n    }\n    \n    return capabilities;\n  }\n\n  private generatePluginCode(pluginInfo: PluginInfo): string {\n    const className = this.toPascalCase(pluginInfo.id);\n    \n    return `\nclass ${className} {\n  constructor() {\n    this.metadata = {\n      id: '${pluginInfo.id}',\n      name: '${pluginInfo.name}',\n      version: '${pluginInfo.version}',\n      description: '${pluginInfo.description}',\n      author: '${pluginInfo.author}',\n      license: '${pluginInfo.license}',\n      enabled: true,\n      capabilities: ${JSON.stringify(this.getDefaultCapabilities(pluginInfo), null, 6)}\n    };\n  }\n\n  async activate(api, context) {\n    console.log('${pluginInfo.name} plugin activated');\n    \n    // Register plugin capabilities\n    if (this.commands) {\n      for (const command of this.commands) {\n        api.registerCommand(command);\n      }\n    }\n    \n    if (this.analyzers) {\n      for (const analyzer of this.analyzers) {\n        api.registerAnalyzer(analyzer);\n      }\n    }\n    \n    // Plugin-specific initialization\n    await this.initialize(api, context);\n  }\n\n  async deactivate(api, context) {\n    console.log('${pluginInfo.name} plugin deactivated');\n    \n    // Cleanup plugin resources\n    await this.cleanup(api, context);\n  }\n\n  async initialize(api, context) {\n    // Plugin-specific initialization logic\n    console.log('Initializing ${pluginInfo.name}...');\n  }\n\n  async cleanup(api, context) {\n    // Plugin-specific cleanup logic\n    console.log('Cleaning up ${pluginInfo.name}...');\n  }\n\n  // Example analyzer (if plugin has analysis capabilities)\n  get analyzers() {\n    return [\n      {\n        id: '${pluginInfo.id}-analyzer',\n        name: '${pluginInfo.name} Analyzer',\n        description: '${pluginInfo.description}',\n        filePatterns: ['**/*'],\n        \n        async analyze(content, filePath, context) {\n          // Implement analysis logic here\n          return {\n            issues: [],\n            metrics: {},\n            suggestions: [],\n            confidence: 0.8\n          };\n        }\n      }\n    ];\n  }\n\n  // Example commands (if plugin has command capabilities)\n  get commands() {\n    return [\n      {\n        id: '${pluginInfo.id}-command',\n        title: '${pluginInfo.name} Command',\n        description: 'Execute ${pluginInfo.name} functionality',\n        category: 'AI Debug',\n        \n        async execute(context, args) {\n          // Implement command logic here\n          return 'Command executed successfully';\n        }\n      }\n    ];\n  }\n}\n\nmodule.exports = ${className};\n    `.trim();\n  }\n\n  private generateReadme(pluginInfo: PluginInfo): string {\n    return `\n# ${pluginInfo.name}\n\n${pluginInfo.description}\n\n## Installation\n\nInstall this plugin through the AI Debug Plugin Marketplace:\n\n1. Open AI Debug extension\n2. Go to Plugin Marketplace\n3. Search for \"${pluginInfo.name}\"\n4. Click Install\n\n## Usage\n\nAfter installation, the plugin will be automatically activated and its features will be available in the AI Debug extension.\n\n## Features\n\n- Advanced analysis capabilities\n- Smart suggestions and insights\n- Seamless integration with AI Debug workflow\n\n## Configuration\n\nThe plugin can be configured through the AI Debug settings panel.\n\n## Support\n\nFor issues and questions, please visit: ${pluginInfo.bugs || 'N/A'}\n\n## License\n\n${pluginInfo.license}\n    `.trim();\n  }\n\n  private getReadme(pluginPath: string): string {\n    const readmePath = path.join(pluginPath, 'README.md');\n    if (fs.existsSync(readmePath)) {\n      return fs.readFileSync(readmePath, 'utf8');\n    }\n    return '';\n  }\n\n  private getChangelog(pluginPath: string): string {\n    const changelogPath = path.join(pluginPath, 'CHANGELOG.md');\n    if (fs.existsSync(changelogPath)) {\n      return fs.readFileSync(changelogPath, 'utf8');\n    }\n    return '';\n  }\n\n  private toPascalCase(str: string): string {\n    return str\n      .replace(/[-_]/g, ' ')\n      .replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())\n      .replace(/\\s/g, '');\n  }\n}\n"],"version":3}