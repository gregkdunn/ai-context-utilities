{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/webview/provider.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/webview/provider.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { ProjectDetector } from '../utils/projectDetector';\nimport { CommandRunner } from '../utils/shellRunner';\nimport { FileManager } from '../utils/fileManager';\nimport { StatusTracker } from '../utils/statusTracker';\nimport { WebviewMessage, StreamingMessage } from '../types';\n\nexport class WebviewProvider implements vscode.WebviewViewProvider {\n    public static readonly viewType = 'aiDebugUtilities';\n    \n    private _view?: vscode.WebviewView;\n    private _disposables: vscode.Disposable[] = [];\n\n    constructor(\n        private readonly _extensionUri: vscode.Uri,\n        private readonly _projectDetector: ProjectDetector,\n        private readonly _commandRunner: CommandRunner,\n        private readonly _fileManager: FileManager,\n        private readonly _statusTracker: StatusTracker\n    ) {}\n\n    public resolveWebviewView(\n        webviewView: vscode.WebviewView,\n        context: vscode.WebviewViewResolveContext,\n        _token: vscode.CancellationToken\n    ) {\n        this._view = webviewView;\n\n        webviewView.webview.options = {\n            enableScripts: true,\n            localResourceRoots: [this._extensionUri]\n        };\n\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n        webviewView.webview.onDidReceiveMessage(\n            async (data: WebviewMessage) => {\n                // FIX: Properly handle async message processing\n                try {\n                    await this._handleMessage(data);\n                } catch (error) {\n                    console.error('Error handling webview message:', error);\n                    this._postMessage({ \n                        type: 'error', \n                        data: { error: (error as Error).message } \n                    });\n                }\n            },\n            undefined,\n            this._disposables\n        );\n\n        // Set up file watcher\n        try {\n            this._fileManager.watchFiles((filePath: string, eventType: string) => {\n                this._postMessage({ type: 'fileChanged', data: { filePath, eventType } });\n            });\n        } catch (error) {\n            console.error('Error setting up file watcher:', error);\n        }\n    }\n\n    // FIX: Make _handleMessage async and add proper error handling\n    private async _handleMessage(data: WebviewMessage): Promise<void> {\n        try {\n            switch (data.command) {\n                case 'runCommand':\n                    await this._handleRunCommand(data.data);\n                    break;\n                case 'getProjects':\n                    await this._handleGetProjects();\n                    break;\n                case 'openFile':\n                    await this._handleOpenFile(data.data);\n                    break;\n                case 'clearOutput':\n                    await this._handleClearOutput();\n                    break;\n                default:\n                    console.warn('Unknown message command:', data.command);\n            }\n        } catch (error) {\n            console.error(`Error handling command ${data.command}:`, error);\n            this._postMessage({ \n                type: 'commandError', \n                data: { \n                    command: data.command, \n                    error: (error as Error).message \n                } \n            });\n        }\n    }\n\n    private async _handleRunCommand(data: any) {\n        const { action, project, options } = data;\n        \n        try {\n            let result;\n            \n            switch (action) {\n                case 'aiDebug':\n                    result = await this._commandRunner.runAiDebug(project, options);\n                    break;\n                case 'nxTest':\n                    result = await this._commandRunner.runNxTest(project, options);\n                    break;\n                case 'gitDiff':\n                    result = await this._commandRunner.runGitDiff(options);\n                    break;\n                case 'prepareToPush':\n                    result = await this._commandRunner.runPrepareToPush(project, options);\n                    break;\n                default:\n                    throw new Error(`Unknown action: ${action}`);\n            }\n            \n            this._postMessage({ \n                type: 'commandResult', \n                data: { action, result } \n            });\n        } catch (error) {\n            console.error(`Error executing command ${action}:`, error);\n            this._postMessage({ \n                type: 'commandError', \n                data: { action, error: (error as Error).message } \n            });\n        }\n    }\n\n    private async _handleGetProjects() {\n        try {\n            const projects = await this._projectDetector.getProjects();\n            this._postMessage({ \n                type: 'projects', \n                data: { projects } \n            });\n        } catch (error) {\n            console.error('Error getting projects:', error);\n            this._postMessage({ \n                type: 'error', \n                data: { error: (error as Error).message } \n            });\n        }\n    }\n\n    private async _handleOpenFile(data: any) {\n        const { filePath } = data;\n        \n        try {\n            await this._fileManager.openFile(filePath);\n            this._postMessage({ \n                type: 'fileOpened', \n                data: { filePath } \n            });\n        } catch (error) {\n            console.error(`Error opening file ${filePath}:`, error);\n            this._postMessage({ \n                type: 'error', \n                data: { error: (error as Error).message } \n            });\n        }\n    }\n\n    // FIX: Make _handleClearOutput async for consistency\n    private async _handleClearOutput(): Promise<void> {\n        try {\n            // Clear output in status tracker or file manager\n            this._statusTracker.clearHistory();\n            this._postMessage({ \n                type: 'outputCleared', \n                data: {} \n            });\n        } catch (error) {\n            console.error('Error clearing output:', error);\n            this._postMessage({ \n                type: 'error', \n                data: { error: (error as Error).message } \n            });\n        }\n    }\n\n    // Public methods for external use\n    public show(): void {\n        if (this._view) {\n            try {\n                this._view.show();\n            } catch (error) {\n                console.error('Error showing webview:', error);\n            }\n        }\n    }\n\n    // FIX: Ensure runCommand is properly async\n    public async runCommand(action: string, data: any): Promise<void> {\n        try {\n            await this._handleRunCommand({ action, ...data });\n        } catch (error) {\n            console.error(`Error running command ${action}:`, error);\n            throw error;\n        }\n    }\n\n    private _postMessage(message: any): void {\n        if (this._view) {\n            try {\n                this._view.webview.postMessage(message);\n            } catch (error) {\n                console.error('Error posting message to webview:', error);\n            }\n        }\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview): string {\n        const scriptUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'out', 'webview', 'main.js')\n        );\n\n        const styleUri = webview.asWebviewUri(\n            vscode.Uri.joinPath(this._extensionUri, 'out', 'webview', 'styles.css')\n        );\n\n        return `<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <link href=\"${styleUri}\" rel=\"stylesheet\">\n            <title>AI Debug Utilities</title>\n        </head>\n        <body>\n            <div id=\"root\"></div>\n            <script src=\"${scriptUri}\"></script>\n        </body>\n        </html>`;\n    }\n\n    public setupStreamingListeners() {\n        // Method for streaming integration - placeholder implementation\n        // This method would set up listeners for streaming events\n    }\n\n    public dispose() {\n        this._disposables.forEach(d => d.dispose());\n    }\n}"],"version":3}