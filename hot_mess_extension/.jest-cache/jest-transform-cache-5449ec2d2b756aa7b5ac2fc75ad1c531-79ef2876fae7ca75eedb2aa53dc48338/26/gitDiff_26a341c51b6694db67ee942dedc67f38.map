{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/gitDiff.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/gitDiff.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { spawn } from 'child_process';\nimport { CommandOptions, CommandResult } from '../types';\nimport { FileManager } from '../utils/fileManager';\n\nexport class GitDiffCommand {\n    private fileManager: FileManager;\n    private outputChannel: vscode.OutputChannel;\n\n    constructor() {\n        this.outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');\n        this.fileManager = new FileManager(this.outputChannel);\n    }\n\n    /**\n     * Run Git Diff command with AI-optimized analysis\n     */\n    async run(options: CommandOptions = {}): Promise<CommandResult> {\n        const startTime = Date.now();\n        \n        try {\n            // Skip diff if noDiff option is set\n            if (options.noDiff) {\n                const duration = Date.now() - startTime;\n                return {\n                    success: true,\n                    exitCode: 0,\n                    output: 'Diff skipped due to noDiff option',\n                    duration\n                };\n            }\n\n            const outputFile = this.fileManager.getOutputFilePath('diff.txt');\n            \n            // Ensure output directory exists\n            await this.fileManager.ensureDirectoryExists(require('path').dirname(outputFile));\n            \n            // Smart diff detection\n            const diffArgs = await this.detectSmartDiff();\n            \n            // Generate the diff\n            const diffResult = await this.executeDiff(diffArgs);\n            \n            if (!diffResult.success) {\n                const duration = Date.now() - startTime;\n                return {\n                    success: false,\n                    exitCode: diffResult.exitCode,\n                    output: diffResult.output,\n                    error: diffResult.error,\n                    duration\n                };\n            }\n\n            // Process diff for AI context\n            const processedOutput = await this.createAiDiffContext(diffResult.output, diffArgs);\n            \n            // Save to file\n            await this.fileManager.writeFile(outputFile, processedOutput);\n            \n            // Show statistics\n            const stats = await this.fileManager.getFileStats(outputFile);\n            \n            if (!stats || stats.size === 0) {\n                this.showWarning(\"No diff output generated\");\n            } else {\n                this.showSuccess(`Diff saved to: ${outputFile}`);\n                this.showInfo(`📊 Size: ${stats.size} bytes`);\n                \n                // Quick content summary\n                const filesChanged = this.countChangedFiles(processedOutput);\n                this.showInfo(`📈 AI-optimized format: ${filesChanged} files analyzed`);\n            }\n            \n            const duration = Date.now() - startTime;\n            return {\n                success: true,\n                exitCode: 0,\n                output: processedOutput,\n                outputFiles: [outputFile],\n                duration\n            };\n\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            return {\n                success: false,\n                exitCode: 1,\n                output: \"\",\n                error: error instanceof Error ? error.message : 'Unknown error',\n                duration\n            };\n        }\n    }\n\n    private async detectSmartDiff(): Promise<string[]> {\n        this.showInfo(\"🔍 Smart diff detection...\");\n        \n        // Check for unstaged changes\n        const unstagedResult = await this.executeGitCommand(['diff', '--quiet']);\n        \n        if (unstagedResult.exitCode !== 0) {\n            // Has unstaged changes\n            this.showInfo(\"📝 Using unstaged changes\");\n            return [];\n        }\n        \n        // Check for staged changes\n        const stagedResult = await this.executeGitCommand(['diff', '--cached', '--quiet']);\n        \n        if (stagedResult.exitCode !== 0) {\n            // Has staged changes\n            this.showInfo(\"📂 Using staged changes\");\n            return ['--cached'];\n        }\n        \n        // No unstaged or staged changes, check for commits\n        const hasCommits = await this.executeGitCommand(['rev-parse', '--verify', 'HEAD~1']);\n        \n        if (hasCommits.success) {\n            this.showInfo(\"📋 Using last commit changes (no unstaged/staged changes found)\");\n            return ['HEAD~1..HEAD'];\n        }\n        \n        // No changes found\n        this.showWarning(\"No changes detected (initial commit or clean working directory)\");\n        return [];\n    }\n\n    private async executeDiff(args: string[]): Promise<CommandResult> {\n        if (args.length === 0) {\n            this.showInfo(\"Running: git diff\");\n        } else {\n            this.showInfo(`Running: git diff ${args.join(' ')}`);\n        }\n        \n        return this.executeGitCommand(['diff', ...args]);\n    }\n\n    private async executeGitCommand(args: string[]): Promise<CommandResult> {\n        return new Promise((resolve) => {\n            const process = spawn('git', args, {\n                cwd: this.getWorkspaceRoot(),\n                shell: false\n            });\n\n            let output = '';\n            let errorOutput = '';\n\n            process.stdout?.on('data', (data) => {\n                output += data.toString();\n            });\n\n            process.stderr?.on('data', (data) => {\n                errorOutput += data.toString();\n            });\n\n            process.on('close', (code) => {\n                resolve({\n                    success: code === 0,\n                    exitCode: code || 0,\n                    output,\n                    error: errorOutput || undefined,\n                    duration: 0\n                });\n            });\n\n            process.on('error', (error) => {\n                resolve({\n                    success: false,\n                    exitCode: 1,\n                    output,\n                    error: error.message,\n                    duration: 0\n                });\n            });\n        });\n    }\n\n    private async createAiDiffContext(diffOutput: string, diffArgs: string[]): Promise<string> {\n        if (!diffOutput.trim()) {\n            return this.createNoChangesOutput();\n        }\n\n        const timestamp = new Date().toISOString();\n        const branch = await this.getCurrentBranch();\n        \n        let output = `=================================================================\n🔍 AI-OPTIMIZED GIT DIFF ANALYSIS\n=================================================================\n\nCOMMAND: git diff ${diffArgs.join(' ')}\nTIMESTAMP: ${timestamp}\nBRANCH: ${branch}\n\n`;\n\n        // Analyze the diff for file changes\n        const analysis = this.analyzeDiffChanges(diffOutput);\n        \n        // Generate change summary\n        output += `==================================================================\n📊 CHANGE SUMMARY\n==================================================================\n\nTotal files changed: ${analysis.totalChanges}\n\n`;\n\n        if (analysis.newFiles.length > 0) {\n            output += `🆕 NEW FILES (${analysis.newFiles.length}):\\n`;\n            analysis.newFiles.forEach(file => {\n                output += `  • ${file}\\n`;\n            });\n            output += '\\n';\n        }\n\n        if (analysis.modifiedFiles.length > 0) {\n            output += `📝 MODIFIED FILES (${analysis.modifiedFiles.length}):\\n`;\n            analysis.modifiedFiles.forEach(file => {\n                output += `  • ${file}\\n`;\n            });\n            output += '\\n';\n        }\n\n        if (analysis.deletedFiles.length > 0) {\n            output += `🗑️ DELETED FILES (${analysis.deletedFiles.length}):\\n`;\n            analysis.deletedFiles.forEach(file => {\n                output += `  • ${file}\\n`;\n            });\n            output += '\\n';\n        }\n\n        if (analysis.renamedFiles.length > 0) {\n            output += `📦 RENAMED/MOVED FILES (${analysis.renamedFiles.length}):\\n`;\n            analysis.renamedFiles.forEach(file => {\n                output += `  • ${file}\\n`;\n            });\n            output += '\\n';\n        }\n\n        // File type analysis\n        output += `==================================================================\n🏷️ FILE TYPE ANALYSIS\n==================================================================\n\n`;\n        output += this.analyzeFileTypes(diffOutput);\n\n        // Add the actual diff with file separators\n        output += `==================================================================\n📋 DETAILED CHANGES\n==================================================================\n\n`;\n        output += this.addFileSeparators(diffOutput);\n\n        // Add AI analysis context\n        output += `\n==================================================================\n🤖 AI ANALYSIS CONTEXT\n==================================================================\nKey areas for analysis:\n• Focus on test-related files (.spec.ts, .test.ts)\n• Look for type/interface changes that might break tests\n• Check for new functionality that needs test coverage\n• Identify breaking changes in method signatures\n• Review dependency changes and imports\n\nChange impact areas:\n`;\n\n        if (analysis.newFiles.length > 0) {\n            output += \"• New files may need comprehensive test coverage\\n\";\n        }\n        if (analysis.modifiedFiles.length > 0) {\n            output += \"• Modified files may have broken existing tests\\n\";\n        }\n        if (analysis.deletedFiles.length > 0) {\n            output += \"• Deleted files may have orphaned tests or dependencies\\n\";\n        }\n\n        return output;\n    }\n\n    private analyzeDiffChanges(diffOutput: string): {\n        newFiles: string[];\n        modifiedFiles: string[];\n        deletedFiles: string[];\n        renamedFiles: string[];\n        totalChanges: number;\n    } {\n        const lines = diffOutput.split('\\n');\n        const newFiles: string[] = [];\n        const modifiedFiles: string[] = [];\n        const deletedFiles: string[] = [];\n        const renamedFiles: string[] = [];\n        \n        let currentFileA = '';\n        let currentFileB = '';\n        let isProcessingFile = false;\n        \n        for (const line of lines) {\n            const diffMatch = line.match(/^diff --git a\\/(.*) b\\/(.*)/);\n            if (diffMatch) {\n                currentFileA = diffMatch[1];\n                currentFileB = diffMatch[2];\n                isProcessingFile = true;\n                \n                // Check if it's a rename/move\n                if (currentFileA !== currentFileB) {\n                    renamedFiles.push(`${currentFileA} → ${currentFileB}`);\n                }\n                continue;\n            }\n            \n            if (isProcessingFile) {\n                if (line.match(/^new file mode/)) {\n                    newFiles.push(currentFileB);\n                    isProcessingFile = false;\n                } else if (line.match(/^deleted file mode/)) {\n                    deletedFiles.push(currentFileA);\n                    isProcessingFile = false;\n                } else if (line.match(/^index.*\\.\\./) && currentFileA === currentFileB && !renamedFiles.some(f => f.includes(currentFileA))) {\n                    modifiedFiles.push(currentFileA);\n                    isProcessingFile = false;\n                }\n            }\n        }\n        \n        const totalChanges = newFiles.length + modifiedFiles.length + deletedFiles.length + renamedFiles.length;\n        \n        return {\n            newFiles,\n            modifiedFiles,\n            deletedFiles,\n            renamedFiles,\n            totalChanges\n        };\n    }\n\n    private analyzeFileTypes(diffOutput: string): string {\n        const lines = diffOutput.split('\\n');\n        const counts = {\n            ts: 0,\n            spec: 0,\n            html: 0,\n            css: 0,\n            json: 0,\n            other: 0\n        };\n        \n        for (const line of lines) {\n            const match = line.match(/^diff --git.*b\\/(.*)/);\n            if (match) {\n                const file = match[1];\n                if (file.match(/\\.(spec|test)\\.ts$/)) {\n                    counts.spec++;\n                } else if (file.endsWith('.ts')) {\n                    counts.ts++;\n                } else if (file.endsWith('.html')) {\n                    counts.html++;\n                } else if (file.match(/\\.(css|scss|sass)$/)) {\n                    counts.css++;\n                } else if (file.endsWith('.json')) {\n                    counts.json++;\n                } else {\n                    counts.other++;\n                }\n            }\n        }\n        \n        let output = `TypeScript files: ${counts.ts}\nTest files: ${counts.spec}\nTemplates: ${counts.html}\nStyles: ${counts.css}\nConfig/JSON: ${counts.json}\nOther: ${counts.other}\n\n`;\n        \n        // AI insights based on file types\n        if (counts.spec > 0) {\n            output += \"🧪 Test files modified - may fix or introduce test issues\\n\";\n        }\n        if (counts.ts > counts.spec) {\n            output += \"⚠️  More source files than test files changed - check test coverage\\n\";\n        }\n        if (counts.json > 0) {\n            output += \"⚙️  Configuration changes detected - may affect build/test setup\\n\";\n        }\n        \n        return output;\n    }\n\n    private addFileSeparators(diffOutput: string): string {\n        const lines = diffOutput.split('\\n');\n        const result: string[] = [];\n        \n        for (const line of lines) {\n            const match = line.match(/^diff --git a\\/(.*) b\\/(.*)/);\n            if (match) {\n                const currentFile = match[2];\n                result.push(`📁 FILE: ${currentFile}`);\n                result.push('─'.repeat(40));\n            }\n            result.push(line);\n        }\n        \n        return result.join('\\n');\n    }\n\n    private createNoChangesOutput(): string {\n        const timestamp = new Date().toISOString();\n        \n        return `=================================================================\n🔍 GIT DIFF ANALYSIS\n=================================================================\n\nSTATUS: No changes detected\nTIMESTAMP: ${timestamp}\n\n=================================================================\n📊 REPOSITORY STATUS\n=================================================================\nWorking directory: Clean\nStaged changes: None\n\n=================================================================\n🤖 AI ANALYSIS CONTEXT\n=================================================================\nNo code changes were found to analyze. This could mean:\n• Working directory is clean (all changes committed)\n• You're analyzing test failures without recent changes\n• Focus should be on existing code patterns or environment issues\n• Consider checking if tests were recently updated in previous commits\n\nSuggested actions:\n• Review recent commit history: git log --oneline -10\n• Check if issue is environment-related rather than code-related\n• Examine test setup or configuration files\n`;\n    }\n\n    private async getCurrentBranch(): Promise<string> {\n        try {\n            const result = await this.executeGitCommand(['branch', '--show-current']);\n            return result.success ? result.output.trim() : 'unknown';\n        } catch {\n            return 'unknown';\n        }\n    }\n\n    private countChangedFiles(output: string): number {\n        const matches = output.match(/^📁 FILE:/gm);\n        return matches ? matches.length : 0;\n    }\n\n    private getWorkspaceRoot(): string {\n        return vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\n    }\n\n    private showInfo(message: string): void {\n        this.outputChannel.appendLine(message);\n        this.outputChannel.show();\n    }\n\n    private showSuccess(message: string): void {\n        this.showInfo(`✅ ${message}`);\n    }\n\n    private showWarning(message: string): void {\n        this.showInfo(`⚠️  ${message}`);\n    }\n\n    private showError(message: string): void {\n        this.showInfo(`❌ ${message}`);\n    }\n}\n"],"version":3}