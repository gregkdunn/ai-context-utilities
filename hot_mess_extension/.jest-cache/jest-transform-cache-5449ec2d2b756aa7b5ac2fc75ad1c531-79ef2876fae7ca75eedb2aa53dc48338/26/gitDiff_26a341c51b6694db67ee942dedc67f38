049fc6fb6304160a0b57ecd9d898671f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitDiffCommand = void 0;
const vscode = __importStar(require("vscode"));
const child_process_1 = require("child_process");
const fileManager_1 = require("../utils/fileManager");
class GitDiffCommand {
    fileManager;
    outputChannel;
    constructor() {
        this.outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');
        this.fileManager = new fileManager_1.FileManager(this.outputChannel);
    }
    /**
     * Run Git Diff command with AI-optimized analysis
     */
    async run(options = {}) {
        const startTime = Date.now();
        try {
            // Skip diff if noDiff option is set
            if (options.noDiff) {
                const duration = Date.now() - startTime;
                return {
                    success: true,
                    exitCode: 0,
                    output: 'Diff skipped due to noDiff option',
                    duration
                };
            }
            const outputFile = this.fileManager.getOutputFilePath('diff.txt');
            // Ensure output directory exists
            await this.fileManager.ensureDirectoryExists(require('path').dirname(outputFile));
            // Smart diff detection
            const diffArgs = await this.detectSmartDiff();
            // Generate the diff
            const diffResult = await this.executeDiff(diffArgs);
            if (!diffResult.success) {
                const duration = Date.now() - startTime;
                return {
                    success: false,
                    exitCode: diffResult.exitCode,
                    output: diffResult.output,
                    error: diffResult.error,
                    duration
                };
            }
            // Process diff for AI context
            const processedOutput = await this.createAiDiffContext(diffResult.output, diffArgs);
            // Save to file
            await this.fileManager.writeFile(outputFile, processedOutput);
            // Show statistics
            const stats = await this.fileManager.getFileStats(outputFile);
            if (!stats || stats.size === 0) {
                this.showWarning("No diff output generated");
            }
            else {
                this.showSuccess(`Diff saved to: ${outputFile}`);
                this.showInfo(`üìä Size: ${stats.size} bytes`);
                // Quick content summary
                const filesChanged = this.countChangedFiles(processedOutput);
                this.showInfo(`üìà AI-optimized format: ${filesChanged} files analyzed`);
            }
            const duration = Date.now() - startTime;
            return {
                success: true,
                exitCode: 0,
                output: processedOutput,
                outputFiles: [outputFile],
                duration
            };
        }
        catch (error) {
            const duration = Date.now() - startTime;
            return {
                success: false,
                exitCode: 1,
                output: "",
                error: error instanceof Error ? error.message : 'Unknown error',
                duration
            };
        }
    }
    async detectSmartDiff() {
        this.showInfo("üîç Smart diff detection...");
        // Check for unstaged changes
        const unstagedResult = await this.executeGitCommand(['diff', '--quiet']);
        if (unstagedResult.exitCode !== 0) {
            // Has unstaged changes
            this.showInfo("üìù Using unstaged changes");
            return [];
        }
        // Check for staged changes
        const stagedResult = await this.executeGitCommand(['diff', '--cached', '--quiet']);
        if (stagedResult.exitCode !== 0) {
            // Has staged changes
            this.showInfo("üìÇ Using staged changes");
            return ['--cached'];
        }
        // No unstaged or staged changes, check for commits
        const hasCommits = await this.executeGitCommand(['rev-parse', '--verify', 'HEAD~1']);
        if (hasCommits.success) {
            this.showInfo("üìã Using last commit changes (no unstaged/staged changes found)");
            return ['HEAD~1..HEAD'];
        }
        // No changes found
        this.showWarning("No changes detected (initial commit or clean working directory)");
        return [];
    }
    async executeDiff(args) {
        if (args.length === 0) {
            this.showInfo("Running: git diff");
        }
        else {
            this.showInfo(`Running: git diff ${args.join(' ')}`);
        }
        return this.executeGitCommand(['diff', ...args]);
    }
    async executeGitCommand(args) {
        return new Promise((resolve) => {
            const process = (0, child_process_1.spawn)('git', args, {
                cwd: this.getWorkspaceRoot(),
                shell: false
            });
            let output = '';
            let errorOutput = '';
            process.stdout?.on('data', (data) => {
                output += data.toString();
            });
            process.stderr?.on('data', (data) => {
                errorOutput += data.toString();
            });
            process.on('close', (code) => {
                resolve({
                    success: code === 0,
                    exitCode: code || 0,
                    output,
                    error: errorOutput || undefined,
                    duration: 0
                });
            });
            process.on('error', (error) => {
                resolve({
                    success: false,
                    exitCode: 1,
                    output,
                    error: error.message,
                    duration: 0
                });
            });
        });
    }
    async createAiDiffContext(diffOutput, diffArgs) {
        if (!diffOutput.trim()) {
            return this.createNoChangesOutput();
        }
        const timestamp = new Date().toISOString();
        const branch = await this.getCurrentBranch();
        let output = `=================================================================
üîç AI-OPTIMIZED GIT DIFF ANALYSIS
=================================================================

COMMAND: git diff ${diffArgs.join(' ')}
TIMESTAMP: ${timestamp}
BRANCH: ${branch}

`;
        // Analyze the diff for file changes
        const analysis = this.analyzeDiffChanges(diffOutput);
        // Generate change summary
        output += `==================================================================
üìä CHANGE SUMMARY
==================================================================

Total files changed: ${analysis.totalChanges}

`;
        if (analysis.newFiles.length > 0) {
            output += `üÜï NEW FILES (${analysis.newFiles.length}):\n`;
            analysis.newFiles.forEach(file => {
                output += `  ‚Ä¢ ${file}\n`;
            });
            output += '\n';
        }
        if (analysis.modifiedFiles.length > 0) {
            output += `üìù MODIFIED FILES (${analysis.modifiedFiles.length}):\n`;
            analysis.modifiedFiles.forEach(file => {
                output += `  ‚Ä¢ ${file}\n`;
            });
            output += '\n';
        }
        if (analysis.deletedFiles.length > 0) {
            output += `üóëÔ∏è DELETED FILES (${analysis.deletedFiles.length}):\n`;
            analysis.deletedFiles.forEach(file => {
                output += `  ‚Ä¢ ${file}\n`;
            });
            output += '\n';
        }
        if (analysis.renamedFiles.length > 0) {
            output += `üì¶ RENAMED/MOVED FILES (${analysis.renamedFiles.length}):\n`;
            analysis.renamedFiles.forEach(file => {
                output += `  ‚Ä¢ ${file}\n`;
            });
            output += '\n';
        }
        // File type analysis
        output += `==================================================================
üè∑Ô∏è FILE TYPE ANALYSIS
==================================================================

`;
        output += this.analyzeFileTypes(diffOutput);
        // Add the actual diff with file separators
        output += `==================================================================
üìã DETAILED CHANGES
==================================================================

`;
        output += this.addFileSeparators(diffOutput);
        // Add AI analysis context
        output += `
==================================================================
ü§ñ AI ANALYSIS CONTEXT
==================================================================
Key areas for analysis:
‚Ä¢ Focus on test-related files (.spec.ts, .test.ts)
‚Ä¢ Look for type/interface changes that might break tests
‚Ä¢ Check for new functionality that needs test coverage
‚Ä¢ Identify breaking changes in method signatures
‚Ä¢ Review dependency changes and imports

Change impact areas:
`;
        if (analysis.newFiles.length > 0) {
            output += "‚Ä¢ New files may need comprehensive test coverage\n";
        }
        if (analysis.modifiedFiles.length > 0) {
            output += "‚Ä¢ Modified files may have broken existing tests\n";
        }
        if (analysis.deletedFiles.length > 0) {
            output += "‚Ä¢ Deleted files may have orphaned tests or dependencies\n";
        }
        return output;
    }
    analyzeDiffChanges(diffOutput) {
        const lines = diffOutput.split('\n');
        const newFiles = [];
        const modifiedFiles = [];
        const deletedFiles = [];
        const renamedFiles = [];
        let currentFileA = '';
        let currentFileB = '';
        let isProcessingFile = false;
        for (const line of lines) {
            const diffMatch = line.match(/^diff --git a\/(.*) b\/(.*)/);
            if (diffMatch) {
                currentFileA = diffMatch[1];
                currentFileB = diffMatch[2];
                isProcessingFile = true;
                // Check if it's a rename/move
                if (currentFileA !== currentFileB) {
                    renamedFiles.push(`${currentFileA} ‚Üí ${currentFileB}`);
                }
                continue;
            }
            if (isProcessingFile) {
                if (line.match(/^new file mode/)) {
                    newFiles.push(currentFileB);
                    isProcessingFile = false;
                }
                else if (line.match(/^deleted file mode/)) {
                    deletedFiles.push(currentFileA);
                    isProcessingFile = false;
                }
                else if (line.match(/^index.*\.\./) && currentFileA === currentFileB && !renamedFiles.some(f => f.includes(currentFileA))) {
                    modifiedFiles.push(currentFileA);
                    isProcessingFile = false;
                }
            }
        }
        const totalChanges = newFiles.length + modifiedFiles.length + deletedFiles.length + renamedFiles.length;
        return {
            newFiles,
            modifiedFiles,
            deletedFiles,
            renamedFiles,
            totalChanges
        };
    }
    analyzeFileTypes(diffOutput) {
        const lines = diffOutput.split('\n');
        const counts = {
            ts: 0,
            spec: 0,
            html: 0,
            css: 0,
            json: 0,
            other: 0
        };
        for (const line of lines) {
            const match = line.match(/^diff --git.*b\/(.*)/);
            if (match) {
                const file = match[1];
                if (file.match(/\.(spec|test)\.ts$/)) {
                    counts.spec++;
                }
                else if (file.endsWith('.ts')) {
                    counts.ts++;
                }
                else if (file.endsWith('.html')) {
                    counts.html++;
                }
                else if (file.match(/\.(css|scss|sass)$/)) {
                    counts.css++;
                }
                else if (file.endsWith('.json')) {
                    counts.json++;
                }
                else {
                    counts.other++;
                }
            }
        }
        let output = `TypeScript files: ${counts.ts}
Test files: ${counts.spec}
Templates: ${counts.html}
Styles: ${counts.css}
Config/JSON: ${counts.json}
Other: ${counts.other}

`;
        // AI insights based on file types
        if (counts.spec > 0) {
            output += "üß™ Test files modified - may fix or introduce test issues\n";
        }
        if (counts.ts > counts.spec) {
            output += "‚ö†Ô∏è  More source files than test files changed - check test coverage\n";
        }
        if (counts.json > 0) {
            output += "‚öôÔ∏è  Configuration changes detected - may affect build/test setup\n";
        }
        return output;
    }
    addFileSeparators(diffOutput) {
        const lines = diffOutput.split('\n');
        const result = [];
        for (const line of lines) {
            const match = line.match(/^diff --git a\/(.*) b\/(.*)/);
            if (match) {
                const currentFile = match[2];
                result.push(`üìÅ FILE: ${currentFile}`);
                result.push('‚îÄ'.repeat(40));
            }
            result.push(line);
        }
        return result.join('\n');
    }
    createNoChangesOutput() {
        const timestamp = new Date().toISOString();
        return `=================================================================
üîç GIT DIFF ANALYSIS
=================================================================

STATUS: No changes detected
TIMESTAMP: ${timestamp}

=================================================================
üìä REPOSITORY STATUS
=================================================================
Working directory: Clean
Staged changes: None

=================================================================
ü§ñ AI ANALYSIS CONTEXT
=================================================================
No code changes were found to analyze. This could mean:
‚Ä¢ Working directory is clean (all changes committed)
‚Ä¢ You're analyzing test failures without recent changes
‚Ä¢ Focus should be on existing code patterns or environment issues
‚Ä¢ Consider checking if tests were recently updated in previous commits

Suggested actions:
‚Ä¢ Review recent commit history: git log --oneline -10
‚Ä¢ Check if issue is environment-related rather than code-related
‚Ä¢ Examine test setup or configuration files
`;
    }
    async getCurrentBranch() {
        try {
            const result = await this.executeGitCommand(['branch', '--show-current']);
            return result.success ? result.output.trim() : 'unknown';
        }
        catch {
            return 'unknown';
        }
    }
    countChangedFiles(output) {
        const matches = output.match(/^üìÅ FILE:/gm);
        return matches ? matches.length : 0;
    }
    getWorkspaceRoot() {
        return vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
    }
    showInfo(message) {
        this.outputChannel.appendLine(message);
        this.outputChannel.show();
    }
    showSuccess(message) {
        this.showInfo(`‚úÖ ${message}`);
    }
    showWarning(message) {
        this.showInfo(`‚ö†Ô∏è  ${message}`);
    }
    showError(message) {
        this.showInfo(`‚ùå ${message}`);
    }
}
exports.GitDiffCommand = GitDiffCommand;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,