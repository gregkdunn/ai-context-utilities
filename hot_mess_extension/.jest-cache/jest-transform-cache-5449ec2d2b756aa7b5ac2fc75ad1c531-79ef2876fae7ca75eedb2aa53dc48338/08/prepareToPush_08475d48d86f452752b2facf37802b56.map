{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/prepareToPush.ts","mappings":"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","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/commands/prepareToPush.ts"],"sourcesContent":["import * as vscode from 'vscode';\nimport { spawn } from 'child_process';\nimport { CommandOptions, CommandResult } from '../types';\n\nexport class PrepareToPushCommand {\n    \n    constructor() {}\n\n    /**\n     * Run Prepare to Push command (lint and format)\n     */\n    async run(project: string, options: CommandOptions = {}): Promise<CommandResult> {\n        const startTime = Date.now();\n        \n        try {\n            if (!project) {\n                throw new Error(\"Project name is required\");\n            }\n\n            this.showHeader(`Preparing to Push: ${project}`);\n\n            // Step 1: Run linting\n            this.showStep(\"Running linter...\");\n            this.showInfo(`Command: yarn nx lint ${project}`);\n            \n            const lintResult = await this.executeLint(project);\n            \n            if (lintResult.success) {\n                this.showSuccess(\"Linting passed!\");\n            } else {\n                this.showError(`Linting failed with exit code: ${lintResult.exitCode}`);\n                this.showNextSteps([\n                    \"Fix the linting errors shown above\",\n                    `Some errors may be auto-fixable with: yarn nx lint ${project} --fix`,\n                    `Re-run prepareToPush ${project} after fixes`\n                ]);\n                \n                const duration = Date.now() - startTime;\n                return {\n                    success: false,\n                    exitCode: lintResult.exitCode,\n                    output: lintResult.output,\n                    error: lintResult.error,\n                    duration\n                };\n            }\n\n            // Step 2: Run prettier formatting\n            this.showStep(\"Running code formatter...\");\n            this.showInfo(`Command: yarn nx prettier ${project} --write`);\n            \n            const prettierResult = await this.executePrettier(project);\n            \n            if (prettierResult.success) {\n                this.showSuccess(\"Code formatting completed!\");\n            } else {\n                this.showError(`Prettier failed with exit code: ${prettierResult.exitCode}`);\n                this.showNextSteps([\n                    \"Check the prettier errors shown above\",\n                    \"Ensure all files are valid syntax\",\n                    `Re-run prepareToPush ${project} after fixes`\n                ]);\n                \n                const duration = Date.now() - startTime;\n                return {\n                    success: false,\n                    exitCode: prettierResult.exitCode,\n                    output: prettierResult.output,\n                    error: prettierResult.error,\n                    duration\n                };\n            }\n\n            // Success summary\n            this.showSuccessSummary(project);\n            \n            const duration = Date.now() - startTime;\n            return {\n                success: true,\n                exitCode: 0,\n                output: `Prepare to push completed successfully for ${project}`,\n                duration\n            };\n\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            return {\n                success: false,\n                exitCode: 1,\n                output: \"\",\n                error: error instanceof Error ? error.message : 'Unknown error',\n                duration\n            };\n        }\n    }\n\n    private async executeLint(project: string): Promise<CommandResult> {\n        return new Promise((resolve) => {\n            const process = spawn('yarn', ['nx', 'lint', project], {\n                cwd: this.getWorkspaceRoot(),\n                shell: true\n            });\n\n            let output = '';\n            let errorOutput = '';\n\n            process.stdout?.on('data', (data) => {\n                const text = data.toString();\n                output += text;\n                this.showInfo(text);\n            });\n\n            process.stderr?.on('data', (data) => {\n                const text = data.toString();\n                errorOutput += text;\n                this.showInfo(text);\n            });\n\n            process.on('close', (code) => {\n                resolve({\n                    success: code === 0,\n                    exitCode: code || 0,\n                    output,\n                    error: errorOutput || undefined,\n                    duration: 0\n                });\n            });\n\n            process.on('error', (error) => {\n                resolve({\n                    success: false,\n                    exitCode: 1,\n                    output,\n                    error: error.message,\n                    duration: 0\n                });\n            });\n        });\n    }\n\n    private async executePrettier(project: string): Promise<CommandResult> {\n        return new Promise((resolve) => {\n            const process = spawn('yarn', ['nx', 'prettier', project, '--write'], {\n                cwd: this.getWorkspaceRoot(),\n                shell: true\n            });\n\n            let output = '';\n            let errorOutput = '';\n\n            process.stdout?.on('data', (data) => {\n                const text = data.toString();\n                output += text;\n                this.showInfo(text);\n            });\n\n            process.stderr?.on('data', (data) => {\n                const text = data.toString();\n                errorOutput += text;\n                this.showInfo(text);\n            });\n\n            process.on('close', (code) => {\n                resolve({\n                    success: code === 0,\n                    exitCode: code || 0,\n                    output,\n                    error: errorOutput || undefined,\n                    duration: 0\n                });\n            });\n\n            process.on('error', (error) => {\n                resolve({\n                    success: false,\n                    exitCode: 1,\n                    output,\n                    error: error.message,\n                    duration: 0\n                });\n            });\n        });\n    }\n\n    private showHeader(title: string): void {\n        const separator = \"=\".repeat(60);\n        this.showInfo(`\\n${separator}`);\n        this.showInfo(`🚀 ${title}`);\n        this.showInfo(separator);\n    }\n\n    private showStep(message: string): void {\n        this.showInfo(`\\n${message}`);\n    }\n\n    private showNextSteps(steps: string[]): void {\n        this.showInfo(\"\\n💡 NEXT STEPS:\");\n        steps.forEach(step => {\n            this.showInfo(`• ${step}`);\n        });\n    }\n\n    private showSuccessSummary(project: string): void {\n        const separator = \"=\".repeat(60);\n        this.showInfo(`\\n${separator}`);\n        this.showInfo(\"🎉 Ready to Push!\");\n        this.showInfo(separator);\n        this.showInfo(\"✅ Linting: Passed\");\n        this.showInfo(\"✅ Formatting: Applied\");\n        this.showInfo(\"\");\n        this.showInfo(\"📋 SUGGESTED NEXT STEPS:\");\n        this.showInfo(\"1. Review any formatting changes made by prettier\");\n        this.showInfo(`2. Run aiDebug ${project} to ensure tests still pass`);\n        this.showInfo(\"3. Commit your changes: git add . && git commit -m 'Your message'\");\n        this.showInfo(\"4. Push to your branch: git push\");\n        this.showInfo(\"\");\n        this.showInfo(\"🔄 COMPLETE WORKFLOW:\");\n        this.showInfo(`• prepareToPush ${project}  (✅ Done!)`);\n        this.showInfo(`• aiDebug ${project}        (recommended next)`);\n        this.showInfo(\"• git commit && git push  (final step)\");\n        this.showInfo(separator);\n    }\n\n    private getWorkspaceRoot(): string {\n        return vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';\n    }\n\n    private showInfo(message: string): void {\n        const outputChannel = vscode.window.createOutputChannel('AI Debug Utilities');\n        outputChannel.appendLine(message);\n        outputChannel.show();\n    }\n\n    private showSuccess(message: string): void {\n        this.showInfo(`✅ ${message}`);\n    }\n\n    private showError(message: string): void {\n        this.showInfo(`❌ ${message}`);\n    }\n}\n"],"version":3}