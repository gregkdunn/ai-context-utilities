43d90c0846b276170aae9d8b6ed5bba2
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestAnalyzerPlugin = void 0;
const vscode = __importStar(require("vscode"));
class TestAnalyzerPlugin {
    metadata = {
        id: 'builtin-test-analyzer',
        name: 'Test Analyzer',
        version: '1.0.0',
        description: 'Advanced test analysis with coverage insights and quality recommendations',
        author: 'AI Debug Team',
        license: 'MIT',
        enabled: true,
        capabilities: [
            {
                type: 'analyzer',
                name: 'test-analyzer',
                description: 'Analyze test files and results',
                permissions: ['file-system:test-files:Analyze test files and coverage reports']
            },
            {
                type: 'formatter',
                name: 'test-formatter',
                description: 'Format test results for better readability'
            },
            {
                type: 'command',
                name: 'test-insights',
                description: 'Generate test insights and recommendations'
            }
        ]
    };
    api;
    get analyzers() {
        return [
            {
                id: 'test-file-analyzer',
                name: 'Test File Analyzer',
                description: 'Analyze individual test files for quality and coverage',
                filePatterns: ['**/*.test.ts', '**/*.test.js', '**/*.spec.ts', '**/*.spec.js'],
                analyze: async (content, filePath, context) => {
                    const issues = [];
                    const metrics = {};
                    const suggestions = [];
                    try {
                        // Analyze test structure
                        const structureAnalysis = await this.analyzeTestStructure(content, filePath);
                        issues.push(...structureAnalysis.issues);
                        Object.assign(metrics, structureAnalysis.metrics);
                        suggestions.push(...structureAnalysis.suggestions);
                        // Analyze test coverage
                        const coverageAnalysis = await this.analyzeCoverage(content, filePath, context);
                        issues.push(...coverageAnalysis.issues);
                        Object.assign(metrics, coverageAnalysis.metrics);
                        suggestions.push(...coverageAnalysis.suggestions);
                        // Analyze test patterns
                        const patternAnalysis = await this.analyzeTestPatterns(content, filePath);
                        issues.push(...patternAnalysis.issues);
                        Object.assign(metrics, patternAnalysis.metrics);
                        suggestions.push(...patternAnalysis.suggestions);
                    }
                    catch (error) {
                        issues.push({
                            id: 'test-analysis-error',
                            type: 'error',
                            message: `Test analysis failed: ${error.message}`,
                            severity: 'medium',
                            fixable: false
                        });
                    }
                    return {
                        id: 'test-file-analysis',
                        summary: 'Test file analysis completed',
                        issues,
                        metrics,
                        suggestions,
                        confidence: 0.88
                    };
                }
            }
        ];
    }
    get formatters() {
        return [
            {
                id: 'test-result-formatter',
                name: 'Test Result Formatter',
                description: 'Format test results for better readability',
                filePatterns: ['**/*.test.json', '**/test-results.json'],
                format: async (content, filePath, context) => {
                    try {
                        const testResults = JSON.parse(content);
                        return this.formatTestResults(testResults);
                    }
                    catch (error) {
                        return content; // Return original if parsing fails
                    }
                }
            }
        ];
    }
    get commands() {
        return [
            {
                id: 'test-coverage-report',
                title: 'Generate Test Coverage Report',
                description: 'Generate comprehensive test coverage report',
                category: 'Testing',
                icon: 'graph',
                execute: async (context, args) => {
                    const coverageReport = await this.generateCoverageReport(context);
                    // Show results in a new document
                    const doc = await vscode.workspace.openTextDocument({
                        content: this.formatCoverageReport(coverageReport),
                        language: 'markdown'
                    });
                    await vscode.window.showTextDocument(doc);
                    return coverageReport;
                }
            },
            {
                id: 'test-quality-analysis',
                title: 'Test Quality Analysis',
                description: 'Analyze test quality and suggest improvements',
                category: 'Testing',
                icon: 'checklist',
                execute: async (context, args) => {
                    const qualityAnalysis = await this.analyzeTestQuality(context);
                    // Show quality insights
                    const items = qualityAnalysis.suggestions.map((suggestion) => ({
                        label: suggestion.title,
                        description: suggestion.description,
                        detail: `Impact: ${suggestion.impact} | Effort: ${suggestion.effort}`
                    }));
                    const selected = await vscode.window.showQuickPick(items, {
                        placeHolder: 'Select improvement to apply',
                        canPickMany: false
                    });
                    if (selected) {
                        const suggestion = qualityAnalysis.suggestions.find((s) => s.title === selected?.label);
                        if (suggestion) {
                            await this.applySuggestion(suggestion, context);
                        }
                    }
                    return qualityAnalysis;
                }
            },
            {
                id: 'test-performance-analysis',
                title: 'Test Performance Analysis',
                description: 'Analyze test performance and identify slow tests',
                category: 'Testing',
                icon: 'pulse',
                execute: async (context, args) => {
                    const performanceAnalysis = await this.analyzeTestPerformance(context);
                    // Show performance insights
                    const report = this.formatPerformanceReport(performanceAnalysis);
                    const doc = await vscode.workspace.openTextDocument({
                        content: report,
                        language: 'markdown'
                    });
                    await vscode.window.showTextDocument(doc);
                    return performanceAnalysis;
                }
            }
        ];
    }
    async activate(api, context) {
        this.api = api;
        // Register analyzers
        for (const analyzer of this.analyzers) {
            api.registerAnalyzer?.(analyzer);
        }
        // Register formatters
        for (const formatter of this.formatters) {
            api.registerFormatter?.(formatter);
        }
        // Register commands
        for (const command of this.commands) {
            api.registerCommand(command.id, command.execute);
        }
        // Listen for test events
        api.on?.('test:run', (data) => this.onTestRun(data, context));
        api.on?.('test:complete', (data) => this.onTestComplete(data, context));
        console.log('Test Analyzer Plugin activated');
    }
    async deactivate(api, context) {
        // Cleanup
        api.off?.('test:run');
        api.off?.('test:complete');
        console.log('Test Analyzer Plugin deactivated');
    }
    async analyzeTestStructure(content, filePath) {
        const issues = [];
        const metrics = {};
        const suggestions = [];
        // Count test blocks
        const describeBlocks = (content.match(/describe\s*\(/g) || []).length;
        const testBlocks = (content.match(/(?:it|test)\s*\(/g) || []).length;
        const beforeBlocks = (content.match(/before(?:Each|All)?\s*\(/g) || []).length;
        const afterBlocks = (content.match(/after(?:Each|All)?\s*\(/g) || []).length;
        metrics['describe-blocks'] = describeBlocks;
        metrics['test-blocks'] = testBlocks;
        metrics['before-blocks'] = beforeBlocks;
        metrics['after-blocks'] = afterBlocks;
        // Analyze test structure
        if (describeBlocks === 0 && testBlocks > 0) {
            issues.push({
                id: 'missing-describe-blocks',
                type: 'warning',
                message: 'Tests should be organized in describe blocks',
                severity: 'medium',
                fixable: true,
                suggestedFix: 'Wrap tests in describe blocks for better organization'
            });
            suggestions.push('Group related tests using describe blocks');
        }
        if (testBlocks === 0) {
            issues.push({
                id: 'no-tests',
                type: 'error',
                message: 'No tests found in file',
                severity: 'high',
                fixable: true,
                suggestedFix: 'Add test cases to verify functionality'
            });
        }
        // Check for test naming conventions
        const testNames = content.match(/(?:it|test)\s*\(\s*['"`]([^'"`]+)['"`]/g) || [];
        const poorTestNames = testNames.filter(name => {
            const testName = name.match(/['"`]([^'"`]+)['"`]/)?.[1] || '';
            return testName.length < 10 || !testName.includes('should');
        });
        if (poorTestNames.length > 0) {
            issues.push({
                id: 'poor-test-names',
                type: 'info',
                message: `${poorTestNames.length} test(s) have unclear names`,
                severity: 'low',
                fixable: true,
                suggestedFix: 'Use descriptive test names that explain the expected behavior'
            });
            suggestions.push('Use "should" in test names to describe expected behavior');
        }
        return {
            id: 'test-structure-analysis',
            summary: 'Test structure analysis completed',
            issues,
            metrics,
            suggestions,
            confidence: 0.9
        };
    }
    async analyzeCoverage(content, filePath, context) {
        const issues = [];
        const metrics = {};
        const suggestions = [];
        // Simulate coverage analysis
        const sourceFile = this.getSourceFileForTest(filePath);
        const coverage = await this.getCoverageForFile(sourceFile, context);
        metrics['line-coverage'] = coverage.lines;
        metrics['branch-coverage'] = coverage.branches;
        metrics['function-coverage'] = coverage.functions;
        if (coverage.lines < 0.8) {
            issues.push({
                id: 'low-line-coverage',
                type: 'warning',
                message: `Line coverage is ${Math.round(coverage.lines * 100)}% (target: 80%)`,
                severity: 'medium',
                fixable: true,
                suggestedFix: 'Add more test cases to increase line coverage'
            });
            suggestions.push('Add tests for uncovered code paths');
        }
        if (coverage.branches < 0.7) {
            issues.push({
                id: 'low-branch-coverage',
                type: 'warning',
                message: `Branch coverage is ${Math.round(coverage.branches * 100)}% (target: 70%)`,
                severity: 'medium',
                fixable: true,
                suggestedFix: 'Add tests for different code branches and conditions'
            });
            suggestions.push('Test both true and false conditions in your code');
        }
        if (coverage.functions < 0.9) {
            issues.push({
                id: 'low-function-coverage',
                type: 'info',
                message: `Function coverage is ${Math.round(coverage.functions * 100)}% (target: 90%)`,
                severity: 'low',
                fixable: true,
                suggestedFix: 'Add tests for uncovered functions'
            });
        }
        return {
            id: 'test-coverage-analysis',
            summary: 'Test coverage analysis completed',
            issues,
            metrics,
            suggestions,
            confidence: 0.85
        };
    }
    async analyzeTestPatterns(content, filePath) {
        const issues = [];
        const metrics = {};
        const suggestions = [];
        // Check for anti-patterns
        const hasOnlyTests = content.includes('.only(');
        const hasSkippedTests = content.includes('.skip(') || content.includes('x.it(') || content.includes('x.test(');
        const hasConsoleLog = content.includes('console.log');
        const hasHardcodedValues = (content.match(/(?:expect|toBe|toEqual)\s*\([^)]*(?:\d{4}|\d{2}\/\d{2}\/\d{4})/g) || []).length;
        if (hasOnlyTests) {
            issues.push({
                id: 'only-tests',
                type: 'error',
                message: 'Test file contains .only() which will skip other tests',
                severity: 'high',
                fixable: true,
                suggestedFix: 'Remove .only() to run all tests'
            });
        }
        if (hasSkippedTests) {
            issues.push({
                id: 'skipped-tests',
                type: 'warning',
                message: 'Test file contains skipped tests',
                severity: 'medium',
                fixable: true,
                suggestedFix: 'Fix or remove skipped tests'
            });
        }
        if (hasConsoleLog) {
            issues.push({
                id: 'console-log-in-tests',
                type: 'info',
                message: 'Test file contains console.log statements',
                severity: 'low',
                fixable: true,
                suggestedFix: 'Remove console.log statements from tests'
            });
        }
        if (hasHardcodedValues > 0) {
            issues.push({
                id: 'hardcoded-values',
                type: 'info',
                message: `${hasHardcodedValues} hardcoded value(s) found in assertions`,
                severity: 'low',
                fixable: true,
                suggestedFix: 'Use variables or constants instead of hardcoded values'
            });
            suggestions.push('Extract hardcoded values into variables for better maintainability');
        }
        // Check for good patterns
        const hasSetup = content.includes('beforeEach') || content.includes('beforeAll');
        const hasCleanup = content.includes('afterEach') || content.includes('afterAll');
        const hasMocks = content.includes('jest.mock') || content.includes('jest.fn');
        metrics['has-setup'] = hasSetup ? 1 : 0;
        metrics['has-cleanup'] = hasCleanup ? 1 : 0;
        metrics['has-mocks'] = hasMocks ? 1 : 0;
        if (!hasSetup && metrics['test-blocks'] > 1) {
            suggestions.push('Consider using beforeEach/beforeAll for test setup');
        }
        if (!hasCleanup && hasMocks) {
            suggestions.push('Consider using afterEach/afterAll for cleanup');
        }
        return {
            id: 'test-pattern-analysis',
            summary: 'Test pattern analysis completed',
            issues,
            metrics,
            suggestions,
            confidence: 0.8
        };
    }
    async generateCoverageReport(context) {
        // Simulate coverage report generation
        const testFiles = await this.getTestFiles(context);
        const coverage = {
            overall: {
                lines: 0.82,
                branches: 0.75,
                functions: 0.88,
                statements: 0.80
            },
            files: testFiles.map(file => ({
                path: file,
                lines: Math.random() * 0.4 + 0.6,
                branches: Math.random() * 0.4 + 0.5,
                functions: Math.random() * 0.3 + 0.7,
                statements: Math.random() * 0.4 + 0.6
            })),
            trends: {
                lastWeek: 0.78,
                lastMonth: 0.75,
                improvement: 0.04
            }
        };
        return coverage;
    }
    async analyzeTestQuality(context) {
        const quality = {
            score: 0.78,
            categories: {
                structure: 0.85,
                coverage: 0.72,
                patterns: 0.80,
                performance: 0.75
            },
            suggestions: [
                {
                    title: 'Improve Branch Coverage',
                    description: 'Add tests for missing code branches',
                    impact: 'High',
                    effort: 'Medium',
                    category: 'coverage'
                },
                {
                    title: 'Optimize Test Performance',
                    description: 'Reduce test execution time by optimizing slow tests',
                    impact: 'Medium',
                    effort: 'High',
                    category: 'performance'
                },
                {
                    title: 'Enhance Test Organization',
                    description: 'Better organize tests with describe blocks',
                    impact: 'Low',
                    effort: 'Low',
                    category: 'structure'
                }
            ]
        };
        return quality;
    }
    async analyzeTestPerformance(context) {
        const performance = {
            totalTime: 2.5,
            averageTime: 0.12,
            slowTests: [
                { name: 'complex integration test', time: 0.8, file: 'integration.test.ts' },
                { name: 'database operations', time: 0.6, file: 'database.test.ts' },
                { name: 'api endpoint tests', time: 0.4, file: 'api.test.ts' }
            ],
            recommendations: [
                'Mock external dependencies to improve test speed',
                'Use beforeAll for expensive setup operations',
                'Consider splitting large test files',
                'Use test.concurrent for independent tests'
            ]
        };
        return performance;
    }
    formatTestResults(testResults) {
        const { stats, tests } = testResults;
        let formatted = `# Test Results\n\n`;
        formatted += `**Total Tests:** ${stats.total}\n`;
        formatted += `**Passed:** ${stats.passed}\n`;
        formatted += `**Failed:** ${stats.failed}\n`;
        formatted += `**Skipped:** ${stats.skipped}\n\n`;
        if (stats.failed > 0) {
            formatted += `## Failed Tests\n\n`;
            const failedTests = tests.filter((t) => t.status === 'failed');
            for (const test of failedTests) {
                formatted += `### ${test.name}\n`;
                formatted += `**File:** ${test.file}\n`;
                formatted += `**Error:** ${test.error}\n\n`;
            }
        }
        return formatted;
    }
    formatCoverageReport(coverage) {
        let report = `# Test Coverage Report\n\n`;
        report += `## Overall Coverage\n`;
        report += `- **Lines:** ${Math.round(coverage.overall.lines * 100)}%\n`;
        report += `- **Branches:** ${Math.round(coverage.overall.branches * 100)}%\n`;
        report += `- **Functions:** ${Math.round(coverage.overall.functions * 100)}%\n`;
        report += `- **Statements:** ${Math.round(coverage.overall.statements * 100)}%\n\n`;
        report += `## File Coverage\n`;
        for (const file of coverage.files) {
            report += `### ${file.path}\n`;
            report += `- Lines: ${Math.round(file.lines * 100)}%\n`;
            report += `- Branches: ${Math.round(file.branches * 100)}%\n`;
            report += `- Functions: ${Math.round(file.functions * 100)}%\n\n`;
        }
        report += `## Trends\n`;
        report += `- Last Week: ${Math.round(coverage.trends.lastWeek * 100)}%\n`;
        report += `- Last Month: ${Math.round(coverage.trends.lastMonth * 100)}%\n`;
        report += `- Improvement: +${Math.round(coverage.trends.improvement * 100)}%\n\n`;
        return report;
    }
    formatPerformanceReport(performance) {
        let report = `# Test Performance Report\n\n`;
        report += `## Overall Performance\n`;
        report += `- **Total Time:** ${performance.totalTime}s\n`;
        report += `- **Average Time:** ${performance.averageTime}s\n\n`;
        report += `## Slowest Tests\n`;
        for (const test of performance.slowTests) {
            report += `- **${test.name}** (${test.time}s) - ${test.file}\n`;
        }
        report += `\n## Recommendations\n`;
        for (const rec of performance.recommendations) {
            report += `- ${rec}\n`;
        }
        return report;
    }
    getSourceFileForTest(testFilePath) {
        // Convert test file path to source file path
        return testFilePath
            .replace(/\.test\.(ts|js)$/, '.$1')
            .replace(/\.spec\.(ts|js)$/, '.$1')
            .replace(/\/test\//, '/src/')
            .replace(/\/tests\//, '/src/');
    }
    async getCoverageForFile(filePath, context) {
        // Simulate coverage data
        return {
            lines: Math.random() * 0.4 + 0.6,
            branches: Math.random() * 0.4 + 0.5,
            functions: Math.random() * 0.3 + 0.7
        };
    }
    async getTestFiles(context) {
        // Simulate test file discovery
        return [
            'src/components/Button.test.ts',
            'src/services/ApiService.test.ts',
            'src/utils/helpers.test.ts',
            'src/hooks/useAuth.test.ts'
        ];
    }
    async applySuggestion(suggestion, context) {
        // Implementation for applying suggestions
        this.api?.showNotification?.(`Applied suggestion: ${suggestion.title}`, 'info');
    }
    async onTestRun(data, context) {
        // Handle test run events
        console.log('Test run started:', data);
    }
    async onTestComplete(data, context) {
        // Handle test completion events
        console.log('Test run completed:', data);
    }
}
exports.TestAnalyzerPlugin = TestAnalyzerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,