{"file":"/Users/gregdunn/src/test/ai_debug_context/vscode/src/types/plugin.ts","mappings":";;;AAwnBa,QAAA,aAAa,GAAG;IAC3B,SAAS,EAAE,kBAAkB;IAC7B,WAAW,EAAE,oBAAoB;IACjC,KAAK,EAAE,cAAc;IACrB,gBAAgB,EAAE,yBAAyB;CACnC,CAAC","names":[],"sources":["/Users/gregdunn/src/test/ai_debug_context/vscode/src/types/plugin.ts"],"sourcesContent":["import * as vscode from 'vscode';\n\nexport interface PluginMetadata {\n  id: string;\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  license: string;\n  enabled: boolean;\n  capabilities: PluginCapability[];\n  dependencies?: string[];\n  keywords?: string[];\n  repository?: string;\n  homepage?: string;\n  bugs?: string;\n  main?: string;\n  scripts?: Record<string, string>;\n  files?: string[];\n  engines?: Record<string, string>;\n  publishConfig?: Record<string, any>;\n  config?: Record<string, any>;\n  engineVersion?: string;\n  icon?: string;\n  documentation?: string;\n  examples?: string[];\n}\n\nexport interface PluginCapability {\n  type: 'command' | 'provider' | 'view' | 'language' | 'debug' | 'task' | 'completion' | 'hover' | 'definition' | 'reference' | 'rename' | 'format' | 'lint' | 'test' | 'git' | 'file' | 'terminal' | 'webview' | 'tree' | 'status' | 'notification' | 'configuration' | 'theme' | 'icon' | 'snippet' | 'keybinding' | 'menu' | 'toolbar' | 'panel' | 'editor' | 'workbench' | 'analyzer' | 'formatter' | 'ai-provider';\n  name: string;\n  description: string;\n  configuration?: Record<string, any>;\n  activation?: string[];\n  deactivation?: string[];\n  permissions?: string[];\n  resources?: string[];\n  platforms?: string[];\n  vscodeVersion?: string;\n}\n\nexport interface PluginAPI {\n  vscode: typeof vscode;\n  getPluginPath(): string;\n  getPluginVersion(): string;\n  getPluginMetadata(): PluginMetadata;\n  registerCommand(id: string, callback: (...args: any[]) => any): vscode.Disposable;\n  registerProvider(type: string, provider: any): vscode.Disposable;\n  registerAnalyzer?(analyzer: PluginAnalyzer): void;\n  registerFormatter?(formatter: PluginFormatter): void;\n  registerTransformer?(transformer: any): void;\n  registerValidator?(validator: any): void;\n  getInsightsEngine?(): any;\n  getCollaborationService?(): any;\n  getExecutionService?(): any;\n  showNotification?(message: string, level?: 'info' | 'warning' | 'error'): void;\n  showProgress?(title: string, task: (progress: any) => Promise<void>): Promise<void>;\n  openFile?(path: string): Promise<void>;\n  writeFile?(path: string, content: string): Promise<void>;\n  on?(event: string, listener: (...args: any[]) => void): void;\n  off?(event: string): void;\n  emit?(event: string, ...args: any[]): void;\n  createOutputChannel(name: string): vscode.OutputChannel;\n  showMessage(message: string, level?: 'info' | 'warning' | 'error'): void;\n  showNotification?(message: string, level?: 'info' | 'warning' | 'error'): void;\n  getConfiguration(section?: string): vscode.WorkspaceConfiguration;\n  onDidChangeConfiguration(callback: (e: vscode.ConfigurationChangeEvent) => void): vscode.Disposable;\n  createStatusBarItem(alignment?: vscode.StatusBarAlignment, priority?: number): vscode.StatusBarItem;\n  createTreeView(viewId: string, options: vscode.TreeViewOptions<any>): vscode.TreeView<any>;\n  createWebviewPanel(viewType: string, title: string, showOptions: vscode.ViewColumn | vscode.WebviewPanelOptions, options?: vscode.WebviewPanelOptions & vscode.WebviewOptions): vscode.WebviewPanel;\n  executeCommand(command: string, ...args: any[]): Thenable<any>;\n  openExternal(uri: vscode.Uri): Thenable<boolean>;\n  showTextDocument(document: vscode.TextDocument, column?: vscode.ViewColumn, preserveFocus?: boolean): Thenable<vscode.TextEditor>;\n  showQuickPick(items: string[] | Thenable<string[]>, options?: vscode.QuickPickOptions): Thenable<string | undefined>;\n  showInputBox(options?: vscode.InputBoxOptions): Thenable<string | undefined>;\n  withProgress<R>(options: vscode.ProgressOptions, task: (progress: vscode.Progress<{ message?: string; increment?: number }>, token: vscode.CancellationToken) => Thenable<R>): Thenable<R>;\n  createTerminal(name?: string, shellPath?: string, shellArgs?: string[]): vscode.Terminal;\n  createFileSystemWatcher(globPattern: string, ignoreCreateEvents?: boolean, ignoreChangeEvents?: boolean, ignoreDeleteEvents?: boolean): vscode.FileSystemWatcher;\n  findFiles(include: string, exclude?: string, maxResults?: number, token?: vscode.CancellationToken): Thenable<vscode.Uri[]>;\n  openTextDocument(uri: vscode.Uri): Thenable<vscode.TextDocument>;\n  saveAll(includeUntitled?: boolean): Thenable<boolean>;\n  applyEdit(edit: vscode.WorkspaceEdit): Thenable<boolean>;\n  createDiagnosticCollection(name?: string): vscode.DiagnosticCollection;\n  registerCodeActionsProvider(selector: vscode.DocumentSelector, provider: vscode.CodeActionProvider): vscode.Disposable;\n  registerCompletionItemProvider(selector: vscode.DocumentSelector, provider: vscode.CompletionItemProvider, ...triggerCharacters: string[]): vscode.Disposable;\n  registerDefinitionProvider(selector: vscode.DocumentSelector, provider: vscode.DefinitionProvider): vscode.Disposable;\n  registerHoverProvider(selector: vscode.DocumentSelector, provider: vscode.HoverProvider): vscode.Disposable;\n  registerDocumentFormattingEditProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentFormattingEditProvider): vscode.Disposable;\n  registerDocumentRangeFormattingEditProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentRangeFormattingEditProvider): vscode.Disposable;\n  registerRenameProvider(selector: vscode.DocumentSelector, provider: vscode.RenameProvider): vscode.Disposable;\n  registerReferenceProvider(selector: vscode.DocumentSelector, provider: vscode.ReferenceProvider): vscode.Disposable;\n  registerDocumentSymbolProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentSymbolProvider): vscode.Disposable;\n  registerDocumentHighlightProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentHighlightProvider): vscode.Disposable;\n  registerDocumentLinkProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentLinkProvider): vscode.Disposable;\n  registerSignatureHelpProvider(selector: vscode.DocumentSelector, provider: vscode.SignatureHelpProvider, ...triggerCharacters: string[]): vscode.Disposable;\n  registerDebugConfigurationProvider(type: string, provider: vscode.DebugConfigurationProvider): vscode.Disposable;\n  registerDebugAdapterDescriptorFactory(type: string, factory: vscode.DebugAdapterDescriptorFactory): vscode.Disposable;\n  registerTaskProvider(type: string, provider: vscode.TaskProvider): vscode.Disposable;\n  createTask(definition: vscode.TaskDefinition, name: string, source: string, execution: vscode.ProcessExecution | vscode.ShellExecution, problemMatchers?: string[]): vscode.Task;\n  executeTask(task: vscode.Task): Thenable<vscode.TaskExecution>;\n  onDidStartTask(callback: (e: vscode.TaskStartEvent) => void): vscode.Disposable;\n  onDidEndTask(callback: (e: vscode.TaskEndEvent) => void): vscode.Disposable;\n  onDidStartTaskProcess(callback: (e: vscode.TaskProcessStartEvent) => void): vscode.Disposable;\n  onDidEndTaskProcess(callback: (e: vscode.TaskProcessEndEvent) => void): vscode.Disposable;\n  createTreeDataProvider(viewId: string, treeDataProvider: vscode.TreeDataProvider<any>): vscode.Disposable;\n  createCustomTextEditorProvider(viewType: string, provider: vscode.CustomTextEditorProvider): vscode.Disposable;\n  createCustomEditorProvider(viewType: string, provider: vscode.CustomReadonlyEditorProvider | vscode.CustomEditorProvider, options?: vscode.WebviewPanelOptions): vscode.Disposable;\n  createWebviewViewProvider(viewId: string, provider: vscode.WebviewViewProvider): vscode.Disposable;\n  createAuthenticationProvider(id: string, label: string, provider: vscode.AuthenticationProvider, options?: vscode.AuthenticationProviderOptions): vscode.Disposable;\n  createSourceControlResourceGroup(id: string, label: string): vscode.SourceControlResourceGroup;\n  createSourceControl(id: string, label: string, rootUri?: vscode.Uri): vscode.SourceControl;\n  createCommentController(id: string, label: string): vscode.CommentController;\n  createNotebookController(id: string, notebookType: string, label: string): vscode.NotebookController;\n  createNotebookCellExecution(uri: vscode.Uri): vscode.NotebookCellExecution;\n  createNotebookCellOutput(items: vscode.NotebookCellOutputItem[]): vscode.NotebookCellOutput;\n  createNotebookCellOutputItem(data: Uint8Array, mime: string): vscode.NotebookCellOutputItem;\n  createNotebookDocument(uri: vscode.Uri, notebookType: string, metadata?: Record<string, any>): vscode.NotebookDocument;\n  createNotebookEdit(uri: vscode.Uri, edit: vscode.NotebookEdit): vscode.WorkspaceEdit;\n  createNotebookRange(start: number, end: number): vscode.NotebookRange;\n  createNotebookCell(kind: vscode.NotebookCellKind, value: string, languageId: string, outputs?: vscode.NotebookCellOutput[], metadata?: Record<string, any>, executionSummary?: vscode.NotebookCellExecutionSummary): vscode.NotebookCell;\n  createNotebookCellData(kind: vscode.NotebookCellKind, value: string, languageId: string, outputs?: vscode.NotebookCellOutput[], metadata?: Record<string, any>, executionSummary?: vscode.NotebookCellExecutionSummary): vscode.NotebookCellData;\n  createNotebookData(cells: vscode.NotebookCellData[], metadata?: Record<string, any>): vscode.NotebookData;\n  createNotebookDocumentFilter(pattern?: string, scheme?: string, language?: string): vscode.NotebookDocument;\n  createNotebookDocumentMetadata(metadata?: Record<string, any>): vscode.NotebookDocument;\n}\n\nexport interface PluginContext {\n  subscriptions: vscode.Disposable[];\n  workspaceState: vscode.Memento;\n  globalState: vscode.Memento;\n  secrets: vscode.SecretStorage;\n  extensionUri: vscode.Uri;\n  extensionPath: string;\n  environmentVariableCollection: vscode.EnvironmentVariableCollection;\n  asAbsolutePath(relativePath: string): string;\n  storageUri: vscode.Uri | undefined;\n  storagePath: string | undefined;\n  globalStorageUri: vscode.Uri;\n  globalStoragePath: string;\n  logUri: vscode.Uri;\n  logPath: string;\n  extensionMode: vscode.ExtensionMode;\n  extension: vscode.Extension<any>;\n  workspaceRoot?: string;\n  currentFile?: string;\n  selectedText?: string;\n  executionHistory?: any[];\n  aiInsights?: any[];\n  collaborationData?: Record<string, any>;\n  customData?: Record<string, any>;\n}\n\nexport interface Plugin {\n  metadata: PluginMetadata;\n  activate(api: PluginAPI, context: PluginContext): Promise<void>;\n  deactivate(api: PluginAPI, context: PluginContext): Promise<void>;\n  commands?: PluginCommand[];\n  providers?: PluginProvider[];\n  views?: PluginView[];\n  configuration?: PluginConfiguration;\n  keybindings?: PluginKeybinding[];\n  menus?: PluginMenu[];\n  themes?: PluginTheme[];\n  snippets?: PluginSnippet[];\n  languages?: PluginLanguage[];\n  debuggers?: PluginDebugger[];\n  tasks?: PluginTask[];\n  problemMatchers?: PluginProblemMatcher[];\n  colors?: PluginColor[];\n  icons?: PluginIcon[];\n  walkthroughs?: PluginWalkthrough[];\n  notebooks?: PluginNotebook[];\n  terminal?: PluginTerminal[];\n  authentication?: PluginAuthentication[];\n  resourceLabelFormatters?: PluginResourceLabelFormatter[];\n  customEditors?: PluginCustomEditor[];\n  webviews?: PluginWebview[];\n  comments?: PluginComment[];\n  sourceControl?: PluginSourceControl[];\n  timeline?: PluginTimeline[];\n  testing?: PluginTesting[];\n  chat?: PluginChat[];\n  ai?: PluginAI[];\n  scm?: PluginSCM[];\n  git?: PluginGit[];\n  github?: PluginGitHub[];\n  gitlab?: PluginGitLab[];\n  bitbucket?: PluginBitbucket[];\n  azure?: PluginAzure[];\n  aws?: PluginAWS[];\n  gcp?: PluginGCP[];\n  hooks?: {\n    onActivate?(context: PluginContext): Promise<void>;\n    onDeactivate?(context: PluginContext): Promise<void>;\n    onCommand?(command: string, args: any[]): Promise<void>;\n  };\n  analyzers?: PluginAnalyzer[];\n  formatters?: PluginFormatter[];\n  transformers?: any[];\n  validators?: any[];\n}\n\nexport interface PluginCommand {\n  id: string;\n  title: string;\n  category?: string;\n  description?: string;\n  icon?: string;\n  enablement?: string;\n  when?: string;\n  arguments?: any[];\n  execute(context: PluginContext, ...args: any[]): Promise<any>;\n}\n\nexport interface PluginProvider {\n  type: string;\n  selector: vscode.DocumentSelector;\n  scheme?: string;\n  language?: string;\n  pattern?: string;\n  hasAccessToAllModels?: boolean;\n  provide(document: vscode.TextDocument, position: vscode.Position, context: any, token: vscode.CancellationToken): Promise<any>;\n}\n\nexport interface PluginView {\n  id: string;\n  name: string;\n  when?: string;\n  icon?: string;\n  contextualTitle?: string;\n  type?: string;\n  visibility?: string;\n  initialSize?: number;\n  treeDataProvider?: vscode.TreeDataProvider<any>;\n  webviewProvider?: vscode.WebviewViewProvider;\n  customProvider?: any;\n}\n\nexport interface PluginConfiguration {\n  title: string;\n  properties: Record<string, any>;\n}\n\nexport interface PluginKeybinding {\n  command: string;\n  key: string;\n  mac?: string;\n  linux?: string;\n  win?: string;\n  when?: string;\n  args?: any;\n}\n\nexport interface PluginMenu {\n  command: string;\n  when?: string;\n  group?: string;\n  alt?: string;\n  submenu?: string;\n  title?: string;\n  icon?: string;\n}\n\nexport interface PluginTheme {\n  id: string;\n  label: string;\n  uiTheme: string;\n  path: string;\n}\n\nexport interface PluginSnippet {\n  language: string;\n  path: string;\n}\n\nexport interface PluginLanguage {\n  id: string;\n  aliases?: string[];\n  extensions?: string[];\n  filenames?: string[];\n  firstLine?: string;\n  configuration?: string;\n}\n\nexport interface PluginDebugger {\n  type: string;\n  label: string;\n  program?: string;\n  args?: string[];\n  runtime?: string;\n  runtimeArgs?: string[];\n  variables?: Record<string, any>;\n  initialConfigurations?: any[];\n  configurationSnippets?: any[];\n  configurationAttributes?: any;\n}\n\nexport interface PluginTask {\n  type: string;\n  required?: string[];\n  properties?: Record<string, any>;\n  when?: string;\n}\n\nexport interface PluginProblemMatcher {\n  name: string;\n  label?: string;\n  owner?: string;\n  source?: string;\n  applyTo?: string;\n  severity?: string;\n  fileLocation?: string | string[];\n  pattern?: any;\n  watching?: any;\n  background?: any;\n}\n\nexport interface PluginColor {\n  id: string;\n  description: string;\n  defaults: {\n    light: string;\n    dark: string;\n    highContrast: string;\n    highContrastLight?: string;\n  };\n}\n\nexport interface PluginIcon {\n  id: string;\n  description: string;\n  default: {\n    fontPath: string;\n    fontCharacter: string;\n  };\n}\n\nexport interface PluginWalkthrough {\n  id: string;\n  title: string;\n  description: string;\n  steps: any[];\n  featuredFor?: string[];\n  when?: string;\n}\n\nexport interface PluginNotebook {\n  type: string;\n  displayName: string;\n  selector?: any[];\n  priority?: string;\n}\n\nexport interface PluginTerminal {\n  id: string;\n  title: string;\n}\n\nexport interface PluginAuthentication {\n  id: string;\n  label: string;\n}\n\nexport interface PluginResourceLabelFormatter {\n  scheme: string;\n  authority?: string;\n  formatting: {\n    label: string;\n    separator: string;\n    tildify?: boolean;\n    workspaceSuffix?: string;\n  };\n}\n\nexport interface PluginCustomEditor {\n  viewType: string;\n  displayName: string;\n  selector?: any[];\n  priority?: string;\n}\n\nexport interface PluginWebview {\n  viewType: string;\n  displayName: string;\n}\n\nexport interface PluginComment {\n  id: string;\n  label: string;\n}\n\nexport interface PluginSourceControl {\n  id: string;\n  label: string;\n}\n\nexport interface PluginTimeline {\n  id: string;\n  label: string;\n}\n\nexport interface PluginTesting {\n  id: string;\n}\n\nexport interface PluginChat {\n  id: string;\n  label: string;\n}\n\nexport interface PluginAI {\n  id: string;\n  label: string;\n}\n\n// Plugin types that are referenced in other files\nexport interface PluginAnalyzer {\n  id: string;\n  name: string;\n  description?: string;\n  filePatterns?: string[];\n  analyze(content: string, filePath: string, context: PluginContext): Promise<AnalysisResult>;\n}\n\nexport interface AnalysisResult {\n  id: string;\n  issues: Issue[];\n  suggestions: any[];\n  summary: string;\n  metrics?: Record<string, any>;\n  confidence?: number;\n}\n\nexport interface Issue {\n  id?: string;\n  type: string;\n  severity: 'error' | 'warning' | 'info' | 'low' | 'medium' | 'high';\n  message: string;\n  file?: string;\n  line?: number;\n  column?: number;\n  fixable?: boolean;\n  suggestedFix?: string;\n}\n\nexport interface PluginFormatter {\n  id: string;\n  name: string;\n  description?: string;\n  filePatterns?: string[];\n  format(content: string, filePath?: string, context?: PluginContext): Promise<string>;\n}\n\n// AI Provider types\nexport interface AIProvider {\n  id: string;\n  name: string;\n  description?: string;\n  capabilities?: string[];\n  query?(prompt: string): Promise<AIResponse>;\n  generateInsights?(data: any, context: any): Promise<AIResponse>;\n  processQuery?(question: string, context: any): Promise<AIResponse>;\n  suggestActions?(context: any): Promise<AISuggestion[]>;\n}\n\nexport interface AIResponse {\n  response: string;\n  suggestions?: AISuggestion[];\n}\n\nexport interface AISuggestion {\n  title: string;\n  description: string;\n  action?: () => void;\n}\n\nexport interface AIProviderPlugin extends Plugin {\n  providers: PluginProvider[];\n}\n\n// Plugin maker/utilities\nexport interface PluginMaker {\n  create(template: string): Promise<Plugin>;\n}\n\n// Simplified base types\nexport interface PluginSCM extends PluginSourceControl {}\nexport interface PluginGit extends PluginSourceControl {}\nexport interface PluginGitHub extends PluginSourceControl {}\nexport interface PluginGitLab extends PluginSourceControl {}\nexport interface PluginBitbucket extends PluginSourceControl {}\nexport interface PluginAzure extends PluginSourceControl {}\nexport interface PluginAWS extends PluginSourceControl {}\nexport interface PluginGCP extends PluginSourceControl {}\nexport interface PluginDego extends PluginSourceControl {}\n\nexport interface PluginManifest {\n  metadata: PluginMetadata;\n  path: string;\n  packageJson: any;\n  entryPoint: string;\n}\n\nexport interface PluginSecurity {\n  scanPlugin(plugin: Plugin): Promise<SecurityReport>;\n  validatePlugin(plugin: Plugin): Promise<ValidationResult>;\n  checkPermissions(plugin: Plugin): Promise<PermissionResult>;\n}\n\nexport interface SecurityReport {\n  pluginId: string;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  issues: SecurityIssue[];\n  recommendations: string[];\n  scannedAt: Date;\n  approved?: boolean;\n}\n\nexport interface SecurityIssue {\n  type: 'permission' | 'code' | 'dependency' | 'network' | 'file' | 'environment';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  location?: string;\n  fix?: string;\n}\n\nexport interface SecurityVulnerability {\n  id: string;\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  affectedFiles?: string[];\n  fix?: string;\n  impact?: string;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\nexport interface PermissionResult {\n  granted: string[];\n  denied: string[];\n  requested: string[];\n}\n\n// Plugin Management types\nexport interface PluginRegistry {\n  register(plugin: Plugin): Promise<void>;\n  unregister(pluginId: string): Promise<void>;\n  getPlugin(pluginId: string): Plugin | undefined;\n  getAllPlugins(): Plugin[];\n}\n\nexport interface PluginInfo {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n  author: string;\n  tags: string[];\n  downloadCount?: number;\n  rating?: number;\n  lastUpdated?: Date;\n  downloads: number;\n  license?: string;\n  repository?: string;\n  homepage?: string;\n  bugs?: string;\n  dependencies?: Record<string, string>;\n  peerDependencies?: Record<string, string>;\n  readme?: string;\n  changelog?: string;\n  screenshots?: string[];\n  publishedAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface PluginMarketplace {\n  search?(query: string): Promise<PluginInfo[]>;\n  searchPlugins?(query: string): Promise<PluginInfo[]>;\n  getPlugin?(id: string): Promise<PluginInfo>;\n  install?(id: string, version?: string): Promise<void>;\n  installPlugin?(id: string, version?: string): Promise<void>;\n  update?(id: string, version?: string): Promise<void>;\n  updatePlugin?(id: string, version?: string): Promise<void>;\n  uninstall?(id: string): Promise<void>;\n  uninstallPlugin?(id: string): Promise<void>;\n  listInstalledPlugins?(): Promise<PluginInfo[]>;\n}\n\nexport interface PluginDiscovery {\n  discoverPlugins(directories: string | string[]): Promise<PluginManifest[]>;\n  loadPlugin(manifest: PluginManifest): Promise<Plugin>;\n  validatePlugin(manifest: PluginManifest): Promise<ValidationResult>;\n}\n\nexport interface PluginConfig {\n  enabled: boolean;\n  settings: Record<string, any>;\n  permissions?: string[];\n  resources?: Record<string, any>;\n}\n\nexport interface PluginEvent {\n  type: string;\n  pluginId: string;\n  data: any;\n  timestamp: Date;\n  source?: string;\n}\n\nexport interface PluginDevUtils {\n  createTestSuite(pluginId: string): PluginTestSuite;\n  createLogger(pluginId: string): PluginLogger;\n  createProfiler(pluginId: string): PluginProfiler;\n  createStorage(pluginId: string): PluginStorage;\n  createScheduler(pluginId: string): PluginScheduler;\n}\n\nexport interface ExecutionRecord {\n  id: string;\n  pluginId: string;\n  command: string;\n  startTime: Date;\n  endTime?: Date;\n  success: boolean;\n  error?: string;\n}\n\nexport const PLUGIN_EVENTS = {\n  ACTIVATED: 'plugin:activated',\n  DEACTIVATED: 'plugin:deactivated',\n  ERROR: 'plugin:error',\n  COMMAND_EXECUTED: 'plugin:command-executed'\n} as const;\n\nexport interface PluginDevelopmentUtils {\n  createLogger(pluginId: string): PluginLogger;\n  createStorage(pluginId: string): PluginStorage;\n  createScheduler(pluginId: string): PluginScheduler;\n  createNotification(pluginId: string): PluginNotification;\n  createTelemetry(pluginId: string): PluginTelemetry;\n  createDebugger(pluginId: string): PluginDebugger;\n  createProfiler(pluginId: string): PluginProfiler;\n  createTester(pluginId: string): PluginTester;\n  createBuilder(pluginId: string): PluginBuilder;\n  createPublisher(pluginId: string): PluginPublisher;\n}\n\nexport interface PluginLogger {\n  debug(message: string, ...args: any[]): void;\n  info(message: string, ...args: any[]): void;\n  warn(message: string, ...args: any[]): void;\n  error(message: string, ...args: any[]): void;\n  trace(message: string, ...args: any[]): void;\n  setLevel(level: 'debug' | 'info' | 'warn' | 'error' | 'trace'): void;\n  createChild(name: string): PluginLogger;\n}\n\nexport interface PluginStorage {\n  get<T>(key: string): Promise<T | undefined>;\n  set<T>(key: string, value: T): Promise<void>;\n  delete(key: string): Promise<void>;\n  clear(): Promise<void>;\n  keys(): Promise<string[]>;\n  has(key: string): Promise<boolean>;\n  size(): Promise<number>;\n}\n\nexport interface PluginScheduler {\n  schedule(task: () => Promise<void> | void, delay: number): PluginScheduledTask;\n  scheduleRepeating(task: () => Promise<void> | void, interval: number): PluginScheduledTask;\n  cancel(task: PluginScheduledTask): void;\n  cancelAll(): void;\n}\n\nexport interface PluginScheduledTask {\n  id: string;\n  cancel(): void;\n  reschedule(delay: number): void;\n}\n\nexport interface PluginNotification {\n  showInfo(message: string, ...items: string[]): Promise<string | undefined>;\n  showWarning(message: string, ...items: string[]): Promise<string | undefined>;\n  showError(message: string, ...items: string[]): Promise<string | undefined>;\n  showProgress(title: string, task: (progress: PluginProgress) => Promise<void>): Promise<void>;\n}\n\nexport interface PluginProgress {\n  report(increment: number, message?: string): void;\n}\n\nexport interface PluginTelemetry {\n  sendEvent(event: string, properties?: Record<string, any>): void;\n  sendError(error: Error, properties?: Record<string, any>): void;\n  sendMetric(metric: string, value: number, properties?: Record<string, any>): void;\n}\n\nexport interface PluginProfiler {\n  start(name: string): PluginProfilerSession;\n  measure<T>(name: string, fn: () => T): T;\n  measureAsync<T>(name: string, fn: () => Promise<T>): Promise<T>;\n}\n\nexport interface PluginProfilerSession {\n  end(): number;\n  mark(name: string): void;\n}\n\nexport interface PluginTester {\n  createSuite(name: string): PluginTestSuite;\n  run(suite: PluginTestSuite): Promise<PluginTestResult>;\n  runAll(): Promise<PluginTestResult[]>;\n}\n\nexport interface PluginTestSuite {\n  addTest(name: string, test: () => Promise<void> | void): void;\n  addSetup(setup: () => Promise<void> | void): void;\n  addTeardown(teardown: () => Promise<void> | void): void;\n}\n\nexport interface PluginTestResult {\n  suiteName: string;\n  passed: number;\n  failed: number;\n  skipped: number;\n  errors: PluginTestError[];\n  duration: number;\n}\n\nexport interface PluginTestError {\n  testName: string;\n  message: string;\n  stack?: string;\n}\n\nexport interface PluginBuilder {\n  build(): Promise<PluginBuildResult>;\n  watch(): Promise<PluginBuildWatcher>;\n  clean(): Promise<void>;\n}\n\nexport interface PluginBuildResult {\n  success: boolean;\n  errors: string[];\n  warnings: string[];\n  outputFiles: string[];\n  duration: number;\n}\n\nexport interface PluginBuildWatcher {\n  onChanged(callback: (result: PluginBuildResult) => void): void;\n  stop(): void;\n}\n\nexport interface PluginPublisher {\n  publish(version?: string): Promise<PluginPublishResult>;\n  unpublish(version: string): Promise<void>;\n  getVersions(): Promise<string[]>;\n}\n\nexport interface PluginPublishResult {\n  success: boolean;\n  version: string;\n  packageUrl: string;\n  errors: string[];\n}\n"],"version":3}